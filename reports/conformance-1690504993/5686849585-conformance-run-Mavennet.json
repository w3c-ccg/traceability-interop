{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b36bb0b9-73e5-40df-a3d3-0a706c021402",
        "name": "Clear Cache",
        "item": [
          {
            "id": "aba5d03d-1655-43a0-ade7-bc5026de6a09",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6f8d9ec-79d4-412f-a626-a4d5f75a8319",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aa55cd1b-d901-4d6d-9828-a879cbb9442b"
                }
              }
            ]
          },
          {
            "id": "88074857-3f8b-44bf-9da8-1b9f8961d7f5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "411be2f4-e843-4a63-a176-bcaff581f6c3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "27f6ee7e-229d-40b3-a865-d24810dd811c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "46611df4-75fc-4fb5-87c1-d3c104077e34",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6c2918a5-c655-4176-b319-caea96a13e62",
            "name": "Positive Testing",
            "item": [
              {
                "id": "66b9f1d3-83c6-4b3d-b9a1-ed7efa572f6f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd21d960-a37a-40c5-b685-ec4a61505ded",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2d2993f-0d0b-4f07-bf17-bc53019f7a7b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cb2505b-3cc5-4f4e-99d4-646e28dd04d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e38a175-c8a0-4465-8ac4-d1f1b89612eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f77aaf93-dfdc-429f-9dc5-16a1d412110d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82ab96f7-5ed4-4c9e-b9ec-4e88cf807c11"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0315a331-2102-431e-9ced-e874f214b98d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c9fa07be-fb0d-4537-9994-14980cd1afa3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc8764fb-1232-45eb-b917-33b7b23d3b71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd7b0a05-a31b-4a8f-a80f-ab88501ea050"
            }
          }
        ]
      },
      {
        "id": "5b53d8e4-22bf-4e5e-a6fb-f5f7ccb39128",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b68790dc-e677-47e9-ad5f-2914c8828a79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5c3b716-2e5e-47ed-9c68-1bd2b1f9ff32",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b5eb94d-72ad-456f-a185-3fcff624af60",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dac965-16ff-436b-becf-994f2783743e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4471c413-7011-4920-9196-681719790ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68671e0-c148-4008-924f-8d30be7e80d9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1dbd07-f3b7-4acb-9362-0b23cafad60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30e7dc35-4bdc-489e-aa2a-1b25301b76d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74114f9-85e3-4707-824f-b9deef0c3fa9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ad1d5b-3c86-4f76-9bac-c410d4fad1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3188b62d-ea72-47fe-943e-ae9b0aee15f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "564e7db4-4671-4cba-bc28-f021bf98efa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee9c9f76-d421-4890-a17b-860cfec3121d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5da76c-04c3-40db-8a63-2107e82a4502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8267da67-6962-4458-882e-943afd08c3e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48630446-a68d-4880-9b99-ee3412cd8a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9f6f61-dcf1-4507-999d-6f532561adc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "696aef4d-ef47-4c7c-a2bd-0874e8805cca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "250f6c81-b9f3-48b5-b146-929ebbc5de0e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ecabc671-16a2-48f5-9b9a-c75bebab2f0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7537f037-220c-4688-95db-d96084924145"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22db55ec-7055-4f3b-bccf-9bd26c3580b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3a8d2309-1463-4a26-8c9e-60691addefcc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d62a9fe4-7c79-4c3d-9269-f5b7750dbbd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a594bdfb-ddf7-478a-8641-a6f81ccde9dd"
            }
          }
        ]
      },
      {
        "id": "9040d442-82d0-4643-ad1a-1b1b5989838c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "af2564a4-2d1c-4c22-8301-6db1324e6a3d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3e9ce20-5518-44a4-8301-2738a739468c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7f99f96f-a0e4-4e3f-8cc8-e3d4da747453",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96329911-8556-49ed-9a54-4a548e17bae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe87e1ab-7d65-448e-a513-ecf9c723267f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e3f580-9477-436b-80df-7add3da313ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19e7c955-9c2f-48f9-a253-71d79ffc5312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a44f7c4-71c8-482a-a413-ab29ad0ba0ea",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b299c79d-6027-4f6f-acf8-260cebe117db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2cb75f-57be-4ca8-9d5f-0e4c803e41e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c592aae-8210-44e1-aa95-675bf6088046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33d1667c-ce18-4855-b8f3-4808b95dd963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16684b2-a8cc-4dd2-a99a-69b277e6cb19",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82e0bec-e3f9-4f5c-9465-4c6e450b4c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250ed2f2-817b-4057-8597-5b221d80853a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d15423c-6aef-4621-b65a-b5dc1a02c60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c593a85e-6b46-4cdd-b8f0-57d8f910590a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2219f1e-8738-449b-95e8-efadd71aa084",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0653a2-5e9d-420a-8d84-628d8d490adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153459f2-28a2-409d-a91a-5839a00dca87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fc55e5-909b-478f-9c0c-08a00a1bd3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "121066ab-831a-4f26-a63a-075932c1355a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c2e5b8-cc7a-457a-95c5-e818ed921086",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9888e96f-d328-4e5a-8471-f725a5b50a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa7664b-f266-43b6-a1b8-8e5901b68010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00058be-1852-447b-9ed5-f79d7925b5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ee939e7-fc7c-45ea-beaf-b4c26536fae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe607f8-612e-4861-ae07-e72ad9a474ee",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36789674-d180-45a6-b062-7ff0ac0b900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ab38a8-547a-4944-90c3-8fa7f67d2040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf7999e-19de-4cf4-b93e-a0a17a5311a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcb64338-dcb6-4366-964f-b3d0e556ee74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f5379c-188e-40d4-b7cd-615eac192d19",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a681050-aba6-4604-bc44-ac5919f689e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729eafe8-498f-485e-a940-fef35c4012cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e674f9-dd82-4f00-ac5d-9b7de94dfe7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f79ff0d7-76a6-425b-b0e1-a3376987cc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfe331d-2c55-4d4d-81d7-f47dfe756f01",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60445c4-faff-4f54-a96b-183b421063ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5b711e-190b-4bbd-be9a-4ab4165a59cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56807af0-426f-4b86-95c5-659fd51e66d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "476a4556-6e20-426c-9279-9e1e2ffeab1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c13a7d-2206-40a0-8b98-dea2f736780a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a321b6-4a49-469a-a19c-0172c83da57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522c1283-8b66-4f1a-9c0d-763911c40441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b66fbd47-29ed-4004-ad4b-f1713177fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83ae4623-6648-425e-aeba-3505aa7f4440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c9f92b-63af-46b3-97c3-c707dc5800d7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcd9d03-f911-4f26-8e7f-7f3ea67bf568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28274b5-1c73-4337-8794-d4d0b5bf9e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2440128b-c71e-4874-bfd7-87dd6a9565b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a3be4b-3e07-4b6c-9889-b9adb9a8ae2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6287ede1-9ea1-4310-8786-558c39a7245a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5837ce-d37b-4833-bdd0-ec09b82664ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e429b9df-84ac-4f3a-80af-4b0b3c3d3d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bf6912-07c7-4118-8868-8f890e8362e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1394782c-392c-40d1-a29d-519c3e647981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d5acd3-2b66-4eaa-919e-bb77c5a13110",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ff2498-3df1-46d0-a0f2-95ce144f8955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8260911e-8339-4b81-8a8f-da9b898405ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4417bb01-c8c9-45af-9bec-44964e41f880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4f7d845-d1f6-4bcf-a7a1-992206da6bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e443d439-4034-4846-b88d-47f97131c5a5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5310552-b9a6-41c6-bb39-6576c30d6820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefdb5f4-0339-48e0-a7a2-1836850ef577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48c367e-d73b-4497-812b-09ed778ae69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e84a7ba6-fe28-45df-bb3d-02bd8813eb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93640184-93f0-4c49-b50f-9d04fc272cd4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34db5ba-33c5-43d3-9511-8b572ec60d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51e06ac-4a0a-42e3-ba08-fa6643ca014f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f68e8a-706a-4e68-9cc6-d430edcbe836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3cef857-cbbb-4d3e-bbe2-9e5158604e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67af0fb-0154-4ac9-901d-4a50eb97b5cd",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e9773d-882a-4876-af53-2230224d6500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd25b895-94aa-449c-bfce-3584dff9ddb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29cc2cf-ab43-4769-8372-7c3cfe249554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "307c2400-bd89-4e16-9cca-16a0cc349b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd686db-3b1d-4dd0-8b52-da96c7cd4640",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8360db83-cc03-4fe2-a601-4b32b5360c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf053109-d8cb-4604-9164-a882b6bfb3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748b2b88-0ba4-4294-aaf6-9d1cbdd2e6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13036e34-c811-4da5-a892-af353a229971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95692c7c-56a3-41fb-b329-d0ef168a3aee",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9035f1a3-d9c2-423e-96af-2fda54162b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bab0111-4eef-44c5-8420-c2c09f74b140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46116338-2324-492e-ac08-9497e8a303e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c6e4154-bf12-44bb-9d03-2d5e249d012f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c297646a-d984-42b4-86d8-8d5ef9323bb6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5afae8-3ee3-4735-8665-502701321d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971d69de-84b6-42a3-a6c9-2acee57314a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1dd70d-0194-4408-847d-ecab42b89eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a35be62-5789-4e7d-9d4c-1bf2b19dd738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1e33ac-baf4-45f4-80a1-6928b8005f49",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ff8e26-3412-43d7-9e85-604bae0df414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d610b8d-cf78-4ab0-8758-05acc53da0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0185097b-0768-4f45-a127-33c2bf16ba2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc213f07-4464-49df-8763-50ad887eeef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eafb227-71ab-4a94-ba88-3b40c08ae7d2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5837208-0791-421a-81df-1a4926a2b9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ede63b-625e-4a7c-a0b9-92bcc2c304a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607e826b-e405-4049-afa4-d27374ff2240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af533ee-1082-44c9-b440-1faaba9d32d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c23d2a-20dd-4066-b073-bad1639340a7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b31c8e-476b-4292-8e45-24946e75da3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb60f18-15ff-4fe4-b1ea-6a76408c7125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b3d3ec-c501-4930-8579-1e6516970b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65eeaf82-332f-4519-8ff4-7b8ba3ee4af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d21bba-0ec2-4deb-90ec-8125ba4106b9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c335a7e-fc61-4d37-bd53-168400ec2b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27648812-3531-4f87-bb84-8ff4cbb744ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edc79bb-3ae8-46c6-a3d7-fd0b58292164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36d306db-7ac5-4602-bd5b-102ae18681d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9078afec-be0f-4c91-8e98-0a4ed7b8f560",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546fa571-b20d-44e0-8e7f-c62335c1dad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc035cf-5ed9-4bc9-bb7b-3d9fef0cb73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61c8a0d-b731-4322-aedd-2d3a4aeb5647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e927162-4a79-44d1-b5eb-7b65c46ccd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff08b4f-7f3a-4627-8534-30dce3e8097e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8850f89-478d-48ef-a0a6-fb55ce38a4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df92d97-1a11-486c-98a5-24ac8333c521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c30e10-2cc3-4ef8-9ca0-14ddd122f305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "89e89224-181d-4483-b336-fba3b9a3de57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7ff8ad-32fb-4011-a3ad-0a58d7e3e933",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab219fb-96c5-4232-9829-6a1343e83af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919684df-d69a-4526-b7b5-09fad9b3e438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0187fe44-2a6e-435d-9177-e589001150da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1b81ef-8abd-4851-8a0e-5ccdf3a9f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e531248d-03e1-426f-8675-809dc2ed9a80",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc52967-6344-42ac-b2f7-e9b2c5748744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b106e9ee-ac2c-4913-bbfb-de14393d649f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fb6cec-b867-4829-a1e8-df69be3869b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "756947ac-6f53-4096-8cd0-9a4fa885d0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b256b5a5-1832-4db4-82d6-24b94f64df8f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac0d4a7-8581-4c79-a5ae-67a099568ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c647f59-c49d-4c4f-88d0-26f483a9ba4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0a6052-07ac-47e7-9730-44ce1841baae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7b7e00-46c6-43f6-9131-f1ad61a4fe23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a92c02-78d9-4457-906b-c016fe263329",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48db9e6d-0e25-494a-a862-dcad8c914c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45938203-697b-4d9c-a609-9426f9a9d0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0765334e-5e7b-4a5c-b493-34bc03a71970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "850a85bb-19a2-42d4-b4bd-6cb691a4f945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab7c8b4-cc12-4d9e-a52b-995c50fae3be",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47760cc9-01b7-4a78-9cbc-721026cddfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8aea38-04f2-4318-9c03-a052822cf4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fce5c8-dee2-4827-a8c5-803e2da0608e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "850f242a-be12-44e2-9f8d-18771a961cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c1825b-7cda-4a3a-9b45-3f71766e9eb5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0804104b-5a35-4143-af4c-4cda99acac9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06e8a88-1d6e-4bdf-926a-28caa90bc0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcefa75a-9c25-40ce-ae35-9ccded662516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a0400f-746a-45d3-85d7-faec19cddc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc53eaaf-2bc3-412b-9ad1-6c7909051e19",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c318fcec-d91e-4ab9-84ea-aa9b9514c037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ea905a-ab17-4406-8712-84d41c308dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f6c99c-78db-44ea-a023-62a5c03a5d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1922fc-f3c5-4eeb-a019-35530c748673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6603f290-3ca9-4436-ab35-d509b70304d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3728cb24-ee76-4094-8739-bf1428f79f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c063cc84-b764-411e-9569-57562c3c5e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9fb6d1-5f69-4393-a798-e3e68698f02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7519ff58-87b4-4173-a741-6c8e5af593fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45251532-2dd2-4718-98e3-994e36d99fbe",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456e0530-7bd0-4459-8902-dd2fd69f9544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf7b3605-2af5-4700-90a8-6ff74116cb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c3927f-d74e-4af5-9c01-a60379535118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "960b3dc5-ab6c-4488-adc1-7f9a3b9bbe74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca95578-9d50-42e0-a5ae-048d20744eab",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ca6602-e4a8-4bc9-8a59-08bef72494b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c87fdb-1d58-40e1-889d-149699f639f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef18f9e-bf45-4adf-941a-6bf04a05a100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "962c865a-64a8-40e1-8606-a9f2c3943eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3e5192-83b6-4719-bbd6-203b709b7547",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f53849-3b04-403d-b31f-6b835c69dd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db533e81-f332-48c2-847a-b02237a37072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af620d7-62bc-45f7-804c-169cbf450709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "549d898b-2e61-4dd4-b50e-8471f3f866d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0ec6a7-cbaa-4009-9a4d-62615d795c7d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30374648-74ad-45e6-92ee-969c6d9e5803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea3c887c-a01f-45ca-9bdd-9473b3aeab01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa47e663-88b9-49a5-be00-13e5385596b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "535e0aca-54f0-4bda-9c86-3044ba4126bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1d0ff5-c513-474a-b241-f84b575aff07",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a3dc74-816c-4cc8-b360-8a6d47f4a709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cb34db-915d-434f-845a-4ec503737783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6150b4a1-5ce0-4114-a625-68dd2bf75366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4daeda9-411a-4d51-a150-5ff1388c89f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd75a8b-bc0e-487f-a7b3-83629ce68d58",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d37a22-6178-4b15-8dde-a7c5885e740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18bbe17-1072-445f-bb9d-f7f852365a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f9f06c-3e9d-4316-8b8f-2afa8d5b9d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd273df-9127-43df-975f-bd276a1f9a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f27ea0-a36b-4fb3-8ac1-1435283a73ce",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4bf4413-c59d-4346-91f8-723d3ccb9ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f39b380-c020-4862-ac6c-943570e32e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edf151a-9053-4e75-bd46-059c96c12d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af6592cb-ecbc-4939-a13a-798eb4a1ea46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc3fa22-6ed1-4e6f-b5d2-a4b256bc8303",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53693a54-6606-46de-92dc-f205ab01948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2091a4-6acd-4bb5-9589-8a5a6d1627f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75d98e9-e8bd-4ae2-9ca2-e7b40c7ff09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "116ac06e-1c16-4854-b39d-163ce482f4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fb2886-a345-4414-a9f9-3646e5c238ab",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7f9acd-ba6a-4ed7-ac20-7e3e8a2558b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24562671-bc7c-4c14-a4c8-1ec998e8a20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31f6893-3bd1-41ed-87d7-db4b39756809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "71938543-fd11-4a30-b958-fe9d7cb474b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd1b81d-606e-41df-8240-c6222ba6e048",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b478dbc-10c3-4c34-826e-eda3aef28424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f1f85f-d89f-4e58-b097-38f67f4607c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0687eb6-7bf2-4f92-898d-75193b9de241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4b69bd2f-eadb-467b-bf88-8d1cefac2e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a2b326-5632-4b6e-81b8-252b99497c3a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb3ee1a-165d-47f0-9c51-9a378e151dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2941477b-5710-43fe-9dc2-09200fd184bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0dc498-b204-4ad9-acb2-743fea45d41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2f723e-1bac-49d8-a439-1afb7ce9bcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03f6dec-87fc-468d-9b7e-35c028a96f8f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f668e44-e4ca-448d-a377-252672b60101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2edbf4f-c508-44d7-abb2-b09e5b43e62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6608c1a-6784-4c5a-aead-ccc138b5769f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c66a714-56cc-4ced-b3a6-eb69632fbea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08df9e85-647d-45af-adf5-0625a2243320",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407e17c6-6e07-4381-92dd-d1f523374f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724e03a0-bda8-4e99-b4f8-8fdf7fb9a34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a213409-558a-4229-81b0-66d8132968d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57db115e-4833-452a-bf87-a6f264b01d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e2d0a1-0d6b-4825-ac67-23cd88d238a0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0263534d-97ab-44aa-bf4b-468f35302c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6633928-e7a8-4aab-9e2c-a870147bbc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a243665-c596-4391-afb0-8f7ec18f0b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b90b22-5863-4bb3-916b-74cf31f7a101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a2877b-60e6-486b-b631-8b01fcbc9f72",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf393deb-0945-498d-a173-b0435f6e3473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f276b810-b18d-490f-8f0c-f7257d3f6b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8a49ba-5a53-43b5-8e4b-501a4a4d682e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8646c56a-cc5b-4d84-84ce-a355cac95de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d97ea4-738e-44a1-910a-9bd0cc9114ab",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628066c8-d04f-43c4-8cca-70e5f232c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed361f9-4369-48ff-9bb7-9101aba5c56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb112ad8-3157-45d2-a141-6ffb9ef63578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "590807ed-73fa-42dc-8339-e1a8af19fd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c23cab4-d2bc-477f-84b9-2d160aea8474",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f0372f-646b-4f44-b463-7e67aa2c8d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb48a5a6-938b-403a-80ac-0a1fb0f52919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce396d57-b6ce-41af-aa52-7f376e38c6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22956739-866e-42b7-9ca4-04b294283206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bd286c-d553-4b99-9fe5-1294aa7ea2e2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766c74b9-3e7a-4b4c-bc91-aa433d0fa2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b560f86e-9001-463a-82be-b1e518412053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918b3fc9-e06e-474b-ba09-f0cb9e220df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcaaad93-3556-47ae-b556-003bf8c6375c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54ea8eb-263f-4d32-9728-46bbc9cf73e8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cd1ac1-6fde-4b53-bfd6-98bc7a21ef28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9e2bdb-fcd9-4ae3-9876-424b8b2a211c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed077b72-25a4-4a24-a72c-08ebcfc88edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfc409c-bf72-4356-969a-8124983e8542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1b20dd-5389-42fc-92a5-bf14ac08c4db",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132f9bea-12f2-4a14-9ff3-725f5c07cfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba49f909-5e39-42e4-a657-80fd28fc3d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ea2c91-e401-4df2-b8cd-af06a0682442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "82fbf154-fd03-4174-8701-b06b21e5fe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6b56b4-0992-4d65-ac1c-53a632a6e1a0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62468ef-78cc-48e7-9928-7fc4b6a906d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c495ba-90f1-45c2-88e9-043f7f26f89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1513219e-6f14-46c7-a0a2-77a4d395f42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7775ce87-4afa-4f3a-9c8b-42871d8405a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124fb503-bb7f-44c2-a937-7719a2bdc175",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c20818-1c2c-4ef5-82cc-38ee15877ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c479af94-167c-46f4-8c8c-52870d4f2d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b399d2-a32b-4d88-bafe-705512a38d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f20fc3d-3522-43d9-93c6-8b33f9aa04e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e070baf-c393-40ac-81fd-35c8c06f8faa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7821713b-e8dd-4a11-9cd0-5f4be789ca88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52757a2-e8b6-4ff6-9a71-8627dd3c6656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62f1897-5780-4ee7-9ad8-41d3fdfad115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84bf5926-c2e5-423c-87b3-0366ca5e4bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977b7918-8997-483f-8fe2-29fd26ceed66",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f5403fe-2734-465a-b2f6-d3da388e9787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ff5355-4565-4b70-822c-5ad1f6305a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67897500-0092-4861-b5da-a55fa01be8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3337456d-7fd6-472b-bc2c-055a5532b0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570c244d-7a8d-4aa6-ba21-2499c8ce33ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57141288-d433-4103-826c-cf3e403faf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57527c4-83c0-44c3-9490-f7dc6d102d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7b8b74-08de-41ca-bcd5-e879ebb2c1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9399722c-64ad-47a5-9666-8e41269e150e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3c8498-3d08-4699-8fe1-baed72a80756",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f042c4f-eb7c-4130-938a-31f4a4d87222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5af203-0ba1-4609-9bd0-63adf7d50b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b248818-a4dc-4340-92bd-fd0d4ad4924e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a1bce5-5501-40e3-960a-8f3d872aaa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66004193-4ce4-4e6e-95d3-f3704b116305",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f065bb39-efe8-47f4-a4c9-d385e7608aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71968515-62a9-454a-b40a-a55757dd519b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9913cca-39bb-4bf6-aff8-3322e3fef9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e927692e-e270-48d3-9824-25199edda375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8fdb7c-42d3-4495-874b-7e9515a6dca3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3165d9-d406-4fef-b713-322043817e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46957aa-3c57-4c5a-9f5f-3de378f042be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cdd595-daba-4602-a3ec-c559e2926d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4c99d5-df05-4f39-a52b-349c36a35e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe9cc38-e5c6-4072-8e12-20ff7c53abfb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375c53f6-32b8-4909-bd34-712f2685033f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b6867b0-cd95-4456-9222-1eb775bd70d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86996f54-5adb-4420-822f-accb4de61f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa936704-2d56-4318-ba6a-0d9718b914da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6068b9ee-efcd-4b77-8ee0-4eee61be0d30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee5a9b2-a813-4cc7-bfa2-df90f7ff8d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826eca21-a13b-4dbb-b03c-64b1b3ad9862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d20b74-c795-4ea8-9893-859921c91dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeae5c31-74d2-4ee3-8d0f-b9bbb1c45b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef100c5-c7ed-4a83-acb6-c80353e78d49",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7970ea4b-6d3f-44c2-949c-3e8f48106cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb37b85-a99d-484a-9ac9-8699c1bf0ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9de337-de7b-4ec0-b042-0a9fbdfe200b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebeb291c-1705-4ab8-826d-bcf6b57ae6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5134b8-d6ef-437a-82b5-9e7ab70e1d15",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5920d525-5bd6-426a-a886-fab1e473966f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7580ea4b-b3ab-4227-bc96-fe74e8d46037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeb34e5-e62f-40ba-8371-ca99be634b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa177fa-041b-4a8a-bf04-89fd388f78aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20910d1b-9cba-4732-ac95-96d309f60396",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee37414-6883-4a75-a7fe-9a9a02c1be6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79633f66-93aa-462b-a5c9-416ae349f88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1cca80-a667-47c7-bac4-a1eaaf170e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d73d228e-4c1b-4576-a1cc-1ed195055393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2503dffc-b7e0-4974-a77d-4c9343e4a211",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135a8288-2620-43c6-8983-c8e858b2cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb154d6-e6f9-40d6-8876-ab51a0b3c0f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f5f2b3-0d65-40c7-abfc-6559765cfebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76cfcbf5-52b5-4945-882f-7d1ccb8a788a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9686b2a4-834e-48c1-a883-9a6c538b2eff",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8416f496-2944-4e68-9ef6-69ba5063896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c0044f-3303-47dd-8a37-26f6bf7dc57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5e1ee9-af3b-4c87-b320-b48a9d097edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10482bf7-d03b-4fa6-a2ef-9aa5dd3ef13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89e6eb0-9c9c-4780-b608-a97f1f26366c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588538d5-f1ce-4a34-a7c3-0f1be5b3117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f94137-c58c-4845-9f18-2f208ef67eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7685867-9ea5-4d16-ad67-b7f5e8247abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde5fe55-3d06-4af9-850e-af1c422373c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3bf856-850d-4731-a3ce-87e6e1a1e20d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc3068a-fa18-47f5-b394-3ae1f30e176c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16fc902-394d-43f4-aefa-bfde5eef607b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71044440-ca35-493c-8e1e-57adb121511b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fefba454-76fa-4d5c-b2f7-b3387d635161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776ae7d4-9926-4cee-acec-e44837b9730e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10e668f-d0fa-409e-bf87-92a394f864d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da3dc49-0ee6-4905-bc5e-4fe7b2012c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2470c278-1dce-4718-b322-602321e7c290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f36618-d05a-41c2-997b-34492d30b617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354c4ca8-71e7-4938-8ad4-6a50a190ede2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef75f528-b001-4c92-b2a9-8f2156c83554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ee6ccb-0050-43f4-81c7-c9f92be9df4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2a95f9-62ad-4439-8f17-cff056ef4944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d88c5c96-5aed-4510-9205-29cd491f2555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bf095c-50fe-443d-af1c-c9afb8e806b3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cf5093-b786-4a6f-a28a-1fc860a60ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f892e15-c056-41e4-ac0c-6f5cb6af74ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9767158-04d0-45fe-ba7a-3720796b002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b700abdf-15bc-4094-9b72-ba464de5e51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80a72fc-c601-4a8a-bb27-18fe71503fb7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5a1b46-8041-4a0f-af12-180297f71edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8198bb3-4bad-470f-866c-c5b75d87baa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a7cf65-c535-4fda-94b3-89bede448119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4be09a0-2746-49a3-a4c6-99dee9017fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0df5123-4cb3-4f39-9f5b-ea266240ddd0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a56d4d2-7d7f-4eba-9022-6ae0541142bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab41498-5a9a-4f3c-8987-78038835486d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99094b0d-980f-464c-ab65-9941512d94c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78bb8e5a-be51-4cc5-b69c-07aa311088e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c684d3f6-1254-46ef-9925-d718e7f11eb8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ff0952-a09a-4032-9799-eca34a24d754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9737f69-5f45-434d-ae8a-488b533939d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8f5fec-fd1c-4301-8fa5-3813cbd5a133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b59ebd86-c13d-48ad-9d72-08d586060bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67666f-14bd-43b8-997b-598f1282fa76",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101a2206-b929-4c24-8d6c-a0d24da3be4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4400fe7b-b99a-4345-a011-ea3099fe3c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fa6a13-d6f6-4879-a759-d9a80b842f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12a0dd64-0233-46cd-98a8-5d8cc3eb834a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0c19d2-fd1d-4c58-a214-cbfd570eac21",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6350f763-bd27-45d7-a63c-3f499504d8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2413e8e0-ae4b-465c-a626-380fc5646aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305591e0-6e88-4c8e-b809-812afea10e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dca5a91-26ea-49bf-9429-80e007c95784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a12d33-58bd-4b2c-9c4a-8f89f0ac8fe7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d4437d-c0a4-4fed-ad55-f1ddba257ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a28aca-f474-4856-a0bd-9f71a83b032a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb71e6b9-702b-432e-aae9-bb93d29482b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab14a71-7603-4cb3-ab4a-881155f74f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de08fe8-f495-474d-8a15-2e6ed3b9bd43",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25e89a8-c786-4b2f-998f-95f2418df370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ad2f7f-33f7-42be-89f5-2f498180a12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abe6a87-d83a-482a-990d-ace6a22133d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34db23aa-fc92-4e44-af1d-964ce5c03d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e1f809-3fb6-41bf-8fa0-c7adee08d092",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70f8c3f-fc95-444c-b93c-ca341ce57b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2dc0fc-e8c7-4c9a-b8c9-16bc7d0b55e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c43683-438c-4a6d-bf86-0966c1965891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a24cace-c3ec-4828-9745-87d6e964f125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0201601f-b80d-44aa-a90b-891b4dae2430",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54e426a-155f-4b4a-a1f7-98f860714b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214c29e4-5cbf-4442-a8c5-94d494dc547a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfee339f-436d-4c0b-9039-df013bf582a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb586908-3b53-4ccd-9cc7-90d8e80cb8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3055dac0-0ea2-462a-802a-e41d9e2685e4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a04a3e8-b333-4251-a096-bcb2c8d27775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b7efe4-a25e-46bf-934e-955b156f6156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520e14a0-87c0-4c19-93e3-116001dbd37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6b8fda-4414-4433-943c-e9bdb7cf85b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9c045a-b830-4633-9d2f-3ea9c037c825",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcd3b34-a362-4cfe-b5df-93c5af2b4bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51c531b-6fb4-4c0d-9c7d-fe36ca6122a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91192fb5-7170-4de8-b3a4-3768949a59e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "171f9d58-1192-4369-884d-86509f1c05b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97bf4d6-34be-4e45-b27e-69e0f1811f00",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a42330-d7dc-4d9b-9e6e-6727576d079c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86cfd30b-a13d-4359-b740-4ffd160fff95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb58387-ad0b-47a1-994a-43b696515341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b05df50-fce1-470d-be64-1ec086fa2bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5766d8c0-d5a6-4137-b2d2-a5bb3e7722ac",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee8e292-5288-41d8-911d-5d09cd56ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2aa951-25c6-4c21-85b6-2ad89cdec011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8512aaf1-2593-48ea-be8a-f68700b174d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4ee547-34a0-4d59-8152-2d7cd167adbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803dc518-bb14-4375-98b6-f7985916b30a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130df2bc-3190-42d3-8c4e-445dbedc3719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af289412-373a-42f8-bfeb-4bb916bcaff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d453b3-44b1-4585-a72d-31d94dc55423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5d3414-2869-4172-938a-73453b1ef1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532f75ce-89a6-4bad-82ab-1f69a11173c7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b46a83c-eb4d-486b-a93f-3612ecab9b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83e568b0-34be-4b0f-9596-00000a312ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e85a1c-23c3-495f-85c9-6d08745aba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8efd9915-7b3e-4a8d-9ae6-e93028036368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f9672b-8a44-47de-b174-81b2e6611f08",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5238e5-74b1-473b-8c30-2cc502abe358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2f13da-5480-4d36-9ad9-d80f8c6a2cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf232e1c-6d9d-443e-add8-b68dc9de0b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3b4391-59c8-429a-bce0-97bd6c34007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d0c6e7-f77a-4400-9830-619adb3be7b8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f4657-b6d8-48e7-a29e-b77446db9d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89891eb2-b7db-48e6-862f-b7f3e94b1f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdbeaca-3d61-46c0-8dfe-904b65efde60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "29b39f86-dee2-4f7f-aff1-d5cf5c2169a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf054b0f-5a0b-42b6-8138-17e7893bc407",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac41c8f-34cf-4eef-8c99-28b2145b7f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7c2e20-26ad-4679-a3a9-c06020b52f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d19f98-4dc3-4eb2-a96f-5a38e857bb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "912e7370-8b6f-4c54-abb9-ed85e5c20f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8487dbd1-7ff0-4c91-b983-402e798115eb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1dd38e-56a8-4fb2-9218-cdf5782b489b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaec4550-3f65-4fcd-8879-bb583cfff9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8258b834-c8f1-4259-b012-9f2af1e18b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca318f3f-d1f8-4cd5-bab0-6197bd877c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed296b-3433-490f-bf97-4375acec35c8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60638732-0def-4b0f-98a5-7ca1e67a59b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3571bce9-1d3d-42c2-a71c-27f8bb87b334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8184637f-69ac-4fd5-9966-052158769991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d523550-855c-4a9c-b4df-89e39bf4f882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e797a561-8be1-4f03-b29e-8619202a990b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1a61e07-2a61-4543-8304-b309edd460e6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5f6b5-d90d-452c-b22c-67646546ed05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf208470-fd57-45c0-854a-3b73a7f7cd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ac52c8-f5bd-452f-8fd2-af6b2f33e459",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e20dcac2-0744-46ad-86a8-30415c8b761d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75d89dd6-9dcb-41ce-984c-c0560d113b5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4eda7cd-2fd9-45ac-a586-7e555cbedab4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b419f1bc-d252-405b-a210-6f793604d0fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff33c87c-82df-42c3-872b-3c311281f776"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50b16a0b-b0d1-4831-b386-5adc32d0ae96",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7e85e85-ec62-48f4-a874-43ca8bcac130"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ccfb3caa-e185-4104-8a71-2a4824146a4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c174a185-f919-4261-b35e-bad3d1de333c"
                }
              }
            ]
          },
          {
            "id": "329d0d61-2753-4acd-9204-d06a567e157e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "803cf851-a463-4bf5-a946-b1a0d6048d76",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f07bbe88-15db-41de-a1a0-1839be09a77e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb235967-bf1e-416c-b2cd-66d831b03755"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a926ce26-4297-49e2-94e0-239884bfcb76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "067ed3fd-3cff-402f-8ff1-45983fcc4e90"
                    }
                  }
                ]
              },
              {
                "id": "4e235eea-84d3-4321-a5ed-9fe86937a44e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fef48971-9574-4db2-a0a3-0a09fb2e5516",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0578841a-9f19-4440-ab07-7db34e5de3ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7c47e9b-8540-4539-9c87-d911d6958459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b83d6c9e-1fff-4362-a95f-235f5aca5731"
                    }
                  }
                ]
              },
              {
                "id": "73c5d64f-bcbe-4dd4-959f-946a91cabab2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79c42f5d-f3c0-4aa9-bd50-13a8796bd2fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1295313-3f25-4095-8d9d-a482924c69ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60e129f4-9dda-4252-808c-5a1637b7a32f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "898f341c-ff65-40e2-9759-904c849a4f6d"
                    }
                  }
                ]
              },
              {
                "id": "a854542d-07f2-42e8-9dda-fcc439fe9902",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b496ee2d-ec0c-4b86-ab7d-01dd20f3f726",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95c95f33-3d3b-4c4b-beab-0c1c4cb464be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d08c3938-fea5-4429-a3b2-4368a5e4f6b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6fafd710-5f09-40b8-80a9-304d9226308e"
                    }
                  }
                ]
              },
              {
                "id": "37fdd515-e063-4e5d-abbf-fc07ad1d667f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd5f980c-42bb-4d3f-9438-bc972137eb74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9fbc5b98-fef0-4d66-8a34-4652cd6afd76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e980c3c-2e3d-4589-8125-bc5b82e022bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3de10081-625e-479a-91bb-20e937c8a028"
                    }
                  }
                ]
              },
              {
                "id": "964794cc-aa12-4441-85cf-15517dc0a5b4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78233b13-2d48-4c6a-9fde-72847b958e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "86deb00e-1359-459f-bac1-4723668822cd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "696f9f41-8829-4aac-96b2-9f0afe9e56ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29b10d15-6c92-4ce9-8b73-bbb8ef7f8828"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "791fd142-499c-4621-b196-d5f6b72a50e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04adafc6-88e0-4536-944a-480a899b716d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3cc848dd-476d-4b0a-a75d-fcb5210da41f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8246ccb-9c81-45e5-99bc-d4e44f4b36b9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57fdf5bf-e2ec-4ffc-8784-a67183a11c57",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "80f8afd8-4bf6-4fef-91b8-5b68825899fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ac10d5d-657f-4c83-bb15-f7499ca91cd5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ea583d1-2b26-49b0-a261-385eccaf808d"
            }
          }
        ]
      },
      {
        "id": "78c76af4-d248-4639-8aba-b7cc54d64927",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "22956756-6353-4874-a915-03c4be9211fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf7883ac-eaa8-4138-86d7-a645cf91b65b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f26fa9fd-bb55-4f99-a3d0-f8551c7697be",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3803c24a-f890-45a0-9922-15e36291c75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17b8c7b-d057-4cec-89b4-574cabd5f1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0163c2b-c1ad-4686-a7e1-6a846ea326c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b257e38-2391-4e2a-a395-41a018eb6913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41082279-9bb1-45f3-b9e4-a2bcdafd1a70",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4a96c1-40ec-4cd5-a549-0036ebb51739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46adebbe-0522-4b34-bcb9-170b33032719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8198d959-f8f0-423d-819f-3d64c3508294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f66684a-e9f9-4246-a969-9ac887bddf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4477114d-6bba-4331-84fe-cb62f2e746de",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7daf7ba2-94b3-403b-a942-e7eecfbf1f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f706d7a9-e545-435a-a3d7-e6f4b983d615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f41cfb1-bb91-4a2f-b512-d6dc1b098c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afbec235-38f2-4800-878c-e7803eda0ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd52785-74c7-48a6-89a1-20698e6cdcec",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c89cbbc-9684-45e4-b2a4-6e5f11e65f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74136f2-555b-488d-8274-73958b0c0a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ea4b7c-6a93-4228-bb38-7b08eff95254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba8d4f6-48fd-458b-ad54-53bca16bf5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3278c63-4aab-4bb1-8e66-b7c85f760722",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff1f0e4-de3f-4e15-a107-7cee45868f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff52dd3-c9c0-448e-98fe-287fff4a961e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583b3bf1-dbd2-440d-aedf-8071dac42a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d966a5e5-13e0-419d-b5a2-b72342dcea28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53008bb-e842-4602-94ce-6f217186268c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f503c1-bcfb-47d2-a76a-c5e368968472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bbfb8e-6762-4639-b0ba-dd4e07802abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2718fb01-2299-42e5-a894-614523cf0442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2b0936-78c5-4348-b1bc-08dcb94918f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fc85b3-cbc7-4f6b-9610-ec9f7d3b50e2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8e40af-b032-4b8d-9358-fdd91b8ca1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab0beb5-d3f0-4515-9251-5497c0e00834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4225d9ed-746f-4e8e-95be-861b3ec61b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "138f7379-3f53-4908-a011-6e817d1ecd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e2df28-1b43-4aa6-8e0d-53e22174859d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f87a1d2-56de-4733-9063-dcc5b759f8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5551c81b-b86e-4129-804f-bc75fe58c8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebcae10-a85a-4bb0-8120-5d84c87f726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "931ceac0-b2bf-41d9-9c88-768b9108ba4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10ce32f-f133-4df1-bc69-3e8d23d2ce69",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6874642b-27d7-4967-bff0-3458ac132354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf19d58-a550-4ae9-ab2c-423e6b5a0536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bb96d0-47ab-44a0-af94-25ca4b43e9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebbb35d-e685-40a1-87f7-9eedf3a3cce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cacba7-484c-4e80-b0bb-26b791a62dd9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7c7561-a791-4ba6-845d-2644a2ff140f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043d749d-b2f2-40b0-b2c5-ec215b5691fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d707e718-3c00-4e7a-baba-8a385502bdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53ddd76e-37b3-4dfd-87ef-e959c38b9277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a6a9bb-8959-4626-9700-c2b4f759d8d9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ade06f1-b3ec-4cb2-8d30-d0cdd81ee90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8855d48-0be8-4f00-93cf-2af6b57b88ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea9471a-86cc-4796-ba7e-8637cda09d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f13b5a-9bcf-42ae-a166-d85656bc1e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac3e4c9-dac8-416f-899d-872afb5fde83",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989488b8-bf68-47ed-9f3e-59fbd2859259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8edc42c-9047-49c3-962e-d4dbdc89e959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b1cfff-652a-4b69-9079-18970095599f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd031b1-dd9e-456a-961b-b5c93dee61e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f743c3-fd97-4ee2-9a14-00f852411ed2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd56b7-d45f-402c-a3cb-5dd271b2afcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc6fa50-9a37-47d8-b1dc-92d84c675db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6f1715-afe5-42a6-9cff-13fc98bab655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a0c8ad-5fbc-40af-8a2c-84039a00e37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d56e735-1f51-4c27-8a88-f520dadb466f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af790d5-3e5e-4ab4-8e40-0e74602ef515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee9e245-6da4-42df-a895-78a2826da40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aabc180-1d62-4191-a998-672bfd99e023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3a602b-0476-4e0d-9021-52433a943b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeca8235-960e-46d9-b7df-21a7f80546a6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e8de35-5c95-47a5-9a2d-651b471c31fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0468bc97-61e0-4e80-bcdd-7067380252da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426fb737-837f-4ef5-9cd6-a2b3a0c09075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4376fcf-0e2f-4609-ba6c-2e7e7cbb0c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96ca43d-40ae-4db0-ba02-764ffff6faf5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad21d278-020d-473e-9ef1-96cd8308ede4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec55f58-2a35-4f05-bf8e-f7ae98e95cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7341cd-4644-4b11-89da-a2447c014093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "573edc6d-6775-4293-9a5e-dc747bde115d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10b99ae-66c2-48ad-a66c-3a206d4234f0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60f9606-e0fd-4b24-93b8-0bb67b3e7939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adac7c97-74d0-4c99-9d28-fa7924986463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229d5cda-e2ac-45d0-ac15-f63a84f7159d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d758c9c0-7e59-4b1b-96f7-66f14bcfeebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f528db-28d9-4ced-89d0-198c176670ef",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64834fd8-9bf5-486b-a63f-62475b6b4da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a260fb-ca26-459a-bc4a-f997ad7b208b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4704f755-6035-446e-95c7-5a7738abf80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03d0ec2-6838-49ed-a155-29c6e443f77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a851a6d-91b7-42bc-9dd4-372126deee2e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73081bf7-e406-4666-8144-b48248884dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75448dc9-fa5b-4b5d-aa0d-b768980f4cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94efaf3-e3af-43b3-af90-085cebf0778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57aaaaff-579c-4f3e-a96d-d0b38de8ea55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720158de-ebf8-410b-b50c-235fa5ce4581",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63af49a-75c7-4c32-988c-c4890a859258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053dece2-e010-4dc9-ac30-5ca24e11f60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d252bc00-7aa9-4279-a04f-ba91dcde15c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11266fb3-fc5a-4e61-8cb9-be35a33cc527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d6c4c3-2a38-4006-a329-f3a052ecbd0d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600e3ade-94a6-4140-8780-9a293f770b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73334b96-9da8-486b-83a5-2ea0ce5de3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a68b23-0447-48d8-af66-0a7d3c9ca0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d0fcde-789a-44ee-9e7f-1916f9f8c143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a7a084-2ab9-4585-a0fd-730929dd4b33",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23f8437-e936-4835-a23e-a0af6c0fcecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d2a457-e0e0-4a8c-848a-ea0e283c2dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd127456-914e-4a1b-a62f-0d2a428124fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "308c94dd-1c2c-4323-9efe-5b248885e659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152cb318-a891-4fc5-b343-c56477bc162f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f65850-663a-4c8b-9ade-db4aead1bc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f9c08e-60fe-4647-8dd6-d494ea9552dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4e54a7-f22f-4dcd-93b0-8bbf38f5ab26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d58c5aca-b22e-4f47-8146-222f94a23061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5621d3e4-1c23-49cf-bc58-e624f38d87eb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f477d4-975c-4345-a844-f2b926116f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6753b8b5-3d76-4366-b992-1110343a7033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a724cc6e-244e-4395-804d-14fd4fc4f550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f48b9f5-a29c-4a88-b370-ae0dc619d7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b18ba5f-83cf-4c35-955b-bfb60670749a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d040a729-36c4-44f3-9819-ef1926107076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4869bc8c-3e9e-4482-beec-94ffc615eefd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3baa17a-03e0-43ae-b210-132dbbc798bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d330f4a-90b5-4983-b991-40dd8e2a15fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886c7d7f-9301-42dc-999b-57d8d337d83e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d3c051-a238-4b73-a05d-1b0e3b22c864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5304a73-aee2-470a-a88d-8cdf60fbf28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40bda53-6bdd-4554-a491-d533ef0c540d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2347c40a-ebf5-45d4-a50d-bfb77d5cefd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c8cccb-4438-432c-9f0d-67fd9cfcb6a1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7c5f6a-e7cf-4ff2-8213-90b9856b052d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8b9ab4-1608-4299-ab3b-46aff61a1622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e46914-0dc9-4076-b8ae-43dd856ad2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e3c8f9-0674-4c44-8be1-bae7bda6278c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdad20f5-7d65-4e61-b42a-d3a975dc7499",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b677940a-b025-4c52-a1e1-98752ba5b47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f973642-f592-49f9-8d97-987611595653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98832f43-cdab-48f9-8a5f-6ae849131ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51d3068-913e-4a37-a06c-f583cd227bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85546f48-c161-4734-a378-ad0bd1a38dd8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8572d4c3-e66a-4133-a1f9-0c023d9373ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b960a698-76b2-4885-bcdc-3b305574b91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3a4b53-2dca-4407-bdd5-592257bc6412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e13f6475-3799-4714-b524-d431d4ab832a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3530c1-dc0a-4024-bb60-7fce29d6a83d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4454b492-1423-4dd2-95ab-f92b28efffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6157a8a7-3063-43fb-8727-622afc03f81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7da79c0-0483-4c47-ad7d-4e1aa6d0c614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1f0be5-d2b4-4214-818c-eb46a0425c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8cc24e-45a6-4cc0-861f-c1c138ac72d5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e5ddc8-d23c-4ec4-b66e-a165edabe793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4687719-0f15-4f6c-828a-27b8ed6d541b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afacde14-4e67-48bd-adbb-d951d8ead583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6353e00-7c10-4db4-a817-a3dcac43b484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f8e98f-2791-461a-baa4-dac35164c05c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cba91f-45f4-4420-9388-e64052001a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cc0e10-64e8-40c9-9c76-2f9354f8f692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d48c90-a536-406d-9e94-3c017702ab13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d333b5a-daf8-4d68-af9f-d79c7a02286d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f01308c7-d730-4571-9341-0c157ec138a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "077b114c-0615-4d81-9437-74992d7f96de",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc0ef88-3621-46d8-b0d9-c87f928cb138",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ab104e5a-c8ee-48a2-9a49-c1565305ba6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349a7ce0-f244-4950-a119-294f8839cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be0760ba-7088-4294-9089-9bdf7aab3f8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cc47d99-363e-4f7d-9e59-365052f6f4a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c418ee2c-39a5-4cc3-8b16-96993bde34ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4db96034-b431-41e3-9be8-6737612bb18a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7413e40-b162-4e48-bef3-1a34deacceb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30f864df-f69b-4c21-a668-787d943f7017",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bf913d8-dab9-4307-aab4-e96cc618839d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77f67e3f-6838-4818-8544-815ca09acc00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3af5bf77-1808-4fca-a74d-0974e14363f7"
            }
          }
        ]
      },
      {
        "id": "bbf3a2e2-0a22-4c81-a29d-c2474b07aeb3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "11a0cb45-d421-4b58-8cfc-ae23fbce4d82",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3981053-b759-40ab-8df9-4073ca5d54af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7933065d-3556-436a-9524-92656a246ea0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88026ee4-6e65-40a9-9ea7-f93baa1d551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8047dc-6a4a-4b4d-b027-13beb874f685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d9e123-0bec-478f-883f-ad685c7dfa65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "de29ac4a-8142-4e47-8d03-534b11426c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c3c8e1-f820-4b69-ba41-5524aa1a6de6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62c91bb-70ab-4c5f-acc0-d8ef126519a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74eddcbe-022e-4fe8-b2a5-508721ca4bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbcf5c9-c93c-4942-86bc-d77a11629948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efaf9fb-8669-4441-b615-086ed6a2269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c818620-f5e0-414f-8ad3-fc3cb8096161",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3bbdcb-7182-47ab-a91b-8b9d45601537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3debdd53-32d2-48eb-9873-6ab46346d4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a334fc-59fc-46ea-8122-fd8b7b1f2698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c97e3788-a689-4653-be4c-f401d7257a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1126e1bd-5524-4bcf-a04f-39e63aa3683b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f940d3-d104-4202-94d6-3bac62ead08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4e66b8-004a-4298-9862-5d8a7bef3b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1f93e9-1666-446d-b980-fb31e52e93ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "932bf56f-de90-4b92-bb6b-d0ec1a1bb1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5871c267-932f-4247-87af-5f5a83a96c81",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec5d4e3-55e3-4010-8b42-7f24926a1a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0117bdea-7a6a-4521-9b3d-a84ced463b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a07ffa-747a-4016-b06e-f093c9b330a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e310fb26-2caa-420e-8cbf-699a2d65515b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dae1236-4b0e-41e0-96b7-f6acc8dbbe91",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d7930e-7e6d-4428-9a47-e56f4b7e6510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfca59b9-ad38-4766-81d5-32f7af4924de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9171a434-4825-4802-adb6-62b37994f634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b045eff7-1f80-4f26-a563-813adc6c3e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5081c0de-41e9-4493-b3b0-baeaa37516e7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f7e0ce-3c7b-4bed-932c-89c28dbb4498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3758ad1a-5c94-4a7b-882d-7d9f52aa42c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1d22b4-fbaf-4bc9-927f-4f1d67ad86fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd4538f-1dbe-49b7-b1d2-baea02e9ed18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae697b2-f18a-46b9-8542-8b67ce8819c7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f983e8-dd23-42a8-ba5d-929f53b531b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b75ce9-391c-4b95-b0b3-7222077e6161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e990350a-959a-418a-8309-dd6c3f17807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1a7792-8bf0-44e8-8020-1922103b938d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019cd041-5ae2-44d4-9917-27093d2479af",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e4f42a-442b-443e-950c-dbc10556a20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd15d06-3a69-42a4-8cab-4711230ec9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2e45b5-6a90-4f70-8144-c45da8e46405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3a59e-e3da-492a-8051-605e231308cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508ab7cc-2533-44f4-9ac2-b9befd1d1e4a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8cc5fe-2a01-4b75-8fe1-d63d60bce275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4feb8c7-f964-4954-aa36-6cf974b90c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd2cfcf-9bef-48c1-b227-48ed0f750dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce1dd07-2f28-49d8-b1bc-849fbc564856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e99ed3-154f-4dba-8b4d-caa99fe4b23f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d6ffec-0c22-4532-9830-bf1fbdfebe20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54cb028-77d6-4484-990c-cedb4623cbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c31be0-ef9d-4d41-bf02-458b16bd4867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1be90773-e453-49ef-82c4-5e34aab3f2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3f320e-7404-4f06-8a4e-756088b772a7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e1e53f-4eff-49db-a99e-66d9bc44dd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9d7d9f-9e9c-4e60-865b-e284e8a6d042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3b20b9-726d-4cec-9be9-2aa90721e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "994e2102-036d-4bb6-ab0b-9bc0fa8b5e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6670c6e8-483c-497b-9a63-3441dedaebc9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9bb7b8-610b-444c-b26b-964ac9eeb1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672a154d-7075-442b-bce3-f8f89b245ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0b317e-f991-49e3-af34-2c023b9a2216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7920d6a6-df7a-4338-9d54-23d667a23ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f7aa52-fe82-4f30-be92-c6b4cd080bb9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a6164f-94b5-49c4-baa8-2797fe0ca3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573fa474-019c-4c83-800c-3c4984fd8fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d58566-c52e-472f-943b-3ec85fcc69ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "58c79d95-5df8-4a18-b7de-cc8195bf7f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e613af8-2921-4fbf-9978-dfcc87a7cdc2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923e7c55-b2bd-45b1-8737-6b5ca45e75c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f34bbae-7a39-4241-8e35-f45e1c2c323e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5233e77-dba5-46b0-be44-d2b7e4c227eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e68dc0fe-ea78-42d9-b737-08f7931e657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76003851-dcbc-486e-ac2f-7ffe7b62783a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31641006-c581-4070-8514-3cedfd681767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b44020-c592-480d-a683-51d9e2587357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5189eb42-12b7-4118-8eb7-b7ba974f1cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d387101-83ab-41bd-afe4-cc7eb7f59098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ccff08-9f6b-48e0-9c01-0678d3743470",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe8d448-ff8f-41ab-ba90-5de9a090c220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3b4385-d287-4efd-a218-b0801038be42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b969424c-8c0f-4bb9-96d3-855c5b0ca7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a19f0ca-c9d8-4ddd-b20d-18ef0f653082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125ea77c-e921-4274-a3d0-e869e856dc39",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7234a3c3-c740-4e5a-8676-0b29cc624a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04eac691-e8ca-43ff-a82c-a8e833b190df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe49086-0e6d-4f0f-8bb1-555505be8a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7687e753-85d4-4ff2-bf46-ae19c78643ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f0b667-82da-4c5c-a153-d9f1eb3a2c72",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928f333d-5c77-4c6c-a3da-7ce711f1950e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fbadbe-f87e-47ae-af26-9d4d374e7bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d615939-93fb-4167-9f01-714bf6eab68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a36b13-704d-48c0-af7c-a3d3252137eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9c6260-f0fe-43b4-a5df-746fda6aa048",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c748ad-2066-4007-af7a-d816043f3db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a911e5-c572-4253-a870-4f656b7a8091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a42a4e-0082-4df1-9276-3a44c505a4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e4ce3e-d73b-4056-8a07-941fc6d818b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1b2732-4b1f-47a3-af29-a49ea7c7ae59",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926b32af-90b0-4c34-aa0e-53c97fb3b638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f48e37-9a0b-4571-86b7-8b5349c14c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ab79c1-7936-4060-a3be-4d02692aff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80744529-88cc-4505-8c22-dd0e7e7ae5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5effd7-0a1f-440c-8c80-c3dd9573a5b4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a449bd8b-d874-4b58-b7db-738b462f5b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015a0dea-2d95-4d62-ae39-4d9b922db26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4447c3d2-e3d4-4a7b-8d69-d92a015b781c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5afb48d-8049-458e-a117-2939925deba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57de1144-af47-43ba-85a3-0f5de312ea2f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6918467a-94d2-482c-8de4-5dfb5d4193b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec7fd0e-f05e-41ba-8eab-399daaad4bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b190deb1-e89f-4cd2-b0c2-fc237fe0e191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "823b5d9b-bc2f-4863-88d3-0173205c85a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf05ab3-c126-4f15-99f8-d6359cee1676",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10855d98-5678-458a-bc79-8172dbd054b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3ecd69-133e-4464-87cc-29cfe6884f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af136f-00d9-4fe3-8334-df54b0cfcdcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f54c0773-d2d6-4d33-8c2d-d642d772b5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25c30cc-3523-4e1a-b010-0c1d39d46c0d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b518c3-0249-4e63-bd2c-d5f84e93754a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8376008c-beb7-4cb9-800e-7849e0b6ac7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50be21ce-5fe7-4975-af19-0005df70518e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62ae92d2-73cd-463f-b394-4decd6ef4569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acc3b36-fedd-4fe8-90b6-ef11f0a496c4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cf465c-8352-4991-bb61-72e93c50eea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3202b238-ceb1-474d-bf55-5b2b9545ea66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ff7258-e6f5-4b54-acf7-e532858217af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aaad169-08fd-43f6-b548-f046f9cfcc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f95f1d4-923c-41d3-a360-9f9d523df82b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff2e639-6ee6-4e1b-a985-c2c40051533f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b85dbd-7327-4a04-ba35-a1e309f8abb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6522bc2d-3efe-4246-a595-95c2483fe06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beb7271f-5f36-45ce-936a-4efcb4aa58bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d690c-4781-41ef-8016-2e24551f07b5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4649ad90-9995-4c44-935b-a8f9e4874bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ed28d1-3684-4cf6-8cfc-ddb996f7ccb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d308b91-8687-4b77-acc9-cedf28514163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9503b783-d964-4b94-bc8c-5654e7ee2dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97a28d7-cce2-42cf-95e1-6429db2fafe1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6551cc0-ea04-45e2-89a3-a3ae444f4de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668565f3-0c62-41e5-a614-acb3179379f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6361f40a-6acd-4ae0-a5c8-1fed18b599fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ecc5f9-6593-4b2f-8890-49a71cf66c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94df4508-5c76-4557-b981-199a48ab1b71",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0147777e-aca3-4bfd-a1aa-cb9cd2eff1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea718aad-ea20-47cd-bd9e-0b8ee7d7b54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f404cc50-f356-4565-b5e0-541c285fa527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "770016c2-32b1-42b2-823a-ad162baae70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67fddd5-e7cf-42e6-ad6c-9e7329967768",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bce4c1-c78c-46b3-9da5-455d5897b317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c58281b9-2004-4f00-bb46-ff345a2cc48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dc453b-19b0-4337-8e4a-f69056490229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8be51015-7fbd-42aa-a0fd-4e4697786237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04598a3e-b06f-4d4c-aca9-e96c44745057",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf16fb1a-2fef-43de-9bb2-6cfebc490014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a656d5af-0b98-4304-bcea-2ccf47e24546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36c3f9f-f796-49d4-be15-cb8669b3ce3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a787081-a0f4-43e8-87e3-98154e0506db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a545203-c13e-472a-bf73-4da8fd020b9c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a938dcee-a302-4c08-aafe-c371b1187665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7167a94d-a973-44d5-978f-7c7c3e44c06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e6426-9ade-442e-a1ec-fccc801cb1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89b6ed91-3668-4b42-996b-924702aaf5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a34cec8-999f-453f-b25f-8aa9c2be8f2f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bed219-82d8-4f0a-a831-140b619cfd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c070b73-b6ee-41f4-bed7-91812fe01306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04783aae-fb03-4c33-b132-19a8b21efd0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58460c1f-a341-414d-b8a0-2f5fb23fd6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d239f8-cc57-421b-988a-114be7eccf15",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbd452e-b4ce-47a8-8ed5-685744918486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a3955f-e2ee-400b-8f3a-2ec1b95b41da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c20dc2-3ed7-41ad-bea4-2b24ecb32892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8390c7-f03a-470d-91cf-83452ca72fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09015170-eedc-40a0-b4cb-57e7aad243a7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99482c6-b192-47e2-b7e9-fec898fb0db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff82db1f-9981-44fb-b600-7a44ef321898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ce631d-73d8-4649-a117-2c51fd2f0305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3879a85-b9ee-496e-8f38-ca84d6e76b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247ba1cb-ecc4-412c-9ba3-3a891fda2244",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2cd757-a345-456f-bc0b-f8dc837c12b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5edd6d-f17d-4bcb-926a-ea84823f09bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c7c2c8-cb7f-43ff-a2c9-ae0dcd12ebb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e16fba-3e26-401e-bc69-04a3fb7e8af2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cf4dd11-6b00-468f-b2fa-df36d5d36f81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d67e3e20-82c7-4ac7-879e-d63699b049df",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abe2e4f-7ca6-4bc9-9b4b-57867ea3d02b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e50f734a-265c-4528-9874-7c8df07916d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acb4a85-e0e9-432a-9cc7-408f6e368877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebc36297-2544-4c2a-aae3-0d51da42e017"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9dc0abc-276a-43da-b44c-c403a2cff194",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06f6c20a-ed2c-4599-8893-ab4b10841298"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e53aeb6-e0e1-4ac5-8b8d-00909855fb4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "647cce65-9e8c-40e8-ac72-06195aaaacb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a3cdccf-317e-4b1c-9792-2ae8c5756662",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dede9c6d-199e-43be-aefc-9ce806948ab5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f6bfe57-aad3-416a-b6c1-234dc1c0aca4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95500838-747e-4a0d-99ee-50e0d00b761a"
            }
          }
        ]
      },
      {
        "id": "4b775e0a-5bc0-4c37-b56d-acb0cafab20b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "28be60ac-271f-4f9d-b73e-537ec329f621",
            "name": "Negative Testing",
            "item": [
              {
                "id": "beac4037-01de-426c-9691-a643c9e11079",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9fe2cff-076a-4b4a-a73a-b8054ca1f33a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ca4490-9d6e-450a-846c-1465bafdb25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f204242-fa98-463f-8e73-7212fd54d5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b553e1f6-61f0-4f39-8a69-92196c62b4da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ddbb47e-ee01-482b-9bf6-78842093f14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4846c2-f8db-44af-9913-33d495e519c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6703de6-97cd-44ea-bf48-1e781c5ec240",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5eb438-d40f-4938-ad84-436b8a4396e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a3b884-4673-4b4a-a412-c79c17e02fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dea8c3-1550-4200-8dca-70087823cca5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506a44ca-4161-4817-83ae-3682613a3d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94e05d3-7c38-4b72-ac77-a0f105e16614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c561d643-c69f-4d81-b449-3b3aaccccb65",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d5afc6-fe2f-4854-92e7-44c4de58a7c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e43aa8-9363-447c-a7d2-318b6dc04e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036a1da1-1b7d-44e2-be97-06fa0ed40d3d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3954a0d9-0584-4256-9a40-188d00f523e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fdfdeb-08bd-4f47-aa60-cb9d92d4c6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e558772-0d44-40f8-a81e-bb2a9e6c5e47",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b573a6e2-5d83-47ec-858d-1c2df53d2940",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bc3987-c65e-46a7-8c36-ab0accf8c6bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3beb061-873e-4a68-a4b6-bd45c7d6565a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ceeed6e-0775-4a7d-a9f1-dccdabfb9195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96ca7ff-f0b9-4432-9c86-ae418f8e102d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b94d95-8cb3-494e-b6b9-029c7beb3005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd875c58-1cda-4d51-b9c8-6b4ee9bc2c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d8e92e-5214-4092-98c7-5a3da6109ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abac0999-9aca-4aad-8ee5-c7c30e004e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f62334-8b5f-4124-bb96-2f32d6ac7307",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bc1c56-98e9-4962-bc10-8dc9f529a768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4f300f-ddfe-42f8-91da-25671f2c9956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca94371c-f9df-4b76-80a3-32fbe5b3d3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b350f4-9f97-4c7c-853a-2b0a2c53354e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c2ebc4-760a-4387-a1f4-702877ae7f20",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc58c50-6198-4497-b4df-c39158cb341c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0548c8ed-73b0-4891-9f10-3920eb8dd7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165ae004-d396-435a-b304-891afa244ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f017f040-e3d9-47c7-97eb-824a83cf6740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7558657-3a88-4eef-8a7d-a9c536dc6b22",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f29ef04-dc11-4612-9aa2-215043c3bdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5917f28a-d0a9-4646-a6ac-b22c9bb3524d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f443bb57-2204-4e03-ae7d-0317af32e9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775cd22e-13f9-47a0-86c4-3e637b2e4139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5568a99-34b1-422d-a1fa-abd3eb1b9bbf",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84df277-4060-406c-9f16-94600e208b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94168807-eebd-4f19-9362-c7ac984d9921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8299b50-c195-472f-b6ae-153486aa5c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c38d5ee-f0d5-455c-8296-ce4f3c986bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe5be10-a476-4c57-9ba1-d2c1e0fd4eb5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdabfb1-7ac9-48d5-aa71-81d668176715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a20cc1-a7a8-4b7c-be82-d7a76a03a92e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b88d8f-a937-4e3c-a49e-de5e4ad05793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c777f1c5-4372-41ab-84af-6cf67047b7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6824607f-3b3c-41f2-b505-241d1cbb52ba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78d57f9-ece9-497b-a867-781dc4ec00bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a902c47-9272-4f96-9ed0-db2acaaa3a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be5d65f-3af5-4a45-ba11-4d94a899159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b088ed3-61a2-460e-9500-afac6ff8515b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c587b04-b1d4-408e-98ad-606c46e150bc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5dc067-5c8b-4496-8080-62fbb7ceea72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971f6d27-717d-403f-b617-cf4699e2c662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4767bafc-cb5a-402f-ab89-d1fed59b92c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfbf709d-8bc0-4a87-a33c-01c0328ab10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea3ab89-ea53-409a-872f-81606ee790fb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63137350-b3cc-415b-97d5-331710c749da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af52df59-d8f4-4d9d-9b46-ba99033315c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf70794-17d3-4f71-8589-0c0f347100cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb781979-9cab-4baf-8104-dc8b8f304d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d222dd-4e28-4b17-ba14-d4188d498823",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da22c37d-c150-47fb-9d77-8f4486fad0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760c03ff-cdbe-412e-ac53-bbe07ce5b73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9549ddd3-c89b-4a17-90f7-c7696fda4b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d814bf-f766-4776-b12c-2df407f1fc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d449f7b7-9c14-417f-8e74-5d4425a32a09",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc53c20-a162-4332-9ad6-2baeed67b829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba587517-adc5-4e40-a810-bb42a21c1555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b93896-267d-486c-8a2c-fc56e23638c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3b8093-5498-48b5-8d95-9903208bf53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181b8e77-4639-4057-98dd-bbf6fec7be20",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1563696-3795-40bd-be28-cd07c7bb9838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409fbadb-4894-42ec-a7f4-e854493283c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a238bb7f-dfa7-4c02-a5e2-dcbc03224d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "207a3f59-349f-4758-ac8f-ce67adb2d2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c730c83a-7674-4111-a71a-71abb3e88d9f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768cc916-8245-4147-90a6-02126759137a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b565a9f4-4364-43a7-9f41-13524fb5f740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1a88b4-e3b5-458f-844b-d79a3034492c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a13284-7d69-44c9-ba99-cb0e81c612bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a144a481-9951-4aa3-b016-400dbf36ad32",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ec9f9d-b71f-4c02-bb73-588ff4b90d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf1bafa-273d-42a2-9b8f-a0d483fa0749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d420c49-2239-4647-b243-8b4e74ac5bb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95c5d45e-b620-45b2-9b5d-788375a2268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f5bcf7-863f-4b4b-a5ec-73df34b6564a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca43f1c-fde0-45a6-b3c6-fd955a57a883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f445e517-c511-4ae6-a866-d193694bb9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4482cb-6c68-4fa7-9659-bed0c56154a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ac5842-7f20-43f3-b53e-87b2b805b02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1225b1e5-4aeb-4cdf-8bd9-c769ce6e816e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8b286b-3e09-479a-a9a6-70ffca87f46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14600603-96dc-4ebc-8638-5a23a0c41e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2822098c-9321-4bf7-b800-94f92bc33e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4ce383-1c44-4d84-aa14-4dbafb7942f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131d4e50-97c6-4008-9fbb-3e6417cb3cba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3199ac9b-26be-4350-9af6-b92fe58be8dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43a9fc6-7a2f-4511-922b-c4bd50066c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce60f7b5-80cf-42e4-9659-fabd4b6abe11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f8132f-8d2d-4097-8813-310567d51293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06dd0226-a87f-4e39-bb5e-7e87b1300b2a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81be698f-0a22-4aee-902d-35d5b678ad9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a4fa2c5-fc0e-480a-9bbe-f9a0a51295bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366fac31-abcc-4352-bbf4-367db713b16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f4f140-d11f-4cee-ae70-fefa2ffe0874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05928d1a-d126-449d-af69-9f5794cd7ea7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a8d18c-b9eb-4b1c-a12e-63dbfe6bf07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90522e1c-0f36-42cf-aeea-041eca43626b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe274405-46db-4d70-aecf-854f03282194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc73c41-9f8b-49e7-9ad2-d97657ebfc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026fdbb2-e669-413b-91ee-561fd2fb3f43",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bfe187-3b22-461e-acec-88d900cb7632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7178930a-aeb0-4abe-96d7-6b0076c75104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9a3d81-954a-4bbb-bc17-e6243c3e261c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0d4bde-5b37-44ea-a7e6-b7f4147bc14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2efa34a-840c-4524-b5bc-1d72e3d5ebfc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17678c75-3656-4065-b055-de8ea8bd28a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c37e70-772c-4d2d-a9f1-718d65cd4b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "140c7780-b4cf-490e-a3dd-99c72c1335ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c5eee5-b205-4e8f-9e0a-5fae703c790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b3e38b-1cfe-4e15-bc90-2c7c7e01f429",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e37ca81-1cb4-40fa-b719-ec04bd72067b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d7d67b3-60bc-4d17-b222-b5312f55d9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89509e7f-a167-47df-be2f-4337467a446e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6e804a-deb9-4cbf-8255-5ebe660fff6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbc74a3-8e7f-4f55-a093-8d7cbaaf1654",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0297227-4080-4f6a-a058-6b46c55ae193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e6eb198-1ab8-48dc-b202-b9293c7b6727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014dff87-ad3c-4c2d-9922-460a4554f92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74494ad-c650-4c30-8977-bf96502466cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3438a578-a710-420b-8c12-f02d7605f425",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4d8e6d-1ee9-43ca-bb99-4d57a821e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b64c0d9c-6ecb-403c-a8c1-be577f5ed5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57282b76-c50f-40f2-834f-2dbb72eecfaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593dfdc0-ef3d-4b70-b639-93e689faa415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992ecc65-c836-4d36-b188-73938a893c2b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed00470-6103-48aa-a4ef-2c9bdd167848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e09d0cb-b775-4e27-9798-8b55807ce2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3ba280-1808-4984-b648-c8a3204b5bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc08606f-142d-453c-a408-f63b893a8a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637bd568-26f1-4382-b96c-6ec665f1a9f6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e4db96-5598-46c1-8a23-e7d0436021dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86312c43-0813-482f-b617-a76df1ab736a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7ab431-d91c-4b94-b031-994cb1adc1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b3c796-fc5f-4a89-a9a2-c039c1eac6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cf4f0b-75f4-45a7-8b20-c52cfdcebfba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e92172d-5564-40cb-b620-494fa94d5d95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df00b21f-5146-4b89-b0ee-e81a7e69ef90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023ea2a9-19a8-4f66-96dd-eb303729b0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc81d89e-4863-4e4a-ba73-2f274120891f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2579b032-a425-4e1a-9954-ecb4fa1b86d7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e3cd49-d155-48be-95e2-487cbdac79a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a4f47f-a5ca-406c-a10c-d656f5ae4394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a77aca-dcd6-4829-9e05-8b37c1a0dbe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e384030-afeb-45b6-b8dc-6b7e644c9bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6793378-53c6-45f0-91d5-342e8ca0abe8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8147310-8c3d-4527-8efa-04869ad23446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0696bdaa-29ea-447a-b09f-99609463206b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ab640f-7e1c-479d-9a5e-14b1044f5ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99547a68-2e7a-47d1-a672-d8f516ddb96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65319fd-83a3-4b41-9d8b-55f0f1afec2a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b368ba-8e5f-48fd-a849-a0352c725765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe3dd16-cbae-423d-99f8-b406d0aeff7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba051285-2949-43e0-8baa-24854f612b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3407b737-0cb7-4e6d-8e34-187afc1b9e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb620c7-09ab-4607-b604-dbabe46b6544",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24645dc-7b3e-4e0f-abf2-a9c4e5b1b8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a6ef7d-8c54-47da-b030-4091117edb30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69eb2ac8-22e9-480d-9412-1a6f5ed4ea2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4acad7-3dc6-4c73-a35c-4655a358d119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb46037-4e56-4717-ad25-6b363144f939",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acad1d43-a665-4dbc-a64e-852ec4577cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6633d21-3d33-4c9b-96d8-d3d5bada4fc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e90357-138c-4a77-b823-cb234e1d7afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e19fe4-5c77-48b6-a3ac-a8f8094ddd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2c5b41-b963-42d7-a3f8-223ff1d15597",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f5f54f-bc66-4e12-83d8-895204c7d7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65f3c72-147a-49cf-b127-037fa3a561ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f3a13d-ba18-4bdd-b3e5-d9e18301bf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d6850f-5b39-4f1b-b435-748a3040f93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5987e944-0318-4302-a1fa-2ea57d10e5d1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb3e67f-bb8e-4010-9f05-56c06d1b1326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8493410e-9744-4e8a-b8e5-ab3bf598fe3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89764372-5d50-4512-a0ab-a79ac5064697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad5ad08c-2dc5-488d-bb56-ed7db908ad9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00db2df-7c7c-4a19-a6bb-f1ae47892c2f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6167840-f952-48a4-b402-a9227a580b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f515e81-da09-4d9e-a2ec-3c5d5f438661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e2bee1-4508-4db2-a07c-1441bd74f59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc689df9-33f7-4422-ac4a-bfe330d082cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f3e10e-49d1-499d-931c-5acd965ebf74",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99ff6f4-7970-4d33-8870-3550e13c4abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dac080e-304b-4e69-8f4e-545a31387e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9397af2e-a921-41c0-9072-7d21158767da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f462d0-ca7c-4123-ad6c-3a32082ee367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcc182c-6213-4c07-896a-4236325cced7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee3f8d1-a25b-4cdf-8a77-e5202aa814da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba055c3-374a-4213-9214-462affb06a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae743efe-94bc-47c8-b50f-52669ceee57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72edd212-9158-47d5-8cea-f6593f9658c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31a9dc3-9ea0-456b-973c-75146ce90645",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3b20b7-0708-495f-8974-34f9b63eac31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b0bd99-68bf-40a3-8723-fa8a6dd2c28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5784a2a4-2a4d-4c10-b04f-1029593f2ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd7224a-02bf-47dc-b300-1284d454c789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32607585-3b56-43e0-8bdb-61fc84c5be94",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b12fa9-1eda-48e9-a3fb-34319b984fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c84e88-94df-492a-9f3d-5ea49f0bc41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fa7113-b27b-4500-a94b-25fd565ab189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc662028-3d5f-4a34-ac4e-dee1f38ca45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762ecdfb-d53b-4f70-ac4f-41b5ffa7c347",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bded65-0835-4372-b5ea-fb5e806e60cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87591e30-094c-4312-ad3e-0dc4f1e40fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63489c54-8009-4d88-a5a1-f433598990cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7800e392-6d21-4454-9b71-8df9d00c1bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f572d13c-3cb0-4bda-a940-f4ab8a04208a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d2b535-8431-407e-9927-5f28754d120b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dca6ee8-174d-48d0-92e7-4c70b26ad25d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca693e4-7df5-4aed-a2e1-a40b19f0a40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e63a282-1e6f-43e7-a09c-d9f77bad4096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de2a5c7-c4f5-427a-8eae-f117d82a5c9e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141c1919-8159-4b78-871b-e699115e889d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3318a8ae-46a5-4f6a-b713-490f2fc89e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8dd5b4-1343-4070-9222-c6a79085d94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c723f424-4d94-4140-9242-f9fd28a682bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f53485-d58e-4877-8dbf-0bf3ff43b2aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a89e99-15e7-4859-a948-09091f5f0da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5978e98b-b92b-4e39-a4fd-a3df65854dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfab426c-5ae4-4297-bd0c-f5a86314a0ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae58739-65e0-4ac1-aea9-355907109946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb97b263-9206-4d6f-a847-f89a50e00665",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c8e265-1b02-4be6-b756-35a96196481d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99f95a2-b7ef-4116-9723-f8a1fa44ca89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1abe475-322d-4cdd-b9b8-9b24a98d772c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb77ab79-7f70-4f35-a8cb-80bc62338eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dae34b-187c-40f7-9de2-7e2c2fd673b2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836a97a2-aece-4b3b-83c0-70508e1119ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99476e84-ae6f-4ed1-8f3f-a53b5fafc534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "765d1690-98ce-45cd-be9c-43541102f557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8054943f-fc8a-43f9-af62-3a035026f267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162911fb-b63e-46e1-8e3c-43a3861b177b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8eb317b-271d-43d3-a8a8-cd473af98c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3ca847-0c66-46f8-beea-8e4e7c4942be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eb1042-40a3-4948-82c6-14ccbce73831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b935adc9-5142-4aa6-93d8-9712e627512f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b10b969-10ad-43c6-a760-051eb894bab1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17daac3d-c240-47aa-b914-01b2bd4fc81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29774e76-1c72-4bb4-8171-91f25ad5c88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec925b02-af12-47be-9a70-0000b9eed328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3e7e3c-533d-4078-83fe-39bb0aafd401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdbabbb-f485-4cea-83a7-1b0989f931c1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155b5ad5-5f92-4bbd-bc97-dc8433a68ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b883fb-826c-49d3-a3ea-8fd74424e824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c524494-73d7-4db4-b381-230ec60661f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7eb1f8-0299-452d-b680-558fa27558d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a3d6fb-cb51-4495-9e3d-98ea2c0a502f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b303b42d-96b7-4ee1-ba8b-ec507ba8f632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8bc4a2-e101-4b4f-affe-7e33e4620464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311402c3-8f02-4b80-b5bd-d991e22a584b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db8a416f-a613-4502-a828-ef231900a211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb9a1c2-b8b4-47a5-bd25-54e336ce28be",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295409de-b721-40e5-8821-8f7cd704c967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fd1b77-46a4-4447-bcd0-2c9657f58f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "174e944b-6181-42be-a73b-51dc2f349654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba558fe-c69b-42ca-9b90-beeef60dd1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867c1afe-5f3c-4e4e-9cb7-9b765f856b04",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3aee4d6-e240-46a2-b39a-1ced54194d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c4b9ae-0021-41cb-960b-8a4da0f682ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3526c4-2c64-4b47-a635-ad61c5843032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255bcdd0-14e5-46d9-9213-4fd242af1246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236f9ea4-3da8-4022-bffe-892b2a95404a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca005fcf-8781-44f8-9d4d-4593f3301ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88000a3d-5381-4ef2-8e78-44dbe123d82b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a8063c-dcb9-497d-b589-ef200595ddfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e48c97-221b-4e05-8da6-1cd91be79ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febe5d6e-9d66-4d53-a9fe-24cfc5618c3f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecb33a3-d1ad-442b-9a89-9b9fa7cae1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291950e3-90c9-4b96-8c7f-da78d1b9769a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df502df-b78a-42f0-bca6-fea94cfe598b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da424dc-0e7d-4594-ad69-843c19632cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36bea00-19d8-4d1e-9de2-e46aaed4d483",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba2ca05-d25f-489e-b502-e606626e0382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7477cd-f0a3-49ce-9e8d-c45feb87a420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328c2f82-5d09-4a34-b8ec-6e24aca4e028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad0fda4-9064-4aec-a23b-e259c97036d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0461a1-562d-474e-9958-7da954fadc8d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02806e5c-839e-4c70-a7ca-47cfa9f179c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d182bb5-786b-41bc-a012-dc90bb069a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227a7d53-4885-4c8b-a96e-18c9a9b38b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c4a8ab-4bb6-45af-9ae5-6e3fe425867d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bfb976-aff3-436f-9377-dca5be068fe0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559d7d23-f724-43f1-9576-366e2628c9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e297ea2-26a6-409f-80fc-2c1e2bd9a8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4cab2e-2a89-40b3-bda9-f1ee9721a376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab372d62-32ca-4c37-894d-528373e0833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904a43dd-af38-4342-9766-9cc01ccf8c0e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffaa513-4fa5-4ce3-aac3-2b646219a594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea6362e-b7c0-4e6f-a519-539cbadbb4dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbecbfee-eaa7-4e80-b9f4-67853e43b5ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc46917-d8f3-441e-9c54-1a08c775489b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf44795-e9f9-4d77-b9c1-7cb4c96a513a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc41a74-e2bc-4392-a7ea-45953a2c98cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70a69461-9381-44fe-8bad-26ae3babad5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef06de-19cc-4af8-962f-ef09988ba1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97f84af-0b89-487f-b162-cca1323b7378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc0d355-b52b-4a40-9d0b-4c1c2eb86264",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b280992-7aa0-424b-80fd-74a56af4385a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a43ebf92-3995-4ba5-84cf-ce771b8b74ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2abb4da-68d6-4829-aaa6-b8fc14af4d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9376a440-864e-4861-9db9-e5e8a3ccde83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fffbbb7-3895-4111-a702-bdfa6c88617e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb43661-97b0-4169-b6bd-10e990d1fe08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb456df-3f04-4ddb-b117-2d6ffbcd361d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a10948e-038b-4437-b586-e346d1e28868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc5aef3-7668-4969-8681-aef413ea68f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbddaac-d6fe-400b-be57-1836908c3a21",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1086f0-e57d-48c2-8d2f-a39e17f9ba35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04f0e54-de2d-4a6a-bddb-6740001f2dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e11aa22-19ab-4395-ac07-5455f868b5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a744eca-5b6e-46d6-af09-0646b73b5a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b8887b-e61f-4b84-a87d-1e1c2ef1f194",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e882d173-b5ee-4671-861c-2f112ee7dbe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dbada55-69d4-4bb6-8faa-75511648a202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac87b08-110e-4699-9707-85f32ab7f73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abacd690-c265-4569-9b4b-18752f6bc1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5be153d-ec2e-4c56-9fee-f4d2c45d8230",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17aa8f16-95a4-49d8-9604-ba9fc3a164f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beac88b0-5186-41ed-b33f-31787630ea57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab894c39-00d9-4056-bb50-3fe4b7e880de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d641f64-bb2e-4e6c-8374-78b37006a67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1917545-5696-4531-8c70-41ce1560698a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82ea421-64b9-4115-b015-9e67bdb8e3d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6908867e-045b-4cd5-b801-dbff2df1f9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e11a47b-a7ff-44f7-9652-bb36a0420681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77794fc-ac14-4193-935a-6f547d2afa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70c90be-9a5e-4f8b-9386-332859b9fdab",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f74e90-a144-4247-9153-b7ab22898204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d542044-b2cf-4250-bae7-f09e921cca06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a684a584-04c4-45dd-ae9a-a95c96a90744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1531043-3ffb-491a-a754-bbe635b6de34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef46788-34e5-443a-a8ec-4a6bce99f330",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cfc298-2620-4bc7-83ad-224aaf078f51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3506a3d8-b73a-4e5a-b622-8e6e41f89a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e678fb-69f8-4caf-8672-c3e79248db6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712307b2-0294-4e84-b854-a833ddf35139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f91d6d0-c2ee-4179-88a8-e8287be1b56f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10023f49-da39-4a2e-a68d-ec21e7dd3cf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "634c5e68-866a-4aad-9d9c-c95e8c6ab363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adc9a9c-e30d-4be9-8e2e-9e2780b6be42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f319b6-4060-45ca-860c-3f52806204b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635d3fe2-10e1-405f-bf2e-bdfc6a30bd3a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cc7fdd-6599-42fd-98d9-cd548b209be6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2cc8bf-9a12-4113-bc1c-ec23c8af1583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe9fdc3-3aaf-4bca-bf2a-48ba2b1386c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba70f4b9-37e5-4132-ade4-fd125e7a50c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b60199e-78dd-4f48-bd96-d13396850705",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "128df6f9-a383-4901-933b-6edff80564b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72934df5-f5fd-4541-8c40-584fdab83a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a01a734-1de0-4c23-8fc1-656a52db0f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25bde85-8824-464d-a20a-395d6e166da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3eceb6-a1c8-4632-80f3-8ac192bbae40",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab3e607-fe02-4954-8f1f-473eaa9a4ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96b64d0-9b64-4a35-9632-6d9692c11cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7089ed78-1f41-4cee-a39b-2effdcfc89d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da770ec-167b-42b7-9ec1-9320a26275ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7d817a-eed4-490c-830a-c5c7435c6975",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf2fcb1-f1dd-4521-9fdd-4e75897c3203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6821743c-2f3a-48b4-9082-e5ef9816fc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba732e2-71c0-4512-ae72-8dd92c7af03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1443771c-664e-4c96-9fd2-b2a01cf898cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c867edb-2ed6-471e-a34f-68789822f413",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc4551b-e943-45d7-81e1-ca1ad54cf24d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b502a7e1-f397-4901-8864-919881d85c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae747924-b0f6-447b-8cd3-47adcacb46e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc60f5f-7a6c-4efb-af3d-c2a1a75458e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc11e0f0-28b2-467a-a48c-149002cafe2a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772cd54e-4b19-4cee-8a10-f2dbd9934faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f99c27b9-b50f-4324-a86a-af3bc4fd6dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cfe675-86eb-41bf-ac18-67000ba8b7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f655cc01-b5e9-436c-b801-cd2460bb87d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af52d5a-9da3-4cc4-b03d-183593f53259",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35feabf9-7596-4129-acc5-e41e1c455b0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9ebf77-5957-476f-8e27-8ee9300fc392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f6620d-f60e-4220-9dbf-871f6c3c1125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484f4465-5a6c-40d0-bb0d-877627bda81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51af6de6-2faf-413e-8711-137257165fdf",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ad01c5-68ff-42f8-bc99-1580fcdb4c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0587f0f-796a-4b5b-a0e0-7c67723c36f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e89e09-0b8c-4ea1-923f-3c45ff4d4bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479dd532-f304-4b21-81dd-595d6d53cd6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a61b571-a4f7-429f-a895-659d2d4def85",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbcf84f-e623-4447-b461-22b7af314aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac942791-7f7c-4d89-a7a0-5e95ca6f5db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b355ebf-1cf0-40e9-bc9a-a3996508ba37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3b60e7-1cdf-426c-ac42-fc085de61106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9592165d-faca-46b7-b3ea-8a907930a0bf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62d269c-1162-4876-9684-a6c43020a3da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c7ea50-3ea2-4042-95ea-47310f715956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9599e7a-fb29-4d2a-a711-576184564608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d464e241-2a84-4963-bb4f-6de1c7be7462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1f8284-937c-4e57-9457-f587af522e01",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24931fbc-f07d-49cf-8cc5-35af3c6d0e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8cd9b75-6fe3-4081-a50f-db81a8fe467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfec587-14ce-43c6-a6f1-efccd51de5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f8fc7a-871c-4a57-b0f1-7467b0e3097c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8832206-6395-4c84-a4e9-4b5497a6ab66",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a883bb6-98ff-43eb-91fc-e5c0cc1ec00d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06ba900e-33ac-4de3-bf5e-4643bb537021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b1cb30-c3a3-487b-ab0d-8fd3d86b94e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4163c5-87df-4d69-afb0-ce1a79cf9f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adb2fae-f64d-4814-a00d-f396221d07fb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da90815-83b9-49b5-9079-48c4da5906ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3556920-727c-418e-a76d-24be7579e8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d08258-910c-47c5-9a13-5d375527b558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636e8298-54a3-4e09-91d7-0891be85ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fd08f6-aeed-431c-8c8d-503c083a9952",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5206dcc-4a4c-4982-bfa2-c2ba23fe0b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994c95f2-f563-4884-9f29-d480ed6a97c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a186465d-12cf-488b-9309-108f0af52c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7676bb27-42df-4004-a07c-9f3f97884c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bca7f5-1836-4867-81d6-6e34fdcd593d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef475bcd-4a0a-4541-93b8-e2f683e4d2c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7002768e-5b3b-4eda-b442-70de5feb2b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b4c30d-de54-4699-8b3e-3bbe260394cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0de66e-f6fe-4f33-b59d-045a44d47657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e3a070-f634-498a-9c36-c2ea770d0f73",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7524229c-f32d-4ccd-8245-8bf5ea05f614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5af03d-84d5-4b23-9011-dcd44e3ed09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bae32e9-3e10-45c2-be14-bfcc9cebeb84",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3866e56-f17d-4fea-b35c-9e093707787c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e87a081-3cdd-42fb-95fc-8c67592282e0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0888f2b5-87c1-46f4-b205-97ae04c147cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccdaef77-0fd5-4f2e-9270-1d8fb81d9f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7172f2-554c-4039-bbbe-915234851a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def14e22-0400-4034-b902-1f9bdb34fa29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fa0725-3976-4714-afea-87d928df8e63",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fea7ffe-d89e-4e41-b507-ea05881b4988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf941f90-1cf5-44d0-8f18-e733bd05b1a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dd62b8-4f64-4135-9a5d-16ee9644f1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e652aa4-4084-4e45-bef1-065a19bcac9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab445e18-dc63-40cf-af18-fb39590a45f6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af3872c-3d87-4c58-a219-b2541b8f726c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbaf290a-971f-4bea-9d91-c10b352c3ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b2c5b9-1134-416a-a4ba-a966913758b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd9a2950-7a8c-4fb7-859b-73da00ed4c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a290c40b-e5b8-46f1-9141-e61573b2f58f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf83449-156e-45f9-8f5b-439660f6e094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2776586d-cf60-4b39-87f1-9b2824084e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbb7197-5bf5-4213-8e2d-0d668c8109c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fcafedc-fa9a-4f2b-b346-de9fcc9febd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1952e475-53ab-4e1c-84ae-032bd76cacc1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b385f2ab-aa99-49d6-943c-afabc973bb73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3373e61-1927-487d-85b6-40f010215d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e046a5-8292-40b8-b86d-a9a29c4783ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e784bca-fda5-4e25-a509-247b578c828e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9673b3-c9ef-41ea-ab2e-477edd676045",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c669586-8552-434b-9c88-290ebd24c6a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad8bb85-b307-4a5b-988b-1ab4ae056d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0881551-75a8-478f-96b5-cb0c4fbd8555",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f408be3-0aef-42de-bb88-8e6d0ca97bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c847775f-5e5c-435b-9947-8799ee121881",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb01c889-cc3d-49dc-9d41-e3d9fc18e8b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "129fd5ea-6491-4078-a5cd-f5eb1e25cc90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a055da5-4f95-4078-a8fe-87b9f6fbaaeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ccb8ec-8aa8-4a81-b0e8-7c0ca097da1b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97aae20d-5a75-4643-891d-8ac074e282f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a6f200d-822f-45f3-af73-88fa64d7d674"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d64cdffd-51a5-43ac-9ccf-09a3f3e8dd07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b6faf4a-969e-4cc7-a22d-3565659ae710"
                    }
                  }
                ]
              },
              {
                "id": "8edb17f1-e514-4110-900f-9760ae1b1d55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88abc1db-1570-4fbf-8f35-d682a0048027",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd8ff16-3f87-415c-9432-8201930b1dae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "87235177-adb9-43d8-8178-dcaa936b6648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7cb71e-0941-406f-af02-b60e4e6e586b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7f9f517-59fa-44cf-8f7d-4f78743ab089"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "775da250-e6ae-4c53-9da6-c6f7f148c217",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12fecc84-11f5-4396-9249-24da525035a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36f2079f-b945-4fa3-88ff-625a680dfaa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ab60557-d01e-4f58-a6d4-466d6b80c096"
                    }
                  }
                ]
              },
              {
                "id": "9ce61a77-38da-476d-9183-a93a337d52cb",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6f9630cc-d209-44c5-a35d-9585d4c83485",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b0b113-621f-462d-9b2b-ec79983ad26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6fb7ae9b-0d7b-48ae-ba64-5bdd313b39f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b99ef7-da24-4067-9704-1f7c374abd40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2d4022-9d9e-4556-8a26-b28aec7c6383"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5a7c10c6-a1e5-4f02-b9ec-7d643b2d63ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e494942-af74-4121-ab01-9cf9fbe2fb10",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8801cf7b-b172-497a-a8f6-1c74d23b2595",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9505513d-0e59-4560-8aa3-a629d1279be1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "434bbc74-f512-4add-a026-50cffe5c3514",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be3a2e18-c5b7-4d32-b20e-478a0ce44d47"
                    }
                  }
                ]
              },
              {
                "id": "dc737bcf-a27a-4603-b728-69fb8da7ea16",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b35cda7c-5926-4189-84c2-f4f6a468f862",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "450c7896-6020-4493-849f-cb32c2238801"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a827e4df-044e-4d1a-8ace-5eaecfb9f0eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "157cbc23-f169-41cf-80fe-6ef6196fe2bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cc5443e-db56-43e2-aaac-45d19a37c370",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0558a419-d309-4523-a542-5693d646c2e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b38b9d8b-d8df-476b-93fd-fbdfdfbb4f83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1444562-59d1-4b21-99de-852e0357da34"
            }
          }
        ]
      },
      {
        "id": "782d5aeb-dd88-4191-bd78-875456e0221e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c9a2c088-6c70-440d-be5c-857b2b253b56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ce7fa4a-0c50-4225-8b05-1343c5618554",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "145c9195-44b4-402e-b8cf-c11142395e49",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe742336-1519-49fa-bc96-e9313e666c9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d8187583-5234-49d6-9a64-1915de9b6ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647e0244-9297-4b6d-b172-42cd17e18d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0de25bea-7bc4-4c5f-8b41-a0128b8f2809"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a147b2e2-e59e-4d1b-bf97-4e10c9fa00c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fea05ae-862b-4514-b9fc-f19ea7a3f60a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "813fe8e2-5b17-4c45-9e13-516b97a0a69f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b962242-e325-4092-b416-4f003cf37e01"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21a5c30d-5abc-45bb-b9c1-10f105466ad6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fc0582f0-0287-4aa6-a3cb-3915df5b34a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c700544-500f-4535-a5c2-09087e31df13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab6945c9-82ab-40f1-ac28-3dc12acf9b95"
            }
          }
        ]
      },
      {
        "id": "b1904a9e-1597-410a-84d9-140ed73339e8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ee30b633-cc13-42e6-9751-8bffaa6cf096",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40c18455-f3ef-47d2-8d0a-814f78a8adf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "032dff11-0e14-4de1-8036-2135b9451df5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450631df-4007-4c01-bfbe-a497e619cfd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b93f4a7-646e-4f1a-801b-5386a27becc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd03f6c8-fd42-40b7-a35c-7f4a9d88ccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d12dfb26-0897-499e-b5b9-855f4872f6a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "465ff836-c957-457e-8cf4-7c128cec5756",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f73e8dbb-2574-4295-964c-4d2ed8f0869a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d371c66d-433d-4f63-9ac9-30ff5bd1c904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a559a612-f286-4511-9b27-fec456c36123"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e7ac375-f57f-42ee-beb6-b2ead7330f0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac62557d-0b48-486e-a05d-67c51e1d7ac8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1c782a1-59aa-47c0-8aff-881c97ace236",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ad0de71-16a9-488d-a490-674474785ddd"
            }
          }
        ]
      },
      {
        "id": "9fc1208c-ba6f-4390-ab73-51b699bde289",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "40009ee2-b6d5-476a-b6ec-d1f7aa0282e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9bb8a4a8-776e-49a3-aba3-8553dbafdd03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "047c4d76-2572-4621-86e5-1611c98bdff7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e215c30-02a2-44bd-bdbe-0cfe949cfa7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "391d19f1-0382-47cc-8905-7b21b028ee22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4eaaa7-8e86-4b9b-964e-bf74e4b0f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6530d8e1-e624-4bb4-a58f-f59e4498113f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30c40f52-4075-4124-a480-9c9919e17e82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0f559ad-68fc-4db6-ba80-682f59b579db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2992dc6-2cc3-48ff-8999-7664bb9add02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ed5a483-dcc6-4e19-ae3e-ea61201bed0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b5986cd-0692-4b37-ac77-c8f5902ff8e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e0b42ea-23b8-45c3-ab6d-4dfe64271837"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77677c5f-ae85-432c-989d-dfc82fae0dd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3018a9b9-2030-4f03-bb24-4894a09161a6"
            }
          }
        ]
      },
      {
        "id": "bfc55fcc-9547-4a7d-bc24-e60cdc80fcd2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "693df708-05a5-465b-8aa3-bfea750255c8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bd5df6a-ff12-493b-85ef-f4283a3d3dc4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "133d1a49-b213-422a-8828-d216b6b32654",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfbd5820-8c6b-40db-a5bf-82281ee6ae03",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f162c90e-2022-4d12-8a62-e7ccda291ea3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 93
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 103.42957746478872,
      "responseMin": 14,
      "responseMax": 1554,
      "responseSd": 179.41683301809778,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690504710756,
      "completed": 1690504755116
    },
    "executions": [
      {
        "id": "aba5d03d-1655-43a0-ade7-bc5026de6a09",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "efa74e10-5a8a-42c4-8ebe-7822ca591079",
          "httpRequestId": "3a019c9d-1fb5-4045-9eff-9c20aff89f2b"
        },
        "item": {
          "id": "aba5d03d-1655-43a0-ade7-bc5026de6a09",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "38ae6521-4a4e-4c13-9c4e-47f362eb90c0",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 0
        }
      },
      {
        "id": "88074857-3f8b-44bf-9da8-1b9f8961d7f5",
        "cursor": {
          "ref": "e5ef226b-d5b7-4acd-b919-0eb2197552cc",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2c8e3e87-dee4-48b5-93cf-afeed8a4f9c8"
        },
        "item": {
          "id": "88074857-3f8b-44bf-9da8-1b9f8961d7f5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1c1b7f4d-98fd-4d35-9112-f7cc3d389e26",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "66b9f1d3-83c6-4b3d-b9a1-ed7efa572f6f",
        "cursor": {
          "ref": "000d68a6-e4c6-44ba-a324-946650664e13",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8bd3a525-0e30-44d4-af64-d19d1dce42dc"
        },
        "item": {
          "id": "66b9f1d3-83c6-4b3d-b9a1-ed7efa572f6f",
          "name": "did_json"
        },
        "response": {
          "id": "97aa2283-41f9-4893-81d2-1e1330a14b64",
          "status": "OK",
          "code": 200,
          "responseTime": 531,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5eb94d-72ad-456f-a185-3fcff624af60",
        "cursor": {
          "ref": "721334d5-e281-487f-88b1-7593bcadb85d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c507983a-09cd-4786-a94e-41a2dc0fec8d"
        },
        "item": {
          "id": "8b5eb94d-72ad-456f-a185-3fcff624af60",
          "name": "did:invalid"
        },
        "response": {
          "id": "bdc537a6-c3ec-4bd7-9ad4-d01a53a2ecca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5eb94d-72ad-456f-a185-3fcff624af60",
        "cursor": {
          "ref": "721334d5-e281-487f-88b1-7593bcadb85d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c507983a-09cd-4786-a94e-41a2dc0fec8d"
        },
        "item": {
          "id": "8b5eb94d-72ad-456f-a185-3fcff624af60",
          "name": "did:invalid"
        },
        "response": {
          "id": "bdc537a6-c3ec-4bd7-9ad4-d01a53a2ecca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68671e0-c148-4008-924f-8d30be7e80d9",
        "cursor": {
          "ref": "674976ae-ce26-406f-b5d5-95e356766fd8",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "26eb0e68-bac3-401a-bb4f-fc97c7fcbf27"
        },
        "item": {
          "id": "f68671e0-c148-4008-924f-8d30be7e80d9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "67937f4d-040c-4258-97ca-19dff4230419",
          "status": "Not Found",
          "code": 404,
          "responseTime": 127,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74114f9-85e3-4707-824f-b9deef0c3fa9",
        "cursor": {
          "ref": "8c927dc9-3dce-4e1f-bc12-1844540f708c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "67f31366-c832-4060-b635-24eb736f862a"
        },
        "item": {
          "id": "e74114f9-85e3-4707-824f-b9deef0c3fa9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b3918a13-45ac-4d1b-8eb3-cc36d5f2b058",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9c9f76-d421-4890-a17b-860cfec3121d",
        "cursor": {
          "ref": "cc999a91-dd85-4f53-809f-fa7849e8e66c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4bdc4b4f-2f42-4e33-a46c-3868952b65c1"
        },
        "item": {
          "id": "ee9c9f76-d421-4890-a17b-860cfec3121d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "26425681-2842-4b48-9ab5-6c7acd3c2c9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250f6c81-b9f3-48b5-b146-929ebbc5de0e",
        "cursor": {
          "ref": "c42ab23e-270e-4df6-87e0-bd707892c69c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "aefc6756-b11d-492b-8768-83d1b086b312"
        },
        "item": {
          "id": "250f6c81-b9f3-48b5-b146-929ebbc5de0e",
          "name": "identifiers"
        },
        "response": {
          "id": "984158c8-5afa-4307-8bba-8a6d581547eb",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f99f96f-a0e4-4e3f-8cc8-e3d4da747453",
        "cursor": {
          "ref": "25c2df61-dd2c-4cc6-b204-00112d8263df",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f6bcb5d6-a777-467c-bced-a1e1c5204e9f"
        },
        "item": {
          "id": "7f99f96f-a0e4-4e3f-8cc8-e3d4da747453",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "51b34a1f-85d1-425e-bb28-d8f89f0d3ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a44f7c4-71c8-482a-a413-ab29ad0ba0ea",
        "cursor": {
          "ref": "2cf09bbe-0b56-4b17-876e-99baadddf749",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4f03726b-2ed9-4455-bc2a-8ebf633729bd"
        },
        "item": {
          "id": "1a44f7c4-71c8-482a-a413-ab29ad0ba0ea",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "234dea23-24dd-43f6-9272-b1a90601bfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16684b2-a8cc-4dd2-a99a-69b277e6cb19",
        "cursor": {
          "ref": "f6ee58ab-2944-4acd-81d9-c3f2acf377d8",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3cc7c604-83e9-4dff-b460-869b56968dba"
        },
        "item": {
          "id": "f16684b2-a8cc-4dd2-a99a-69b277e6cb19",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1135775d-8858-4071-9c94-1da1efd62170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2219f1e-8738-449b-95e8-efadd71aa084",
        "cursor": {
          "ref": "2c567fc1-191f-42aa-8ead-375db6db02a0",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63c006e2-b2f8-4e10-bcc6-9bc7bcd4cc2c"
        },
        "item": {
          "id": "d2219f1e-8738-449b-95e8-efadd71aa084",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2f4b8d62-e6fe-4400-98aa-070ba8939c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c2e5b8-cc7a-457a-95c5-e818ed921086",
        "cursor": {
          "ref": "053d6d61-3894-40ac-bc8c-95c30eb655c3",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e41364eb-1736-425e-aa8c-1c135b7aa77d"
        },
        "item": {
          "id": "56c2e5b8-cc7a-457a-95c5-e818ed921086",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "acfe6c18-fa38-4856-a809-24870204c54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe607f8-612e-4861-ae07-e72ad9a474ee",
        "cursor": {
          "ref": "06ff1442-7478-491b-8103-2e39dea0de07",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57c04227-0442-4a7b-a4a3-4e0bfa744ace"
        },
        "item": {
          "id": "2fe607f8-612e-4861-ae07-e72ad9a474ee",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6e0c06d5-ccac-4d69-a7cc-b9551078ad25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f5379c-188e-40d4-b7cd-615eac192d19",
        "cursor": {
          "ref": "5c4fde3b-4e54-4533-aae3-b538691f3753",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b95f4f8e-c62e-4b30-9e51-159a611f1fd1"
        },
        "item": {
          "id": "50f5379c-188e-40d4-b7cd-615eac192d19",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cbb3111c-b1e3-457a-9c9b-7e039e988877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfe331d-2c55-4d4d-81d7-f47dfe756f01",
        "cursor": {
          "ref": "707a3ee4-1038-4421-900a-b481cfa4a16c",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c2e40a70-be9b-45eb-af71-363566720dcd"
        },
        "item": {
          "id": "dbfe331d-2c55-4d4d-81d7-f47dfe756f01",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a3255c97-8bb7-475c-a50f-e7d1bd3b6d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c13a7d-2206-40a0-8b98-dea2f736780a",
        "cursor": {
          "ref": "8c1409e1-713d-4442-bd51-9560059c0e70",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "db758908-678f-4fed-8a51-b3ddd0f8c538"
        },
        "item": {
          "id": "72c13a7d-2206-40a0-8b98-dea2f736780a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e869124a-ecaa-404a-a4e7-3867ee267a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c9f92b-63af-46b3-97c3-c707dc5800d7",
        "cursor": {
          "ref": "6d1143dc-6246-4cb0-9cae-8156769bfcc9",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "505ca391-d844-4fe1-aa73-6f23c2397683"
        },
        "item": {
          "id": "f3c9f92b-63af-46b3-97c3-c707dc5800d7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b617b2d8-b049-4049-a054-ab9e71843c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6287ede1-9ea1-4310-8786-558c39a7245a",
        "cursor": {
          "ref": "0c736d02-de06-4adb-acd6-62cbb863a47e",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d26e078a-eb56-4c8c-9650-4309a77ca830"
        },
        "item": {
          "id": "6287ede1-9ea1-4310-8786-558c39a7245a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0b7f2270-1ef7-41c3-9544-421550ff8b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d5acd3-2b66-4eaa-919e-bb77c5a13110",
        "cursor": {
          "ref": "9f801cc0-657b-4bd4-9401-2466efd738e5",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f693bd4b-0bcc-42e2-8cac-a74869903dbe"
        },
        "item": {
          "id": "37d5acd3-2b66-4eaa-919e-bb77c5a13110",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "16c7955f-ad62-4ab0-921e-263e48c7fa24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e443d439-4034-4846-b88d-47f97131c5a5",
        "cursor": {
          "ref": "a4d615aa-3e93-4275-b6c6-42e0857f7ba7",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ba7ad863-dc8c-40bd-a198-a7a8e828ffc8"
        },
        "item": {
          "id": "e443d439-4034-4846-b88d-47f97131c5a5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "139bbdff-3c80-42ed-a7c3-320919bb9948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93640184-93f0-4c49-b50f-9d04fc272cd4",
        "cursor": {
          "ref": "d97c745e-71cf-4c41-8652-942ce5e9cc39",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "282fceb5-9a8d-4c58-aef8-699b7efd260f"
        },
        "item": {
          "id": "93640184-93f0-4c49-b50f-9d04fc272cd4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2e06e566-dbd4-49ac-9068-acd02119184a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67af0fb-0154-4ac9-901d-4a50eb97b5cd",
        "cursor": {
          "ref": "55a73617-c3ac-44f6-a5f4-49253d681f73",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "36adbdd7-4b00-4aa7-900c-bb056afa134b"
        },
        "item": {
          "id": "b67af0fb-0154-4ac9-901d-4a50eb97b5cd",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "21befa70-bf00-44b8-97ed-ef4cb5c057b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd686db-3b1d-4dd0-8b52-da96c7cd4640",
        "cursor": {
          "ref": "fad89e94-84cb-4bee-a6ab-ed14b04caf10",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0d6b7be8-a304-44fa-b728-6f067d1691f2"
        },
        "item": {
          "id": "6dd686db-3b1d-4dd0-8b52-da96c7cd4640",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bc418181-891d-4dfb-a724-51e461c0878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95692c7c-56a3-41fb-b329-d0ef168a3aee",
        "cursor": {
          "ref": "d533008a-ea40-494d-a243-27193a62d792",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1d315d0c-2762-4afd-a345-305a776276ed"
        },
        "item": {
          "id": "95692c7c-56a3-41fb-b329-d0ef168a3aee",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a47bfa53-de36-4ee7-8004-18be4152926f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c297646a-d984-42b4-86d8-8d5ef9323bb6",
        "cursor": {
          "ref": "f3f3e9c7-bc06-42d7-9cba-0a99353623ae",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac122e5a-2b04-4179-89e2-a4b8513021be"
        },
        "item": {
          "id": "c297646a-d984-42b4-86d8-8d5ef9323bb6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1f4df09f-bb77-4812-a95f-e768aa24be3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1e33ac-baf4-45f4-80a1-6928b8005f49",
        "cursor": {
          "ref": "dd8de41e-442d-414f-8f5e-4f2c3bd791df",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6e8b1abc-1b5f-44e1-af39-499c43d66f55"
        },
        "item": {
          "id": "de1e33ac-baf4-45f4-80a1-6928b8005f49",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e84bfac9-f10e-483a-8e90-3e2bc550f98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eafb227-71ab-4a94-ba88-3b40c08ae7d2",
        "cursor": {
          "ref": "97461af3-92cc-413b-9ce0-c3c92eb3310a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2caaa247-1c6d-47d5-b01a-466680aac565"
        },
        "item": {
          "id": "5eafb227-71ab-4a94-ba88-3b40c08ae7d2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a32b52ec-35a3-487a-8d85-360fe14d8bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c23d2a-20dd-4066-b073-bad1639340a7",
        "cursor": {
          "ref": "e234995c-af08-412c-b324-20c31ca7c8b7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d3d293f5-b3dd-4495-953d-57e3aef005dc"
        },
        "item": {
          "id": "b8c23d2a-20dd-4066-b073-bad1639340a7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e19472f-b4fb-43dd-aa29-cc2dc1a8e1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d21bba-0ec2-4deb-90ec-8125ba4106b9",
        "cursor": {
          "ref": "e611cc74-9a93-46b9-8c7c-4778de1c8bcc",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "dbd4879a-0d84-4f98-b192-2914cccbdb9e"
        },
        "item": {
          "id": "64d21bba-0ec2-4deb-90ec-8125ba4106b9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9fff2b5c-7a79-4bb6-a110-4b98853fb874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9078afec-be0f-4c91-8e98-0a4ed7b8f560",
        "cursor": {
          "ref": "758e7f09-2fe3-4d9c-b7ac-1f547697eb40",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "da5d0372-3b9d-421a-8dfa-ab7275087959"
        },
        "item": {
          "id": "9078afec-be0f-4c91-8e98-0a4ed7b8f560",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "beb762be-e79f-452a-b800-11c2c17bd459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff08b4f-7f3a-4627-8534-30dce3e8097e",
        "cursor": {
          "ref": "23a4c603-f113-4673-a9b5-d602583575f3",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "58677d07-cf29-4e4b-865c-e15844e752ad"
        },
        "item": {
          "id": "4ff08b4f-7f3a-4627-8534-30dce3e8097e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "db6118c7-2cac-426a-90c1-0512fa239864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7ff8ad-32fb-4011-a3ad-0a58d7e3e933",
        "cursor": {
          "ref": "80572859-7e77-46cb-919c-334c92a59714",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e9ad9fbe-7976-46ef-85a6-b3f908076a41"
        },
        "item": {
          "id": "8f7ff8ad-32fb-4011-a3ad-0a58d7e3e933",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "41111c2c-6f50-4225-9799-790fa4c9b6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e531248d-03e1-426f-8675-809dc2ed9a80",
        "cursor": {
          "ref": "cac3d141-205d-42d6-afa0-91480e144801",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7966b7f1-e2b9-4eef-b0ae-b6f52bc2b6d9"
        },
        "item": {
          "id": "e531248d-03e1-426f-8675-809dc2ed9a80",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9b697ebb-36df-4efc-a2d9-f1d19bfa95da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b256b5a5-1832-4db4-82d6-24b94f64df8f",
        "cursor": {
          "ref": "b216d879-4d90-4a75-9e0a-3e0678efd0fd",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8aa10599-5c24-4cdb-a998-d3041b879730"
        },
        "item": {
          "id": "b256b5a5-1832-4db4-82d6-24b94f64df8f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7ce6088b-3bde-4356-84b1-0b1ce48c970d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a92c02-78d9-4457-906b-c016fe263329",
        "cursor": {
          "ref": "985fb5a9-dec7-4e8d-b54e-404767fd01ce",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "988b6933-8246-4bde-8d9f-c06623580da6"
        },
        "item": {
          "id": "a4a92c02-78d9-4457-906b-c016fe263329",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c350e11c-397b-4e42-b2ac-16a9599c9236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab7c8b4-cc12-4d9e-a52b-995c50fae3be",
        "cursor": {
          "ref": "9017c32e-4610-413c-b170-0ca940650cb9",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "90f6e2d9-9f50-4686-8120-335fc1f6e3c5"
        },
        "item": {
          "id": "bab7c8b4-cc12-4d9e-a52b-995c50fae3be",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "067006cf-8aa0-4024-82a9-ec5014e92266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c1825b-7cda-4a3a-9b45-3f71766e9eb5",
        "cursor": {
          "ref": "5e221494-6919-4d7c-801c-ca61fbdea039",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9833266e-b3c7-4233-a0c5-847ded1d0183"
        },
        "item": {
          "id": "37c1825b-7cda-4a3a-9b45-3f71766e9eb5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e9213db1-84ce-4ee1-8c73-635406dece42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc53eaaf-2bc3-412b-9ad1-6c7909051e19",
        "cursor": {
          "ref": "ce962a67-66de-4d89-bfd2-3079591e1bd3",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "528a5d81-11aa-4eb8-b5ee-42e219fde100"
        },
        "item": {
          "id": "bc53eaaf-2bc3-412b-9ad1-6c7909051e19",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ba92946a-077e-49e2-8d2d-b7da2a82520e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6603f290-3ca9-4436-ab35-d509b70304d1",
        "cursor": {
          "ref": "53a743f0-ec9c-4ba0-b1d3-da7fcae7e715",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7eca734d-ce4d-4a64-8e1e-8bfa903db1a1"
        },
        "item": {
          "id": "6603f290-3ca9-4436-ab35-d509b70304d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7e3c7372-bb21-4ff9-9c9c-c50a34ca2a9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "45251532-2dd2-4718-98e3-994e36d99fbe",
        "cursor": {
          "ref": "dca09f1f-5744-463f-baa9-9b68d06a5a4f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6114daf4-8ec3-4f29-b283-bec09b2e8c76"
        },
        "item": {
          "id": "45251532-2dd2-4718-98e3-994e36d99fbe",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2d96b7f6-4d6f-4dda-9b50-5d8513dd37e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dca95578-9d50-42e0-a5ae-048d20744eab",
        "cursor": {
          "ref": "89b7637f-c477-4986-934b-89ef5ae6ff77",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "202d449c-0267-4973-afa4-68df9ca2d647"
        },
        "item": {
          "id": "dca95578-9d50-42e0-a5ae-048d20744eab",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c5a5fabb-9d9e-4510-8572-5c6131e5c3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3e5192-83b6-4719-bbd6-203b709b7547",
        "cursor": {
          "ref": "1432f88f-2771-4b93-b30a-2a3b3870a55b",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8a780367-d1ef-4e12-b969-43fb0ec78ccd"
        },
        "item": {
          "id": "6f3e5192-83b6-4719-bbd6-203b709b7547",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "62da1142-4c69-42d8-8b43-f73c5adc83fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1c0ec6a7-cbaa-4009-9a4d-62615d795c7d",
        "cursor": {
          "ref": "9025c8b9-00af-487b-91ee-06fc704e5168",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b34d8524-d454-4979-a6df-dada1de3abb2"
        },
        "item": {
          "id": "1c0ec6a7-cbaa-4009-9a4d-62615d795c7d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6206f51b-2e06-4c48-a8be-344f5d922db7",
          "status": "Created",
          "code": 201,
          "responseTime": 1554,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fc1d0ff5-c513-474a-b241-f84b575aff07",
        "cursor": {
          "ref": "450fa21d-da56-4e13-9a15-c5a1dae6b185",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "312ef330-c67c-413c-9f09-3b7451acd928"
        },
        "item": {
          "id": "fc1d0ff5-c513-474a-b241-f84b575aff07",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "249a16b9-2e85-4300-b094-d9bab968fdb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1bd75a8b-bc0e-487f-a7b3-83629ce68d58",
        "cursor": {
          "ref": "769078e0-27ca-4fce-a4b3-eca4f1d11d3f",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "46524444-f3dd-4c02-8349-c859e782b8fa"
        },
        "item": {
          "id": "1bd75a8b-bc0e-487f-a7b3-83629ce68d58",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "979e4752-d362-4e33-bbad-e8f9ef7e8796",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 785,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "82f27ea0-a36b-4fb3-8ac1-1435283a73ce",
        "cursor": {
          "ref": "704bd984-017b-4397-b084-ddb84b34291f",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7761ed5d-2eee-4fdf-8c2f-a1557797eb39"
        },
        "item": {
          "id": "82f27ea0-a36b-4fb3-8ac1-1435283a73ce",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ee758ee5-0d4b-40a7-97ee-10e6a00106cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8fc3fa22-6ed1-4e6f-b5d2-a4b256bc8303",
        "cursor": {
          "ref": "7c468e70-5b41-4044-8494-331d29a01d4f",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7c2f9419-e15d-4aa2-96eb-729106d6e75a"
        },
        "item": {
          "id": "8fc3fa22-6ed1-4e6f-b5d2-a4b256bc8303",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ac2c06d1-09ec-4848-83c9-106db6ea9d72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e8fb2886-a345-4414-a9f9-3646e5c238ab",
        "cursor": {
          "ref": "6dd70ace-92aa-4c84-ac0d-d302b17f336e",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cd86ec52-a6ce-48d7-966e-e1ffd2c7d4bf"
        },
        "item": {
          "id": "e8fb2886-a345-4414-a9f9-3646e5c238ab",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d768b9ee-67fc-411c-b88c-ce8a29a6e8a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "abd1b81d-606e-41df-8240-c6222ba6e048",
        "cursor": {
          "ref": "74463659-ce50-4c37-b718-f209ec4cde61",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "33e313b8-ca49-4025-8f1a-393e3dee04d7"
        },
        "item": {
          "id": "abd1b81d-606e-41df-8240-c6222ba6e048",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "62524dfa-95bc-4cd3-80bb-e9bfb9fc887b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "34a2b326-5632-4b6e-81b8-252b99497c3a",
        "cursor": {
          "ref": "ea44fd63-3a42-4f4d-86fa-ef6d4cc8c63e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b661e35b-56ef-4b61-840c-a73f62bae3ff"
        },
        "item": {
          "id": "34a2b326-5632-4b6e-81b8-252b99497c3a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f46c6d1b-5b03-40dc-a37c-3758b9bf58dd",
          "status": "Created",
          "code": 201,
          "responseTime": 898,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a03f6dec-87fc-468d-9b7e-35c028a96f8f",
        "cursor": {
          "ref": "ef9419b4-a00c-43fb-a152-606811a98127",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9fe8c53b-a8ec-4e52-ab5d-79f4f224aa65"
        },
        "item": {
          "id": "a03f6dec-87fc-468d-9b7e-35c028a96f8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bddce8d6-103c-49a5-ae73-694c06ac5eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08df9e85-647d-45af-adf5-0625a2243320",
        "cursor": {
          "ref": "fb7d9e9f-85b5-4bc9-8ff4-173c63ab7269",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "610a0c52-61d0-42a7-b225-e4bfd7c00803"
        },
        "item": {
          "id": "08df9e85-647d-45af-adf5-0625a2243320",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6651e63f-a10d-4721-b31e-5e314b03d997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e2d0a1-0d6b-4825-ac67-23cd88d238a0",
        "cursor": {
          "ref": "9de430fd-b263-4c8f-b9b7-0f881cb8302e",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9aafafc2-5f6e-47ef-ad70-81400027f8a1"
        },
        "item": {
          "id": "d3e2d0a1-0d6b-4825-ac67-23cd88d238a0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "433c1916-b8ce-49cd-aed7-3b8de41c170e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a2877b-60e6-486b-b631-8b01fcbc9f72",
        "cursor": {
          "ref": "9414ca75-eece-407b-aa81-d5733fbfc436",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1db11012-d964-49cd-a2cb-7344bdc2ab58"
        },
        "item": {
          "id": "61a2877b-60e6-486b-b631-8b01fcbc9f72",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f788ac43-2a59-4cbd-9ed1-22ef4c415fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d97ea4-738e-44a1-910a-9bd0cc9114ab",
        "cursor": {
          "ref": "dfebda4f-bed8-4602-a81c-b761de316742",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a115d5c5-44f2-4b48-932a-698ac68d2965"
        },
        "item": {
          "id": "17d97ea4-738e-44a1-910a-9bd0cc9114ab",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "04330c4b-c6f0-428a-8c27-9ac894447228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c23cab4-d2bc-477f-84b9-2d160aea8474",
        "cursor": {
          "ref": "19d89e47-361e-4b3b-8865-cdde7d5b48fe",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0803fe1d-b9d9-4793-846c-727ec1b6d2b2"
        },
        "item": {
          "id": "9c23cab4-d2bc-477f-84b9-2d160aea8474",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1a173102-d564-4c01-bf41-bad0d9678520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bd286c-d553-4b99-9fe5-1294aa7ea2e2",
        "cursor": {
          "ref": "7191fd55-a7a2-479a-bf04-cbba1a44f80f",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b244704c-ba65-4232-983f-ac75f9fdac10"
        },
        "item": {
          "id": "24bd286c-d553-4b99-9fe5-1294aa7ea2e2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d5683e1a-2e1d-4c34-ac72-7c422dea7df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54ea8eb-263f-4d32-9728-46bbc9cf73e8",
        "cursor": {
          "ref": "129b18ba-a986-4f27-9509-15750b8a99c5",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1adcc08b-b7d0-48b7-a30d-60a55128223e"
        },
        "item": {
          "id": "e54ea8eb-263f-4d32-9728-46bbc9cf73e8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ab07c3f2-b6b3-499e-87f5-e4f1fc1e5cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1b20dd-5389-42fc-92a5-bf14ac08c4db",
        "cursor": {
          "ref": "e1abe92a-d836-4f0a-a515-ab3869f99210",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b7e778f0-b872-4b79-bf13-9437c71a2853"
        },
        "item": {
          "id": "6d1b20dd-5389-42fc-92a5-bf14ac08c4db",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1e7d28aa-ff2d-4c40-b3ac-5244ede9cd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6b56b4-0992-4d65-ac1c-53a632a6e1a0",
        "cursor": {
          "ref": "f0d035ae-451b-45e1-83d2-7384ab89074c",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0e1ed5fa-c748-4727-95cf-5e3f7aa36c59"
        },
        "item": {
          "id": "8b6b56b4-0992-4d65-ac1c-53a632a6e1a0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4cb90ab1-6c29-4606-88f8-cd730848847e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124fb503-bb7f-44c2-a937-7719a2bdc175",
        "cursor": {
          "ref": "14165f70-881c-4a4f-af3d-8b6039abb7c9",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9fcf52d7-55c9-4b39-9090-f41870a5fc01"
        },
        "item": {
          "id": "124fb503-bb7f-44c2-a937-7719a2bdc175",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "17f7e476-5ff3-48da-9b84-bfb262fd1b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e070baf-c393-40ac-81fd-35c8c06f8faa",
        "cursor": {
          "ref": "9d8e7bda-e054-426f-a099-8945866e4515",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e87f8e5e-b27e-4654-84a2-925c4aff400c"
        },
        "item": {
          "id": "4e070baf-c393-40ac-81fd-35c8c06f8faa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f1b69b22-cbd4-4453-a9b1-70c2a2141d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977b7918-8997-483f-8fe2-29fd26ceed66",
        "cursor": {
          "ref": "a23a9898-85c7-4b47-863e-7a224681227e",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "088a81f8-1d5c-4ee7-8995-ca4ea6230716"
        },
        "item": {
          "id": "977b7918-8997-483f-8fe2-29fd26ceed66",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "743596fc-c090-41c1-8ce0-b9a490e53da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570c244d-7a8d-4aa6-ba21-2499c8ce33ab",
        "cursor": {
          "ref": "02547bd0-ca6c-4432-94c3-8c1bd2b4f98f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5e307c3f-4c97-4a76-9241-26ed1ebffb02"
        },
        "item": {
          "id": "570c244d-7a8d-4aa6-ba21-2499c8ce33ab",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c0071e92-0eac-4e33-a8ab-bbb389bc99dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 728,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1b3c8498-3d08-4699-8fe1-baed72a80756",
        "cursor": {
          "ref": "684044af-6098-42e8-b044-d426a7060d69",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "41f30442-5765-4ef2-a322-40a4eeeafd7b"
        },
        "item": {
          "id": "1b3c8498-3d08-4699-8fe1-baed72a80756",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "19efd1ea-9e6a-4dcb-8a20-29f05ce28f4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 652,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "66004193-4ce4-4e6e-95d3-f3704b116305",
        "cursor": {
          "ref": "53d8597e-20d7-47b3-8cd4-0696eda12dde",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6fc02e50-d600-4fba-b33a-6b4dddd91662"
        },
        "item": {
          "id": "66004193-4ce4-4e6e-95d3-f3704b116305",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f4d6a3da-bd3c-4589-ad0f-ca2701c08aee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cb8fdb7c-42d3-4495-874b-7e9515a6dca3",
        "cursor": {
          "ref": "40036995-4069-4eeb-9992-b9ac64ca3914",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2100eb25-0704-4637-b04a-34a4cac3f08e"
        },
        "item": {
          "id": "cb8fdb7c-42d3-4495-874b-7e9515a6dca3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d6bfefee-3b92-4fb7-9edd-b03a57520080",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 691,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2fe9cc38-e5c6-4072-8e12-20ff7c53abfb",
        "cursor": {
          "ref": "133ae6f2-3c8b-4d70-9644-99490a891694",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5a2b20b9-5148-443e-bceb-f5837637de7c"
        },
        "item": {
          "id": "2fe9cc38-e5c6-4072-8e12-20ff7c53abfb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fb808376-c51c-41d4-8cef-e02d722cdbff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6068b9ee-efcd-4b77-8ee0-4eee61be0d30",
        "cursor": {
          "ref": "18826ad4-b057-448a-9db5-90244146b3b7",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "060e4568-bf02-44bc-a2d7-7762abcd7c4d"
        },
        "item": {
          "id": "6068b9ee-efcd-4b77-8ee0-4eee61be0d30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9aed83c4-28f4-48bf-9869-07c7db47ac50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef100c5-c7ed-4a83-acb6-c80353e78d49",
        "cursor": {
          "ref": "0cafd80f-bb6f-400a-8b61-72cbd814f022",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "73cbea9a-84d0-4fb4-8a23-b9acc062ebea"
        },
        "item": {
          "id": "7ef100c5-c7ed-4a83-acb6-c80353e78d49",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "372f1dfb-5c12-4b16-b747-0635710b5b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5134b8-d6ef-437a-82b5-9e7ab70e1d15",
        "cursor": {
          "ref": "439d4dca-04b1-4f4e-8f95-5436a3a2c6ab",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "03152b7d-a3c7-4380-b3bf-f5a950aa1b22"
        },
        "item": {
          "id": "9b5134b8-d6ef-437a-82b5-9e7ab70e1d15",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "df615853-3b85-46a1-96f8-f1f698dff8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20910d1b-9cba-4732-ac95-96d309f60396",
        "cursor": {
          "ref": "ffdcd7b5-8db8-4771-bb1d-52e0fea6b191",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "70237ff3-c220-4e40-8159-c9239897159c"
        },
        "item": {
          "id": "20910d1b-9cba-4732-ac95-96d309f60396",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "142552cd-c83f-4825-830a-5042a292a4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2503dffc-b7e0-4974-a77d-4c9343e4a211",
        "cursor": {
          "ref": "be879198-24fc-411b-a5ea-6c7d74580870",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cbf2c532-197d-42ce-82cf-a8eee946257c"
        },
        "item": {
          "id": "2503dffc-b7e0-4974-a77d-4c9343e4a211",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "23b32c69-5bc3-48b4-8a91-017e5ea5b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9686b2a4-834e-48c1-a883-9a6c538b2eff",
        "cursor": {
          "ref": "b7143f18-7495-41b9-bc2c-78055c304a9f",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "12bce818-cd86-4dc3-b421-f6028ffb6ad0"
        },
        "item": {
          "id": "9686b2a4-834e-48c1-a883-9a6c538b2eff",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4ce3b5c1-2e35-4d75-a0e3-6290e8cb527e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89e6eb0-9c9c-4780-b608-a97f1f26366c",
        "cursor": {
          "ref": "7b1d8a42-7cf9-47d7-891d-d3b085939a20",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "94ac09b4-5ae0-4364-adb9-71fa6bc7aa5b"
        },
        "item": {
          "id": "a89e6eb0-9c9c-4780-b608-a97f1f26366c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b1119ffd-281f-4c40-b49d-1df9cb1bd62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3bf856-850d-4731-a3ce-87e6e1a1e20d",
        "cursor": {
          "ref": "7112d099-b7ed-424b-8e94-65d778eb4772",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c12edcbd-33a6-4657-bfe7-4f826539d2db"
        },
        "item": {
          "id": "4d3bf856-850d-4731-a3ce-87e6e1a1e20d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "075e127b-cca7-4607-bc35-912084fc025c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776ae7d4-9926-4cee-acec-e44837b9730e",
        "cursor": {
          "ref": "03865256-d384-4857-b5aa-88141c06174f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f9189844-2fab-4893-89d6-01f8143cba37"
        },
        "item": {
          "id": "776ae7d4-9926-4cee-acec-e44837b9730e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5cbc7f3e-5cd0-409e-8118-9a08cb5420b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354c4ca8-71e7-4938-8ad4-6a50a190ede2",
        "cursor": {
          "ref": "9170ea18-42c9-4851-afb7-18cfff64358c",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c9824bd5-eed6-49bb-b955-cb6b228bf08b"
        },
        "item": {
          "id": "354c4ca8-71e7-4938-8ad4-6a50a190ede2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bd92a1f4-3748-46f4-a7e4-f0533a466765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bf095c-50fe-443d-af1c-c9afb8e806b3",
        "cursor": {
          "ref": "b91583b9-c7fc-4acb-a325-40cb77ad8aa0",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ca170781-8ebe-4520-a326-c6b687bc64b4"
        },
        "item": {
          "id": "c6bf095c-50fe-443d-af1c-c9afb8e806b3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8d6e1c71-4f15-4222-ac72-f2fb2edbd358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80a72fc-c601-4a8a-bb27-18fe71503fb7",
        "cursor": {
          "ref": "7e18afa8-d379-4319-b751-8bdfc9e57e69",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4f0e0952-e09a-4143-9c07-2e9f36e71e1c"
        },
        "item": {
          "id": "f80a72fc-c601-4a8a-bb27-18fe71503fb7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "56090612-1a29-463f-a975-b9249ac088a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0df5123-4cb3-4f39-9f5b-ea266240ddd0",
        "cursor": {
          "ref": "17b39da6-d76c-4c16-96db-bfe325b7db4d",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d75d46d4-bb7b-43f2-902a-af976d763989"
        },
        "item": {
          "id": "a0df5123-4cb3-4f39-9f5b-ea266240ddd0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "878bc373-1ad3-419b-8f13-1362a3662507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c684d3f6-1254-46ef-9925-d718e7f11eb8",
        "cursor": {
          "ref": "91c4600c-4165-46bc-b56f-d4236361ab94",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4c6f6717-4c76-4b1f-bb1e-e85a93ed56b7"
        },
        "item": {
          "id": "c684d3f6-1254-46ef-9925-d718e7f11eb8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "58153f67-f237-4f3e-a9fc-859e3907654d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67666f-14bd-43b8-997b-598f1282fa76",
        "cursor": {
          "ref": "3d679bc0-160e-48f4-8d43-d0736e502758",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "75318880-198e-4242-b98a-891c6623ec9e"
        },
        "item": {
          "id": "2f67666f-14bd-43b8-997b-598f1282fa76",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ab87547b-359c-4e7e-b015-aeb63b6827ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0c19d2-fd1d-4c58-a214-cbfd570eac21",
        "cursor": {
          "ref": "59efaf18-5c8e-430c-b6fb-57733b1a6f65",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2f3b3fed-64e6-455d-bf0d-c2e0025f71d5"
        },
        "item": {
          "id": "5e0c19d2-fd1d-4c58-a214-cbfd570eac21",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "77facf20-b7e5-4d96-b4f0-98689ee80f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a12d33-58bd-4b2c-9c4a-8f89f0ac8fe7",
        "cursor": {
          "ref": "97963a7c-1265-434f-bbd9-857a5da2fd5e",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "41b06dae-8c1c-4b20-b5a8-88abadc6ea78"
        },
        "item": {
          "id": "23a12d33-58bd-4b2c-9c4a-8f89f0ac8fe7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1ff7d8df-cdab-46ea-9b21-556c4c923693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de08fe8-f495-474d-8a15-2e6ed3b9bd43",
        "cursor": {
          "ref": "5ae6dff0-57e3-4fc3-9fa8-7f4e1cb26337",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "eac55bb8-80df-4ac6-b07a-8b7b7f4ef1ca"
        },
        "item": {
          "id": "5de08fe8-f495-474d-8a15-2e6ed3b9bd43",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d846c260-db25-482e-9be3-27e12a69cbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e1f809-3fb6-41bf-8fa0-c7adee08d092",
        "cursor": {
          "ref": "68c08718-db81-48f5-bcc9-eac6869e45a5",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "06b4caa7-0447-4fe1-afe2-5cced0c10049"
        },
        "item": {
          "id": "34e1f809-3fb6-41bf-8fa0-c7adee08d092",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "88bf0c0b-4766-42de-9f28-73952981e9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0201601f-b80d-44aa-a90b-891b4dae2430",
        "cursor": {
          "ref": "d5e044ee-9269-4e39-b375-b7cc9d682191",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "951b4750-54c3-437b-8f1a-fdd2ef583513"
        },
        "item": {
          "id": "0201601f-b80d-44aa-a90b-891b4dae2430",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b8b6db25-6f43-4ef2-b3f7-e77c6c9860b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3055dac0-0ea2-462a-802a-e41d9e2685e4",
        "cursor": {
          "ref": "58f52935-94db-4b30-8685-a475317d8ba2",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43e78a72-022c-4291-86f6-beeaac8445fe"
        },
        "item": {
          "id": "3055dac0-0ea2-462a-802a-e41d9e2685e4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d3d09f1-bf72-448b-a2c6-98d34ac97cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9c045a-b830-4633-9d2f-3ea9c037c825",
        "cursor": {
          "ref": "4ced6300-e2bc-47e0-a608-052e70075ced",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b1494533-c8f7-4b33-8806-5d38d0ea5cc5"
        },
        "item": {
          "id": "4a9c045a-b830-4633-9d2f-3ea9c037c825",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cce824ed-a19c-44af-840a-02237cfbb15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97bf4d6-34be-4e45-b27e-69e0f1811f00",
        "cursor": {
          "ref": "db4a9066-f073-4b07-9348-a653e8f930bc",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "21a3dde1-13a9-453f-a354-98b8df641ae4"
        },
        "item": {
          "id": "a97bf4d6-34be-4e45-b27e-69e0f1811f00",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fb3f6db5-e759-4563-a162-0937df68f3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5766d8c0-d5a6-4137-b2d2-a5bb3e7722ac",
        "cursor": {
          "ref": "40f41ac0-a49d-44e5-b81d-f1884762dda8",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "afa53ae0-084a-4f1e-a20b-0b5787a204df"
        },
        "item": {
          "id": "5766d8c0-d5a6-4137-b2d2-a5bb3e7722ac",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f88b66aa-d717-423e-8641-4b6bcf394ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803dc518-bb14-4375-98b6-f7985916b30a",
        "cursor": {
          "ref": "cd5b8672-f0db-480a-bfbd-91b4dbead33b",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "829993e7-41b7-4a6a-9151-d98e93a9c2f5"
        },
        "item": {
          "id": "803dc518-bb14-4375-98b6-f7985916b30a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "65611db2-1c3c-4e45-b0b9-053ed2b9ec3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532f75ce-89a6-4bad-82ab-1f69a11173c7",
        "cursor": {
          "ref": "38102cb5-f250-43a2-a266-3fdffc3130f1",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c36ed4c8-7faf-4c57-b2d0-ca1c29d3b98b"
        },
        "item": {
          "id": "532f75ce-89a6-4bad-82ab-1f69a11173c7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e38038d5-1d27-4124-ae08-f490b945284e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f9672b-8a44-47de-b174-81b2e6611f08",
        "cursor": {
          "ref": "daf3a410-0b79-431c-b274-a97ddaf57e3f",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2e336f89-1101-49f5-a64c-a7a5a7866b79"
        },
        "item": {
          "id": "67f9672b-8a44-47de-b174-81b2e6611f08",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "42a293e4-8ac7-4128-a739-be0809e018c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d0c6e7-f77a-4400-9830-619adb3be7b8",
        "cursor": {
          "ref": "74a67613-181d-4713-ad96-f1a10f75399d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ac210309-df09-461b-84ad-77ab1747f5ec"
        },
        "item": {
          "id": "45d0c6e7-f77a-4400-9830-619adb3be7b8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2ae25ef4-d029-4405-aef4-c7e0e2dffba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf054b0f-5a0b-42b6-8138-17e7893bc407",
        "cursor": {
          "ref": "5ac8ddc6-8ea8-446c-8c82-3cad62175025",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c4706323-f0a3-4ca1-82a2-bcdf5aa9eb33"
        },
        "item": {
          "id": "bf054b0f-5a0b-42b6-8138-17e7893bc407",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f8184a3a-942e-4ea3-91ab-4c65f8d31695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8487dbd1-7ff0-4c91-b983-402e798115eb",
        "cursor": {
          "ref": "ea028778-570c-4592-aa39-fa0bf4320aa0",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "67aeceea-af1f-4ff1-87a6-bc2754b762f9"
        },
        "item": {
          "id": "8487dbd1-7ff0-4c91-b983-402e798115eb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "64acea1e-9e5a-42b0-83c4-2756859a2d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed296b-3433-490f-bf97-4375acec35c8",
        "cursor": {
          "ref": "ce4c327d-fab2-4392-aa25-f7f9ac15cc7a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3834ec19-2479-458d-a24b-916977ca8278"
        },
        "item": {
          "id": "41ed296b-3433-490f-bf97-4375acec35c8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b2da055b-cde2-4013-b5f3-04892c83c786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a61e07-2a61-4543-8304-b309edd460e6",
        "cursor": {
          "ref": "e493ca52-3767-43ed-bd2e-579eebb76f73",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9de0b3b8-c63b-4580-82d8-cb86250db1d3"
        },
        "item": {
          "id": "c1a61e07-2a61-4543-8304-b309edd460e6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e8352ec1-f041-4422-9089-714e37a2405f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803cf851-a463-4bf5-a946-b1a0d6048d76",
        "cursor": {
          "ref": "5a360da2-3d9f-48ab-bdb3-0e79aab2947a",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8df4313b-9f0c-4d7a-b4c4-0d79bc298621"
        },
        "item": {
          "id": "803cf851-a463-4bf5-a946-b1a0d6048d76",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a4352029-6dbf-4b04-a39a-46a7d336456d",
          "status": "Created",
          "code": 201,
          "responseTime": 1276,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e235eea-84d3-4321-a5ed-9fe86937a44e",
        "cursor": {
          "ref": "cf225803-252d-489e-8af8-257f8dd83102",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3cf1c4d9-8897-4879-a011-1caa8ee6fe32"
        },
        "item": {
          "id": "4e235eea-84d3-4321-a5ed-9fe86937a44e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9e27aa4b-3b69-447f-9ca0-d930125de7ee",
          "status": "Created",
          "code": 201,
          "responseTime": 804,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c5d64f-bcbe-4dd4-959f-946a91cabab2",
        "cursor": {
          "ref": "4db2bc12-eeaf-4781-b225-a3dbb55a2ec9",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3da3e343-3a95-44c8-b4b4-34444e49fa14"
        },
        "item": {
          "id": "73c5d64f-bcbe-4dd4-959f-946a91cabab2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5dbe54db-06d6-4971-9575-9aa2b1f1f68a",
          "status": "Created",
          "code": 201,
          "responseTime": 832,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a854542d-07f2-42e8-9dda-fcc439fe9902",
        "cursor": {
          "ref": "292f1b2e-c443-4c63-ae0d-e5ab2e9a1991",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dc095c21-df88-4695-8631-35cabe155ed0"
        },
        "item": {
          "id": "a854542d-07f2-42e8-9dda-fcc439fe9902",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f950fe33-8584-4d0c-8849-ab1e9f5c91cf",
          "status": "Created",
          "code": 201,
          "responseTime": 857,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fdd515-e063-4e5d-abbf-fc07ad1d667f",
        "cursor": {
          "ref": "8301fd9e-011f-4cd2-9a04-dcc2859735bf",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c845305a-a3ee-4d2d-962b-e7d11ff44316"
        },
        "item": {
          "id": "37fdd515-e063-4e5d-abbf-fc07ad1d667f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "54082400-55a8-47ca-ad82-76f6ec909a85",
          "status": "Created",
          "code": 201,
          "responseTime": 837,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "964794cc-aa12-4441-85cf-15517dc0a5b4",
        "cursor": {
          "ref": "1a48d798-b374-48a2-9633-596bbfddccf9",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "df1742da-2edb-4885-a8d6-7fb0b00af091"
        },
        "item": {
          "id": "964794cc-aa12-4441-85cf-15517dc0a5b4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cf98f0c5-9949-4479-9228-0d6003feff39",
          "status": "Created",
          "code": 201,
          "responseTime": 1003,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26fa9fd-bb55-4f99-a3d0-f8551c7697be",
        "cursor": {
          "ref": "559c7cbe-7331-40eb-b7c4-83bf05f4577d",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7c811e0c-e8d4-4de5-a1bd-0fbede710fb7"
        },
        "item": {
          "id": "f26fa9fd-bb55-4f99-a3d0-f8551c7697be",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5c43b1b4-aac4-4ee2-9ced-d2485533182b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41082279-9bb1-45f3-b9e4-a2bcdafd1a70",
        "cursor": {
          "ref": "0e5a4a9d-a971-45d5-b2d9-3a3567b353b7",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "42b0df43-89f2-43a8-9163-9a5f7894e73e"
        },
        "item": {
          "id": "41082279-9bb1-45f3-b9e4-a2bcdafd1a70",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7eccb3a1-143c-4691-9f67-7cfcdbc633d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4477114d-6bba-4331-84fe-cb62f2e746de",
        "cursor": {
          "ref": "3843f944-369b-4e6b-8620-3374e48e03c3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e7c22df9-2cf2-4512-93ee-52e56406385a"
        },
        "item": {
          "id": "4477114d-6bba-4331-84fe-cb62f2e746de",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "409be2d1-4d6f-4bcc-a2f5-16b3cc3c41a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd52785-74c7-48a6-89a1-20698e6cdcec",
        "cursor": {
          "ref": "8c79b0dd-a8f0-4db8-a770-b03178b0c863",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a1faa2ff-8435-4f06-abc8-997f48a4e711"
        },
        "item": {
          "id": "1bd52785-74c7-48a6-89a1-20698e6cdcec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "aa81e0d5-1ca5-4c6a-bea9-12a413106775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3278c63-4aab-4bb1-8e66-b7c85f760722",
        "cursor": {
          "ref": "53980041-69c5-4833-b2cd-38edc61d43ba",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "19045014-347a-4cad-a16a-eede8bb843e0"
        },
        "item": {
          "id": "b3278c63-4aab-4bb1-8e66-b7c85f760722",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ae2a8d55-d018-4e62-bb09-b91b319587f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53008bb-e842-4602-94ce-6f217186268c",
        "cursor": {
          "ref": "7e91e2b9-52a3-4d48-bcf7-d5d1f2e16742",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f57468c0-912f-4493-a5c9-bc1acffc1338"
        },
        "item": {
          "id": "b53008bb-e842-4602-94ce-6f217186268c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "db509c25-6608-4fa2-8476-4f27725dd378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fc85b3-cbc7-4f6b-9610-ec9f7d3b50e2",
        "cursor": {
          "ref": "8312ea4e-bd00-4c47-b447-48d5e6fef30a",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c1a0987d-54f2-4930-b885-e897cf403180"
        },
        "item": {
          "id": "56fc85b3-cbc7-4f6b-9610-ec9f7d3b50e2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a010a354-4013-4349-9bce-2d8ccad86f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e2df28-1b43-4aa6-8e0d-53e22174859d",
        "cursor": {
          "ref": "3054b57f-185d-47cd-ab2a-dcee5ebf88c2",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c3d06c95-9eac-4fce-ba66-f4ff74212c37"
        },
        "item": {
          "id": "f7e2df28-1b43-4aa6-8e0d-53e22174859d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b4142e73-136e-4fb2-8baf-2ca130355184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10ce32f-f133-4df1-bc69-3e8d23d2ce69",
        "cursor": {
          "ref": "73187aef-8b56-4031-99be-59554b54fcc7",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ca8829f9-5d36-4cc5-9791-556e7861b09d"
        },
        "item": {
          "id": "b10ce32f-f133-4df1-bc69-3e8d23d2ce69",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9922077a-2f12-421a-acdf-75ee3047bc34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cacba7-484c-4e80-b0bb-26b791a62dd9",
        "cursor": {
          "ref": "cd1afae4-ba55-4bc3-a044-39017cedb850",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0f954907-05f7-4697-b058-a138aed0718f"
        },
        "item": {
          "id": "e2cacba7-484c-4e80-b0bb-26b791a62dd9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e3e7f1de-7f39-4608-91fc-fc8ffdb83260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a6a9bb-8959-4626-9700-c2b4f759d8d9",
        "cursor": {
          "ref": "2ff260f7-ecd4-466c-acd1-16e9706bc4b9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a382e6bf-c8f9-4488-a1cf-770ef9caadf3"
        },
        "item": {
          "id": "a8a6a9bb-8959-4626-9700-c2b4f759d8d9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d447adc4-864b-4157-92a1-f8a12eeb0ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac3e4c9-dac8-416f-899d-872afb5fde83",
        "cursor": {
          "ref": "e0bb4153-28f4-4b7e-a3da-a5fda40cc6fe",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "038a37c5-6c57-492e-b5d2-b2c12deba1c6"
        },
        "item": {
          "id": "3ac3e4c9-dac8-416f-899d-872afb5fde83",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c8341793-5f81-4e81-88d0-4415e3aca381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f743c3-fd97-4ee2-9a14-00f852411ed2",
        "cursor": {
          "ref": "64d6a804-9e4e-487b-98ff-dcdbf071a331",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "89917748-767b-4ef3-87d5-df1023319e1d"
        },
        "item": {
          "id": "91f743c3-fd97-4ee2-9a14-00f852411ed2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64435c80-8d16-4a48-bad3-11d3593d230d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d56e735-1f51-4c27-8a88-f520dadb466f",
        "cursor": {
          "ref": "a6912e4d-cf30-4f7b-ab45-b697df68d2a2",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6db88d15-6681-4070-aa76-49996e9bba72"
        },
        "item": {
          "id": "3d56e735-1f51-4c27-8a88-f520dadb466f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "efcd0ecb-f1f3-4a3e-922a-48b2d17308ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeca8235-960e-46d9-b7df-21a7f80546a6",
        "cursor": {
          "ref": "cd64fb8f-2e52-4753-a30e-db386b92448c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7b62107b-923e-4a99-a936-cc53b8f66acf"
        },
        "item": {
          "id": "aeca8235-960e-46d9-b7df-21a7f80546a6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "29b139e0-0efe-4570-82cf-1bf9a0e58315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96ca43d-40ae-4db0-ba02-764ffff6faf5",
        "cursor": {
          "ref": "14016cc6-eb3a-4712-a47c-f51da829c8b0",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c823f20d-2258-4a71-974f-4c4ef16a6a5e"
        },
        "item": {
          "id": "f96ca43d-40ae-4db0-ba02-764ffff6faf5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3e5f226a-174b-45c9-a17b-4f8d4771483a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10b99ae-66c2-48ad-a66c-3a206d4234f0",
        "cursor": {
          "ref": "503c83bb-5a18-44ce-9533-bd8799138c31",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5c74f8d8-a77b-4f87-9bab-fdfc23dcc288"
        },
        "item": {
          "id": "d10b99ae-66c2-48ad-a66c-3a206d4234f0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "18c19535-c845-432c-809c-e6765bf98f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f528db-28d9-4ced-89d0-198c176670ef",
        "cursor": {
          "ref": "22e4f294-8d22-405a-af00-f8fd9baffd0b",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "33024517-0117-424b-89ed-29e4757e33a6"
        },
        "item": {
          "id": "a9f528db-28d9-4ced-89d0-198c176670ef",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "581fb95a-7b9a-4537-a6b4-98c6a8d2678e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a851a6d-91b7-42bc-9dd4-372126deee2e",
        "cursor": {
          "ref": "4c50463d-dc79-47cc-9e93-9c1af3ada2da",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fef63c20-92c7-4298-9333-fdb0f16167ba"
        },
        "item": {
          "id": "8a851a6d-91b7-42bc-9dd4-372126deee2e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "045dc59c-a5a9-4267-b6d8-27f5603ddc83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720158de-ebf8-410b-b50c-235fa5ce4581",
        "cursor": {
          "ref": "7e40265e-32be-428a-a0f1-cdd8234482f7",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d3b4f578-fba5-4a88-aa7f-f82696e7a48c"
        },
        "item": {
          "id": "720158de-ebf8-410b-b50c-235fa5ce4581",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f91e7cd1-1ce6-4368-a6c1-ea1931fe04d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d6c4c3-2a38-4006-a329-f3a052ecbd0d",
        "cursor": {
          "ref": "3356dbed-6f6b-47d0-b750-db5d018504f9",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c57dce3e-9044-4090-bbdc-27d124bf874d"
        },
        "item": {
          "id": "d8d6c4c3-2a38-4006-a329-f3a052ecbd0d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bb7d64f7-a290-4df7-9d02-2660dc4c9485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a7a084-2ab9-4585-a0fd-730929dd4b33",
        "cursor": {
          "ref": "7ac8e1a6-5805-454a-a277-6e3ae75b9dc9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e1f8f95a-a01b-4a3c-b263-733af4760f17"
        },
        "item": {
          "id": "c6a7a084-2ab9-4585-a0fd-730929dd4b33",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "06f5faff-d77b-4a57-a90d-a0f8f81bd162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152cb318-a891-4fc5-b343-c56477bc162f",
        "cursor": {
          "ref": "86d4619b-cb84-49de-a64a-bef0a7432990",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d3a5a6a1-134b-46e6-8fbf-e74fbc0882a0"
        },
        "item": {
          "id": "152cb318-a891-4fc5-b343-c56477bc162f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1696c3e0-4fa9-43f5-890a-f631323546e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5621d3e4-1c23-49cf-bc58-e624f38d87eb",
        "cursor": {
          "ref": "ba4ef579-5f2c-4b20-acba-c2d312165935",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ed367866-c034-4c93-8065-7e3af8ff3449"
        },
        "item": {
          "id": "5621d3e4-1c23-49cf-bc58-e624f38d87eb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2de76c97-a603-43e5-8405-94633024ced0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b18ba5f-83cf-4c35-955b-bfb60670749a",
        "cursor": {
          "ref": "f37856c1-73e6-46f4-a113-c24ecf3fccc9",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "122a1497-ce45-47c4-a242-175991c2ee0a"
        },
        "item": {
          "id": "5b18ba5f-83cf-4c35-955b-bfb60670749a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e218909f-2607-4715-871a-bd8270de4bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886c7d7f-9301-42dc-999b-57d8d337d83e",
        "cursor": {
          "ref": "e1295293-9c30-4716-874d-48726801b4c7",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "196dc595-a875-4b18-aa4c-87bdcbf10224"
        },
        "item": {
          "id": "886c7d7f-9301-42dc-999b-57d8d337d83e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9aac3721-1a7f-43bb-a0c4-58f341dbd662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c8cccb-4438-432c-9f0d-67fd9cfcb6a1",
        "cursor": {
          "ref": "88ff8579-a725-4732-afb2-a3f423032449",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "218e8334-153e-4028-8f5e-c7c3bbb57ae4"
        },
        "item": {
          "id": "f8c8cccb-4438-432c-9f0d-67fd9cfcb6a1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1bb9d922-8c90-43d5-9e9b-5301c61e6cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdad20f5-7d65-4e61-b42a-d3a975dc7499",
        "cursor": {
          "ref": "8100b323-8f97-47d4-97ea-d85a267f5467",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "649daf1d-f913-4460-9fff-cf7159009961"
        },
        "item": {
          "id": "cdad20f5-7d65-4e61-b42a-d3a975dc7499",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "916eea06-09b4-4ebf-aaf1-2d7221ed739c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85546f48-c161-4734-a378-ad0bd1a38dd8",
        "cursor": {
          "ref": "ad4c559b-0268-4705-8fd7-5accaf2e40df",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "db8a3277-38cd-427c-8cdb-8c7d344d4ea3"
        },
        "item": {
          "id": "85546f48-c161-4734-a378-ad0bd1a38dd8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7980f58b-3ea9-495b-be21-dbce44036edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3530c1-dc0a-4024-bb60-7fce29d6a83d",
        "cursor": {
          "ref": "eb183c19-c23d-40f0-8183-e6e7d3e8ca50",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "11821156-9710-4524-9712-6f251ab11c80"
        },
        "item": {
          "id": "ab3530c1-dc0a-4024-bb60-7fce29d6a83d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "34e1ece4-6984-4fa4-a62e-ee95dad017c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8cc24e-45a6-4cc0-861f-c1c138ac72d5",
        "cursor": {
          "ref": "768d6f58-01d3-4464-9800-65bba886ab5a",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "88762554-68ce-4934-9db9-173ae5db5572"
        },
        "item": {
          "id": "0c8cc24e-45a6-4cc0-861f-c1c138ac72d5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ce1e6fa0-d0da-4f79-845d-e5e7609b81bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f8e98f-2791-461a-baa4-dac35164c05c",
        "cursor": {
          "ref": "7cd3af22-fb66-413b-8739-90fa3f5577fb",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7adf735f-dc43-4291-9945-5a9e3680f6fe"
        },
        "item": {
          "id": "37f8e98f-2791-461a-baa4-dac35164c05c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "8572002d-16a3-49b6-82a1-c556942e4661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077b114c-0615-4d81-9437-74992d7f96de",
        "cursor": {
          "ref": "da4f79b0-0f1d-4a11-9624-bfb6770091f9",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "27c420f0-64df-47a2-a140-296eda976cc7"
        },
        "item": {
          "id": "077b114c-0615-4d81-9437-74992d7f96de",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "753bfe8b-ae00-45f5-8830-e66e8aad37dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7933065d-3556-436a-9524-92656a246ea0",
        "cursor": {
          "ref": "757ee03d-fe2c-4661-9d42-dbbbd7e8fc3f",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "58284d63-2900-4d84-8e1e-fa1aa1fa63f7"
        },
        "item": {
          "id": "7933065d-3556-436a-9524-92656a246ea0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "eaa7964a-7e95-49fe-b382-821df999a1e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c3c8e1-f820-4b69-ba41-5524aa1a6de6",
        "cursor": {
          "ref": "2d6ccbc0-8d22-4e63-aeaf-bdaab7e76d7c",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "83f6114f-ae83-422b-a221-c59c91208096"
        },
        "item": {
          "id": "30c3c8e1-f820-4b69-ba41-5524aa1a6de6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d685453c-8970-48a6-9d4b-5dd21fffc2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c818620-f5e0-414f-8ad3-fc3cb8096161",
        "cursor": {
          "ref": "21ebd282-1754-4dae-aaa0-bf67a98731fd",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1bdfd5a2-edf7-4c5d-bd9c-4e17731d6e68"
        },
        "item": {
          "id": "8c818620-f5e0-414f-8ad3-fc3cb8096161",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66925105-c353-49ef-a07c-e80cd49c3930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1126e1bd-5524-4bcf-a04f-39e63aa3683b",
        "cursor": {
          "ref": "c0d9b4fc-1b67-4bfb-85ae-e51b60c13484",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "546f8224-6c14-4939-b0af-0c4d15781b58"
        },
        "item": {
          "id": "1126e1bd-5524-4bcf-a04f-39e63aa3683b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b0d32791-2441-4504-bbcb-d293293ea0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5871c267-932f-4247-87af-5f5a83a96c81",
        "cursor": {
          "ref": "cce84464-7e3c-494b-aa4e-e65e35c45d79",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c70dcc25-9804-47ec-b84b-1884d8618426"
        },
        "item": {
          "id": "5871c267-932f-4247-87af-5f5a83a96c81",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bff1270b-10bd-4e94-87dc-fe54072ca2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dae1236-4b0e-41e0-96b7-f6acc8dbbe91",
        "cursor": {
          "ref": "15a8f087-d194-4eb3-9a3f-d34733ea0835",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "37aff605-7e26-433b-959a-58eaa9cdbfad"
        },
        "item": {
          "id": "8dae1236-4b0e-41e0-96b7-f6acc8dbbe91",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5524a8f1-4cad-4b48-9576-4a54eb96cfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5081c0de-41e9-4493-b3b0-baeaa37516e7",
        "cursor": {
          "ref": "8a16760d-7ddf-4f5d-920e-d117430503d7",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e968c6b1-df20-485b-9cf3-10ac8f8828c5"
        },
        "item": {
          "id": "5081c0de-41e9-4493-b3b0-baeaa37516e7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6bde6cfb-bfe9-4b79-b30f-a66c6e2a4123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae697b2-f18a-46b9-8542-8b67ce8819c7",
        "cursor": {
          "ref": "d033b3d4-c08a-4bfe-b142-7df2dbe8ae9e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "63ae2d01-0fa3-4d15-b87e-c2a4384cfca8"
        },
        "item": {
          "id": "0ae697b2-f18a-46b9-8542-8b67ce8819c7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab33ecd7-702e-4252-a223-e1557c73b144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019cd041-5ae2-44d4-9917-27093d2479af",
        "cursor": {
          "ref": "e4d257a2-9612-4d45-8846-e72f8fa2f820",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bf01f74e-c881-4084-b8dd-283168a39078"
        },
        "item": {
          "id": "019cd041-5ae2-44d4-9917-27093d2479af",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "33d9e83e-b260-4e45-814b-5dcbc1225da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508ab7cc-2533-44f4-9ac2-b9befd1d1e4a",
        "cursor": {
          "ref": "29cdd140-d6dd-475e-bee5-66fb6b84a9c2",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2795986f-2983-46e2-8743-2debc8edcac6"
        },
        "item": {
          "id": "508ab7cc-2533-44f4-9ac2-b9befd1d1e4a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4213c22f-a643-4808-9484-e99239294b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e99ed3-154f-4dba-8b4d-caa99fe4b23f",
        "cursor": {
          "ref": "88c11b6d-1518-43fc-bd96-a2ce29070544",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d7961ffb-6d39-4280-82a9-7870bebcd6ce"
        },
        "item": {
          "id": "78e99ed3-154f-4dba-8b4d-caa99fe4b23f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2d69db0b-f1c3-48ea-ac89-24a636009588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3f320e-7404-4f06-8a4e-756088b772a7",
        "cursor": {
          "ref": "6fcc4a42-566e-48eb-8b56-191f034ee48b",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bd68ea59-acd9-462d-b93f-7954ddfa3b9d"
        },
        "item": {
          "id": "db3f320e-7404-4f06-8a4e-756088b772a7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4d5f81e8-2090-407f-b6e0-b0f3b53e7966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6670c6e8-483c-497b-9a63-3441dedaebc9",
        "cursor": {
          "ref": "f4ac5716-4f3f-4de6-91dc-0d45c39dec70",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0a372b31-2e5a-4d57-aa53-19bad5f3a0fd"
        },
        "item": {
          "id": "6670c6e8-483c-497b-9a63-3441dedaebc9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1dfd8b90-0dfb-4a44-b2e3-e54ea58004e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f7aa52-fe82-4f30-be92-c6b4cd080bb9",
        "cursor": {
          "ref": "1199b154-b152-4791-8036-505d75396d82",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f220e72f-c4f3-4eff-aa54-9fbb4f25289b"
        },
        "item": {
          "id": "56f7aa52-fe82-4f30-be92-c6b4cd080bb9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "860cc872-6c61-42d7-9fa5-b4b4ffd711f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e613af8-2921-4fbf-9978-dfcc87a7cdc2",
        "cursor": {
          "ref": "55a89339-c514-4199-8d29-17a8cd04b4f3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8c88ab76-0237-4db6-9dad-d29e006e16fd"
        },
        "item": {
          "id": "2e613af8-2921-4fbf-9978-dfcc87a7cdc2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "29e85df4-0a20-40d7-8fda-c84c3578d124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76003851-dcbc-486e-ac2f-7ffe7b62783a",
        "cursor": {
          "ref": "e7ca8d2f-df5b-4636-afc8-9bb3a7a61a6f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "66e82a90-991e-4a42-a3b8-3d630e355f09"
        },
        "item": {
          "id": "76003851-dcbc-486e-ac2f-7ffe7b62783a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1da2eab2-419f-4807-8b2f-34f8ffb06b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ccff08-9f6b-48e0-9c01-0678d3743470",
        "cursor": {
          "ref": "bba52f80-9d11-4836-a255-06fe619d3b51",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "552ff065-b29b-4258-99e9-89bc2f57f430"
        },
        "item": {
          "id": "59ccff08-9f6b-48e0-9c01-0678d3743470",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0302a5d7-e2d9-4306-9504-35791729c35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125ea77c-e921-4274-a3d0-e869e856dc39",
        "cursor": {
          "ref": "24d2a163-0bd5-46d2-9c9a-9fb56a881121",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e42b78ef-8671-43e1-b4e2-a68940910e24"
        },
        "item": {
          "id": "125ea77c-e921-4274-a3d0-e869e856dc39",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0c0b537f-80ee-4c36-8cee-403e02392a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f0b667-82da-4c5c-a153-d9f1eb3a2c72",
        "cursor": {
          "ref": "3de5b235-7607-436e-bfb0-3a85b79cbcaa",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2e1ef39f-19c0-49a1-812f-bec19dd6a140"
        },
        "item": {
          "id": "87f0b667-82da-4c5c-a153-d9f1eb3a2c72",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "85f7318d-dfeb-43e2-a23e-b964f36186cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9c6260-f0fe-43b4-a5df-746fda6aa048",
        "cursor": {
          "ref": "1f588071-082f-4fcf-a67b-5aaf13cf2f6b",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cff07f28-9e33-4145-891d-292dda59dae0"
        },
        "item": {
          "id": "df9c6260-f0fe-43b4-a5df-746fda6aa048",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1170aef2-333f-4376-84b2-0cd6f75ba601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1b2732-4b1f-47a3-af29-a49ea7c7ae59",
        "cursor": {
          "ref": "01a0d834-01a4-48c2-97c9-ba50a8c5f224",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "14f81376-9cf0-4fd9-9e56-f16630cb7d4c"
        },
        "item": {
          "id": "7e1b2732-4b1f-47a3-af29-a49ea7c7ae59",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "30ac9c90-efde-40c8-be04-f8aebb729503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5effd7-0a1f-440c-8c80-c3dd9573a5b4",
        "cursor": {
          "ref": "aa4c5107-89d6-419f-8980-f155fe509690",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ea3ec750-2246-4fc2-9191-bee33e91b880"
        },
        "item": {
          "id": "ed5effd7-0a1f-440c-8c80-c3dd9573a5b4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a43ea60f-e0ae-416f-ad3e-933d27c5e05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57de1144-af47-43ba-85a3-0f5de312ea2f",
        "cursor": {
          "ref": "7c300b5d-d3c8-4d0e-a150-a68100402373",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a0f48f32-2c73-43e4-8549-295a356e9c23"
        },
        "item": {
          "id": "57de1144-af47-43ba-85a3-0f5de312ea2f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "41e6385b-2642-444b-a0f3-02794f72a981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf05ab3-c126-4f15-99f8-d6359cee1676",
        "cursor": {
          "ref": "c08472fe-a01f-469a-b007-c2ae48c2ab1f",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "df433d22-9db7-49bc-a274-5a057436803d"
        },
        "item": {
          "id": "8bf05ab3-c126-4f15-99f8-d6359cee1676",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d66481e2-5486-496c-85d8-3da80f61fe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25c30cc-3523-4e1a-b010-0c1d39d46c0d",
        "cursor": {
          "ref": "288d36f0-255c-43a9-82c9-5106182748b1",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2bb35538-f7bf-4f8e-abf8-4e3a8145986b"
        },
        "item": {
          "id": "a25c30cc-3523-4e1a-b010-0c1d39d46c0d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "be950d31-9786-49f8-b10d-6cee05d3db81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acc3b36-fedd-4fe8-90b6-ef11f0a496c4",
        "cursor": {
          "ref": "22bde38b-fe7b-4282-a6fb-01ec33263018",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "01433a58-ee4c-4b55-b342-e784cfe7f723"
        },
        "item": {
          "id": "3acc3b36-fedd-4fe8-90b6-ef11f0a496c4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8a590393-5991-414c-9c27-ecaa7fe82764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f95f1d4-923c-41d3-a360-9f9d523df82b",
        "cursor": {
          "ref": "fe6278e8-f923-4bd7-b13a-7d8cd9c873da",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "73a19f00-1c13-4f13-be52-a6c18b51b24d"
        },
        "item": {
          "id": "8f95f1d4-923c-41d3-a360-9f9d523df82b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c436ae01-234f-49f2-9738-c1f1a06ac085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d690c-4781-41ef-8016-2e24551f07b5",
        "cursor": {
          "ref": "b86e9408-b20f-4215-99d0-e96961444b9f",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "68b34d3c-beec-4447-a79b-2ef7424952ab"
        },
        "item": {
          "id": "4f1d690c-4781-41ef-8016-2e24551f07b5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ffb3e4eb-4dbf-4cdc-bf68-3c72c5ec8c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97a28d7-cce2-42cf-95e1-6429db2fafe1",
        "cursor": {
          "ref": "a2cf21d4-6b1b-4388-9fe2-3efa82d57fb8",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8af528ed-c4a3-4623-b4a3-3619f3a03033"
        },
        "item": {
          "id": "e97a28d7-cce2-42cf-95e1-6429db2fafe1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ff18d1e0-02ed-494a-a41e-a043851010c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94df4508-5c76-4557-b981-199a48ab1b71",
        "cursor": {
          "ref": "394a7c30-5cb2-4729-a624-8c313b4a195a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cd8848c2-c4f7-4149-bccf-57cd647cc59e"
        },
        "item": {
          "id": "94df4508-5c76-4557-b981-199a48ab1b71",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "83cd91fd-73e5-494e-aca5-f4d94d152dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67fddd5-e7cf-42e6-ad6c-9e7329967768",
        "cursor": {
          "ref": "e894b9cd-b5e9-4951-a840-3c9d3f210522",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cda2b35b-f674-40a5-ac02-83f999c2dcf8"
        },
        "item": {
          "id": "d67fddd5-e7cf-42e6-ad6c-9e7329967768",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2c74ee33-2681-431d-8bb2-f946b0a113a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04598a3e-b06f-4d4c-aca9-e96c44745057",
        "cursor": {
          "ref": "002d1fb2-9b1f-4843-970f-77e7b0aded6f",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "49a5a4f9-be8f-424f-ba21-172d3829297b"
        },
        "item": {
          "id": "04598a3e-b06f-4d4c-aca9-e96c44745057",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e0e43409-c188-48a8-9e50-93de0dd299d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a545203-c13e-472a-bf73-4da8fd020b9c",
        "cursor": {
          "ref": "d14ba0a3-71c7-4e7c-8bb7-720039187f85",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3d1d9ab5-9acf-4467-89ae-e9690036bd76"
        },
        "item": {
          "id": "2a545203-c13e-472a-bf73-4da8fd020b9c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "600ed667-d088-4fb5-a7e2-39ff8a5030b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a34cec8-999f-453f-b25f-8aa9c2be8f2f",
        "cursor": {
          "ref": "44f75162-c43e-4799-96db-3d65e6145ec5",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6175aa36-aac4-43a1-8073-066c1dc745dc"
        },
        "item": {
          "id": "3a34cec8-999f-453f-b25f-8aa9c2be8f2f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3130dc37-70ff-4cf6-a4c3-c69eba2fb615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d239f8-cc57-421b-988a-114be7eccf15",
        "cursor": {
          "ref": "9d64d6a4-4665-49a7-9fd8-b364cbcdf3f5",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "77807d33-5370-47ca-bba3-88433033936e"
        },
        "item": {
          "id": "f1d239f8-cc57-421b-988a-114be7eccf15",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0180b2b1-ee45-40bb-8825-e295b3a89ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09015170-eedc-40a0-b4cb-57e7aad243a7",
        "cursor": {
          "ref": "94b06984-f0e7-425e-8a63-34f250e7e36d",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b069008b-abd1-4b32-a028-497301f818e5"
        },
        "item": {
          "id": "09015170-eedc-40a0-b4cb-57e7aad243a7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0cf37dc0-cfb9-4b11-b340-a93cab128710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247ba1cb-ecc4-412c-9ba3-3a891fda2244",
        "cursor": {
          "ref": "d8d5e101-0bf6-49c2-907c-21dc107ab50f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "de7903d3-0d79-4f50-ad49-44fbce8c9bb0"
        },
        "item": {
          "id": "247ba1cb-ecc4-412c-9ba3-3a891fda2244",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ffbc3d1a-8d79-450d-a987-4c36257a6b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67e3e20-82c7-4ac7-879e-d63699b049df",
        "cursor": {
          "ref": "b7069a9f-403f-4dbc-89ce-32a13ad82cf2",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ab271bbf-94f5-42d0-b797-98e8ead64cad"
        },
        "item": {
          "id": "d67e3e20-82c7-4ac7-879e-d63699b049df",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0d17b36a-80bd-451a-828e-3670149f5c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fe2cff-076a-4b4a-a73a-b8054ca1f33a",
        "cursor": {
          "ref": "26f4bbd1-d01f-43d5-95ae-3a47e1debbf0",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4552a4bb-b381-42da-9552-06edaf2380d7"
        },
        "item": {
          "id": "e9fe2cff-076a-4b4a-a73a-b8054ca1f33a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "95c4fc5f-0fde-462e-ab27-792d69f70f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b553e1f6-61f0-4f39-8a69-92196c62b4da",
        "cursor": {
          "ref": "3a5fc4b7-bbdd-40e2-a36b-962adc963668",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6f8dc545-791e-4911-8de1-c1e08fcc74b4"
        },
        "item": {
          "id": "b553e1f6-61f0-4f39-8a69-92196c62b4da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "95934b07-5034-456f-b454-9a68d28a9027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6703de6-97cd-44ea-bf48-1e781c5ec240",
        "cursor": {
          "ref": "e2227a5a-9db5-4896-9c8b-7afa27810478",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d8e99e0-088b-43db-859e-af907df73b2e"
        },
        "item": {
          "id": "d6703de6-97cd-44ea-bf48-1e781c5ec240",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "365c88e4-435a-4a02-946d-85a5b2a075f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dea8c3-1550-4200-8dca-70087823cca5",
        "cursor": {
          "ref": "83385804-3e58-48af-a442-950ca0e22df9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "89a2d1ca-b2e5-4016-8b15-2cc7c499a62b"
        },
        "item": {
          "id": "f0dea8c3-1550-4200-8dca-70087823cca5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "285f2734-3c38-41c3-b8f2-c56adbfc577f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c561d643-c69f-4d81-b449-3b3aaccccb65",
        "cursor": {
          "ref": "c9098d70-c06c-46cc-9da8-3e6800504969",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "52dd1c60-be20-41bd-bb53-5244806e66bc"
        },
        "item": {
          "id": "c561d643-c69f-4d81-b449-3b3aaccccb65",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2343596b-f2bc-45d6-9838-aa8dddc2ba41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036a1da1-1b7d-44e2-be97-06fa0ed40d3d",
        "cursor": {
          "ref": "9222b88a-8bce-4149-9948-2e392d3394ee",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b770fad5-15bf-4932-ba17-c5e2200151b9"
        },
        "item": {
          "id": "036a1da1-1b7d-44e2-be97-06fa0ed40d3d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c757b867-e9d6-4a9b-9ed8-28430722848f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "2e558772-0d44-40f8-a81e-bb2a9e6c5e47",
        "cursor": {
          "ref": "2e40a846-9d78-4929-9ea8-25bbf5d2d9bf",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "98163dd5-1bee-4c66-b9f9-bed0699e49d5"
        },
        "item": {
          "id": "2e558772-0d44-40f8-a81e-bb2a9e6c5e47",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "34bd966c-720c-4f92-a8bb-87a1bef0ecab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96ca7ff-f0b9-4432-9c86-ae418f8e102d",
        "cursor": {
          "ref": "809b127e-36b6-4634-8ca0-3c08daaf97d5",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0ad70464-2505-4150-a327-7115e394b3db"
        },
        "item": {
          "id": "d96ca7ff-f0b9-4432-9c86-ae418f8e102d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2755ea11-11a2-4361-9725-f9726322a89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f62334-8b5f-4124-bb96-2f32d6ac7307",
        "cursor": {
          "ref": "3dda41d0-0ac7-4ca1-9af4-ac665d95d85e",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cc3756f8-7ebe-47a0-b804-d74d907d81b9"
        },
        "item": {
          "id": "55f62334-8b5f-4124-bb96-2f32d6ac7307",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "32f6e4e0-1672-4815-88f6-29251768941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c2ebc4-760a-4387-a1f4-702877ae7f20",
        "cursor": {
          "ref": "2bbc32b8-65db-4b5d-9961-62bf97d74442",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e46f0e4c-2f9a-4ea4-96d3-b603440bc9de"
        },
        "item": {
          "id": "b5c2ebc4-760a-4387-a1f4-702877ae7f20",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e1e2b4b1-cfbc-48b0-97db-b538ee1f742c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7558657-3a88-4eef-8a7d-a9c536dc6b22",
        "cursor": {
          "ref": "149beb4a-bf8d-4f78-91ab-6dc122da8f56",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8fa9e70c-2b21-45ed-8e8d-847f736ee116"
        },
        "item": {
          "id": "a7558657-3a88-4eef-8a7d-a9c536dc6b22",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "07605749-a263-41af-b830-3d22c5c33be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5568a99-34b1-422d-a1fa-abd3eb1b9bbf",
        "cursor": {
          "ref": "3f2c374d-da88-4b38-8151-f12c5ccb95f8",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8628f236-8e50-4ff3-8fa7-8dda6bf036f4"
        },
        "item": {
          "id": "b5568a99-34b1-422d-a1fa-abd3eb1b9bbf",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2304d08c-4764-41b2-a7e8-5e3dbccff0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe5be10-a476-4c57-9ba1-d2c1e0fd4eb5",
        "cursor": {
          "ref": "4e5b1d9b-a608-4f94-9430-1ead389c6a54",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d5a8cf66-8f7c-4ec1-9aac-d0366e3dd35c"
        },
        "item": {
          "id": "9fe5be10-a476-4c57-9ba1-d2c1e0fd4eb5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "209578ee-dcb5-42fc-af65-ac35c627c395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6824607f-3b3c-41f2-b505-241d1cbb52ba",
        "cursor": {
          "ref": "2018e8ee-08b9-4888-8cbc-75594722af21",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "73f24889-5b9a-4d45-8c1d-339f3260b9bb"
        },
        "item": {
          "id": "6824607f-3b3c-41f2-b505-241d1cbb52ba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "190ca245-2d29-41cf-938e-33a39ce95af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c587b04-b1d4-408e-98ad-606c46e150bc",
        "cursor": {
          "ref": "bcdf5e70-358f-40ba-afa0-e79a8d0c5131",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4dba2dad-f1d6-4238-8bd5-12bec864bf75"
        },
        "item": {
          "id": "7c587b04-b1d4-408e-98ad-606c46e150bc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "84386737-cc9a-4d45-8518-00be5ab9d540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea3ab89-ea53-409a-872f-81606ee790fb",
        "cursor": {
          "ref": "b81b8a92-1314-48f4-833a-c391ae6d3dfa",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "da2955a8-7ca7-45b6-93db-3bbc9d2f0f92"
        },
        "item": {
          "id": "5ea3ab89-ea53-409a-872f-81606ee790fb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2a37af1c-bf23-4b7e-a5a4-1796d240a35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d222dd-4e28-4b17-ba14-d4188d498823",
        "cursor": {
          "ref": "903eb0e8-0d08-42b5-90ac-047640280ffb",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "806a9f51-7422-46ab-b354-57cf00359084"
        },
        "item": {
          "id": "83d222dd-4e28-4b17-ba14-d4188d498823",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "307ab669-445c-4ea7-bc40-c17233a8ace7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d449f7b7-9c14-417f-8e74-5d4425a32a09",
        "cursor": {
          "ref": "e0a7e481-d9e4-4f21-9784-b9d15a690e8a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0d868bd8-6a7b-4200-9ccb-dd15c55177a8"
        },
        "item": {
          "id": "d449f7b7-9c14-417f-8e74-5d4425a32a09",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "42312e0a-153f-4e90-b2ec-6df049376fb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "181b8e77-4639-4057-98dd-bbf6fec7be20",
        "cursor": {
          "ref": "ff2e0a0b-8723-4593-b8f6-84924ee30ab9",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a97065d9-ea67-423b-a362-e4a902b98f5f"
        },
        "item": {
          "id": "181b8e77-4639-4057-98dd-bbf6fec7be20",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "42886550-8e93-4f70-86d8-2b91f8c94603",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "c730c83a-7674-4111-a71a-71abb3e88d9f",
        "cursor": {
          "ref": "57325c03-43fe-4135-b993-e0791eb2bde9",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2f4dfbe3-cb03-48b4-b19a-1e70f2ed225d"
        },
        "item": {
          "id": "c730c83a-7674-4111-a71a-71abb3e88d9f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "21c286b7-d7d3-43b1-afd8-736727cd604c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "a144a481-9951-4aa3-b016-400dbf36ad32",
        "cursor": {
          "ref": "0bd3d68f-10b6-48ee-8a07-1b6763e683e8",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8c12ff52-e719-4cfd-a792-78bc710e2e67"
        },
        "item": {
          "id": "a144a481-9951-4aa3-b016-400dbf36ad32",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "831fba31-504b-499a-994f-0c1437398880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f5bcf7-863f-4b4b-a5ec-73df34b6564a",
        "cursor": {
          "ref": "86152cd7-0c2e-466e-8d67-c2d8fcaf466f",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fbbe38f5-33cc-40b9-8a92-d7ad8edbb19f"
        },
        "item": {
          "id": "10f5bcf7-863f-4b4b-a5ec-73df34b6564a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a2077c85-d1c5-484c-be52-ee983d59116e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "1225b1e5-4aeb-4cdf-8bd9-c769ce6e816e",
        "cursor": {
          "ref": "3c1c8ef7-c5f1-485b-9311-7b8ba2af366e",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7df4e6e5-26d7-4233-b973-475c747255f2"
        },
        "item": {
          "id": "1225b1e5-4aeb-4cdf-8bd9-c769ce6e816e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "94ddce60-a3a7-4470-a32c-8723900dbe25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131d4e50-97c6-4008-9fbb-3e6417cb3cba",
        "cursor": {
          "ref": "353ad6f8-00f3-47e3-a5af-ffa797a7232c",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ff1ddbbb-59a4-4e3d-b432-4b51be073eb2"
        },
        "item": {
          "id": "131d4e50-97c6-4008-9fbb-3e6417cb3cba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "91d74a68-7444-4c3d-b8a4-438a6c6e4b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06dd0226-a87f-4e39-bb5e-7e87b1300b2a",
        "cursor": {
          "ref": "00020262-fdb8-4635-b73d-106b32e46540",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8f5d784a-8675-470b-ab34-30d8645be258"
        },
        "item": {
          "id": "06dd0226-a87f-4e39-bb5e-7e87b1300b2a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "aa8c97b0-ffcf-4e0f-a169-e907963cbb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05928d1a-d126-449d-af69-9f5794cd7ea7",
        "cursor": {
          "ref": "0ad8bfc7-7dcb-495b-8596-ee17511669a1",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8b6ef78c-50d9-4413-9b68-531988331ad1"
        },
        "item": {
          "id": "05928d1a-d126-449d-af69-9f5794cd7ea7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0cfeb902-63fb-4f3f-b3ba-bb15dbf39fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026fdbb2-e669-413b-91ee-561fd2fb3f43",
        "cursor": {
          "ref": "ab2e4605-8f9c-4d60-8ff5-d52377f146d5",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "961a687d-6c64-4d10-a451-c88347219a51"
        },
        "item": {
          "id": "026fdbb2-e669-413b-91ee-561fd2fb3f43",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0f4d23de-b879-4dfc-8cb2-1159c8fae693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2efa34a-840c-4524-b5bc-1d72e3d5ebfc",
        "cursor": {
          "ref": "2dafd297-3d1d-476e-a4a8-41131eaefb46",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3cfdcda1-795c-492f-b413-c20b38df2390"
        },
        "item": {
          "id": "e2efa34a-840c-4524-b5bc-1d72e3d5ebfc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1ff10c2a-f9f9-4e9d-938c-9d4bc961e757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "93b3e38b-1cfe-4e15-bc90-2c7c7e01f429",
        "cursor": {
          "ref": "84604875-5b11-4df3-980d-cdfd3f60fdbc",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ea438ff0-e3f2-4afe-9b21-095e72b6f29d"
        },
        "item": {
          "id": "93b3e38b-1cfe-4e15-bc90-2c7c7e01f429",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "11e048b6-950a-427f-a412-30bd1931a4c4",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "afbc74a3-8e7f-4f55-a093-8d7cbaaf1654",
        "cursor": {
          "ref": "15e86fbf-43ec-4385-a784-1a406b1a8775",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c3192ad-014b-4e9a-8b1a-f0caed16f8e8"
        },
        "item": {
          "id": "afbc74a3-8e7f-4f55-a093-8d7cbaaf1654",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b5749d30-3383-40f7-ac17-a8c6903ddf03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3438a578-a710-420b-8c12-f02d7605f425",
        "cursor": {
          "ref": "5e4a4939-b736-40c6-9424-7cb5e7bb2ad8",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fabc016c-8dd9-4191-be48-0a91ed31ae50"
        },
        "item": {
          "id": "3438a578-a710-420b-8c12-f02d7605f425",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "655bbb1e-8c04-43ce-bf6d-80709e6c1f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "992ecc65-c836-4d36-b188-73938a893c2b",
        "cursor": {
          "ref": "960ccba6-5068-4b4e-a3af-ef198bf490bd",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bfd0bb7d-ae41-4d54-9bd6-f54e8cc407b8"
        },
        "item": {
          "id": "992ecc65-c836-4d36-b188-73938a893c2b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b53422da-2654-4ed1-8337-e4fb7a93ffaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637bd568-26f1-4382-b96c-6ec665f1a9f6",
        "cursor": {
          "ref": "cc8e23cb-0780-4126-bce1-9af61d87d514",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2d3fd7cc-e10b-4729-9526-b1b46e135200"
        },
        "item": {
          "id": "637bd568-26f1-4382-b96c-6ec665f1a9f6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4f57936f-d177-499e-8f7c-214c5afdd273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cf4f0b-75f4-45a7-8b20-c52cfdcebfba",
        "cursor": {
          "ref": "a3b0deef-6047-489e-9277-fd2e6499fe91",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "516c8969-ce7b-4e0c-acdd-c2c6c8737088"
        },
        "item": {
          "id": "c2cf4f0b-75f4-45a7-8b20-c52cfdcebfba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4827cec5-590c-4657-a7f7-ff4694a8fe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2579b032-a425-4e1a-9954-ecb4fa1b86d7",
        "cursor": {
          "ref": "7d06279e-cf2f-46aa-a79e-1ea6c387638e",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dd5e7845-f854-4d4b-b49f-8194eec62265"
        },
        "item": {
          "id": "2579b032-a425-4e1a-9954-ecb4fa1b86d7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "26dccc2a-0678-4f02-98eb-2471e95ef66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6793378-53c6-45f0-91d5-342e8ca0abe8",
        "cursor": {
          "ref": "ec9ecb12-ee21-4598-a617-4d8a103a1427",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3acb12ce-9ed0-4ba9-8a5a-8d8a5262d461"
        },
        "item": {
          "id": "b6793378-53c6-45f0-91d5-342e8ca0abe8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ac12aeeb-8a5e-4469-99f5-6ff64917ab5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65319fd-83a3-4b41-9d8b-55f0f1afec2a",
        "cursor": {
          "ref": "a2d57c27-4bea-40bd-a843-1d9f87d5a751",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "75598414-959c-41f6-acdc-dc002f8bacb6"
        },
        "item": {
          "id": "a65319fd-83a3-4b41-9d8b-55f0f1afec2a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "dcd6840c-4062-4d0d-9590-048629241809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb620c7-09ab-4607-b604-dbabe46b6544",
        "cursor": {
          "ref": "5b4687ae-a985-4124-9688-656bcdf2f98f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5f3ca56d-636f-408e-b884-a794d83a5a0f"
        },
        "item": {
          "id": "acb620c7-09ab-4607-b604-dbabe46b6544",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a1ddba1a-c10e-49e6-baac-58e95868ecfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb46037-4e56-4717-ad25-6b363144f939",
        "cursor": {
          "ref": "d7fbd2da-ea72-4bc2-8668-5c4822c1aae8",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "aa4588ee-bc5e-4010-88f0-e523de5021de"
        },
        "item": {
          "id": "dcb46037-4e56-4717-ad25-6b363144f939",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0cf4dc4d-5878-496f-a96a-62b883a8e710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2c5b41-b963-42d7-a3f8-223ff1d15597",
        "cursor": {
          "ref": "965953f9-9b6a-4081-9e03-a5dbc3922ecd",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5ec1c605-1d2d-4178-a41e-4f47854e0bb2"
        },
        "item": {
          "id": "6b2c5b41-b963-42d7-a3f8-223ff1d15597",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "119dea55-4e7d-43da-b87a-d506c696511c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5987e944-0318-4302-a1fa-2ea57d10e5d1",
        "cursor": {
          "ref": "1d35cf5d-59c9-4b28-9e27-46e2fdfe1680",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0d1c316a-9cc0-4027-8ab4-922ec4d8b2e7"
        },
        "item": {
          "id": "5987e944-0318-4302-a1fa-2ea57d10e5d1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6884bb53-aa90-46cc-ba3d-1055aa7e3104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00db2df-7c7c-4a19-a6bb-f1ae47892c2f",
        "cursor": {
          "ref": "2c1721c1-869e-41aa-bd22-53416322ffba",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b4c54ffa-6b9a-42f3-9686-6a083cf6362c"
        },
        "item": {
          "id": "a00db2df-7c7c-4a19-a6bb-f1ae47892c2f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba30d36a-e52a-49ff-b949-2bad40c3a884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f3e10e-49d1-499d-931c-5acd965ebf74",
        "cursor": {
          "ref": "1e50012e-0312-471e-bcf9-84d28cffcc14",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "47858e89-9cbe-4354-ad43-f19b39a40d25"
        },
        "item": {
          "id": "83f3e10e-49d1-499d-931c-5acd965ebf74",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fe3f7a99-5528-47ef-8b48-38bed0bde51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcc182c-6213-4c07-896a-4236325cced7",
        "cursor": {
          "ref": "32173989-497b-4daa-9148-c8502f6de3c5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b04920fa-afcf-49d0-b5f7-5f804c7e6eba"
        },
        "item": {
          "id": "3bcc182c-6213-4c07-896a-4236325cced7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9f71db0e-6a93-4568-8a72-06ec703021d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31a9dc3-9ea0-456b-973c-75146ce90645",
        "cursor": {
          "ref": "d1314223-f416-4810-a5cd-e0bff9ef4646",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a083f525-8b4c-44a1-b5d1-82e65bb8b6e5"
        },
        "item": {
          "id": "e31a9dc3-9ea0-456b-973c-75146ce90645",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "20a0e3b7-3227-4f05-8753-577f629a3e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32607585-3b56-43e0-8bdb-61fc84c5be94",
        "cursor": {
          "ref": "37b42d37-b886-465b-816c-3cbb418ea8a7",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bad4483a-099f-4e17-a830-afeb71b11694"
        },
        "item": {
          "id": "32607585-3b56-43e0-8bdb-61fc84c5be94",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "35080363-ae0a-4899-a401-3de152125116",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "762ecdfb-d53b-4f70-ac4f-41b5ffa7c347",
        "cursor": {
          "ref": "faf22e81-f7fb-4ea0-a2d3-e6633a07090f",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "18de251d-372d-4633-be2e-894f4b886dab"
        },
        "item": {
          "id": "762ecdfb-d53b-4f70-ac4f-41b5ffa7c347",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "792eb8e3-e9c4-43c6-afe0-a3c25eb0c4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f572d13c-3cb0-4bda-a940-f4ab8a04208a",
        "cursor": {
          "ref": "6616568d-3400-42b4-9189-01c1c3d5eadf",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "98333b07-d028-4cdd-93e9-736fce7b3422"
        },
        "item": {
          "id": "f572d13c-3cb0-4bda-a940-f4ab8a04208a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "aa9788e6-c6d4-4b06-982f-7ab29d97b0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de2a5c7-c4f5-427a-8eae-f117d82a5c9e",
        "cursor": {
          "ref": "53262fcf-f0c3-4354-ab0f-baa807f14e40",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fe6fe690-b8c2-4a43-9f78-61e8adf8f4d9"
        },
        "item": {
          "id": "3de2a5c7-c4f5-427a-8eae-f117d82a5c9e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "70a613e0-b160-4ee1-91c4-749cb8f991f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f53485-d58e-4877-8dbf-0bf3ff43b2aa",
        "cursor": {
          "ref": "46f2da5a-e3c6-4895-9058-4c5e7ca5f4b5",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "24af806e-b489-4df7-a38f-72df93721834"
        },
        "item": {
          "id": "d2f53485-d58e-4877-8dbf-0bf3ff43b2aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eeb8a27a-d9d6-4479-859e-0fbfd261261f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "cb97b263-9206-4d6f-a847-f89a50e00665",
        "cursor": {
          "ref": "9307f554-91f5-429e-a68d-e161d2fa9f09",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "41c796ab-8a24-4847-81fc-a969621da11d"
        },
        "item": {
          "id": "cb97b263-9206-4d6f-a847-f89a50e00665",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c28a7720-44db-4896-bb3c-1e3616617e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2dae34b-187c-40f7-9de2-7e2c2fd673b2",
        "cursor": {
          "ref": "df8383eb-ecf5-47e7-aa65-b650d3388491",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d445c979-f3b0-4c7d-9927-0e570126ce19"
        },
        "item": {
          "id": "f2dae34b-187c-40f7-9de2-7e2c2fd673b2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b94a58ce-7a09-4bc9-83e3-998fa95074b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162911fb-b63e-46e1-8e3c-43a3861b177b",
        "cursor": {
          "ref": "61d8c5f5-9187-47af-8aeb-a6bd707f327a",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "859ce1e2-6726-4e74-9030-0c34dda72c49"
        },
        "item": {
          "id": "162911fb-b63e-46e1-8e3c-43a3861b177b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9c8b4083-4ee2-499c-af13-ab0975338607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b10b969-10ad-43c6-a760-051eb894bab1",
        "cursor": {
          "ref": "39548d03-5b4f-45fc-8d16-10bc6e9985d5",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5fdd4e16-7a60-4547-b9e8-9b6fe57154a4"
        },
        "item": {
          "id": "8b10b969-10ad-43c6-a760-051eb894bab1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1b91bdfc-107d-4dba-9e3a-de55c85b9b83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "1bdbabbb-f485-4cea-83a7-1b0989f931c1",
        "cursor": {
          "ref": "51eea924-93da-4dbb-906e-1bbfbb71f7eb",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1c00473c-8eea-428d-95c1-fd54062c2f06"
        },
        "item": {
          "id": "1bdbabbb-f485-4cea-83a7-1b0989f931c1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c1c6d1db-d4ae-46de-8056-13470db60c9a",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "c2a3d6fb-cb51-4495-9e3d-98ea2c0a502f",
        "cursor": {
          "ref": "73951602-4b29-4a75-bf90-386bb4e17b68",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "59c700e1-9f05-4a59-aa59-3657c745f821"
        },
        "item": {
          "id": "c2a3d6fb-cb51-4495-9e3d-98ea2c0a502f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "66afc199-1813-4cd2-9999-9588cec5e6cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "6fb9a1c2-b8b4-47a5-bd25-54e336ce28be",
        "cursor": {
          "ref": "5b97995a-484f-4143-932b-a5b5c2951b86",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8634d13f-ba73-4241-a4d3-11d8876ebdba"
        },
        "item": {
          "id": "6fb9a1c2-b8b4-47a5-bd25-54e336ce28be",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9962b2fa-a827-4111-80bb-ee3cb6dc22f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867c1afe-5f3c-4e4e-9cb7-9b765f856b04",
        "cursor": {
          "ref": "68128666-a098-428a-9709-5b31e8f8f42e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "18e80e02-fb14-406e-bb8a-4a1a05d2ffb4"
        },
        "item": {
          "id": "867c1afe-5f3c-4e4e-9cb7-9b765f856b04",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c636c56b-940c-4aee-95cb-cae48e442ccf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "236f9ea4-3da8-4022-bffe-892b2a95404a",
        "cursor": {
          "ref": "cef6404f-3743-455e-ba47-751604c24681",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f0eb4232-de24-42ac-aae3-5b7e77ab55f7"
        },
        "item": {
          "id": "236f9ea4-3da8-4022-bffe-892b2a95404a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "79320080-e513-493e-bfce-b81109cc2423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "febe5d6e-9d66-4d53-a9fe-24cfc5618c3f",
        "cursor": {
          "ref": "6c6423f2-c588-442b-9cf8-86db525efe1e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f4ebe3b9-1be9-496c-8662-b43b0a64ba9f"
        },
        "item": {
          "id": "febe5d6e-9d66-4d53-a9fe-24cfc5618c3f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e38ca9dc-ae32-42c6-b675-1fee7db5dad4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a36bea00-19d8-4d1e-9de2-e46aaed4d483",
        "cursor": {
          "ref": "3db2ad73-3a38-467d-9b73-f840c8077d15",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8be0eb6a-f22d-446a-a42c-0723917eff59"
        },
        "item": {
          "id": "a36bea00-19d8-4d1e-9de2-e46aaed4d483",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a21f9e85-ec96-4554-bb32-aa90fa17747b",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6c0461a1-562d-474e-9958-7da954fadc8d",
        "cursor": {
          "ref": "d8baf9d2-9ad7-47fe-b8e1-8a97e8c5e2d8",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f328d0a9-6bee-4a4d-bfca-c93ba478cb9e"
        },
        "item": {
          "id": "6c0461a1-562d-474e-9958-7da954fadc8d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "42321410-6e1d-4827-8e6e-4ce3853216dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "52bfb976-aff3-436f-9377-dca5be068fe0",
        "cursor": {
          "ref": "28cffde7-3ff5-4358-85e5-5809542fcda5",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f5974f4f-a5c9-403b-a7e2-1342f020306d"
        },
        "item": {
          "id": "52bfb976-aff3-436f-9377-dca5be068fe0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7dde2fe3-ad89-4109-9578-e56103260750",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "904a43dd-af38-4342-9766-9cc01ccf8c0e",
        "cursor": {
          "ref": "fd64bb72-479b-479e-ad14-9a70236c694a",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ee17f543-e309-4a7a-8983-a4eced5dfb83"
        },
        "item": {
          "id": "904a43dd-af38-4342-9766-9cc01ccf8c0e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5ce20b83-32b0-461f-92b3-0e3564d51aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf44795-e9f9-4d77-b9c1-7cb4c96a513a",
        "cursor": {
          "ref": "e84e54b1-4e5b-4f7c-ac7d-1720a5efd0cd",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "65256feb-584c-4e2c-b908-de8806cb710a"
        },
        "item": {
          "id": "fcf44795-e9f9-4d77-b9c1-7cb4c96a513a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "297179fc-7a30-4416-8d52-4f22247a2a3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "1fc0d355-b52b-4a40-9d0b-4c1c2eb86264",
        "cursor": {
          "ref": "8755ef19-bafa-4f0c-8982-9aa75122a72e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "429d3064-07c4-4c7e-b5b1-92d7819a82e8"
        },
        "item": {
          "id": "1fc0d355-b52b-4a40-9d0b-4c1c2eb86264",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1f2608d3-3a30-42b0-9413-ee8df4174c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fffbbb7-3895-4111-a702-bdfa6c88617e",
        "cursor": {
          "ref": "141d04c3-7895-4f5b-9a58-840ec41dc7f3",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7ccb57e9-b9ef-43ea-bb11-4f09d1160185"
        },
        "item": {
          "id": "5fffbbb7-3895-4111-a702-bdfa6c88617e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c39ceafe-12b1-43ef-be66-be0263268907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbddaac-d6fe-400b-be57-1836908c3a21",
        "cursor": {
          "ref": "d9ff5d2f-a635-43c2-b6ec-88b43f4e9751",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7bae173f-9095-4338-97ae-00322f6854fb"
        },
        "item": {
          "id": "fdbddaac-d6fe-400b-be57-1836908c3a21",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5479d5a7-c433-4df0-a760-59f6c768bdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b8887b-e61f-4b84-a87d-1e1c2ef1f194",
        "cursor": {
          "ref": "1ec714d1-9c72-4441-84fc-c3dfdb92382d",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "321a71bc-edd3-44e9-88f5-e6ab89d3a3b5"
        },
        "item": {
          "id": "51b8887b-e61f-4b84-a87d-1e1c2ef1f194",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6ae4ac21-e0b3-4eee-9446-59cf9d3b3d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5be153d-ec2e-4c56-9fee-f4d2c45d8230",
        "cursor": {
          "ref": "10df4027-dd05-4397-bfa8-c3300bb1490e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6802a500-074d-41b9-bbcf-0d8b55cc12f0"
        },
        "item": {
          "id": "c5be153d-ec2e-4c56-9fee-f4d2c45d8230",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5a394e43-bf3e-4197-b06d-0d49c578efc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1917545-5696-4531-8c70-41ce1560698a",
        "cursor": {
          "ref": "82b1712d-d8f6-4a17-8e49-cb3a3a4e192f",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0760fd48-774f-4ece-8edd-5e2a93740429"
        },
        "item": {
          "id": "c1917545-5696-4531-8c70-41ce1560698a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "88e50093-227b-4c85-b9b3-3156b625c70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70c90be-9a5e-4f8b-9386-332859b9fdab",
        "cursor": {
          "ref": "6a3e66af-9db6-490e-8247-65b9b36e5dc2",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6015dae1-7822-4de2-ba89-e3178a239cfe"
        },
        "item": {
          "id": "e70c90be-9a5e-4f8b-9386-332859b9fdab",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "595986ed-d9e6-48a0-aa04-e7905c6f33b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef46788-34e5-443a-a8ec-4a6bce99f330",
        "cursor": {
          "ref": "879f8fb6-6212-4531-b8d1-93f03531b536",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "72fd807f-1f7a-437b-b828-41cd6b09b661"
        },
        "item": {
          "id": "cef46788-34e5-443a-a8ec-4a6bce99f330",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "140fd6d2-f03f-41ae-9384-edd595db8627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f91d6d0-c2ee-4179-88a8-e8287be1b56f",
        "cursor": {
          "ref": "df7ed183-e4b7-4f13-b18c-cb7581c8607d",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "26690a54-00fd-4f14-b20d-d93b39b0aaf9"
        },
        "item": {
          "id": "6f91d6d0-c2ee-4179-88a8-e8287be1b56f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6e90dcb4-d5d2-4106-a45b-88de237e326d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635d3fe2-10e1-405f-bf2e-bdfc6a30bd3a",
        "cursor": {
          "ref": "6575bb05-1d0b-4a1e-890f-82c6839735ab",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1d6e60e7-56d5-48d9-9268-5ca6015ef440"
        },
        "item": {
          "id": "635d3fe2-10e1-405f-bf2e-bdfc6a30bd3a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "48b588ab-14ed-448e-a3ce-5b38ef3d67bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b60199e-78dd-4f48-bd96-d13396850705",
        "cursor": {
          "ref": "554c59de-b5c3-4603-b37d-08f85aa68ef9",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a87f4c43-0182-4d9e-94bc-73bf5f5accb1"
        },
        "item": {
          "id": "1b60199e-78dd-4f48-bd96-d13396850705",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9a9cec74-6290-47fb-96ee-4f9f0ca01367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3eceb6-a1c8-4632-80f3-8ac192bbae40",
        "cursor": {
          "ref": "88a235d5-734d-428c-a23c-30724656cf71",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4e253707-950b-4452-aaa4-bae275a228d9"
        },
        "item": {
          "id": "6d3eceb6-a1c8-4632-80f3-8ac192bbae40",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a885eb75-24d4-41dd-88ba-86a6ecb91fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7d817a-eed4-490c-830a-c5c7435c6975",
        "cursor": {
          "ref": "fd7653bb-5d15-4073-b8e8-1c23d864cf2e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "de87776a-ad3b-4d70-a96d-ce7a9dd0b2c2"
        },
        "item": {
          "id": "9b7d817a-eed4-490c-830a-c5c7435c6975",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "97924416-5d09-4066-b78a-31720a4cd534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c867edb-2ed6-471e-a34f-68789822f413",
        "cursor": {
          "ref": "744b4bed-4ab8-47ff-8c2b-b8f88c121f64",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bc714996-2ec8-46e7-a93a-3c984599f362"
        },
        "item": {
          "id": "9c867edb-2ed6-471e-a34f-68789822f413",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7b0c6259-e10d-4071-88b0-5638e32085e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc11e0f0-28b2-467a-a48c-149002cafe2a",
        "cursor": {
          "ref": "5dd03cf0-17f7-4d24-857e-34333fdc1111",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d2924258-4393-45a5-bfa2-3cbc735cb5ed"
        },
        "item": {
          "id": "cc11e0f0-28b2-467a-a48c-149002cafe2a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f9a6d513-dcd0-49d5-a253-147365a86fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af52d5a-9da3-4cc4-b03d-183593f53259",
        "cursor": {
          "ref": "90e1f688-54b5-4bfd-b5fa-7f862706512f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "909ddef7-37c9-4f47-84ef-ae4d7e37bed0"
        },
        "item": {
          "id": "7af52d5a-9da3-4cc4-b03d-183593f53259",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "39225872-8a58-4f4c-9d66-f8b8e2452557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51af6de6-2faf-413e-8711-137257165fdf",
        "cursor": {
          "ref": "2a389f1c-ad92-4c4e-b182-de5665865780",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "50c091ca-5f62-48dc-bd96-d2fccc98c24c"
        },
        "item": {
          "id": "51af6de6-2faf-413e-8711-137257165fdf",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9deecd04-310b-4ffb-8818-b646bfecead9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a61b571-a4f7-429f-a895-659d2d4def85",
        "cursor": {
          "ref": "fbbc5d7e-f3b6-43f0-aaa7-264c12a0900a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "14e28681-ba38-4f88-bfb0-fe36849a541a"
        },
        "item": {
          "id": "5a61b571-a4f7-429f-a895-659d2d4def85",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2d1a543f-8ff8-45ff-a7cb-63b5ca3c5427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9592165d-faca-46b7-b3ea-8a907930a0bf",
        "cursor": {
          "ref": "5ac466ff-b1f1-4c04-ba07-425bb82c7fa3",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "069bff5e-18ad-450e-84e1-a3bdc67a5d91"
        },
        "item": {
          "id": "9592165d-faca-46b7-b3ea-8a907930a0bf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f214560b-8057-46ad-b911-484a3705fcc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1f8284-937c-4e57-9457-f587af522e01",
        "cursor": {
          "ref": "16a78b4c-543e-41d8-8871-df009170035e",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ef1a2d47-588b-4542-bdba-75d9be0ad236"
        },
        "item": {
          "id": "2a1f8284-937c-4e57-9457-f587af522e01",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a7011ad0-7bc5-4c7d-a9a7-845d6a630e8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "f8832206-6395-4c84-a4e9-4b5497a6ab66",
        "cursor": {
          "ref": "485a5913-67b8-4712-9ce1-9e47c269a688",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7c235223-3afe-495d-beaa-1d785a7255b8"
        },
        "item": {
          "id": "f8832206-6395-4c84-a4e9-4b5497a6ab66",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b9f02745-36c1-43d4-8ae3-e2704f4131c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adb2fae-f64d-4814-a00d-f396221d07fb",
        "cursor": {
          "ref": "d0ff2aa9-3652-48bf-8696-93614f43b711",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "10e0c91c-0adb-43d6-9ea4-cfd495d8d447"
        },
        "item": {
          "id": "7adb2fae-f64d-4814-a00d-f396221d07fb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f7c0c884-0cf5-4f14-9e15-4007b7e0dd7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "a8fd08f6-aeed-431c-8c8d-503c083a9952",
        "cursor": {
          "ref": "de056498-b83c-45ec-bee5-2286946cb85f",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "06c7b6e5-837c-4d6f-8dc1-3416d937e6b4"
        },
        "item": {
          "id": "a8fd08f6-aeed-431c-8c8d-503c083a9952",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "88645e8b-2832-4b2e-a5e9-e0a77b60b4b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "d0bca7f5-1836-4867-81d6-6e34fdcd593d",
        "cursor": {
          "ref": "1628b348-776c-4da6-8324-617b0422a417",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "9fa39bf6-a926-4fa4-bedf-72c8a1af6096"
        },
        "item": {
          "id": "d0bca7f5-1836-4867-81d6-6e34fdcd593d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "362eb18c-7003-412b-aeca-3fba863538ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "76e3a070-f634-498a-9c36-c2ea770d0f73",
        "cursor": {
          "ref": "c104c2e3-e854-4255-a99c-33b3075d780a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3b5f99ae-6876-4510-b011-f783805504c1"
        },
        "item": {
          "id": "76e3a070-f634-498a-9c36-c2ea770d0f73",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e5fba166-59c9-4abe-a419-b4110dc08dd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "6e87a081-3cdd-42fb-95fc-8c67592282e0",
        "cursor": {
          "ref": "9590d3d8-57ba-45ce-bd9e-0f2e789791e3",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "993461c4-0f07-4a75-966a-518285bca08c"
        },
        "item": {
          "id": "6e87a081-3cdd-42fb-95fc-8c67592282e0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a07ee3cb-0dbc-4aea-beb0-5a4cb82d2b68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "e7fa0725-3976-4714-afea-87d928df8e63",
        "cursor": {
          "ref": "9406f9c8-d226-4ca2-aec9-bf2e5c58fbe9",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "91757ff8-a80f-475e-a900-ec4810369371"
        },
        "item": {
          "id": "e7fa0725-3976-4714-afea-87d928df8e63",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aef4b8a5-386a-4bec-b0a1-3158463bbd2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab445e18-dc63-40cf-af18-fb39590a45f6",
        "cursor": {
          "ref": "2bb9b894-844e-42b8-8e6a-7899aa5fd8b0",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "00d3ac51-c96d-44ec-9f9d-5f4faf1382ea"
        },
        "item": {
          "id": "ab445e18-dc63-40cf-af18-fb39590a45f6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "60f81be1-6194-4a90-93bc-5ff9cd22a189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a290c40b-e5b8-46f1-9141-e61573b2f58f",
        "cursor": {
          "ref": "1e7ec3ad-08a3-4cdb-a091-2c921caa8a2e",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "28f32d1f-438e-4994-bebc-c86bff67e7a5"
        },
        "item": {
          "id": "a290c40b-e5b8-46f1-9141-e61573b2f58f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3ad74c94-10cf-4c2c-bf93-c6e9d04928de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1952e475-53ab-4e1c-84ae-032bd76cacc1",
        "cursor": {
          "ref": "ad157e20-88e9-45ba-8708-26f4ed6908c6",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6356a51b-6f05-408c-beba-6b1558c55710"
        },
        "item": {
          "id": "1952e475-53ab-4e1c-84ae-032bd76cacc1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4e7d888b-635a-4cb6-8309-fd0208e25663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9673b3-c9ef-41ea-ab2e-477edd676045",
        "cursor": {
          "ref": "159113fb-cd91-46f5-b27b-02e537e76ffa",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bd717110-5582-4cf7-81c5-2f223f48fd0f"
        },
        "item": {
          "id": "0f9673b3-c9ef-41ea-ab2e-477edd676045",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4637a214-e117-4d38-b926-a28ee1f570c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c847775f-5e5c-435b-9947-8799ee121881",
        "cursor": {
          "ref": "a1193c1f-2c17-42bc-b3b5-5d93eea160eb",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f9ff867f-b988-4c6e-8387-ab088c2fa933"
        },
        "item": {
          "id": "c847775f-5e5c-435b-9947-8799ee121881",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9962b50b-da5b-42e0-a9ee-6694ec12944c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88abc1db-1570-4fbf-8f35-d682a0048027",
        "cursor": {
          "ref": "aedfe305-83ff-4d9b-a08f-fbc986619dbe",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "513f8257-1ae6-410c-8e7d-e2da77eb015e"
        },
        "item": {
          "id": "88abc1db-1570-4fbf-8f35-d682a0048027",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1c370620-632a-4e2f-a0c0-52a61ac6516c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9630cc-d209-44c5-a35d-9585d4c83485",
        "cursor": {
          "ref": "738c540f-c0d3-4d9b-bd81-b991c8243d5c",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5e34323c-0ab5-4e3b-8bef-e6bd5412ac3f"
        },
        "item": {
          "id": "6f9630cc-d209-44c5-a35d-9585d4c83485",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6da00f2c-5b7c-4885-b7bd-5af09a243739",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "1e494942-af74-4121-ab01-9cf9fbe2fb10",
        "cursor": {
          "ref": "04095df0-506b-4241-9fa0-804907e38c63",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "28271f84-a118-4caf-819f-6da0d3db9b89"
        },
        "item": {
          "id": "1e494942-af74-4121-ab01-9cf9fbe2fb10",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b4dffc70-4afc-407c-969a-d3a9049c42e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "dc737bcf-a27a-4603-b728-69fb8da7ea16",
        "cursor": {
          "ref": "763736eb-811f-4efc-ae3c-b9d14e9359a1",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "34d3ce97-5dee-4b01-b39b-2187da65659e"
        },
        "item": {
          "id": "dc737bcf-a27a-4603-b728-69fb8da7ea16",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "52c3a068-35d1-4aea-b8ef-a3e72c3a8081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "145c9195-44b4-402e-b8cf-c11142395e49",
        "cursor": {
          "ref": "8015b240-6be0-41fb-96c0-0633af4eb992",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4b207173-2ca7-470e-b40a-e160e794a907"
        },
        "item": {
          "id": "145c9195-44b4-402e-b8cf-c11142395e49",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c1a4259-ca8c-434e-bb18-4bf06517b528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145c9195-44b4-402e-b8cf-c11142395e49",
        "cursor": {
          "ref": "8015b240-6be0-41fb-96c0-0633af4eb992",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4b207173-2ca7-470e-b40a-e160e794a907"
        },
        "item": {
          "id": "145c9195-44b4-402e-b8cf-c11142395e49",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4c1a4259-ca8c-434e-bb18-4bf06517b528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032dff11-0e14-4de1-8036-2135b9451df5",
        "cursor": {
          "ref": "09be91a4-cdc6-4a37-b1e1-a6f995e8c095",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f7150626-3928-48a4-808e-b512ad677a26"
        },
        "item": {
          "id": "032dff11-0e14-4de1-8036-2135b9451df5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b07840d-d6a6-43d8-a6fb-cf5fbd9b9466",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047c4d76-2572-4621-86e5-1611c98bdff7",
        "cursor": {
          "ref": "16ef8afd-1f3f-4df5-b9e0-1df553341f3c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f3aaa024-ae1d-461e-8526-4c1deae97fea"
        },
        "item": {
          "id": "047c4d76-2572-4621-86e5-1611c98bdff7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a8abaa4b-8644-4793-a800-e4ea4ddbfb76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}