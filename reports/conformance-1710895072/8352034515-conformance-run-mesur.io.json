{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8b010360-71a2-43ae-ad95-00c10c0c9790",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b7735706-dffc-4f41-9903-d9ab29ca6925",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c97385a1-c66e-4f06-9195-b5e8a8f20b69",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3946415e-c19d-440a-9ace-01a5e5c04922"
                }
              }
            ]
          },
          {
            "id": "18e913b7-de9f-400b-8d64-d6d965ccbb0a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "890a3f94-d1d3-4f77-a373-a8f86bf6ff15",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4c76a6c3-944e-40c8-8f79-72ffdb301877"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2639f23c-3961-4b0d-81fb-cb825c9d4a90",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f27e34fe-2cbf-48c2-873d-d07918410fa9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fffacbd-dcac-41b8-9788-ed11cedfdd39",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed56a393-572b-4add-a0b6-56ae2a098e14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdce11bf-2b20-4ce9-bad3-f5bfc05e19da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7cb12b84-48ae-48fc-804c-0d3466dc4ffb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9a9e313-2c4b-44b6-b3f8-3113fc864fb3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0fbde98-9864-4f7c-a53d-b2d87c82403f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d834bed2-70fa-407f-8be9-6f6fcd2ab473"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "620dc79e-99c2-469f-8cf7-2e668970c885",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "dee57ab8-8fca-4c57-a0ad-f3c9072c3e5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16982073-87b5-40ee-ada0-8cd32811459c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4b410ca-e187-4d97-896d-afa71ea14f8b"
            }
          }
        ]
      },
      {
        "id": "398841e1-a1df-49b0-8ad5-87e5f843d13f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6075860d-3d98-49a1-98ef-3d0d48be4d93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60f98aa3-1dcc-47bc-a213-96a76376b8f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e9a42cf-771f-4a92-9830-6e510732e3bc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8e084a-6680-4d1d-a6a8-5367f23635cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74960a78-2c3a-4b20-b56e-0643fb6e5330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf436df-f088-4dd9-be6a-b444b6c35871",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af941bd-a32b-441a-8bd2-0118ab400fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e3082b4-2f08-4217-9173-c17328f9082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e1b7b4-9487-4db2-9742-4da7a1b79751",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc13c56-89cb-4ff3-abfd-9ff4db80d817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c1fd8c5-0007-48ba-b907-e828434f9325"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecbb0323-3a2b-471e-8eed-86f7af19efd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dcb6319-d312-4baf-a505-a6f33c900901",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7f2fd3-1c87-4fdb-8aeb-74a3306f4d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6acb53b5-29c7-49ac-abcc-6dafe64a4230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619cc691-f16d-4f60-98e7-73856facf03b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc440cb-9c2b-47b0-8e2e-c7381e90dbb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0931e840-15ff-4cbc-b501-39ee7e1ba905",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee45c166-c6c6-4f2a-9365-1b371408db4c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d95a357-292f-4881-a80b-7423347f47e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "90020eeb-22e9-4e52-ad1f-6ac6120dc6bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d74d6db-f485-467e-8e7f-5964b17eb09b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c04f4363-2544-4501-b2f3-200fe4d05124"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67f6d60d-1624-4356-a5d7-48f43a2a4dcb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e67b9f8-e36c-488f-b372-e318e8222813"
            }
          }
        ]
      },
      {
        "id": "21d250ff-dd1e-458f-9d6b-307bfe668d38",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dc947e34-fc59-43d0-9990-c0f418b4ed09",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d629d68-850c-4cc0-9de1-65ac3e182407",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cf0f04eb-e57d-4296-9115-e40ce4648126",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99fb7c2-f78f-4537-8654-60ab598c2e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb301c9-ffe9-4c3a-b29d-f60433577079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745d3739-997e-47c9-b79e-1f1dbf3f9d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e30ef24-fd9a-4dd2-b197-e32013e313f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f50ef9-b29a-4ebf-922d-4d0c6cd40520",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697699ed-3370-4f9f-bce6-abad40c692fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7bf969-aa28-4216-b4ed-4b0ecaa4cebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed9e2dc-d919-440b-bc2d-3ae86fa6376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac4889eb-ff67-482d-8ba5-d67db015a270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7a0fe1-8f74-44c3-ade6-0459df287248",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08655422-a3d6-4c3d-ac13-a5a002d96dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483b2e0b-6701-468c-93c0-e76dc3cd07d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64337156-71d7-41b6-a066-60be4e555d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40a186f0-b724-48fe-9864-452cf56549a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85ce21d-c87f-46b5-8307-b7d634e1f586",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1868ff60-096d-45a0-a212-7714a5bb1135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a214bfc-96bc-4e1d-9c08-0c5f02c80b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f7cf11-cbfd-48e9-94c1-99153c669c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bb829a6-be11-492f-ade7-34b32c80c85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76a5d26-d57d-4fc6-9d91-5715239be06d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad198ae4-e469-4abe-9461-d06e26519891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f734076b-a10f-40c7-9a33-8cb258ff4fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f238497-0fc2-4eb9-be9e-47c483d01859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b411677-7f9a-4b21-85f6-75708e5b1852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8150a41b-de40-438f-a898-289f29c3da17",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27b997f-59dd-4f75-809e-5c30119ea695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f4f435-cf33-4617-9030-fa510328c138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103e1500-9ada-4f6d-95d5-c16975910748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d05ebba-8621-4b1e-bc17-30852a9d4b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a859fd3f-7f03-4a1a-a485-8134563d1aa8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b85d99-373b-4696-995d-767e5f8ca495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f35c6b6-74e9-4e02-8de8-8351b68f1daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52dcd428-f63d-4dc0-a7bf-ba0550efe6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "597172c8-324b-482d-958e-e84b29a368c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef06a0b9-3e2e-4cb3-8cb1-7e1049aa919c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db774f64-ad04-45cf-bc1d-0b29a69412e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09c3ea4-4cee-40ee-bf94-c7d08746d16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84accc3-ba58-437a-96b0-8d5401858ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "101f85d9-0bfd-4c3a-85ca-3f14b215dd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1f501c-a43a-454a-9a15-295142331f33",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04852ad0-8b92-46be-af26-f85378ea6b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe7ee11-43f8-48de-b465-3ea6fe87bbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd060f40-39db-46a4-b234-7970f77042cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59b49870-c41d-4c25-8d9e-6dfdb66362ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6077d55-f039-4ac0-b5eb-2c21608d48df",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858ab815-b525-4a44-aaea-0b50b5045745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c29617-86f1-46b5-b84b-00a48f354ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1d6523-15a8-4a89-9629-82b9056571bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "872add21-e5c8-4078-a9e4-fe75bbc7f5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93196215-e267-42e1-9804-858cd6f1ff2f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075096a9-af9f-49a9-b554-2573a9ad30bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c2924b-18f9-4c60-87ce-765552d1e09b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190db61c-09eb-44c1-8019-fd4be2482000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a26a0864-89d6-43e3-88a8-136bcff430f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3daa7482-1e44-4e40-825a-ff9be88f8dc6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4576fa-87a8-438f-b963-684adb456e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14eec911-c7b7-49f5-af2e-bf459ebdcf64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9be093-4b5f-49fb-af48-77685c871e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dae02b08-570c-48f0-9310-c462bd3788e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb086a80-9464-4271-820e-c35747ae7df9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f79158-ec79-4650-85ec-f0275d6edf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc8d6e8-ff85-4895-b031-b68741004969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c84441-c384-4df1-b28c-d56804ef4a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2ab1a6c-0c2f-45dc-8d25-c0360f7d5c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e724607c-37c7-43c9-8175-64afcb30490c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce34931-bf27-47bc-a614-c9b2ea242cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245cee1b-7815-4d37-83b3-92da47acb252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dca629-d3d7-45a9-8b15-91ee8ebc7871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e56bf72f-1462-4b01-bf22-b1aaf54fb658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199e5619-5378-4a81-b0ae-3d01a00c258b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c4d43a-f322-4ddc-997a-4c54c39215b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3b4146-bb26-4d6a-ad7e-32d910d67f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a672ef61-7084-422d-afba-5a2ef5c39454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "befc1cc5-ec7e-4a96-bbde-51c574492049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bed4850-b728-49be-bd79-82c9324243f0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e33cb7-03c2-42a3-a38f-2191c536303a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0291ed32-f0e4-4306-bb7c-a6d150d4d4a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ae87db-e420-4964-8628-1841d25e32c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3e6ef80-d451-4a23-93e2-d77938ec3e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e6dba1-abe4-4f3a-b37b-63639a727228",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5eb457-b7d6-4ecf-8f16-94a0420d2d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfa474a-0ec5-4f0b-b3a0-ac07309fb527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ac8d28-9a31-4530-91a4-463c05f8370d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a95c2685-0496-4600-85b9-c14c44359044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ac819c-310a-4371-8bf3-c840e1eb24cb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb49fb15-def0-4f24-b934-fe27d9fc43ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f07e94-7b10-4967-b737-74ec9e18e3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4139cf34-cd56-4a0a-acfa-75e0db92b7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e220fa8-235a-47e2-9e03-1fc8d45145ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ea2b6-adf5-4395-bcc2-925ee992ab1c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be038d37-b4e2-462f-ab03-6e7bcbe866e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "721d64da-1494-4c2d-91b2-52dc54f4e92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba6e5ca-6f2d-49d0-b47c-ecc5abdd7151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "246a3cc8-2987-4cd4-89d1-c54a15ca4c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e999d0-0944-4723-aded-945da74da4f1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98fd0ce-f032-49a9-a42c-8ecf844bb19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b6951f-332c-45a1-99ac-ad320e78f0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ed0242-400c-4b1e-a874-df400cd18883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "665c8c69-583c-4b1f-a1b3-e196b8507445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b333bd-e12f-411c-9733-1f1f25fdaf35",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48aab36f-5e4c-40f5-b421-81efdd97ac6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6852ca-34b0-4271-8641-92cd92a88cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f69bd1-1a84-4aa1-9ace-c56f48f45d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3548264-36c3-40c5-ad8a-70e8b6fe85e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd550ac-2bdc-42b3-97fa-35cf1bccfed1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb9b8a4-e4e7-465e-944b-3856c8bf1079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1770f6-5254-4e31-8fd4-72bee3da1ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f79a9a-e8bf-4232-804d-f8b0e43b57bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "190af05b-e083-4c0f-988f-8e169baced12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe92a210-2b2c-45ff-8b0a-13da4d680334",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca73052-865f-4cec-8e2f-6ab2cf4a8594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60580304-e48a-46d3-87a1-1de65f5ca0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c60d4b7-8987-4e9b-b879-ecb54f1c8e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fcea9e18-d3f0-4fe9-9b89-29cc1d1f5446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f418b9-a951-4375-baab-06dfc8587a04",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891858e8-bd34-4474-84c9-d7f304bd62bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768c376d-9b5e-45cb-925d-e949e1524ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc6a144-27b1-4fc1-a934-3cbf5b6ab021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb4d91b-ccce-4515-b4e8-ea5692648f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eae62fa-1faa-431f-91c5-5ed1aa9f7eab",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84928833-f712-4990-9670-e39c8b76f606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1aac97-d0eb-4b8a-8946-5e3bf25da59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04376a08-3597-42b4-982b-f529a3d6c1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5201b590-3f84-466d-834f-0ac7d1a3faf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cf711d-c72a-486a-a00a-8db272d938a2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78df941-7baa-4b29-bb87-9c8a81735902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7e692f-4d7a-4ad9-afd1-03272e04def8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c68ce54-8eae-4777-a1d7-5337b9ca04f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb0c8db-d060-4e2a-8584-50472f753a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debb8539-5921-4782-a42d-1cd59632f4f3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae81d14c-2236-4484-be20-b822597c038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdd88f6-5096-4700-a850-a1e4dba760cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d14bd63-83ab-4875-b532-56ed8d978000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5695318d-f5dd-4507-a084-964498a548d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8e4dd6-a280-435e-a83c-5b5d45ce04a6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdd244e-a2ae-4a79-8622-393ecdd71adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3a55a9-2949-44bd-8202-ba024faa4085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e001772f-95e7-42d1-aaf8-d0ac9129b5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67b7e744-7759-4fe5-b872-b6be865d64e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8760c15-671b-4fcc-b882-f7ea3c44b0eb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d064a6-ea1d-469b-8407-763320fb8e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1379b0-193d-4600-81e5-d00d58db37f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732f0145-9b8a-4450-b9e6-29dbf808a583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d68c0a5-bc37-44d3-8367-b8ea5d8b5043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0c4f36-e3f3-4e12-ac31-66b2e7799cac",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2819aa21-9a0a-4698-8502-9d43221d69bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005c192a-d3bd-4eb6-a9a0-19f25fd31461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95a6187-a273-49ca-84d4-d7f9a13e8645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "898453b2-91a9-4d0d-b354-bfabb73ef1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a8895f5-a4e1-4aa7-b6f2-b335036d3db7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc33bf0-bf7c-410d-ba34-3443a3594d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae0ec10-9d68-4684-afc9-552f19c43ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4735cb25-eb02-4b01-8097-3d77ce9bf50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f847306-b041-4095-affc-dfdd4537a972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29134cb-b916-4ce9-9686-05d32d95d068",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8766d5bb-a25d-4add-90c1-097d16773a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fc09b5-b0c5-4abc-951b-a9ef125395bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfad567-6cef-4d7d-96bb-04a1da666cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0bc6fd-cd3d-46fa-8966-b7117640d641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd671aaf-0143-4cd4-bbff-cc5a4e6e650c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a605ef8-2aa8-48a1-b7d4-7502712075c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ba9907-464b-400d-8903-4513181a42aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1306c187-9557-4dbe-8f42-06f4f5f4400d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7ab9d2-6a0f-48b2-b01c-78b93c9068bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00086a4-502c-43e1-a4c3-7ab570615dcc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c717c716-17e1-401c-8242-f08cf7928a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9209a92-ec49-4b8a-9443-b18a059c8763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba16973f-20af-4844-b9e2-f0b88844f4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2df617f-0961-4404-b3ac-7094efff3fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a10f62-d78f-410a-84cc-f33d2b6bb13c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f98ee1-1f34-4617-bc59-d038c5b500af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6053beff-bd98-4598-9edf-f6a6f58c19bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4395d2-d2d8-4152-9519-87c62f392148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "977ca811-497d-4f56-9aef-085273474286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20de6e3f-61e3-42ca-85e1-e00df62878c1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b243be2c-07cd-4f6d-90fe-149784579cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d977d389-5445-4a44-9cdf-8cb08c0920ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944989cf-f77e-4880-85b1-df9cff824123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe649174-de2d-40b9-80dc-3d418c40b015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9b2d98-7041-4357-b860-ae7197c0a690",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f3c7f1-08d4-4233-8bff-b7c40bac1bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5992b1fe-7e7f-4fc9-8655-6562ddceeb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0c4a1d-b691-48e1-9e5b-b33db2897e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18f38a6b-58d5-46ca-af00-d79470c27783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba2d6eb-3af9-424d-a63a-6634276f6e1b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd09cce5-ae89-4450-880f-67f1eb1ae3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5264bf-068f-4a10-b3ba-faa203d59cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789c2c4c-71b7-4625-82c8-c25ab17c9843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "397deb3c-0cf4-4cc0-8965-a48b82beca85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceeaa67f-02bf-4f1e-9787-bb8bdff50e40",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7bb0a5-e9d5-4ede-b0e1-c7171d3f3d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbbe3afd-8c95-4ece-8348-d8f6554707be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8610df92-6711-4203-bd6a-126f28cdf1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eec602bc-7659-4df2-87e6-833be90bf4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4e8010-06f3-490c-9b8e-0b38989629f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8843d8-330f-40ac-ac23-00d12b4dadea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b395029-c93c-4db5-8b9a-5e626ba218a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74f8890-e1bd-4a26-bd55-0a575b6d1a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a44259a-74d3-4a64-8fd3-1e0f45f05b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42badf4-7981-4a97-ba98-dba06ad5ad5c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89e072c-0918-421d-afe6-23942c05ba89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273a5772-4fd1-47a7-b66b-06b6dd42626a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0d58f7-c2fd-4086-bac6-f496e263610b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f970ef-7150-4790-ba19-fcb24adc54ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4f05aa-8acb-4281-950b-2a9d5232aa3d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e30f7b-1612-4713-a5c4-46e653a338cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3a7f21-cf5b-4b1d-8554-8df804373236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69852112-2d45-47c6-82b5-8db4594e0bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f70a5392-9564-435b-be17-2de203b5913e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303daedb-26d7-4c96-8898-53dd427eb23f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4848b206-448e-4178-97eb-24e98df74258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097d1df6-8e3d-41e3-a919-f0ce2826b6b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7495d3-27a9-48be-8608-e155872e4a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e105bd6e-9e38-4a4e-a3b3-d150b69ee33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cef3e1-9c85-43a2-ac4d-7ec1d32f9141",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc61746-e21f-4fef-892b-b1dafe7487f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eddd9b5-7093-4eb9-91df-0987e9d2c0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f08a546-937f-4158-b713-384ad722ca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70b79ae0-4ae7-4904-bafc-4c935a3b615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090e002e-9cae-42aa-9326-4cb682591eff",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e985ad4-fd30-42de-927a-542703b22c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c215a77f-6d7e-492c-840c-d3b1719afdd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef69f6e-5409-4b53-b98c-822b5d34c23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b33fef-c8d9-47fb-b210-2d18b659defe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f833c3-ade3-431f-a2f8-3474817ce2ac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8958bd-6c3e-44df-a923-bb879f5fb067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d76d711-654e-4d88-891d-68637dfa2946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe58659-980a-4ccb-8f53-dce5ed341c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49cc2af-1fb5-45f2-84d2-8c8e4ba40007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8d85c5-9f0c-40ae-960e-5d67e0dd13e0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edb4f9b-5e1b-426a-b2fd-ffa8a7e4cea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f534a6e-675e-4e64-a32a-1412392a22da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9146aa19-da20-4287-bbf0-3388b4b7406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85c8a10e-069a-481c-9e3d-197bf1782e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb81175e-2962-4d0d-8a99-5c2612909c1f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466d730e-72d6-4d49-b356-2545969eb299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd94bd60-a0c7-4297-8f0e-04707fa13cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0344cc2-508d-452a-a95c-adc794a4c73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a742b87e-9fbf-4d9b-bab9-2d3fff1cd67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10a270d-2f87-4e3e-8e50-34d9da80db33",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bcb0dd-27dc-4815-97f5-c11607b630ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2468059c-e82b-4a39-9892-036594ae8fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc221b93-d787-42c7-bea4-dc7c73efbbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5791375-e7b1-410f-a25d-71d3926ba458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d485ce90-004f-4ff1-9b8f-f80d592f4651",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bf8c17-6eec-4726-b512-5b46f58d99f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fb2469-c909-4161-b89b-4a5eb099f9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226cbc49-1206-4871-8c8d-927a1881741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "041ab327-6823-4a95-bbc5-8f1d6362ff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b89da1-4fcc-47b7-95a6-86e5341bf6e3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63e2995-639d-44eb-b8d7-b275b1e1be84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550d1298-ba38-4e00-a468-3bf27cc4e172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a873b19-bd61-4349-b3b6-788b050b34b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8b8de3-52a6-4bff-934a-b54d3896ffdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7fc347-5abc-461a-bc6b-20c0c0618761",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fe8780-5177-4d88-94c8-43b34fa50b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0486efbf-956d-47dd-8832-36f90ec7ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48f5c6-a6e0-489c-af0d-b9781bf20b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c03f6c56-d092-4c69-81eb-cdad3d2c0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6bbc00-c05f-4821-8cf9-d5e71b2c2a74",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f29276-efc7-41d5-9be2-5e8a3293331f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8861aa06-b5c1-4091-a7be-84089563e1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dfd0a8-3131-4f72-9e44-b831698426e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01958f55-376e-4300-b966-8d6701ca922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac85af3-46f2-48c3-9048-fd501b61634e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e866d-9dab-49b1-be3f-9e79ca5490de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8a519d-f12a-46db-9ade-2633f0d69d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f895b143-a323-42e1-8bb1-202fd2bdc052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff10aab1-cbfe-43a2-8dd8-66a745520a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ccfb65-ad1c-48b8-975a-3f58d3699aed",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25093f5-a68b-40d0-99a5-e9290951759e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fe13f8-e287-4842-b311-fe102bf74f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68c5ddc-821a-4fda-835d-a3afc7b69bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e27d82-cafd-4640-bfa5-3ddd51487b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34327bff-c5b0-49b6-927d-c304401eb7e1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16737a4b-ad97-4b66-967e-171f546a1fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eb7f84-9abd-43b1-98e1-c40ffd1fe47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b36b13-17f9-437c-9b17-eeb249514c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8ec679-5836-4e23-b12f-d986d1d7c446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1bf77b-cc1f-4e17-b88b-7cf9cf84116c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b0a2d9-e707-4340-8d90-4c70aa25843f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbcc01a-741d-4933-93a8-db9de5a18153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa68e0e-6e1b-4d0c-bdc3-15874866bcce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "886e8b0b-be3d-42bc-a8e3-f7caabd08096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13466d50-b204-4f44-9956-422c1ca7753d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e576402-3fad-4be4-937e-29821b0851a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb3df20-57f5-4268-b2aa-489263844f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0c81ce-7733-4b6e-a8a0-739e49a59c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb9efdd-018b-4142-af1c-4216b082056a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c6e551-48c9-42de-9c91-591358574be6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2d5eac-1f89-49a4-bf43-60419022b1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1965e813-792c-4688-a181-aeaab9de3169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4752f7ee-9410-4548-adcb-f4c06234350b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09343495-8048-4bda-be90-827b94adec45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fde74e0-42f4-4f38-b639-83d9b8d3fac8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2444e364-e452-438f-a6fa-d352b32e43b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be13c803-80ea-4942-9cc2-35836f00b23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745a4f52-b95e-43f1-94f7-6368b303ffe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c36d83-a82f-4a75-a23c-04ef4597d769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0012fba1-2f3e-4381-aa44-0aa4779ecd69",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b76c01-2909-498c-8db6-fe6dc7ac5a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9b508d-1771-4461-b440-bbd95c1bd5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15e88b2-9e55-43c5-a70d-e278d0fad31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "50320861-d527-4b1f-a19e-b0120d1a4b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657124c9-35cf-43b6-90ff-1c38e4fa158d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c8a05b-5906-445b-86e9-c4241381298b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32cf499-65c9-43cf-a550-37b6183d6a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194c2259-8fdd-4af2-99d7-e5d49747454c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc5e8e5-9d82-46bc-b13a-0687de3332c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5ca7ae-c8e6-40d1-8117-752d08903721",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff23708f-63e2-439b-b820-b4611409a5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344063eb-86e2-482b-8997-989ccadf73dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09275214-4b43-4629-bef9-6dd8e6a3d073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1563d6fc-9ec1-411e-96dd-eef6ab00b035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a736c77-7937-41d1-8979-c4f2c93f2a94",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a76ad3-a39a-422a-82e6-363b20bece12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97db5b9b-2e59-4efb-b646-8f5d713f82e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a32b0a-5c3b-4fc2-bc44-d8225a226118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2834c12-81ef-4551-ab77-2ecf13c93f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fb6269-8e30-47c8-bb4f-fff1c0f9a6c4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee79b85-cf9a-4d06-9036-31dac15fe082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42233136-b838-426e-ab4a-f27ca18a24fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfadb10e-ecd7-4e76-8953-830051185db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7ca023-6764-4cb0-a98d-6c92743a2945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e404e478-f687-4374-a720-15050a8240ff",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd7e31d-2907-4907-92b1-ae475824171c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5d5e20-d6de-4afc-b940-7c9cb00b339a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4865d58f-92a8-4cba-8a58-672448897688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d2e757-ab66-40a9-b9d6-5d913b3426fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf70c54-f304-4126-a27d-cbcef49a8169",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f855f3-eac3-446e-8597-bf9b5ff02e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2da600-5d52-423f-b887-c3b9b48fa8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a398c49-80e8-49da-8ae5-7a5ec8b99a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f71141-6cc7-49e2-8c40-72a7017d9685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b779a340-7a04-4b02-a48f-925e938222e6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e05229-c5fd-4e50-8983-2760ef095c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbffacb2-5bc2-49ed-8d6d-e7b1a87e9e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7a076c-d277-48c7-8905-a27b793b5fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eedff75-29b1-4419-bc80-9ef963e5db2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1296ece5-4418-432e-b694-6a60d87d9166",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c438b7-bb8c-41c6-a66e-1934e5c0311d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d32ce78-b3dc-4bd3-8ae4-23ed9be885af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fc4273-0f2a-472a-98a8-e9ebc6b36386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d551e318-fac2-4907-a090-dc6e7b8d0e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100a1d5f-2980-4f6a-b5cd-71a637e85f37",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e68f79-d375-40dc-9c0d-a80239e3b5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8310da-c2a4-44ca-9223-08ca5fd657ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00adfc39-2576-42c0-91c5-d271fe0e0993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7684a627-2c7e-45c1-92c3-539c39334e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d99a5a7-09a8-47ca-8bb6-f99f8d16371a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a5f317-6dc9-4aa7-8a3c-39ddfa7414e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707c4940-5f58-4246-bf18-90f8900d7c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccd7966-34d8-44b2-a29a-c9db92bdcdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ccff17a-ce0d-41c1-bc83-c5955381eae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55d40d9-7d0a-4e96-b162-e1411c6928af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf6bdaf-4243-4d80-9a03-64c9524c1721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcd254f-1d8c-4993-9017-e5016e810a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4868c04-893c-488c-8b2b-d36b96deb9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff766be-2bfd-4edd-8837-6a7544eeae61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263aa4fb-d894-4a28-8b62-7c3beb658899",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9444698b-71bc-4e92-baee-37919151ebd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a557d25-6db6-457b-8f85-d36f5b07c299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291c8fa7-5216-4a8e-8967-cf9e70f5dda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc41b63-a578-4ab1-9252-e302f11323a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d251e5b-e48a-486d-8fed-65a8bd8ef3a1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be179739-35b2-4e51-b184-cb7f3869ad92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010107db-4b09-43d5-84ef-8bece3f6ec16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee11bb1a-1fc0-4370-9a9a-7574286ac208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0a12a2-1d0c-4aad-8bdb-3000aaa2138c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e672ae95-7b64-421b-a73e-1b4c1a024e72",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482cc610-e4ea-4882-9ebd-b8db7cd62baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c9259e-3a25-4b25-b1d4-1ece3e0492fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9328bc-6e86-4684-99b8-91300db8776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98adaf6d-f014-4d26-9cb7-a86313a34432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdcd98a-9dfb-4703-b0de-8fc713c2940c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f596f2c-8c2a-4379-bc0a-988bbe921f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56af9b92-d980-43c1-a7f0-a7831539ee56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27adc2e5-96ea-43f0-952d-63d240873681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd97013-ec17-4436-b2c5-961bedbff6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65c3dd5-0803-45be-beb4-2f8cb1294f4f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa54082d-a0fe-45b1-8e88-b967a51fce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3ec9f0-6c16-47c1-8df7-848be09b2515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95d0746-0076-43dc-a084-9822ed95b4de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c0ef20-2959-49ba-98f0-b1f2f6094652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa5aee4-e809-4f74-99e3-f07aca691566",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40da59b-ecdc-4737-8a74-f026872da769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414436a8-0163-4e64-b084-a0c3c4e0552a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc24563-372c-4bcd-aeca-60c3d9f4ac1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e735d52e-c06b-487a-9f45-1723b6a1bad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d653a0c1-f5b8-4914-98f6-80f1ad35b131",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10477ea1-6e03-492a-8fdb-34910830e79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7e18ba-37a6-4e02-9352-f5f72b2fa291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926b40d1-f238-4606-8841-ee9dbd6a1ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc4788e-63ed-4c0d-ac1e-9f204d0284ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c412753-2ef0-4211-ac97-08c56ccb56e9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322e75e4-35cb-4973-8e69-57e0038fd6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8343519a-eb15-49f8-96ae-84fe9de2e28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278f7f85-c767-4ff1-b7b1-2ca800913063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f9f051-e73c-4223-9dfd-6e05dae1df21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9d4536-0e85-4b40-978c-79d37b2b8d08",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9b9229-45d2-41a8-a317-8db10e0e4dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e941f165-67c1-4f59-bd5a-f57982ceb518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d946007-9bf5-4b7d-b5b7-4cb95354df3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac9021a-f012-4554-98be-591a4bc005e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a992a2-b1de-4ee9-827e-9aa34f9a6737",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4baefdb-0a6a-44bb-914f-2054df630e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2af930f-d2e3-4a4f-beef-a6d06a2951e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963e4266-99ac-46b9-81ac-780957e2cb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "089a606d-ce19-4dd4-b98a-e27d20ed1c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14ade4e-79a0-4e3e-a449-0208067ad868",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62c3865-b0e4-4287-9ef8-10b512f8e993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c17b53-1c9e-4a3b-9dd7-2a511e2ad137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c35a4b5-dd44-4be0-b30f-4a0b3884e8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "265724e1-484b-4bb8-a85d-3cfeb5441fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd310f45-603f-442f-9130-11af0396c96d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb90e982-43b7-4982-ba1d-b4e5ffdc14f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c6ceec-db29-4772-aeee-f43478a8aaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fdee7e-18c8-4263-8545-5e57354453c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a68850-525c-42ed-86ae-a1f612f1bbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dd7f9f-9763-4969-80b1-e1c313d55c6c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1553d8cb-11f9-4f82-a414-68423cc97b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6531356c-b7af-4e54-90f1-91cebd8f0306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32038031-28f3-497e-acca-aeb3ea8329a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ebc4c7e-7426-4b15-b70d-a9915990e03d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481d66ca-29a3-49e1-927d-2f2751952002",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55932adf-1ac8-45cc-b31b-d6af9b176db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7ea0db-8d50-4545-b145-030514f752fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50dfc4b-6841-4eaa-9745-b40300f3aff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97edbca4-b2a1-4618-a1a5-d5c8d3faaa3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2261f6fe-0016-45c7-b3ff-3158c2bc7530",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704f8f20-2c6d-4db3-a4c4-551a074c0037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91087bb9-b601-4f5a-abcf-f2e79af3ec24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c403d25-0f39-42ad-a4d1-6eb0610bc537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c921df46-51ba-4afe-8eb8-4ad3bcd6f70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538d49f2-9206-4706-9ae8-28a47a64e5c1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9694c6-4850-4f77-bec7-83fdeaa7541a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8fca79-6765-46e7-9fb5-364325e2ee08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be55a5a-94b1-4b4d-97ff-f9396dd15168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1962a0bf-7942-4262-8dd6-1f0121125359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e91f35-1f19-46d3-b244-e917887a8b03",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5937cf0f-417f-46a8-95e0-8ce148734adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f756db48-ccc7-4134-b8be-49076605d27b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc686ec3-86e0-4780-bdd3-79c36d7ef86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9b0555-6ca4-456c-b92b-cb4bff1c9bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f86885-2c4c-4ac8-8be4-0a6f9f985e8f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f4fbf8-18f9-45de-a0f0-196b1fc0739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3307b7-f67f-40dd-a29a-b539ca1d13fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5012715-3e96-42fa-b106-0746b2cf6416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a95237-4cc4-4334-b1a7-d828d3e5b091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc170e5-2c09-48ec-ada0-7d862bdbb5d7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93d220c-78f3-4f86-94fe-b8c02c39aa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b125b03-5083-4540-955b-5907b58782c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323eb696-0d7c-4c0b-a5df-9a050986f348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0c5c8b-0a46-4aac-89f9-b8c4bd224bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550970c4-d3cd-40ac-87af-37937fe572f1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f175313-617d-4477-b2b2-4c4d5853adf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3feaad23-7965-451b-a26f-94937572a0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20351fa4-381c-4fbb-a752-305da5a39ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd822581-4d3a-4afc-9459-09a499fba60c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0f21b7a-f25c-46e8-9733-75e53f45471b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26561d9b-1df5-4e3a-846e-b0bf4d3b77ea",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39dbb6d8-b76a-4470-81bb-9d4b048bbc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62ba4150-709c-4916-b92d-432be58e9677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20bce3c-8071-4575-99f0-4ffe34097755",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc95fa1a-e48a-4d9f-aa04-c07ebeb625d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ee33a80-9e14-4117-99ca-436704c95b93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5916a64-d87d-4820-8693-c5c021033bcf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "863fb776-b717-40c1-a86e-bd705e4b309c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b62c1d3f-1bd6-498b-a5ff-e672c01d5e78"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80ed5174-6fca-49ea-99f4-0be876ffed40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d71fc3dc-cbe9-4235-ac94-418d46753b85"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3c9b7a58-99f6-4cf2-8822-73dac2ce5e79",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ca8a068-1470-42dd-a9e4-8adb605e9762"
                }
              }
            ]
          },
          {
            "id": "dfb7a07f-e43c-4f6c-bbf6-9b31dc994b22",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3cc47c3-9338-4df7-8076-54ccdbc0718a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "08a85b05-6636-449b-93a7-4fc6fa0db9b4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4f503e-190e-4703-bea2-1e33581d84fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "506ecba8-0f56-4bec-92a4-29a9131d3622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae0e472-bc24-49ee-a5da-07dd19ae00a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eacd2c64-581c-4245-a080-a46cfbed8424"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c17c41c2-2420-4922-937a-4acb314b4e8a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d35c16e-ca95-41f0-8d6e-8058e03810e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d481d5f1-36e9-418d-b9b4-184602d4b43d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfa8b81e-ef09-4632-be9c-b340c98faf34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "708292cf-653f-4678-892f-f808d5b99d0d"
                    }
                  }
                ]
              },
              {
                "id": "debec206-fab5-4453-8df5-f48540dba989",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46a5fac5-0df8-468a-baa7-4231a24562d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d629879-aca8-4e43-9c26-50cb3f3a8fc1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6a8d1b2-0225-465b-b306-d7d7f63a61c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85a40dbc-19db-4fa3-82cf-13ad97089dec"
                    }
                  }
                ]
              },
              {
                "id": "e0669864-df4f-403e-bd6e-ca68ccccc766",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a0d617d-a997-4372-8549-4db49d10a8f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d7e905d-f1c2-4187-b303-303e1e0a87ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6c1373a-f114-457c-9eeb-1ea17a1964e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67e389c3-ad75-4b6b-b5b2-539e79c18296"
                    }
                  }
                ]
              },
              {
                "id": "0b069741-1b61-42d1-8f5e-61814c4a4f65",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ecf24c0-5de8-45ff-a43c-fbb0e2ee9d5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cc88eab-fad6-42e8-a449-ab3ed0770497"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ec626ae-404b-42ac-95b5-06ac83053644",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "816b9b1b-1a14-4bbe-a71d-d979e34eb870"
                    }
                  }
                ]
              },
              {
                "id": "a9d500e3-7542-4abd-ab51-177eb6efe63c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "731c7ba5-2f3d-44e4-9add-90fb98594349",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6bd011f-6a62-4b4b-be69-07d57398b4c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "310d635f-9813-462c-87c2-ff953724ca75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e2d9e507-32b6-4af9-b2eb-d4fd244209b1"
                    }
                  }
                ]
              },
              {
                "id": "75987d65-4f14-4c7a-b703-1079d87448e8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adf7bde7-5939-42f1-ae5d-8600bc163264",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe379287-830a-4ef1-b57e-2c818f286590"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dac18625-54f9-4b18-bf5a-dc4fd7f16d46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "93234c02-46bc-4dfd-8fd8-8bdf52650af4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2bcb3808-d6c5-4290-9216-5d4925b78b91",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5762a88-1ded-40fd-9023-51cb54cd195a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f1f2f39-2a6f-4085-9680-9e719ada2a03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "400d16fc-5869-40c8-9bbd-411691f60a8e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7b6d5f1-f8a6-4970-a695-ceb2f566317b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9f6726cf-a869-4a08-9cc5-bd544015a0a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e49c0574-4acf-4aab-a0dd-ecca4906930e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e86636c-a037-4294-b34a-d7fb38d89b83"
            }
          }
        ]
      },
      {
        "id": "e5fb28e8-f5a1-44c5-b430-8dc2fd7dc8bc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e345756d-71b5-4c4e-82a2-f86bc8bf7cbf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4c90af2-8437-4e7c-9a67-bbedfce1c4e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "50bf4779-2161-4478-8dff-e243f050c35f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774cad3b-4024-4a5c-8259-7c9cf1a5f947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf20055e-bf91-45b0-98bb-412bbfa5e036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa669e6-059d-478b-8baf-265b7b4988eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c53cf6-4731-4bee-b3ff-4b6cb3477933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d70117-734a-45c5-9b45-0b3e2c12c2b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06589619-80c7-47cf-a4a9-179755296bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e3f1ab-9b0f-44eb-aed4-ca8117bf0556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47e1b46-cfe0-412b-867b-918fc88c7a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51969a16-438b-4faf-b1da-3a0f4ed20ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34215933-4262-44b2-9753-f9bd510a50df",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5876892c-e358-4ad9-a1b6-6f749f8769f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3e6954-3a54-46bf-9c02-d409acf85c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0360e77b-75ec-418a-89ba-6946af47fde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d555f0-b99c-48f6-a4d8-a77105bd06c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb10697-58d7-4c26-b65b-287c0b4e3c86",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606caf79-7790-4511-8565-4591ed328431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1acb0f06-2250-471c-8e7e-ea1292dbadd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c43f0e-8460-42a4-be68-7546dd322657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89f8afa1-4653-4c98-bd3a-00d9db794284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7831713-bb3b-4939-bc47-694e1d5ae073",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa25b98-ce16-4ffb-9828-aad99f82e585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06653a8d-323e-4d80-8857-89dafbc93526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff946717-2fad-4639-8a45-79efb0eb4422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd25912-28b8-42e1-8a17-dc3ed0a95b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ff48e3-b6bd-4cac-abfc-22954bb29ced",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a25a125-fcc7-484a-9823-a1d760c0e7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faedc7d1-4ee6-4b84-a504-0911577d25fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65abae5e-a3d7-46d8-93ae-042241c70ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6b83e9-9b9c-4c7d-b653-4adff093913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4840577-2f1b-4a6d-91cf-8f90f3353149",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c593caf-e59b-4906-9522-b18ffa15f98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69889de3-df2e-410c-a7d1-10b560dc0291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e52dbd-18d0-491f-b984-3cb670d5ceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3808b4-0e0c-4552-beb6-8dfc55e72861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c015cac4-446b-45c6-a7a5-1fe6cbcfb777",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d13df9-b8ea-43e2-8b42-823c3ac6f1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680f3e4a-1644-434b-948e-092a616506d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5287e869-2a93-4344-b6c5-292f449c9d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5956d4e-e992-4cdd-a566-488f20677e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd711537-8f79-4b29-b91f-de501e56403c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea58b986-36a3-4b81-baaf-1062c88d8077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86fc7fd7-e609-4411-bce0-07ca6bffd844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7ff4c1-5985-481e-a6ab-2492faa1d75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3545cac8-5f8a-47b3-be67-c40d01a4f8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4049a63d-218d-418c-8fb7-bd392cd6c1eb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0568f2b-e711-47f9-806d-e3017cbed287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038767af-2fd8-4c98-b991-2f5a7ec8db9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2a24dd-57d0-40dd-8e16-d8e7ff0cd9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c22f9cb-c2b3-4533-b33b-49e8b06fe349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5392c01e-0336-42cb-9df4-6027bf389872",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3278f0ef-6f9e-4750-91d8-b96ad9aed3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ec62c1-1136-4ba6-9622-453984a1b3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965d1271-a312-4a63-95cc-fdb03e72fd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f32dcf-dd53-4ec1-8243-5025b65e8a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b059fb0f-dab3-48f6-b407-458267db0240",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db3cecf-d829-4e40-8921-6b0a4a0ece53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f676cae-6361-449b-a6f3-fbeb43659309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf09fd6-539f-42a8-859c-66a3f5882a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c1be39-7dfe-4580-82c0-47a27bf4660b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562d20c4-ac5d-48a7-9d93-8244ff582024",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f76e7c7-215a-4a4b-bddf-af19990e7860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5129997-b877-4ae9-a99c-76899a0a4c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19b46d2-5470-411c-8653-3b61b548486b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c05d911-e056-4a7e-96e8-0a44e1295897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd961d81-0cfe-4512-9f0b-00e6279495bc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb7521-67da-419b-a52e-338fcf27d2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5910fd38-a10f-474f-b57c-249898ff489d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b199a604-ec29-48d6-87af-fd92fcc4521b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a805ffa-d5b2-48c9-8556-e07e1601ba18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8443bee-f804-42b9-8189-cb72b97a0239",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147c47c6-74a7-4909-b08b-8e633acb371a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f07265e-2d65-40b0-adf4-6a78cc5d701c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2aec20-de73-4e93-b7c9-cf6fe156a7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "52cba3ad-88e2-4cdf-afeb-bf72eab607f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d69f956-1b87-4428-96e9-3b30611483cc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ec127b-86d2-4b08-aab9-8fbcc895c4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee2800e-996c-40c6-85c7-bc0b04494b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74bde28-fb8d-4165-9752-32f50739f8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "26eed8fa-c37c-4c1e-9e6f-3778b1685725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae9b9cf-351c-4ba3-a891-a58b75285323",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d132ed-82a5-4d53-8266-47e7fa065020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81024df7-bf0d-4de0-a798-48cde831b8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2675bff-36a4-4f99-b512-87718aee2ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "54029fff-179c-4f76-ac13-2d8857641667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c8cc45-a33c-4c06-8c13-e7377e6c64a0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7fc045-3a1c-4c63-9c65-8c6f02bdc4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf8cc1f-e188-4e1c-84bf-ba4a256059f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71745739-87c3-45ff-b3d1-51064e32ee7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd049a3c-501e-43bf-a68a-d8a10bacb54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad67108-1da6-4ce1-b404-06fe6a5be8dd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd02a67-172e-495b-9f1f-dac10a5da971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2fde97-4ba6-4a4b-8d36-9c6bf7b7c48c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8119fc8b-362b-47e8-a596-6bf607dfbda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e704e3-6d88-4894-a2c8-9a206ae8fa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958ef643-d35d-484e-850d-bd5d3d11f977",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca34f86-89f4-426a-9180-a3b273fd10c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137ebdde-518f-41bd-be5e-3c06311c8ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505b2a1b-2776-461f-b86b-7715e654cd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1744d9-549b-4161-a212-5ec84cefbb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc1e686-3be0-4f0f-8302-84539419830c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479f3b5e-9dac-47c9-9974-770ebfb41317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140d172b-ad22-46ba-9051-88740ba63f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9d6ca1-a3b7-4b6f-bc47-1b94d10a8264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f13538b-4b70-4a15-8fb6-07b040aa5b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f05c5f-9bc1-4f80-b323-b398e262870e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a1f9c2-6072-4fed-8261-99aabf2b714a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c360226-2530-404c-848f-fcb1dfe4dd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7441b2-73c9-4547-beda-8532b83a1207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "641c373a-b09b-4fc3-babf-0696d8e73fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f409c888-88f2-40cd-97f9-3f8094ee97da",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d651c3ae-68d4-4534-8819-4801b2b38ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7deefdda-da71-4d9c-89ca-2974d3e97654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8524a333-56dd-43e0-8b6a-81f77d715c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa3495b-1eb5-44ff-9162-0a73dec70b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c90a2fa-e834-4814-ae89-cbc8fdbb21c2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83fd59c-d1f1-4276-b004-21d73e138ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb090601-a964-4b28-8700-39659439992a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad80a9e-2f46-472c-94f0-03471acffefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27a124af-88c7-4bae-99ba-022fa6b24906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70679611-f200-4d93-b96e-af69fa96edbb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387759e5-e71f-4f8b-be9e-4a3c72c61d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071a5426-e3b5-4dc6-bc87-b885d82fe395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bfba04-d9f6-4b91-8969-37af3f6a9a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d18a7746-281e-4325-8edf-fdf89207cc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c565db-238e-4489-af52-33ea15cf6236",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f92668-811a-4e83-a2b1-94754b968905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be9de48-de6f-40a8-ad71-25d3b5cc4684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb7a635-296b-404f-8756-8f6a858f8933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1b604e-4e64-4a81-a70f-6932a2b86113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1071bc1-bee1-49b0-a275-718898e1a9bc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f7da48-8bb2-4a36-8663-aa4e7c66d6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c01a0f-8609-4eff-a37e-18e2cdcc1a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9fa823-243c-4613-8fd2-8d2e04f823a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5db8957-618d-4890-9b9b-abdf6e3330d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4d5f14-47f2-4a44-af17-ff1e13938fac",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a88a82-5c9b-46ad-8545-21365b000d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b4e570-134f-4c41-8215-00ddc6eb1d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810344d7-3c21-4e36-a1f4-672c5491c12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2474b608-0f9d-4130-9606-af2e4ec2c96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41cf6f6-6bbd-4ee4-80d3-e2cf33a10b7e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008ac9a-3ad8-455f-892d-2abba212d5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee09c5e-f7e9-4928-94f6-4b3880ad65dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e124995-5c0c-4cf6-aba1-a0daadc1e131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1fedcc6-6046-4eb2-9e87-7abc88101a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06baa11-f157-4887-95a4-35462cb44a43",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa9d35a-21dd-41e1-be39-df25de2e644c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11f893b-ed05-4f71-9414-3217cf5ad534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8783fc06-eea8-464c-9c80-c47ffb8bc209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be6f08c4-d48b-4cf0-8258-d16eb9d70750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4733d36b-d4ab-46b8-9550-15e7a1d41d88",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8516e58c-3483-42cf-bede-f28791105fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86090562-9a85-4cf5-aebe-6ded4a024050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d429744-297e-4a4a-be08-ab0187209e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8297af86-f443-47eb-8247-742df9ce8b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad9b5b3-0f23-4135-b0cf-83bbfa375886",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20543b57-afe0-4e76-89e0-885fef61ba95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6977f933-bc46-4da5-a655-bbd59e946589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893408aa-6af1-4a3f-b03f-ec1bee2075bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48870ae5-3213-4b76-b30f-ecf3fef41466"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2da87c9-3f02-4a63-9663-0ed0e4a6af84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66bc0f1e-9507-4385-b386-e92abeb9d1d2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a93d9a-5564-46b0-af56-3a2b510064b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c02e7e-24f4-4530-afe2-b0fb3b3970ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00901dfa-77ce-42df-ba2c-d6d6dc5f34d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea272ea5-ca42-44eb-aaa7-f5709454eca4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6443c84-6687-4b56-ba67-e2defba0f4ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "198edd75-a0d2-4359-9b74-828c8850d8f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8950c71d-7d47-47e4-8e14-b0699f73ecb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "178c1b74-ea6d-4789-b6fb-afdf6e5d1f62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c1ea2a1-a658-4d5d-b21f-99107d33e5b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "012bcdff-6769-4d36-9688-74eada4e511f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd8792d7-de70-4bdd-ba27-4e7978661aea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "800a0b7e-51f8-4e6d-9cfa-990764fbe83f"
            }
          }
        ]
      },
      {
        "id": "2adfe9e8-478e-4dc0-8da8-8b8d8c206b73",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1ca36d6d-b61a-4169-aa8d-698ea5df7fc5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48cb200a-b24f-4ada-a3d8-1e0d97703fa1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "42a93bce-3b9b-4d70-a709-0b79412bcb33",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cd2faf-6147-4995-b63f-3ae5952cf926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8676831-5f0d-4def-89bb-15778ea9cfdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa208ce0-cc38-4272-8332-4d66cbb5b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a5bd51-453d-4f76-98ae-64ce662a12a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57aeda90-dfee-4609-9979-a7309a849a5a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72b4641-96ed-437f-b153-b2bbacf790b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904416d5-980b-4967-9aa8-8e17ba4735fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a160a7-da39-4e4b-940a-28fc600f1160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec3af667-bab7-4c73-b005-2f679d44fd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e0e557-1e72-4295-8e32-64e381f68f1c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d8eedb-36d1-4157-8a66-59b97d4c2e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb02403e-8e8a-477b-9225-308b82ce83b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da75038c-88cd-4e73-ab2d-b2063a978839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb805d91-0c7a-4e70-8e35-389a1cba104e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cd69c1-8d0d-497d-8cfb-391f7ee9e308",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c2a755-43b2-4706-ae8d-6172f7929b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512f0670-e153-4e7f-808e-2ef7b028d88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55289aa-5535-4319-bcd9-9514c40ce4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed193b4-6f94-4067-80fa-70ce6280e44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aceea58d-3784-4af3-96ee-deb107e84d1a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81619f2c-a06b-4489-a4b8-f627eb0aceb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc44f278-d723-421b-a294-d05e22b2fe7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b9d76f-584f-46d1-b1b1-a6d06cda8a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6373468-5a60-4135-9650-b1ea9d0826d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1335edcd-d5af-4d1d-b48d-d3091b9853eb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9cf0ad-e4a1-47e3-99f7-408465c9bd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def543dc-c4d6-432f-b5c5-bf41fe65439a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd01338-bb07-45e8-a695-d988848d205c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c26fdd9e-0e8a-4906-b876-060e9e4d92b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0fce65-0c2e-48ec-ad8f-8c734fe5c73e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa465298-1c7d-46a2-a700-9dd66b6cee9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9518649-fc49-4810-9793-0cbefcbd50a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecff99b-e5a9-4a01-af90-0159329960f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "10109bca-467c-4d40-b447-9bfc9e46212d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8ab8b0-760c-4733-b5aa-e6a4151d55eb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89774532-c67b-41c0-bd5c-ff8553e8ad7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1194b574-2073-4333-b079-737c6d4c6ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6be025-a89d-4bd9-a7e3-e4190caa4f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6234f6a-bd15-4e6f-8860-f11b39b9085e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f33f390-be4a-4524-979c-e2cfd0f7c8cb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d1c614-df3c-49ae-8403-233fd3d64f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7cf053-a7f7-4dad-becf-e79de5f5285e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e10929f-15fb-4798-a983-a9f6ad0696fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da28a92f-c53b-438c-9bb9-dac576c6cb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8873109-a80b-4931-8dda-843c43829300",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe2962c-5891-43b7-82f8-612981e7a7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b04688-e0b7-49fc-8f4b-bc4a8dd5873b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776e8c19-de9a-4a81-bcc7-cd7e2df8677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6d1f33-496b-40e2-995f-7c1d04df7704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a684c05-b853-44ad-bfea-7ded0b416c52",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af50ba7-678d-49b5-b4b7-fee5e14c86cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c20ba18-0653-4d11-ba46-13f14600147b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358ae3ad-9b48-423a-96ae-c7d7a2f0ed3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "06aa05e8-d3ad-451b-846b-4bf18b1ea4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5a5e2b-de66-4e04-bde4-52fb65ef960f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4654de95-f7ef-4548-b485-0dee63b750e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffc486e-93bf-40bc-bc4a-bca9408950c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bcda85-813c-4ccd-9d5a-9e514df71f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1276993-13c6-4307-ab48-1d88832d5915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedfe4d5-f21e-4fcb-88f0-7448d5350705",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c4a766-6e83-4155-8d02-2c373e0b2847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09762803-a09d-4edc-b9b9-fce659689e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f52d8a4-bd21-4858-9c4f-20870fb75319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7537b132-4af2-4de0-ad42-71cf08a1d66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe31f6a-77a9-4dc8-a4cf-a97fe0692009",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15be0e4-fe4b-4ac1-9f7c-115cfa66f5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b2a9027-16d0-498d-9459-e50f2fb9f7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce13acd-e9cb-4c41-ba34-03121470465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "20006fbe-2b26-4986-9ff6-8c3c367da1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ab82e-ae40-495f-ab9e-e3bd4ca92f47",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de37295d-d20a-4862-8162-521eca287b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f71fca4-5da4-4560-bc60-496a5a9c5231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0302edcd-23dc-4fb1-b70d-801294f89a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93a01f2-bfc3-4468-a8ab-5f828e78a8f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979bf892-79a1-40e6-8cee-3ecf80ae38d6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7f2cae-5847-429d-8776-132644ace0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a146164-90ac-4fab-afab-536a1475000c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96419329-ebb9-493d-8319-b0f4f5cd252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e635eee9-9b3f-45d5-b32c-1a239f9a6376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3801d327-0086-497c-8163-ad7e6cef97ec",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc4548-c1a3-4a27-bc5a-d4ffef48bca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bace3beb-5886-4d73-9f40-75b49fade954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f277ac-c793-4473-80f5-f403556c7c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ccef321-99cf-4e0a-baf3-d98e46d2933a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1428ba9-8222-475e-a75f-53922b6be721",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2187a276-c086-40e7-b439-67a609e7017f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a558c98-9db0-4ac8-8235-35428f23b91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3c028f-7ddc-4ce1-8fae-18c2872bb794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8082ca2-02d3-4bb3-887e-0adb331c3c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee25cdcd-b25c-4c33-b949-bc60f1a7d29a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e7e841-eb1f-4872-9faf-2c0c33369cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4156b27c-c1ee-45e4-814d-cc7119a5cb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766d1abf-1872-4a86-a779-cf7410b53d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8407f410-bf48-4c8b-9541-f563d1a78f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd94690-28a0-4f81-9371-168478e4d041",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4910aaba-0de7-4a13-a3cd-062eab438d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a404c1-cb4e-421b-8807-42f7b2b75b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaeead9-b6c3-4e81-ab8b-722f6fee0218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be0a738a-6bd5-4481-808f-ac27dce59478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b88784-3dfa-4f0d-a0c9-3741a8be9461",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f8b0e0-fabd-4f75-8a1d-b983a61c946f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cfca08-b083-4f77-8cfc-a2779942859a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a536838e-0706-4d1b-a3c9-97c39564f286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82b4a443-e307-4700-9de1-901a186237d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed21916-8f4d-41cb-8ecf-24c991afb314",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880b6948-6e57-48e9-abfb-e0a5b62d8286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00ff33f-f009-453b-98c6-397efd102a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ab38ba-8d47-4283-a37b-d5cce1bc6187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aad53679-9404-49bf-8b73-cee7eb9bf233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfb95a1-ab24-46b4-8302-634999c416fd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82896acd-d368-4b27-81e3-d9f7868b10d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c4daed-c3d4-4c9e-afb3-1fcbfe014a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aefb72-6e22-42bd-b377-f0752a2fe95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e98f501-c9ab-41d2-b6a9-18fc7fe76a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17650e0c-b1da-424a-a5b8-c53c9b86de87",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8b225e-ddeb-46ef-b4de-872b3579563e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafdd3b3-777a-4908-8039-57ad6ff0bb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a61b9e-5d7f-48db-9ef5-586822f32845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb07f18-2196-436b-90a2-cb857bbe192f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6123c3-524e-430e-a9bd-1503e5934c38",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737b84d0-6a4b-4737-be69-c591becdc111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e60fe8-4a66-46f1-acc2-f8ec1db2cf80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9ca5f8-04ba-4b94-9175-5f0db78387b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a22aca-d65e-407d-bd03-d053af5d9067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471c659c-3065-451b-92e5-562a9dbec05c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b373341-4461-46a2-b10d-3baf70f07508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d284af-648f-4152-9723-b8d19cfc2bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfdef53-e745-4e0c-8f5b-bf785e6b8ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16cd1c43-b4fb-48b8-9d43-b920d887d9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a5bea1-0435-4154-825a-e145781caaf6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c50440-1d0c-46da-a1d0-80b4a8e536a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3888a614-02e1-4bb5-bfe9-0ab7d81844cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4604361-5bdd-4648-b0be-03bdb56fa12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9724415-784f-49c0-b9b5-2af65aa7eef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9c4c0e-4fbd-4f4c-b5cf-523a27037326",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc984fb-8237-4311-b131-58dd4f050035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b65a85-5361-493e-b0db-fff22bd5e9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be96d8c2-ea01-49b4-b624-83b3de926993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd11cec-c6d8-4c7a-a6f3-4b83d18eb553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceb080d-fd48-4cc8-9274-629fa6ca607a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45320d63-7792-4277-ae65-3a07dac95f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820239d1-1ed9-4039-b4d2-c9b7b6610ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2863bf38-4dc9-46bf-be5e-839fb18fb967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "546dc5d4-6f16-4255-b7c2-2f7aa986cd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b5dcc6-36cd-40b3-bca9-104ee127092a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e19126-ee7f-4182-bd85-a9e92304a9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7de6486-4ec1-452b-ac02-b04dfb564420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21b371-5785-4c56-b83e-118d359a9e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba1b40a-b5c3-4c95-b092-7751ddab3f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640cf6b5-f418-4266-b80f-b129fcc83755",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9521f43c-190d-4c7e-bbf2-08e73dd174be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56f1fba-a80b-4f94-886a-c8fd345527cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ccea05-2cea-4baf-88ea-28b228674c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adc812a6-27cb-4dfc-91f4-d79d11111601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf128d4d-8756-4274-a529-97542f272b75",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2095d2bd-9010-4aff-9895-9a6eebc7a3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa099a1-6275-45f2-a274-e7c6da0e1910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fe8340-8f0f-4097-a704-35d96b334488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e48cca36-f121-4bd4-a9c7-5f88b2d85c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be94a6ed-5550-4de2-a5f3-8d07f597e3e0",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248bffed-25d5-4475-a544-23289a717e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e4d57d-c335-425f-8cac-99659021ceee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d448b4-c8c6-4f76-b10a-2b8d52fe8ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4056c6-b43a-4f6f-a5b1-85ec47cddddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9278840-3c0d-4113-83cf-a9edd4a6d90b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c073ca-4316-4c3c-95f3-c72ab13cd80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772832fe-9303-4dbd-bb55-aeee936cd9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d50877-7866-4098-9877-8e873c57d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28a1599-9a33-423a-8a4a-231080e819f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659438f0-c686-4ba7-bf33-1b5c763ab734",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0ab8e1-598d-491d-a014-9fe3eef13f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07be6a84-071c-4197-92b3-bc910ae60716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d7a09b-1db0-4c77-8969-3e2f0ed3d3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a866891-5cf5-4256-8b4e-5a4f050e4595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee64968-f9af-4cb2-b63a-1a12cead9190",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71554c80-40ea-4b99-ab1d-51b448d92855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95259ce5-9ebf-48bb-8cf0-39f41da3000d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b7e0c9-0f06-4eb4-9665-dc11dbd4b0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2f394c-f02a-4fad-8554-05b1e3e702b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f6b87f-e98c-47c0-8fa2-ed004905b5bd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced63945-23ef-4887-b380-53fcc4576981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80af5ded-fc01-423c-a525-702e13c9a3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c6df84-ce12-41b7-abcc-5a30d9c46fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "566c3ea3-73cf-4f5a-ba1a-bdc9bae5ac3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00ab69cd-a520-48be-b130-fdaaf9da5824",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed76d3f2-89f8-498e-b840-041c11ae6f74",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a21d8d-5f70-4e70-a5a6-55bb5a190a3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f34e8a5b-5bac-43df-a049-944360e80353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4830b7be-31dc-4d2b-9429-7b94b891723c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f43e04d-fcba-4dd9-b445-dac74ef05e46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07ea95b8-f334-48bb-8ef7-dbf01dccf333",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72327b94-74de-4e9a-9390-9c6d6847c7a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "477dabca-0d1c-4b72-a263-cc3be8a900f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8510cd5c-78a6-4c99-a035-c23a82ce6397"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcaa46a3-d3ba-439d-b7f8-b6268f1d6fb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b7c7ff5-e0c8-46c5-9ec8-c191cabe19ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb5820e4-91da-4929-b8d2-dfc869e02b58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "df1a6abf-7fa0-4320-a052-3a2f134bb2f4"
            }
          }
        ]
      },
      {
        "id": "6d386f13-f723-44cd-88c3-713964bfc5e4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2e9e3592-bab0-4d10-b5e6-700c18e04fde",
            "name": "Negative Testing",
            "item": [
              {
                "id": "547e4b65-ec64-4ca2-a283-eb7c05b52186",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cb46236-85c7-4462-b017-35fb3d40ca19",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5c8d96-57bd-48e8-88b6-9563e635381d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575c8edd-2410-47b2-a7fe-cc7c9756a8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f4425b-085b-490c-be41-2d30eff17806",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e82085-479b-4cf0-869b-5d236b06d609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75379b3-ad06-4ca4-971f-7b3206c11dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1360c31d-c308-4e18-b06c-8f26a1054720",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2df94d-611c-4b84-bbd4-2ecf45183e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec021c6-24ff-4d04-ac9b-7273f36b7b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a1c337-2c2c-45e0-80ad-4420d95d49db",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95ce9c0-0d20-461f-8762-df36d7610ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95001f86-9094-4749-99f8-fcd5fd76b724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98c1ffe-1f7d-49a6-a692-44fa7d3d6e3b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac72a070-23c2-4a0a-88aa-0bdd856c0847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db44b5c6-a246-498f-bc49-37a9e92f9327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1893f4a-fc60-4c9a-b3dc-0d7d1c912d3a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14854468-8e2f-4d20-b6c6-c890dc9329c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ddb0a2-9741-4a66-895b-086adf103b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a85bd98-aa59-4402-94c1-658529f25928",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31679a2f-498c-412f-9767-e95dbab9a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25e23b3-8c0a-483c-91ea-c60171e1748a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f397baad-78c8-422c-8ce7-267ca38c9c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff636aad-b049-4698-adc8-0f5c796f7be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dfff88-86bd-4e2f-ac90-74c312700bdf",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49afe223-e366-40fb-897e-a5b77a5ddf0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d13e51-6baf-4110-ada2-927b47ec2e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0843b0-df17-4186-a2a6-9a0e4d80c71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3ff6cc-7793-4cac-8014-45115ce9ed71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8713ab9-581c-403d-8f8b-9a02d1724d69",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7c062a-6003-4459-82e5-16c6555576ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ec2340-05d2-458d-855f-1e3b97e6d0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd69d4e-7c54-489f-a8ac-7cd206fd7289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd113c7-8ee1-4262-b8f3-d4ecb9b02e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7af7fa-ae92-4336-90c1-e31d2034e72d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d5ce65-5366-4066-9a72-94ddec0ffd28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "981ab310-0970-42b7-82ac-3689bb9190c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38fdc2f-f6c0-42f0-b2c3-56d6588b5420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9326d912-c362-4201-93d2-f82ade245022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a79c85a-e8be-4db1-8e2f-becef54deca5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b001dcc6-795c-4d74-8cb8-c643fda5c743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d797e5cb-da7d-4892-8e6c-4c7875b056be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be512a7e-0447-462a-a840-46b2d095d482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea25f41f-077d-4ae2-814f-64711a7d32bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8edb81-40a3-4e62-9d18-8ffef28c0167",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5a81d8-c2f2-4ef0-87a7-76269bd3b188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9db63fd-f610-4c12-afcd-533d9028f35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06006c12-beb9-4b4e-b0df-c89a29981e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4ac9ea-d8b9-406d-95cf-5111cdfe04b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3534d74-eca9-4306-ba76-a33a989f7d48",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ec3a02-dc13-4c3b-842c-44c690e0e83e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ef9606-69f9-4091-9969-6b87379ab166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d05f2b-b07a-47b3-b110-4661e3c51395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52c226a-a17b-41e6-8dc6-6822cb4b6112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f4d389-9ff5-4946-bb47-1d9be4e9098c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9394168-fcd3-4850-8b2b-9ef83b09c88b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b497684a-5e5e-49b1-8d82-77a0f028314e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e71b3e3-b509-44c0-b999-dde808129993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf4ddc4-3017-4fd7-b131-2fc846e738fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b744b12c-50f9-4141-921f-9acf3256c77d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1771c0b-98c9-4341-aec6-4e6895c1ab4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "239d7d97-02d9-450c-a80b-1ba372b3ae07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d4eb81-8183-455e-8c98-ef8a6528fc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74c2a21b-723b-483e-969d-a74b322dbff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28064001-69c9-4529-99d9-b6696e8fe179",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a47425-d90c-4f0a-90c1-2a4f0a7a48a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fa5192d-0ec6-4ef0-b729-bfe650121978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357c0cb8-1638-4f3d-8b12-c203988bbb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d90635-2c34-4537-880e-105fd4732a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f6b80a-7aa7-4fb8-8315-c0d28195d0b6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5f4207-7b23-4ebe-bd68-fad355eb4e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f225101-b443-4e37-a5b1-52563001ed98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66c98e3-fdb9-4fac-9a6f-6d5246574c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd36a95-f1da-4c2e-88d9-44d93097b3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2257d7-94c1-4080-9744-3eee57810dda",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfbbdef-0060-4bd4-9405-761910ee3391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f438730c-408b-4c46-abc7-e93cede08048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dbb797-2e25-47e7-9e34-c1720c8f9dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76e736b-b65e-4a5e-80a4-2027dc51e5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990fc67c-17bb-42c5-9dc1-c2b6f03a0c4b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bd0ad9-ae43-4d33-a2c0-6323bf131cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c209f035-fbb3-40a1-8d4f-65069604eda3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba397b80-bbbf-4003-b424-ea8a32da96f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8a415a-16de-4663-8731-80c369c86f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1839aabf-dfc6-44a4-ad92-1537c4aa269f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4617cad-541e-42e8-bc3d-ba24335ade99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5457fff-e03e-4de1-87dd-f291089b9384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda1b20c-d694-48b5-84fc-77bf81628c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f0d08e-ebc1-4e2f-95c1-25244f197e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c07a18c-d2d7-460f-80a4-b5da1d8baaed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1255f6c-d235-4c7d-875a-9f797c573559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128d3a66-62cb-429d-9198-b8cea410f14d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0936cd94-6530-4953-a99f-a33e9f6aa7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460eb823-274e-4db3-a2ed-aef3c59cccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b9bb45-6f47-465d-8ba0-1db42b8aed52",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f236b8-d61a-4b7f-98b4-8234c5549d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a896d1-b463-4b50-8d6d-fcceb5dabc9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe9aa0a-6025-40e0-ab38-e81bc27f67ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9301e972-ec6c-4498-9a5a-88c6a707fca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a47d67-98b2-4be3-b807-f8f1cf69011d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16e00a6-bf30-432a-b059-f5af50ab4582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fba50d-016a-4bb6-a9be-fc223726671f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ef1096-ad5b-4f39-986b-7c8f4baac4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed332b2-e24c-4fc5-844e-8bc5a7a234f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd07894-77d2-451d-978c-0dc993c8141c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa72c602-f8fe-4645-8f9a-3eaf28979ff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c6e6d03-84f2-48a8-bdf2-b95e7fbdd570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973c0b61-c285-4523-b396-0ddb643affeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83109c9-8ac2-497e-8582-d82fb23e6b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f79b5f7-6341-4738-aaa7-82e5ea1675f2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2ed2a6-c7e4-46f8-803d-a11a44813582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29d829a-ade9-4fab-85a1-79915494940f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631e96ab-9c4b-4844-803f-c1c8fcd58102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b122c5a-6550-455d-9046-2b730019b8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df795532-5485-4cd9-8dc1-05152e211cc1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330961d0-6d4e-430d-8fa1-eb5ea31152a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05121ad-b7ca-4fd3-b42b-59ba24b224b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0397a342-4b94-44ce-b862-6abc282538e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ae4e83-bd64-4612-ad5e-f603a746a287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c09135c-fe71-4a53-bd0c-6f0680e93919",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa67e54-670e-433b-82e4-c2ad04237827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8174f008-d68d-415d-8a4b-9bd2c2f0f641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bcff42-e417-4c3f-b0e3-567b41529e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68126e77-82a9-460f-b6c5-9f54a52636ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085363a5-2197-474f-9233-c277de16836d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5c4cc8-fbf3-4d4a-b1f6-ade40d36e484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd86b26-2e03-4548-9525-d6c637994247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9ea662-5fb1-4524-94d4-5dde1e87a3d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63aabd6-0611-4c1e-82c2-332d0d71d91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ef4121-77cc-475f-8766-6b0e1a24f477",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c795f4f8-192a-458b-a6bd-085447789262",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b588084-9b60-4de4-a96a-12a814280150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d46461-cc25-4a5c-b15b-ff51bc5f6afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4555b24-a551-499d-8d8a-20cf92def7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445327cb-92dc-4ab1-ac07-e77213c14d4f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d4ba22-5dfb-4458-8306-c21384ac2c0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "863001b8-5d1b-4dbd-b2a5-3685f2c72d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7bf608-7c6a-4bdc-b3ea-39058f81d705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84e4b738-a772-4ec2-9f14-039ac90bdef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740326fe-23b8-4f40-b80f-819bcb471f2c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883187c1-c26b-49d0-822a-7ab980802a70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d088945-b28a-4522-beb2-ce599b0dc526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "312f1328-c89d-47d1-9d16-155265d744dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1dd786-a939-4a1a-952f-f327913ad993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fce2220-d6d7-4c1a-93f6-9ea42477361f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83858b6-13da-4624-b673-5a45d8d285d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59793fcc-c031-4572-9ea2-d3c1eea28d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4515b567-7cb7-4426-b440-72d06bd2fc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b6c7b3-c5c9-46df-9a15-0a4462819896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1cfc52-c2c2-479a-98f4-3d4b93e794f4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ada78d-d0da-4c0c-bc10-7bd497a668e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c61522dd-f497-4bd6-8a9f-12cc97617251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bf0661-d451-4a04-9dde-24fd9caadbc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f158cf-485a-4ae6-9c2d-ca681111fea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8146fd-4a73-4310-a2c6-94bcceb6584b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928bbadf-6a3f-4ca8-b7a5-1d46eb791f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb03da11-92fa-4ae3-8c78-d3248a39c6f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "912bdbaf-d5eb-419e-a6f3-103c3a5293cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818cd2cd-bc8a-436f-90b0-57cd0d2976cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86da6c47-25f7-4f53-b2db-26e298c79eec",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967f28ad-7173-45ae-8207-767b906a42b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef40a44-2364-4152-84da-1ab5382ff9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fee777b-0421-4138-bf70-90b0f958f2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ec3dac-e5dc-41f1-a8b2-8526bd155c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dca0ede-18be-48e8-ae99-0af012016395",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d88ba5-f787-4b19-8ad4-2d4cd051a3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4693a73e-a6ea-42c3-bd90-292edbdebb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb852bf-54b7-4228-b0ab-ad8de412061a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a644583d-faf1-4988-b73e-836ae7219265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2afbd82-2163-429f-9b82-55e3689d9d33",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7467de0a-53d6-4e78-8bb0-11c497a11250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9860288b-697e-4d97-8bbd-548dd311743e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f909f3cd-05d1-4cc9-8be1-014957ec7731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb24d1c-9028-482e-a1e7-1c0c83437da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804de2db-4bb0-4b43-ab8e-d7fbcc523431",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1039a210-7fde-43d9-8c1f-45764dcd5c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f337220-517a-4d26-9b3a-b545830819d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01838799-1f59-492f-acf6-c349168e49a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec394150-e8b3-4a9d-8b86-8055a136b9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b75bf5-9373-4bb0-b6b4-65404d54b90e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f88e26-3622-4ee3-960b-1b40e61f12d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293a1acd-a675-4fbe-98b8-00fcd35640e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4764623-b771-447d-93b1-553dac1220ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c543d64d-8ccf-45df-a2fe-57b6044e5946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4089fa9-7f5e-4a0e-852f-dd300723652e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad25bc1-229c-4092-8444-42b62c07ed1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce3c684-459e-478e-a920-c717253a83ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ca45db-d700-4f3a-8fb8-8ee08bb1b340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb67aab-542c-4562-8976-1158dc4fe967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addae265-3030-4e15-a559-5d958c3d0053",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6b08f2-0dbf-410c-99e1-baba82f831ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dc9538-ac33-45a5-af2a-775d9cee0cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9116fb7-4098-45bd-8f43-a351c5fd4ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27183aa-f188-4509-96af-0448d27ee234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c8ef3e-53d9-4547-b48f-41f616a9afd1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b7f9bc-791f-4391-b331-6a8fd4b5be0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a057977a-f46a-422b-9c4f-0e458f4ca5f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f19b63-76c0-4d8d-8d4e-1c5e931a5ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f346ce2b-d37e-4a99-9314-2285e690b003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adc468e-df7f-44aa-9d02-179f430f85e2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c9dcbc-74de-468a-8331-35e41ff1c272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d28284f-b6f3-4de9-9474-9f91872f83e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1133eab3-89be-4c24-a462-b92b3554f86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31fe5a9c-ac38-438b-83a1-b059141906b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414ae165-a434-420f-8bd5-bdeef9eb8225",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aec7e5d-6056-47b1-b863-2d85ecc9e7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0daf6de-519c-4803-917f-2cabb40e9861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364aca61-0aeb-4e9c-a41a-6a006144bfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3270f5b8-27e3-4653-b797-06a070641e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e8b619-53c7-4f2c-8013-0346507553d3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f04a6c-8d37-46e3-a27a-ff4c71babb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d759fde5-ccc2-4487-99fc-b9d8dda01a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032e8eff-c5d8-47bb-9747-c4cf3bd4ae52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ebcf1e-d5eb-4549-a966-f0999aa59eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e03fcc-9169-460c-b372-ee3eed80e682",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655a4bbd-a26e-4fc9-ba9d-3707967ca72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7679af9-7f83-463d-935e-52f8fa3f9f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0c68f9-7c60-4cd4-9d3d-61b7fada3b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10310c6e-a3e5-40fd-8fdb-2dc4ac2fc9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82065d8b-6866-4cf9-a44c-80fe1f2bb148",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a356917d-31b1-4676-b065-6f832b001271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29836568-bfdb-4787-922c-86a8a20fb2aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4d8b69-5049-459e-80f2-ce983b60a3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885ca399-7076-4367-907f-611cc4757acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572ec7bd-bb5f-44bb-ac0c-380dfd5aa517",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1452b9e-3cf7-4f0b-a42b-526a6e0e3a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57da10da-4242-42af-a3ca-29c997cf24c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6638aaaa-7846-40e0-8f35-8dab0e48f1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c33653-dccc-4a1e-b524-04b061f12f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0393719e-1b00-44aa-8e06-ec49b4349112",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5344582d-1110-4329-8a9f-8077aec89448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbb926a-5835-4d77-9043-6d8757791339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e8d23b-6722-4ba4-8afb-a1a1e2ec92a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814ec679-adfa-4a27-a3ad-6353d56a4ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa12af96-a2cd-4819-b2c1-0d5955d5d11d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67ce337-bb6c-4349-9269-79bc63c53824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7519fd2-f8f5-4a3f-abed-f8be517b2ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e684afc5-5260-4740-830c-8b6546bba114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87eaa744-66e7-41a7-b4e6-322dfd3697da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d89913-8d52-41a7-8fdb-63ef6a2fd999",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc635e8-fe3d-4b78-aca0-27d1681926d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d28c85-3bed-4573-91e2-fa72c719c216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca4121b-32b7-4aca-a15a-e216f8cfcb8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd3bc26-267e-4d89-bea1-045ada218ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6446bc2-a50b-4df4-adfd-cb94862040f0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52956728-cd2c-4225-9771-910bcee69220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb505793-7925-4b5a-9a74-ab5e7ccf96f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbad1a1-3500-41c8-a1a2-f84ed8a60df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c17e1a6-0833-4c13-b7ab-536b859fbb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6b2e54-647d-421a-8a7f-b024ad7e183b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95b4e77-d8cf-40c3-af86-720fbe5e8307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7857c5-41fd-4280-af6d-c542d89a6916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fa1c9d-11ec-4e2e-b7db-2cdaeaffff6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e26b195-3150-4569-ab82-9af5e8fe825f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b586c8bf-b6f5-42bd-aec4-a87ba6ca5b3c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e85d77-4bc8-4cbc-a5ae-3a386009d884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863f73bd-dc8e-4404-8081-b4400c946584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f6bafa-2c54-47c0-a6b7-6794b6f2f775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca8cfa1-63ce-4790-8bc5-107da0d2111d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9efed42-2fa7-4481-a783-0f3f48eb9970",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156119f-7d24-4f0d-83b4-a6bc66e70626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7e71fe3-d464-46ba-8825-7c4802c1a858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bb65a1-af02-4986-bd26-4ec0483d7c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb7fddf-b22d-43f1-b3c8-c35eaf4e4f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2eae92-08dc-4113-90ef-114f5da18a1b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9981a6f-1066-4e3e-87d1-3da9523253f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3ab542-bb32-4870-b5ce-fef938043c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e6e42a-10e8-466c-83dc-530b7326b028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d85989-6ade-4169-be8d-49457a9db54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5de90f8-9e11-4248-abc1-0984d36b4950",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e6ffc0-eb56-41dc-9c96-62addf909424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecbfcca-275b-41b4-8698-a47ba9d6347e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26ad41c-59b5-4fdf-8abe-8046114bfafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87a7932-102f-4058-811e-ae80cdc6045b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1827343-67dd-428b-afc5-52362118cc07",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c078a57-a8b4-469a-944d-5acd33bd2f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872949f0-4019-4335-9c9e-97d688de3b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6a9fd0-0bc4-445b-bf6b-687b5d67b124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94863c3-aecf-49d0-aed6-90e658299d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7ad54c-57cc-43a1-a6fd-7ec9eab9e800",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8478be71-e821-49da-805e-d5d43d4181fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d549f8a2-4111-4f39-aaec-38fb95dc2609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782adcf7-16df-4178-bc24-7ccdf7809341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f3ca88-f812-4a89-a555-5303d1ef143e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c166e9-d64c-4c20-abad-ca6c1aaa1d0f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f376911-199d-4868-ac0c-0066fa1917b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b4d967-143d-4f99-b8e0-c06c083ca877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae06f6b8-856d-4f71-a29b-323f921f58fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633f3e62-c7ea-430b-94ae-5c4c1d4f1414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf4c70-a05f-4d51-877a-c71be029845f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efeff57-8c4a-418f-bb0d-98cd632aaf74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668c6817-6430-4f28-ad6a-dc20fe1f8b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92edc50a-e17e-4b69-b449-05152185e8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7d7c2c-a7f8-4dfb-826c-a39298ce8e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fb1e0d-40ba-4534-9b52-6da5d9064a10",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bc522b-0e94-44dd-a261-64a8568ddf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacb1ff0-afbd-4508-80f9-094f45387ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cf4328-3147-43a7-8568-c6c6d9f7c4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bab3b4-035c-42bc-99c3-d792bdc4ac90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befa40e1-df66-48d7-aed3-634a18ffa1f3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442cd7c1-234d-47dd-9338-5e19e52a7363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92c2875-ad68-412e-a0b7-84e5fa8c9e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abcd2aa-dc91-4b04-bc63-6efe34a26d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "484352ba-3550-4986-8287-6c8f2aec7e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d112122-b392-4ece-9e29-625480e10e00",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5908574-3048-4300-ad3d-f98ea14bb5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0afabc0-eca9-4b0e-8e6c-86c83c57153a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bf20cf-6428-4829-89ca-0188a194a056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df68e565-b483-4563-985c-d28b1fb0ce98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cb0b1-990b-4812-ba0a-6751298137cd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae26896-a091-4544-8057-8dfa980256d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1511e07c-5d50-439f-85c7-ae052e5b13db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbd6c08-3e16-4f23-98c8-f7d72a470fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f65f47c-225c-43cd-8f20-5bbdea6cd5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd66b42-3a5d-4c19-9774-90d7f823137b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7716e484-7afe-4a86-bc72-aa8c1f5bb3fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0e79f6-7707-4646-93c6-5e4f9875fbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c082aa-10f6-4930-bd56-f7f3cfdb4e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d03b17-499d-404b-853b-fb24b44c0d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a414c430-0f9b-400e-a76a-607eb0ce3911",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149e584b-38fb-41c1-bea7-48dee1031d3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81f2b3d1-227e-4d9d-a169-ecd83fb9eff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff91ee7-e973-4807-8f17-0f5298de2b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ef4540-1076-46f5-aa54-ce2b75b985e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e30263-7c4f-4ba1-8fab-64accfd3d000",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe22d35-21eb-4723-96cf-0ef99621d95f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058d335a-f54c-4b61-83f3-27d81d18d39c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f63806-37cf-4725-9971-0f5515e1588a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04387147-ba0e-437a-be26-0d20a3c796c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49318052-78ad-4c59-bef1-9e3b24e439a9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b773b24-fa67-4b74-964d-208d7e778268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c0f5c3-35f4-4ae6-b9a7-37bf8e140acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2693f7b3-e0e3-4876-986f-5234f2b6dfd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73da82a-ba6c-4166-b2a4-6361db969bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492376c7-043a-424f-83bb-a7e06a121417",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bf20ba-ea98-4f24-a6a4-868256fb8f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a6aaa46-df10-49c8-b5aa-37395e65c978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf10873-dafd-43c8-a77b-211d46e5e212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43cf869b-9056-41db-bc9d-be2654fe3d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd7c6b4-7a53-4f61-aa69-6be3247d97bc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff9f8a4-462a-43b5-8ad9-79f32f6d767c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e37db3-2a2f-4881-8530-de8c6fc02537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e960c9cf-2724-4ba6-a51c-3614edc1a3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3abfef2-faa5-46d3-8061-7a0d57984d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a044d4b9-7dec-4a6c-8fdd-a6fe16101541",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711fc959-b4aa-4930-b402-f57f71e17334",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4fefce6-a02e-4739-a8a7-6b8dc5b43b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c70353-e8a8-4994-afb0-138982b4fa67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0604a5be-c41e-4917-b209-cba8551aecaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92ef177-7574-48d3-b0d4-4eba0ee8f85e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2411ca-97a9-45db-b518-4baa32560c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a12a1f-c358-4f6d-9926-8f0936634ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "560e0408-15da-48b3-af0c-411e32dfc6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a337801d-c04b-434e-94b5-472278082031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d223a6b3-b1df-4d44-9475-eace3a925d46",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e99f169-564a-4495-82d4-7d9bfc8d24d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c59f4f1-b75e-43be-b3cb-cd10f9c0cea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dd31b8-6df2-42b7-867e-f295f77d8a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf57ac90-107d-40dc-abf0-395fe8e84b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e343b97-786c-4b85-8a3f-b27549438874",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e342bee5-8978-4f2e-9c82-cbede8c2ee10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19856974-21c0-40d2-9367-89a7fae81b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46feba90-2e5e-4d7c-bce6-832d9ebea81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5329098-9071-49e5-a987-deb62b68b6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601b0e57-90aa-4f61-8f30-91f5acda648c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa2727a-0d47-4644-8bbc-7d696d943276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e22cf7-2026-4305-b95d-e9c87401787e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26332548-eaa4-4ed6-9804-320b817c548f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5571a22b-d027-4920-9df0-5979e9c29e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6722e68f-18ca-4a88-88e2-c3aa89e6e6f5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668f9630-53d7-4c56-82f7-17e4a73f6e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9edd65d5-6891-4646-abdb-896fd74ee280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66844cc6-ad14-4dd9-b044-30bb95c1e7f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199d20cc-24ec-4c7f-ad7b-8df34c70c99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ccf397-f1b2-440e-90c1-c2e7d3141939",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1ae912-9887-49a0-9e37-abea22219a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e529f9-1d52-4713-aad7-c4fab66b4e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23f6f3f-4a5c-41f4-936d-c5f52a000498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf10f77a-c8c9-4bff-b202-878317865131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efba480d-cc62-4613-a722-a49d90c8a86f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9286f8ce-852b-4d26-b965-2992b480c724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1125955-497f-4441-b882-0f5dcdd9af0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffad3e0a-8fd5-4aa4-a8c8-4728c4a8b279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed731820-1c7c-466c-b70e-2b5ab6d21f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8adf6c-04e9-4d48-b94a-16031049a471",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da81441c-691c-4fed-86ca-a6971d4874b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a66f2e1-33ea-4c87-8729-3ee5724cd157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c285f3b9-54ff-4378-aed6-e839dd3c5057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c18726-c7c6-4462-a482-cc77dd243730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d34de6-62c6-44e0-87fb-f5995a221e45",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0c7a7e-25c7-4472-83df-607cc52cc0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58b32dc9-5294-4863-b105-460f63f44428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cbfb4a-36e2-4fe2-b1bc-e42ebd10bb8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf8b1bb-78bf-4291-a536-223cbd3c1d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b6b60e-057c-46cb-9fa7-614de9c94346",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533fe15a-5f0d-4820-91de-911c5dfa7182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad3e4ee4-c100-49e1-8bb0-89784ed47002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabc8d63-42a1-404d-a560-5cbf24f6446d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3824e3b3-7f13-42e6-88fd-5e86a2b29586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6619f05d-bad2-440d-b75b-e238315e6914",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f08dfc-b61b-4aef-aca0-caa5206b3454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0dfbba7-eba5-481d-a0a8-37e288980a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522d8ea6-08aa-488a-8493-a800deb65b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335c9e7a-0c1f-4943-8d2f-d611847bd139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c026d13-469c-418e-8288-4a665e2e2480",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e78d8f-6040-4f85-9fc2-e9d3e7e5af9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02dbcebe-0739-4bd5-8cff-5ac488a790be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb1cb8e-ad79-4a69-85b4-88853cf36a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73055684-d875-4fdf-bc72-60d904b7d430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78301498-84b8-4825-8725-2ec45c83a9d9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c77bf5-e1c8-4457-8ea9-5ea0c2a493c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9089027d-4136-4f15-ba91-916d0cb68880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145df40c-0345-42b0-a9a0-e5eacbaacfb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6d733d-0d48-43bc-b909-42b688160771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448bbdff-9f78-42e9-b1dc-8c045acc4797",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2028acc1-0d09-42d5-97ea-ebb5bd507746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42371c05-c242-4776-8684-193a420f7944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617f42b4-aaec-4ffa-be1c-3ebc935b7b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d1cac2-8147-47ea-9167-afc19737d4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac93e665-edc3-4f07-9979-1b3abbd76fa0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d701148e-c256-4420-a7e8-46fffb8a4e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf886f60-9cf3-4993-a17d-927491351411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa98e5b-5c4e-414e-9091-9d2821aa6ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214da0ef-de10-44f9-8fe9-ad11c55f9907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9e44cc-fa4c-4525-966a-140bce69f121",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398f6be5-3377-4208-8c83-ee167e1ea2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf4be27-c994-4642-8655-d46c1a2296fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8146c608-fc9b-4a05-837e-c2adc3c0d7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f180da-ebae-494f-bd8f-3507d7edab4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7825e06-c03e-4235-8e88-1a96b9ef723e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f907f6-a215-4d39-ac54-13809c9fc160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8948b1de-893a-47cd-8912-16e67d0089d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed1db93-3505-49ac-9866-b2d2aa147de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b61c9e-1667-4e8b-a7ce-f4599fbac993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bc9862-4ce6-4635-b148-a6738d645932",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57eb165a-e79e-45bd-8e3d-b16564f16213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8acf12e-be89-4abc-903b-31b8a2cf32fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ed078a-bbcc-4414-b227-7c98b496e7b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a4e392-14c8-4839-a44d-a332fa8ef08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9650be1c-6ed6-40d6-b599-4cad4c01723f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bba7b2d-9594-46f0-8e4a-4a13a90f8c21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce941cd-2280-4da7-acc7-8bccac7da6c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0093c28-306b-4fca-a16d-6bb723e08a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64342762-32e9-4d07-9bfe-bcf8ad3e878d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57af5cbc-0435-4160-9707-1869f1b2ddac",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5d1080-a7a3-42e5-bf8b-1f26505974e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0707c5e6-2127-4d33-b6f3-785edc2ff054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "647302e0-9cc7-4f81-ae7c-3e84fa88f23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f606d8-ca23-44ef-a69f-be9906a6f828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6156f7b2-d9fa-4500-884f-c7cef4e9e11d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d41dc6d-2404-437d-834b-1499239e1083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd5c9de-b72c-402e-85b5-34c8551b909e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed24b7c0-8129-4b36-856a-a931b05a799b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a7576c-2cfd-40d8-bfad-d00e34d08192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420d9c4b-07e7-437d-aa45-3dfebc2c51a5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f8e71b-b4bc-4eae-9508-7541e2afc0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a28394-e141-4c23-8b6e-6b6f4156ac41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4dfdc2-cc8e-4923-a114-10349d338e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5757f14a-120e-4bab-9e69-d00ad7ee7dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8236a63d-c6c3-4b88-a4a1-260602d23192",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370f670e-96a6-4651-b5fa-b5e455588031",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd676133-559b-41f3-a910-eb36ef4c3591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1625eda-b7a1-4fdd-a298-5c2e1f7e65e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4bebee-2d03-479a-9e60-c82199b77613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bfb1b9-205f-4fc2-bc66-271dd085f9c9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22785402-f956-4d68-b7ab-91872b5d1054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c9fbc37-d740-4e49-9157-4abf7733eef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b6826c-46dc-48e8-97ec-2867b5541a9f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ce14f8-ed51-42a6-bc03-23082c0114ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3eeab2-5351-4681-8ea4-d8ecaaa4f582",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb4d582-5987-4ecd-922e-c6fe5103efbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21c902c6-82da-498e-bd5d-fd35a5d334a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8de7ab-3cb4-4088-b6e0-edc6637cbc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b6d6e2-a62a-4e1f-9e68-2136420f0830"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eeb9c26a-da6c-4407-b48a-591571b1314f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e562878f-8f10-4687-aec5-0b45ad8003f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2d9ec35-00eb-4517-820d-dcc54ab2caec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3355cf63-0b6f-488c-8b49-8263f1922209"
                    }
                  }
                ]
              },
              {
                "id": "6f83fa31-2b03-4ca4-ad91-6dc23be10f66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c788636-3dd6-4412-8a49-f9e5c8152350",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23583c78-ddda-4e65-91eb-87f97f4ce32f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e06f8ce4-1dcb-4d36-9b86-2c6535ab373a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d699d7b-9704-491a-a9ad-2e062ccb60fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "909010dd-0d0a-48f3-8071-3da33a0608ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bda43e3-59bf-496d-84db-3f7cf341d54b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4807b5a1-ad0a-42da-9424-057676b3b8c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac27d0c7-c5f0-4b2a-9c2b-43fba2a19bd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d40aedc1-58db-45cf-a054-8d5829daf038"
                    }
                  }
                ]
              },
              {
                "id": "7e1795fb-7a3d-4874-ac8c-380e72bf00d1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "838cc3e3-a34c-4a2a-8214-eedcf65880dd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d138e1-d0e2-4072-8198-e4767be010bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "79923814-b28d-46b3-a0b9-778dc3136acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a7c801-1e3d-4744-a39d-2c067301a852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34390a4-ddb8-4646-9738-16b975fa9b42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a0991c31-ebb4-4ed1-8e80-ad0249fa5c01",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c031c9c-c825-49ae-871e-27cbc324d483",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10523b0f-669f-46aa-9a88-3419da565b23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f5b1883d-7a48-4ce5-9984-3a443a80c02c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4963fc33-5630-432e-84b8-94ebeeeeadf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d1f582c-ddec-4cac-ac04-7234adfee826"
                    }
                  }
                ]
              },
              {
                "id": "3e58cf10-5a7d-4603-ad91-26bf4ac0f19f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b1daabd-7cba-4ac7-8fe7-01a1b767967f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce620938-8ba6-406d-8f77-2bc298a6985b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd5c5920-175a-4ce1-a6b0-826d1c4eb7a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60cba763-54ce-4aa7-8471-4806c3a14931"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a904bd00-c1ce-4623-ae66-aedee8c94ea0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "678046a7-3917-4f0f-8bec-7b8330682398"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7478b37c-5320-4739-9643-a3b907638616",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c5c6f8b-5932-43b3-87a2-12e70a6ebb19"
            }
          }
        ]
      },
      {
        "id": "5734a5c9-87a3-4e58-abce-91eb07df018c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f1a39a0a-5575-42a1-8b3a-5f14554a89f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34434d3a-a806-4a9f-ab02-73997082b223",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a85316eb-5b6d-4acf-a95b-5d6c027439e0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc049e51-1c94-487b-b009-cc2beec58c57",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e2e365a8-63be-4ba9-84a4-81c508ed0b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cab73b1-11d0-4d0a-8738-59760448e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec53aa25-8cc8-4899-991b-b99c63b0d7e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79f64504-cf3f-4bd0-8f53-7ec1554ed170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "faf177ab-2c9e-44e2-841d-3608968132bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b2e9c5d-451b-4b21-97be-990befc8cc2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6be58e3-38c1-40f1-b942-459d490ec8dc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a68e5c3e-99c7-4c17-8a66-86516e4f6455",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3fbb723d-6293-422b-83de-45bc2884b995"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aa7cd2d-b808-4f5e-a924-5b87daaad307",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c31dda79-8927-4b46-92c5-732b5c8c7889"
            }
          }
        ]
      },
      {
        "id": "c474b0c0-7339-4a3f-9f74-dc91c4ff3821",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8c4994c-346e-415a-a9cf-54d4f7cb7e29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7fd4923-1fa5-4f40-bbb0-c602123c86ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "389ef44d-7b4c-4ec2-90f9-f98d9c17ce17",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd04489-65bb-4c5e-af40-fe8e42861991",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b582b6e1-a769-49ae-85e8-f199939eb0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c088a8f-33e5-422f-a9d0-fd3970681065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd57b589-c5d5-41f4-a60c-c38c108a38f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1c80319-8ca6-4996-b3de-74eb5d4e5b87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1afd2b80-2d4f-40b6-ac31-8fdc5e95267b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a899bc1-7301-4677-af50-52878d11cfff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be79685c-d52d-48d6-bd3b-3f3a08e1750c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "37b2231d-7558-4c41-8239-3ae0266e70a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95840075-bba4-4b13-9cd6-e8741d157811"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8aefa5a-8301-4ff8-b96b-0314e14ca8c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "570c2646-c996-48b1-a6cc-3bf8de21ea94"
            }
          }
        ]
      },
      {
        "id": "c9884ba2-29b8-4f40-bc85-bc0a5a9f926b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "87d55ba6-2526-4923-85a3-6482da17363d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de9ad66d-ac4d-4145-a148-2e7c16f5abb8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f34e4ef-af8f-46e7-b08d-01cae47c5bdb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a6c2db-9a38-43b9-818c-39a6728b7941",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d00f9251-a582-4406-99d4-01aea6f24bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856d06d7-efc1-4f54-8853-2cc8fc88e669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17a6c269-0f84-4397-b3c5-f76c288f67d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb2fba97-bca2-4c43-900d-b80efec796ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8adb18cb-cf88-4bba-9308-d9aafd76a945"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5768974e-c90f-4ee4-8c69-efe3b6520c3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e7fd276-2681-47c4-b3b0-5cf76400e614"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c126802a-d0ed-4023-b491-95a061ace520",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b3fcf366-5849-491c-a155-4e8cd2215914"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9caf3ed4-28de-4960-8355-f11485be0bdd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e049bf3e-f72f-4c33-8e0d-fa2901ddb8bc"
            }
          }
        ]
      },
      {
        "id": "53d2b8ed-69b0-4ffa-9ef7-fa10e85b3263",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e2e69d2-f904-4622-a489-a5afb3f5ae18",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c342bde5-5a1e-4d75-a2a1-6d6c8ff1402f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9f33aba8-ef66-4806-8762-9b07f1ba9c0c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7da625c3-88e9-43ff-9146-b901c6b5caab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65363603-b760-4c63-803f-3541a672a291",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 5.196491228070174,
      "responseMin": 2,
      "responseMax": 264,
      "responseSd": 18.54241193372909,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710894836383,
      "completed": 1710894846694
    },
    "executions": [
      {
        "id": "b7735706-dffc-4f41-9903-d9ab29ca6925",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ca2512f0-3933-45b8-b45d-a7de78a1095c",
          "httpRequestId": "25804846-3e1f-43c5-b96e-3f2b7c83dde6"
        },
        "item": {
          "id": "b7735706-dffc-4f41-9903-d9ab29ca6925",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b4f56c2e-fb1c-4726-8665-b7d6ad380a03",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "18e913b7-de9f-400b-8d64-d6d965ccbb0a",
        "cursor": {
          "ref": "fbffb9e9-92fa-4541-89b1-6ad602352f19",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "077e6d9f-120f-4c16-a9e9-d749aee2209d"
        },
        "item": {
          "id": "18e913b7-de9f-400b-8d64-d6d965ccbb0a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7ad51812-a936-43a4-8d6b-ecef2b652083",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "7fffacbd-dcac-41b8-9788-ed11cedfdd39",
        "cursor": {
          "ref": "95f9b984-8aab-433f-b009-4ceb6dcfa7c2",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "551e8abb-e5f8-42ab-bed9-223d917f259c"
        },
        "item": {
          "id": "7fffacbd-dcac-41b8-9788-ed11cedfdd39",
          "name": "did_json"
        },
        "response": {
          "id": "871a7ef7-4aac-4975-b9ae-4192c8753fb4",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9a42cf-771f-4a92-9830-6e510732e3bc",
        "cursor": {
          "ref": "b2cea4cc-7f16-4b1f-89ea-f0f8f644e29e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74e051d5-88c6-4cc2-928e-dc327e7a3f4e"
        },
        "item": {
          "id": "6e9a42cf-771f-4a92-9830-6e510732e3bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "de47f760-a6d1-4c0e-aa7c-047dbb428b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9a42cf-771f-4a92-9830-6e510732e3bc",
        "cursor": {
          "ref": "b2cea4cc-7f16-4b1f-89ea-f0f8f644e29e",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74e051d5-88c6-4cc2-928e-dc327e7a3f4e"
        },
        "item": {
          "id": "6e9a42cf-771f-4a92-9830-6e510732e3bc",
          "name": "did:invalid"
        },
        "response": {
          "id": "de47f760-a6d1-4c0e-aa7c-047dbb428b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf436df-f088-4dd9-be6a-b444b6c35871",
        "cursor": {
          "ref": "38a56073-58a2-4a7a-ab9d-a6669322fc65",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "16cf8f72-e58a-4263-8cc2-6b5a79ec8e78"
        },
        "item": {
          "id": "fbf436df-f088-4dd9-be6a-b444b6c35871",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eee7b829-c9b1-420c-80d6-890017aa03fd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e1b7b4-9487-4db2-9742-4da7a1b79751",
        "cursor": {
          "ref": "59de7bfd-bfb3-410f-8157-8e6fea678615",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "640e41c9-4256-4716-bbf1-f52b5a8c8110"
        },
        "item": {
          "id": "b2e1b7b4-9487-4db2-9742-4da7a1b79751",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "57a63f40-a8f8-4f84-94c9-50db10174249",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcb6319-d312-4baf-a505-a6f33c900901",
        "cursor": {
          "ref": "fb202e49-d225-4eb6-b049-f935cdf49464",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a970aaf2-2cec-42c4-9783-2d3061430569"
        },
        "item": {
          "id": "2dcb6319-d312-4baf-a505-a6f33c900901",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5b5f2821-9138-4e7c-9fd3-fe5bac9957fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee45c166-c6c6-4f2a-9365-1b371408db4c",
        "cursor": {
          "ref": "3b2f5db9-1d0b-41a2-bafc-adef6f5bdaf5",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a76cff7d-eca0-416a-8b9b-dfc2649b6e06"
        },
        "item": {
          "id": "ee45c166-c6c6-4f2a-9365-1b371408db4c",
          "name": "identifiers"
        },
        "response": {
          "id": "af33d0d6-3763-486b-b9ea-1458bef2232a",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0f04eb-e57d-4296-9115-e40ce4648126",
        "cursor": {
          "ref": "f46fb8c4-355d-4b19-acd3-ca4b7ab822f5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e8df2af1-9837-40b6-9f59-424fcd506135"
        },
        "item": {
          "id": "cf0f04eb-e57d-4296-9115-e40ce4648126",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d090cb75-734d-45e1-92c6-4e65b51caf93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f50ef9-b29a-4ebf-922d-4d0c6cd40520",
        "cursor": {
          "ref": "4c1e1b16-4f13-450c-993d-c04a25c07f35",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ccfc52bf-ee2a-429c-9001-d39ae85a20fe"
        },
        "item": {
          "id": "b0f50ef9-b29a-4ebf-922d-4d0c6cd40520",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "65542627-1cf1-44a9-9073-f8b3ee22ecad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7a0fe1-8f74-44c3-ade6-0459df287248",
        "cursor": {
          "ref": "93ed18f1-ba82-416d-a9a2-7ad4ac769e3b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f1111a36-07c4-4f9b-8637-541373b05751"
        },
        "item": {
          "id": "2f7a0fe1-8f74-44c3-ade6-0459df287248",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "84f5a78e-9593-40e3-a253-8dd1baf79f92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85ce21d-c87f-46b5-8307-b7d634e1f586",
        "cursor": {
          "ref": "de38ee3a-3252-4115-94e1-4976e43fd554",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d26390b9-7065-4965-b88b-835e245bfd7e"
        },
        "item": {
          "id": "e85ce21d-c87f-46b5-8307-b7d634e1f586",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "561aeab7-602d-43f8-a5e4-7b819de0b7ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76a5d26-d57d-4fc6-9d91-5715239be06d",
        "cursor": {
          "ref": "54f4e0e1-c34e-4661-86ff-5dcbeba6e7fa",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3883d767-b483-4e4e-a626-067c4fa58c14"
        },
        "item": {
          "id": "f76a5d26-d57d-4fc6-9d91-5715239be06d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3b0f0656-8635-4a3d-910f-46d27c1f5392",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8150a41b-de40-438f-a898-289f29c3da17",
        "cursor": {
          "ref": "d6a81ffb-fe52-41a6-a9f6-0ccd3d0c5502",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "41ffc4e4-39da-4334-a0d8-87d42e7d3b55"
        },
        "item": {
          "id": "8150a41b-de40-438f-a898-289f29c3da17",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "473ac07f-020f-4315-b675-39d1fa60c114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a859fd3f-7f03-4a1a-a485-8134563d1aa8",
        "cursor": {
          "ref": "c98e381c-abef-4063-ad05-b1358ff1c289",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "17bee747-e9e2-46a5-b6cb-4dff961ee4ed"
        },
        "item": {
          "id": "a859fd3f-7f03-4a1a-a485-8134563d1aa8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9e1ba0d4-33c9-4c16-86aa-e81bbfc83029",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef06a0b9-3e2e-4cb3-8cb1-7e1049aa919c",
        "cursor": {
          "ref": "3b30175b-aa3b-4171-b043-0fefe64c00e0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8069c66-9bc7-48ba-88c7-a7735a86605e"
        },
        "item": {
          "id": "ef06a0b9-3e2e-4cb3-8cb1-7e1049aa919c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4c55e10a-1f3b-462d-969c-bccf98bed3b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1f501c-a43a-454a-9a15-295142331f33",
        "cursor": {
          "ref": "2f6060d4-7b8b-4ccd-b8d5-c0bf912422b8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3a9096d0-f46a-45f9-a4a7-7d2924892533"
        },
        "item": {
          "id": "ad1f501c-a43a-454a-9a15-295142331f33",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "83ede41f-ff6e-4825-b044-b2d85e44c1ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6077d55-f039-4ac0-b5eb-2c21608d48df",
        "cursor": {
          "ref": "7e99c69d-72e9-4913-b213-87e02d47c5a0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8dbafa89-5953-42dd-8610-01362f8677cf"
        },
        "item": {
          "id": "a6077d55-f039-4ac0-b5eb-2c21608d48df",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b1b4a462-01ca-4e3f-89ff-2f97c2f72bbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93196215-e267-42e1-9804-858cd6f1ff2f",
        "cursor": {
          "ref": "0dbcfd7c-d73e-4ab0-b2be-5c768a5f74de",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "75c135b3-3fae-41ee-8d37-fb4e51776b01"
        },
        "item": {
          "id": "93196215-e267-42e1-9804-858cd6f1ff2f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ea0e4d24-9a90-43dc-b403-3db5dad0d624",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3daa7482-1e44-4e40-825a-ff9be88f8dc6",
        "cursor": {
          "ref": "bc6837c3-d1b5-4b1a-93f0-85cb7cb5b961",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7f2ac584-f6dc-4ebb-92b5-71ab12d836aa"
        },
        "item": {
          "id": "3daa7482-1e44-4e40-825a-ff9be88f8dc6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "acd843f8-cd85-443b-a1b7-c4171fd13b50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb086a80-9464-4271-820e-c35747ae7df9",
        "cursor": {
          "ref": "f2fd87f7-3960-460c-a623-0e3f622f7710",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0e1353f2-df67-4030-bd58-07c170a1cf17"
        },
        "item": {
          "id": "fb086a80-9464-4271-820e-c35747ae7df9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "634aa9bd-44a1-47bd-b072-0eedd089f1ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e724607c-37c7-43c9-8175-64afcb30490c",
        "cursor": {
          "ref": "957289a3-dace-42db-8e43-66fd69624c2a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fca35715-dc8a-4648-9115-cf29ff81ec0d"
        },
        "item": {
          "id": "e724607c-37c7-43c9-8175-64afcb30490c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "69535eec-3cc5-4d3d-b70a-8ac831e2041f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "199e5619-5378-4a81-b0ae-3d01a00c258b",
        "cursor": {
          "ref": "b459537d-a275-4b6c-868c-db9180c929ab",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0c43ea69-3684-4114-b8de-6e0a698be8df"
        },
        "item": {
          "id": "199e5619-5378-4a81-b0ae-3d01a00c258b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9cd78173-c557-4382-827a-97e61188dae3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bed4850-b728-49be-bd79-82c9324243f0",
        "cursor": {
          "ref": "407ec26a-d611-485c-8ff2-588ab7f2cf0c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2cd4129d-981f-4aaa-9a67-b1db97dee362"
        },
        "item": {
          "id": "8bed4850-b728-49be-bd79-82c9324243f0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e211b443-4580-4b6d-a3fc-3d402e8ae30f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e6dba1-abe4-4f3a-b37b-63639a727228",
        "cursor": {
          "ref": "cfd7f552-e8d5-44eb-ad85-2465170d85d5",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f8a30223-3d93-4025-999f-a8c73e0e55f7"
        },
        "item": {
          "id": "42e6dba1-abe4-4f3a-b37b-63639a727228",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "618b3b73-63b1-46f8-a9fe-b66dca96b859",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ac819c-310a-4371-8bf3-c840e1eb24cb",
        "cursor": {
          "ref": "7d9d4c9a-2806-46c8-83d1-7ca7b1edbd35",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3943dfbe-1c69-4e37-b7a2-178b865935fc"
        },
        "item": {
          "id": "e7ac819c-310a-4371-8bf3-c840e1eb24cb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "49b28395-c0a8-4fdb-a30c-a7b979ed4999",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ea2b6-adf5-4395-bcc2-925ee992ab1c",
        "cursor": {
          "ref": "d59d576e-7dac-4589-bc62-acaa412348c9",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "86ecf633-0e72-4d86-aab1-a7e2bab833d7"
        },
        "item": {
          "id": "3c1ea2b6-adf5-4395-bcc2-925ee992ab1c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cc76c110-b399-456c-973a-9e975beb5106",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e999d0-0944-4723-aded-945da74da4f1",
        "cursor": {
          "ref": "2de4247e-3d83-40bc-b94c-1c09aed62460",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "69597c4e-d9c0-4084-a463-6eec85c5a9c3"
        },
        "item": {
          "id": "91e999d0-0944-4723-aded-945da74da4f1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "457c611e-f2a5-4238-b1e9-270ffb3dca40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b333bd-e12f-411c-9733-1f1f25fdaf35",
        "cursor": {
          "ref": "b88490de-c806-4483-90aa-d06eb354bf47",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "79d4ca8d-eda9-4daf-9f4e-f7911cd3a5a1"
        },
        "item": {
          "id": "a3b333bd-e12f-411c-9733-1f1f25fdaf35",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f59a1c31-4b7a-4439-ad25-7c7ffd285720",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd550ac-2bdc-42b3-97fa-35cf1bccfed1",
        "cursor": {
          "ref": "90ed74c4-aa2d-49e5-9d2f-7f12592658ce",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e6a75231-6a6b-4d86-a554-12e84edd392c"
        },
        "item": {
          "id": "3cd550ac-2bdc-42b3-97fa-35cf1bccfed1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0d2e444a-ece0-4fe1-b4f1-94fe3968ad86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe92a210-2b2c-45ff-8b0a-13da4d680334",
        "cursor": {
          "ref": "8b512a88-cae2-4015-9dcf-5b4e690da569",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bc71459e-da60-434e-8210-cb5a4d2aa60e"
        },
        "item": {
          "id": "fe92a210-2b2c-45ff-8b0a-13da4d680334",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7c1fb7c9-016e-4bc3-85d9-6a18dfeb3cb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f418b9-a951-4375-baab-06dfc8587a04",
        "cursor": {
          "ref": "8a635b7d-e18f-45b4-a335-ea4f4654eccf",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fe4b66c6-f443-442b-b1c3-516bdf04b1a8"
        },
        "item": {
          "id": "76f418b9-a951-4375-baab-06dfc8587a04",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "860a659c-1df1-4907-8846-24c5baf103d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eae62fa-1faa-431f-91c5-5ed1aa9f7eab",
        "cursor": {
          "ref": "8372c321-dc3f-4915-a45c-9b9ce34f95fc",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d9cdcd2d-1af9-46a9-8a62-d3a0db4ec087"
        },
        "item": {
          "id": "2eae62fa-1faa-431f-91c5-5ed1aa9f7eab",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "19cd2fc5-f383-4ec2-82e7-ff3658ef9f51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cf711d-c72a-486a-a00a-8db272d938a2",
        "cursor": {
          "ref": "640c9a8b-376d-4f63-8b07-a9cf296e0380",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "eefa64d0-6ed5-4293-a4ae-2f8994fbf93f"
        },
        "item": {
          "id": "06cf711d-c72a-486a-a00a-8db272d938a2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4a9d1301-fda4-4e35-9694-193d69272085",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debb8539-5921-4782-a42d-1cd59632f4f3",
        "cursor": {
          "ref": "9631ea96-976a-47b1-8536-5cf7ca233479",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5086ba7a-bbf5-49a4-8983-e1df48ce419b"
        },
        "item": {
          "id": "debb8539-5921-4782-a42d-1cd59632f4f3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "09f4c05d-4cb3-4d45-b21c-9c1b2e513f60",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8e4dd6-a280-435e-a83c-5b5d45ce04a6",
        "cursor": {
          "ref": "cabbc185-ddc7-4716-b576-146189f773ce",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "51136c2c-d31e-45f1-8172-bfdc0339dc74"
        },
        "item": {
          "id": "0c8e4dd6-a280-435e-a83c-5b5d45ce04a6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "785ba46b-7fb3-4b08-aa8b-56ab2c266757",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8760c15-671b-4fcc-b882-f7ea3c44b0eb",
        "cursor": {
          "ref": "f3e9a5e1-c430-492c-aa28-427f91d6449b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7004bbff-7b10-4bd5-9a02-f269d4afba6a"
        },
        "item": {
          "id": "e8760c15-671b-4fcc-b882-f7ea3c44b0eb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f476fae8-f8c0-4d0b-b513-6bb78b286a03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0c4f36-e3f3-4e12-ac31-66b2e7799cac",
        "cursor": {
          "ref": "7b5deee2-b300-4007-ad51-e329b1b5ff62",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "546dcc1c-c445-4ca3-bf47-ca3d2c670a68"
        },
        "item": {
          "id": "1f0c4f36-e3f3-4e12-ac31-66b2e7799cac",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "000d7c4b-bb44-4920-9a70-70e7854b32ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a8895f5-a4e1-4aa7-b6f2-b335036d3db7",
        "cursor": {
          "ref": "30dde247-86a5-4a6f-a61f-56d3e44fb064",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5d656da7-bbc5-4858-86cb-b3d2a54ddfd4"
        },
        "item": {
          "id": "1a8895f5-a4e1-4aa7-b6f2-b335036d3db7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e6103004-e323-4038-92ab-f8b602ce5dba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29134cb-b916-4ce9-9686-05d32d95d068",
        "cursor": {
          "ref": "14abd712-b62b-4231-8fa3-8ebf561e54fa",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d2dac8fc-9644-437c-a756-b85290562774"
        },
        "item": {
          "id": "d29134cb-b916-4ce9-9686-05d32d95d068",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6fa61a63-f948-40d9-a0fc-5119e4b4a6ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd671aaf-0143-4cd4-bbff-cc5a4e6e650c",
        "cursor": {
          "ref": "35ba2820-9e38-4817-ba00-37c395e2f137",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e31def1d-40d4-40c2-b571-a3bc2182543c"
        },
        "item": {
          "id": "fd671aaf-0143-4cd4-bbff-cc5a4e6e650c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "94c51a81-5b9a-4681-9b6d-9c0bfb53558b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00086a4-502c-43e1-a4c3-7ab570615dcc",
        "cursor": {
          "ref": "89c34b87-436f-4a62-8df6-8da3696265e0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0e02859b-2b4d-49a6-948f-0a20b1899c0a"
        },
        "item": {
          "id": "d00086a4-502c-43e1-a4c3-7ab570615dcc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "44ffdce5-8b92-46f9-9700-54a13f00c3f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a10f62-d78f-410a-84cc-f33d2b6bb13c",
        "cursor": {
          "ref": "66d7cb45-39f1-44ec-8614-33648265e67d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a1382ab8-6dec-4c3b-a138-bb1e5c71664a"
        },
        "item": {
          "id": "d4a10f62-d78f-410a-84cc-f33d2b6bb13c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "85f8c683-856a-44f3-bdf5-24097df60185",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20de6e3f-61e3-42ca-85e1-e00df62878c1",
        "cursor": {
          "ref": "cb7ce2ec-6189-4ee7-a4c6-707e7a0507c0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ffcbc594-3a45-434f-96a3-10ff824ee67a"
        },
        "item": {
          "id": "20de6e3f-61e3-42ca-85e1-e00df62878c1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bdb7a681-59b3-47e3-9194-292f5a1a6f2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9b2d98-7041-4357-b860-ae7197c0a690",
        "cursor": {
          "ref": "c76fee66-fc23-438b-8add-1797a4716a03",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9dbfeeca-fffe-4eda-9921-d6c2d036bc75"
        },
        "item": {
          "id": "3e9b2d98-7041-4357-b860-ae7197c0a690",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ff69dfa7-1d7f-4398-9afd-68d6683ba338",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba2d6eb-3af9-424d-a63a-6634276f6e1b",
        "cursor": {
          "ref": "b359c54f-43d7-4971-baea-36cf50069ba6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5f42fbb4-9e0b-4419-8032-e81b1edad85e"
        },
        "item": {
          "id": "2ba2d6eb-3af9-424d-a63a-6634276f6e1b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "100cec53-a280-4d11-910c-50d306f29e81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceeaa67f-02bf-4f1e-9787-bb8bdff50e40",
        "cursor": {
          "ref": "2ce70f0e-adab-4b27-b23d-8e7a337b6b61",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2561c7a9-a8c7-4598-b04d-d72606742c82"
        },
        "item": {
          "id": "ceeaa67f-02bf-4f1e-9787-bb8bdff50e40",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7bc540b3-ea20-4c99-8548-202e1666d576",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4e8010-06f3-490c-9b8e-0b38989629f4",
        "cursor": {
          "ref": "e06e37c1-22bd-44cf-b66f-abb85e595a09",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cdeca663-39a5-495b-89c7-e77e5cb40dad"
        },
        "item": {
          "id": "cb4e8010-06f3-490c-9b8e-0b38989629f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c935d384-5cda-4662-a235-6ce061678b77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42badf4-7981-4a97-ba98-dba06ad5ad5c",
        "cursor": {
          "ref": "d0b0ca6a-6709-4a78-8208-94dcf1fe52f9",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "49640bb9-4a9f-48a8-9833-8cfe780814da"
        },
        "item": {
          "id": "e42badf4-7981-4a97-ba98-dba06ad5ad5c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "33e236d4-ea85-4408-b616-bb0b5c7ceaab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4f05aa-8acb-4281-950b-2a9d5232aa3d",
        "cursor": {
          "ref": "3a8ca14e-62e5-4231-b349-daab8022b9e3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1982eb85-4300-4af5-8a80-a94c38339343"
        },
        "item": {
          "id": "6b4f05aa-8acb-4281-950b-2a9d5232aa3d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a2d6b691-de3d-449d-a2d4-0719cfe4d386",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303daedb-26d7-4c96-8898-53dd427eb23f",
        "cursor": {
          "ref": "6f0fc9f5-c1c4-4ec5-adfa-270d4d309f31",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ac79a6e1-552f-4d5e-a0ce-4692b9eb443e"
        },
        "item": {
          "id": "303daedb-26d7-4c96-8898-53dd427eb23f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cb4ec37b-1f8e-4727-ae58-07ae5c8b6e12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cef3e1-9c85-43a2-ac4d-7ec1d32f9141",
        "cursor": {
          "ref": "57ac4e11-687f-4329-b457-248f20ed81ee",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5dbec544-23af-4a4e-a337-6c643bfc8243"
        },
        "item": {
          "id": "65cef3e1-9c85-43a2-ac4d-7ec1d32f9141",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2abd4da2-8cbd-4590-9715-ad7be2d14d01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090e002e-9cae-42aa-9326-4cb682591eff",
        "cursor": {
          "ref": "1d31bb90-a282-43a5-8dfd-4f8bfdac7f83",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f4ddf1e1-4ecd-4ce1-8205-295c0dd71155"
        },
        "item": {
          "id": "090e002e-9cae-42aa-9326-4cb682591eff",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "07112c37-59a0-4f81-8574-4ff517ab9edf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f833c3-ade3-431f-a2f8-3474817ce2ac",
        "cursor": {
          "ref": "f7f55d40-8e28-40cd-afb0-699d9d04f60c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "466bc58f-bcb5-4cec-a0ae-4fe77a872221"
        },
        "item": {
          "id": "78f833c3-ade3-431f-a2f8-3474817ce2ac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a37240c5-1ddf-4411-99c0-1b7aded393f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8d85c5-9f0c-40ae-960e-5d67e0dd13e0",
        "cursor": {
          "ref": "d732f38f-53db-4737-b3be-d9e088942edd",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "27721a3e-da38-4c16-819d-4b8ddb9460a1"
        },
        "item": {
          "id": "4e8d85c5-9f0c-40ae-960e-5d67e0dd13e0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0a4225f6-ba65-4636-bf17-8fbcd00b6dbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb81175e-2962-4d0d-8a99-5c2612909c1f",
        "cursor": {
          "ref": "98a93c4f-3d40-4441-9915-9013f56b79d2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6dfd52b2-2733-4d63-9828-a1c9aaae9359"
        },
        "item": {
          "id": "cb81175e-2962-4d0d-8a99-5c2612909c1f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cef97645-4cc0-488b-aaa7-b8a17146355f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10a270d-2f87-4e3e-8e50-34d9da80db33",
        "cursor": {
          "ref": "a26708d7-8c6c-49da-a70f-5d15bc95219a",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b22576af-8a00-4ade-8b8d-c304d19eb2e8"
        },
        "item": {
          "id": "b10a270d-2f87-4e3e-8e50-34d9da80db33",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "07152da5-5656-4df3-ac58-8d4d0d7bb443",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d485ce90-004f-4ff1-9b8f-f80d592f4651",
        "cursor": {
          "ref": "c2a50e2f-1aa1-4e2b-8f28-91751eca8a06",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1fae2806-4098-4079-988a-223f431df1dc"
        },
        "item": {
          "id": "d485ce90-004f-4ff1-9b8f-f80d592f4651",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1a796bc9-bd6f-47dd-ae30-d721ae4902db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b89da1-4fcc-47b7-95a6-86e5341bf6e3",
        "cursor": {
          "ref": "bf6c2c1e-c38a-4d58-bd35-bb0186e8484d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1f79aa5a-386b-499c-9eb1-499f2d2b38e7"
        },
        "item": {
          "id": "a5b89da1-4fcc-47b7-95a6-86e5341bf6e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f9c60308-f530-4941-98d6-59991a42960e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7fc347-5abc-461a-bc6b-20c0c0618761",
        "cursor": {
          "ref": "0b4a0a6b-c599-4c0e-ad43-13ea423cd7e0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "50a04133-eeac-4801-ac47-23294e7ec604"
        },
        "item": {
          "id": "4f7fc347-5abc-461a-bc6b-20c0c0618761",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "053047e8-a3a3-4ee7-9761-e3f1c3ee9ad8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6bbc00-c05f-4821-8cf9-d5e71b2c2a74",
        "cursor": {
          "ref": "d079ba7e-4609-4ab0-9c23-223042f65667",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9090105a-c671-4771-831e-04b7b1e28697"
        },
        "item": {
          "id": "6c6bbc00-c05f-4821-8cf9-d5e71b2c2a74",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "619a7408-b2c9-424c-a7bc-31620333fd1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac85af3-46f2-48c3-9048-fd501b61634e",
        "cursor": {
          "ref": "fa516b1f-7003-481c-9b59-00aca9f640f6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "419e2e48-4b1c-449a-96df-fec8c7f48fdf"
        },
        "item": {
          "id": "eac85af3-46f2-48c3-9048-fd501b61634e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5cc6c093-f71d-4a1e-ae17-3550f4a78c52",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ccfb65-ad1c-48b8-975a-3f58d3699aed",
        "cursor": {
          "ref": "20e07b8f-3bf9-475a-a0b8-3afbdc77d207",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3fbd499d-87e3-43b1-9ab9-699fb41cbf0d"
        },
        "item": {
          "id": "e0ccfb65-ad1c-48b8-975a-3f58d3699aed",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0eebdbae-c0bc-4baa-988f-f455d8432b0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34327bff-c5b0-49b6-927d-c304401eb7e1",
        "cursor": {
          "ref": "f32a1a23-1d59-43dc-9120-a86374b91f9a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c308f706-7133-46eb-92f7-edae7e8ec7c7"
        },
        "item": {
          "id": "34327bff-c5b0-49b6-927d-c304401eb7e1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "719330e0-583c-4f9c-b3d2-dd9b9df4049e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1bf77b-cc1f-4e17-b88b-7cf9cf84116c",
        "cursor": {
          "ref": "4a7a5b6a-8422-4fce-b24d-282b64495162",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6f9ba5e9-00aa-4677-814b-c137c66fce4c"
        },
        "item": {
          "id": "af1bf77b-cc1f-4e17-b88b-7cf9cf84116c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9ad5f6e1-4197-48ef-bd3f-310b8c8d8084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13466d50-b204-4f44-9956-422c1ca7753d",
        "cursor": {
          "ref": "d114a99f-dfd5-4d97-bb89-92036d2a7444",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "00d0c305-a88a-4a36-b91a-bf541d5e508f"
        },
        "item": {
          "id": "13466d50-b204-4f44-9956-422c1ca7753d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "41467da5-0557-4cf1-b10e-fbc8f2c44913",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c6e551-48c9-42de-9c91-591358574be6",
        "cursor": {
          "ref": "b0db3652-4dac-4d86-b48d-4428dcc76625",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c52c2adb-e577-4d25-9885-090ac9c87e68"
        },
        "item": {
          "id": "89c6e551-48c9-42de-9c91-591358574be6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0cf30137-afc3-4637-aade-6e840fcd2eee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fde74e0-42f4-4f38-b639-83d9b8d3fac8",
        "cursor": {
          "ref": "77087438-d95b-4f08-aa6e-be61f0ff334e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7eb696e8-1d3e-48da-8077-2406b1d7aaf2"
        },
        "item": {
          "id": "0fde74e0-42f4-4f38-b639-83d9b8d3fac8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eda0018e-a525-479b-94c3-5f965fe52472",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0012fba1-2f3e-4381-aa44-0aa4779ecd69",
        "cursor": {
          "ref": "27a76b4a-1850-40d4-a2e1-74da16ea88b1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0784865a-a986-4d39-b674-ba80f99a89dd"
        },
        "item": {
          "id": "0012fba1-2f3e-4381-aa44-0aa4779ecd69",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "21eb2ffa-ae6b-4377-a870-a3b33099d066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657124c9-35cf-43b6-90ff-1c38e4fa158d",
        "cursor": {
          "ref": "24d7f415-9400-4d5a-991a-ff4a61fd7ecc",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "65239661-bfd0-4f73-863c-f38e42e9ff00"
        },
        "item": {
          "id": "657124c9-35cf-43b6-90ff-1c38e4fa158d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad6195b6-12da-4706-81e5-731ee04f9cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5ca7ae-c8e6-40d1-8117-752d08903721",
        "cursor": {
          "ref": "16ecbecf-8cd6-4610-b733-adc4aaa751bd",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aad58092-85ae-4d5e-bcee-a683a5c00d01"
        },
        "item": {
          "id": "9d5ca7ae-c8e6-40d1-8117-752d08903721",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a3238822-cbb8-4c70-989d-a5f7af3631d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a736c77-7937-41d1-8979-c4f2c93f2a94",
        "cursor": {
          "ref": "c38129bc-1956-488e-afc0-2315586f920e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "166e6c66-e0fb-462d-b60b-dff8a448fdf9"
        },
        "item": {
          "id": "0a736c77-7937-41d1-8979-c4f2c93f2a94",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ba95ffc0-f4b1-462e-8dfe-f9a2d0c1345e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fb6269-8e30-47c8-bb4f-fff1c0f9a6c4",
        "cursor": {
          "ref": "bde0c9f9-c6e7-4583-92b6-a5e95c81a811",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "aac556e4-c7d2-415f-b156-c029061eb648"
        },
        "item": {
          "id": "d6fb6269-8e30-47c8-bb4f-fff1c0f9a6c4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "aebc8a90-1c7a-4083-b709-7f02efb73943",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e404e478-f687-4374-a720-15050a8240ff",
        "cursor": {
          "ref": "a580a014-9656-451b-9c91-9f27de3031dc",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cf6ad4fa-bb8d-4eb4-862b-9fcd63a8480d"
        },
        "item": {
          "id": "e404e478-f687-4374-a720-15050a8240ff",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0d7cd9a8-32e5-4106-b05c-c6cde63b9761",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf70c54-f304-4126-a27d-cbcef49a8169",
        "cursor": {
          "ref": "ee3e2472-50da-4cf6-867b-810758f7004b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0c915020-1e45-4ca2-bf02-a70297a2931a"
        },
        "item": {
          "id": "1bf70c54-f304-4126-a27d-cbcef49a8169",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4879fa84-e077-4649-b7cc-94c0a2a11d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b779a340-7a04-4b02-a48f-925e938222e6",
        "cursor": {
          "ref": "7e8aaaab-053a-4e79-920a-c88b5ed599f9",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b17ee9d7-0e87-4054-a372-37ae61541cda"
        },
        "item": {
          "id": "b779a340-7a04-4b02-a48f-925e938222e6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "291466d9-93a7-44cb-b8c4-27179ade19e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1296ece5-4418-432e-b694-6a60d87d9166",
        "cursor": {
          "ref": "353ccffd-5991-4329-ad73-9928fea8c146",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c12bdfa3-7c32-43e8-9eac-391d50a8e26e"
        },
        "item": {
          "id": "1296ece5-4418-432e-b694-6a60d87d9166",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "50b262aa-ab54-4bf7-818a-5be3dfab3156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100a1d5f-2980-4f6a-b5cd-71a637e85f37",
        "cursor": {
          "ref": "8e6abd35-4f27-43ae-88db-c21609ab8f07",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2f1f3de0-8579-4293-9e91-7a46e6fedfca"
        },
        "item": {
          "id": "100a1d5f-2980-4f6a-b5cd-71a637e85f37",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7e862ec2-6e06-4d1d-b738-d69784319129",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d99a5a7-09a8-47ca-8bb6-f99f8d16371a",
        "cursor": {
          "ref": "de3eaff1-b629-43ff-aa50-4eba535c61e8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "99d536f1-de31-422b-a041-6e952d1a4624"
        },
        "item": {
          "id": "9d99a5a7-09a8-47ca-8bb6-f99f8d16371a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8c7b68be-1b9d-49dd-b00e-6dc51cea85a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55d40d9-7d0a-4e96-b162-e1411c6928af",
        "cursor": {
          "ref": "779ea2ff-92d2-429f-8e46-c1064cd015a0",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ebf002e2-7461-4524-8743-a5f2d9ea3c4e"
        },
        "item": {
          "id": "d55d40d9-7d0a-4e96-b162-e1411c6928af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d3855c7c-c6fd-44c1-b267-b3fd3654f230",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263aa4fb-d894-4a28-8b62-7c3beb658899",
        "cursor": {
          "ref": "8031eefb-2b41-41cf-b444-ae8b5bbbc5f4",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "aa7f6719-1c1c-4629-9e16-62366d738578"
        },
        "item": {
          "id": "263aa4fb-d894-4a28-8b62-7c3beb658899",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e5f60351-fe1c-49b1-9262-76835e660a39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d251e5b-e48a-486d-8fed-65a8bd8ef3a1",
        "cursor": {
          "ref": "3f818969-cf3b-4a7c-8acd-3e20edf263b8",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "249a4a9f-d095-41d6-8688-fe8e2fd314e4"
        },
        "item": {
          "id": "9d251e5b-e48a-486d-8fed-65a8bd8ef3a1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "43f6706a-bb9a-48a8-98cd-02769a9caac7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e672ae95-7b64-421b-a73e-1b4c1a024e72",
        "cursor": {
          "ref": "e2b7b3d8-783c-4660-b019-58dec74934d2",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c466d0c4-7b15-4bc8-a48d-58cbf9f909bd"
        },
        "item": {
          "id": "e672ae95-7b64-421b-a73e-1b4c1a024e72",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "5ae01e61-9ac4-42dc-ba20-95d33673ef46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdcd98a-9dfb-4703-b0de-8fc713c2940c",
        "cursor": {
          "ref": "c5658687-ef2e-440d-b84c-cc5cd77ca211",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8a69c775-04a2-4655-afe8-491d42ff224a"
        },
        "item": {
          "id": "6bdcd98a-9dfb-4703-b0de-8fc713c2940c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8f01a10e-0e61-4559-879f-483acdcec7fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65c3dd5-0803-45be-beb4-2f8cb1294f4f",
        "cursor": {
          "ref": "5a5dce0a-046c-4138-8dc7-eaa5056828a5",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2b1cc8a3-6e33-4413-84be-e6e1e0426298"
        },
        "item": {
          "id": "a65c3dd5-0803-45be-beb4-2f8cb1294f4f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "65a4ce76-1499-40c9-b279-d20a4766b40e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa5aee4-e809-4f74-99e3-f07aca691566",
        "cursor": {
          "ref": "8101bd96-0e94-494f-b746-b04d26984b51",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "de1f969c-2ae4-49e5-9ba1-cb443b866fbf"
        },
        "item": {
          "id": "dfa5aee4-e809-4f74-99e3-f07aca691566",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "59af61b6-6b91-49c9-bbee-c54febc6374a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d653a0c1-f5b8-4914-98f6-80f1ad35b131",
        "cursor": {
          "ref": "4c7ebdee-65fa-4147-b76f-3444f1c0d4c0",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7bdc1540-4795-4245-9ad9-74ad0444b760"
        },
        "item": {
          "id": "d653a0c1-f5b8-4914-98f6-80f1ad35b131",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3711dc01-fe7a-4de8-b998-acfb1f563c79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c412753-2ef0-4211-ac97-08c56ccb56e9",
        "cursor": {
          "ref": "b01f8cdd-ae8a-48b4-a7e4-9befcb563b93",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "41f3b854-20c1-4897-9b86-2bd1952a2b7c"
        },
        "item": {
          "id": "9c412753-2ef0-4211-ac97-08c56ccb56e9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "73840c95-7e0f-4298-ab05-6e59571530d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9d4536-0e85-4b40-978c-79d37b2b8d08",
        "cursor": {
          "ref": "e5815262-d764-4fdc-bee3-772eeda15a6b",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0fe24c00-0fb9-45cd-b1ce-6dd6691064e4"
        },
        "item": {
          "id": "cd9d4536-0e85-4b40-978c-79d37b2b8d08",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8065cda9-cb5a-4453-b226-13bf57c3e1e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a992a2-b1de-4ee9-827e-9aa34f9a6737",
        "cursor": {
          "ref": "a32c7fb1-038d-4cdd-95e9-747b97fb9bc0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d18472d0-6217-4cfd-a007-dc4ca0b05f3c"
        },
        "item": {
          "id": "e5a992a2-b1de-4ee9-827e-9aa34f9a6737",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "03220b88-dd93-4728-a325-00364a775a7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ade4e-79a0-4e3e-a449-0208067ad868",
        "cursor": {
          "ref": "80938c8d-85ed-4681-8abc-e825001bfd6a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bb843eff-d292-49ab-b288-1037b8ff8b77"
        },
        "item": {
          "id": "c14ade4e-79a0-4e3e-a449-0208067ad868",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8c040d4f-4ea8-4452-a58f-e5a0e36923b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd310f45-603f-442f-9130-11af0396c96d",
        "cursor": {
          "ref": "5b527e02-3de5-4c10-976e-2f5fb821345a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "353f7ed5-1ea6-4583-be11-6510a7b98e67"
        },
        "item": {
          "id": "bd310f45-603f-442f-9130-11af0396c96d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1b830a3b-96f5-4601-900b-92222c2a6a3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1dd7f9f-9763-4969-80b1-e1c313d55c6c",
        "cursor": {
          "ref": "dd11b7ee-e6b0-424d-a7b5-8e344ec7d242",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6ce25418-6e36-4574-888c-07bdb83fc549"
        },
        "item": {
          "id": "c1dd7f9f-9763-4969-80b1-e1c313d55c6c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f7330642-5736-42c2-8291-4c2b79d1dfa0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481d66ca-29a3-49e1-927d-2f2751952002",
        "cursor": {
          "ref": "219b8852-b443-4eea-936f-c260707a3784",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7a4a8174-0e25-4f1c-87a0-38871ab95813"
        },
        "item": {
          "id": "481d66ca-29a3-49e1-927d-2f2751952002",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3b261911-75d0-4047-b2b9-828beb9512ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2261f6fe-0016-45c7-b3ff-3158c2bc7530",
        "cursor": {
          "ref": "cff59de6-b08a-4be7-9b43-a1f6b48c6d22",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1498bac0-9e9c-4b8f-8282-9a240a7d1532"
        },
        "item": {
          "id": "2261f6fe-0016-45c7-b3ff-3158c2bc7530",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8668e70f-92e7-4528-8f17-24aba6b35cf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538d49f2-9206-4706-9ae8-28a47a64e5c1",
        "cursor": {
          "ref": "5629c195-6b6e-446b-bb82-43ba6ace496d",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2eef7dfe-fb8a-48f1-9e6b-d8c4da1abb14"
        },
        "item": {
          "id": "538d49f2-9206-4706-9ae8-28a47a64e5c1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9d6faca0-2c4e-4503-be5c-3449aa5a107b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e91f35-1f19-46d3-b244-e917887a8b03",
        "cursor": {
          "ref": "9193d18b-f2b7-44cc-8bcf-7a9d8175069c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2f9ccfc4-7777-4caf-95e1-eda2ec1f37c1"
        },
        "item": {
          "id": "89e91f35-1f19-46d3-b244-e917887a8b03",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a8197fb4-6e78-412a-8040-157f2ece6901",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f86885-2c4c-4ac8-8be4-0a6f9f985e8f",
        "cursor": {
          "ref": "edfac6ea-c6d4-4466-ae82-db0efb4c11e0",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "10ac6445-0db4-4229-834d-ea97691f4148"
        },
        "item": {
          "id": "e1f86885-2c4c-4ac8-8be4-0a6f9f985e8f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "387bc542-690f-4ff0-86c4-8a6bed342353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc170e5-2c09-48ec-ada0-7d862bdbb5d7",
        "cursor": {
          "ref": "439707e9-bbd0-4fca-8882-4971fa143092",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d2c3a996-c35a-4b90-9391-007294f6cbee"
        },
        "item": {
          "id": "7bc170e5-2c09-48ec-ada0-7d862bdbb5d7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cec9513c-4a5d-487e-bf5f-febc95f85f53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550970c4-d3cd-40ac-87af-37937fe572f1",
        "cursor": {
          "ref": "5156b57a-46b5-49f6-ad0e-8bd66cd27475",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b651c309-1b53-4d65-816a-bba9ee5cbf70"
        },
        "item": {
          "id": "550970c4-d3cd-40ac-87af-37937fe572f1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c8a01b46-c790-43a9-bf00-cb064cc35dff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26561d9b-1df5-4e3a-846e-b0bf4d3b77ea",
        "cursor": {
          "ref": "4ea21be3-b846-4253-924d-4a9248477107",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba05e936-f876-41ce-bfd5-32d06bd1f97b"
        },
        "item": {
          "id": "26561d9b-1df5-4e3a-846e-b0bf4d3b77ea",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "54aaf7bc-75ed-46a4-88fb-346bd0baeb94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a85b05-6636-449b-93a7-4fc6fa0db9b4",
        "cursor": {
          "ref": "7ed56d9f-47cf-49b7-8138-9d94db5afe80",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "60714a88-3ba1-4fee-95d7-053870fd4468"
        },
        "item": {
          "id": "08a85b05-6636-449b-93a7-4fc6fa0db9b4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "51ef21c6-c1f4-4e8d-8497-4c73ae04eead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c17c41c2-2420-4922-937a-4acb314b4e8a",
        "cursor": {
          "ref": "3d5862eb-594f-4663-a194-8238d72c9d67",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "edc7f4a1-2612-44af-a153-96866e2e1e2b"
        },
        "item": {
          "id": "c17c41c2-2420-4922-937a-4acb314b4e8a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a78bd0aa-fd71-4160-b4a3-a963eebaf053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "debec206-fab5-4453-8df5-f48540dba989",
        "cursor": {
          "ref": "443f6202-1b15-4e47-872d-90d805d99fe1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c0bd6d41-4d38-47b2-b5b4-0c3b9e3f592d"
        },
        "item": {
          "id": "debec206-fab5-4453-8df5-f48540dba989",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bf81c91a-27ba-49d4-a126-23671a991842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e0669864-df4f-403e-bd6e-ca68ccccc766",
        "cursor": {
          "ref": "94226c39-3b70-44d2-9b39-55a19bf2d32b",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3c4f7ac0-7bee-47ce-826d-b1d928dbf574"
        },
        "item": {
          "id": "e0669864-df4f-403e-bd6e-ca68ccccc766",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ada6062a-9d46-4742-bf90-c8f671e5c95a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "0b069741-1b61-42d1-8f5e-61814c4a4f65",
        "cursor": {
          "ref": "2caf94d3-94fc-4d62-940b-67deecafb39f",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cacaa321-f513-480f-9236-126fcfe598c9"
        },
        "item": {
          "id": "0b069741-1b61-42d1-8f5e-61814c4a4f65",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b520bbde-48c5-4b57-aec8-6764b058fe1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "a9d500e3-7542-4abd-ab51-177eb6efe63c",
        "cursor": {
          "ref": "100cc0b9-8cf4-439a-8b99-513b5338fd43",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "67577b6b-f96b-43d0-9ca8-e44fd26aae49"
        },
        "item": {
          "id": "a9d500e3-7542-4abd-ab51-177eb6efe63c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f3bdeb84-c617-45fe-a806-fc66e9d7ce7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "75987d65-4f14-4c7a-b703-1079d87448e8",
        "cursor": {
          "ref": "3ef325ed-0531-47eb-9365-b6890d02c2af",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7f8c6e50-80bb-40c9-a687-da22c02db445"
        },
        "item": {
          "id": "75987d65-4f14-4c7a-b703-1079d87448e8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7a757392-5f24-4191-962c-bec2fba944d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "50bf4779-2161-4478-8dff-e243f050c35f",
        "cursor": {
          "ref": "63f75c55-8f30-40c9-91d4-55273af03621",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b2f55b9a-7446-4acf-94b1-72e7998bfa48"
        },
        "item": {
          "id": "50bf4779-2161-4478-8dff-e243f050c35f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ef00a91-3ad2-4e4c-a73b-485d5264c680",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d70117-734a-45c5-9b45-0b3e2c12c2b0",
        "cursor": {
          "ref": "566eaa3d-8d39-46ea-bf58-47472fc054ea",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "36c0fb6c-46e8-4a85-b3a2-d7c71e1086ce"
        },
        "item": {
          "id": "a9d70117-734a-45c5-9b45-0b3e2c12c2b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e20eb24e-4d64-414c-a214-b1a9582718d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34215933-4262-44b2-9753-f9bd510a50df",
        "cursor": {
          "ref": "201b1bad-804f-4a91-909d-e01dc3b708a9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "00b364a7-c554-4495-b5ad-9c238d1fd2c8"
        },
        "item": {
          "id": "34215933-4262-44b2-9753-f9bd510a50df",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a86f6dd4-ef11-4cba-a8b7-e4b7e324b0a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb10697-58d7-4c26-b65b-287c0b4e3c86",
        "cursor": {
          "ref": "7d8cc8b3-25a3-4a47-a8f9-00960e98691c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b488e5e7-f7a8-4308-89db-2c37be0d4cd5"
        },
        "item": {
          "id": "acb10697-58d7-4c26-b65b-287c0b4e3c86",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e45c0575-a8ed-4acc-89b2-24b305c4f633",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7831713-bb3b-4939-bc47-694e1d5ae073",
        "cursor": {
          "ref": "6bf2c826-2f32-4dd3-911d-47e4afe6d664",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "66f4c121-14a9-476d-8815-2304ebaf8465"
        },
        "item": {
          "id": "c7831713-bb3b-4939-bc47-694e1d5ae073",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c7f4d59e-826c-43f9-ae2d-2804a12dfcff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ff48e3-b6bd-4cac-abfc-22954bb29ced",
        "cursor": {
          "ref": "8d7418e5-b5e7-4be8-855f-31e835535147",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "932d3c5d-0888-4cd8-8483-1d3fac7be25c"
        },
        "item": {
          "id": "34ff48e3-b6bd-4cac-abfc-22954bb29ced",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7fa5833b-23d4-450d-978b-040e77188b63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4840577-2f1b-4a6d-91cf-8f90f3353149",
        "cursor": {
          "ref": "6a013085-67f5-41c4-af55-026489a5ed21",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b0814ed7-2c7c-48c0-86a5-27e38f9a1348"
        },
        "item": {
          "id": "c4840577-2f1b-4a6d-91cf-8f90f3353149",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "88844160-89dd-448f-a853-abcbcbc1b244",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c015cac4-446b-45c6-a7a5-1fe6cbcfb777",
        "cursor": {
          "ref": "627cdbe6-6a9e-49ae-a01a-97df0b20558a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "34661ace-f09a-45a4-80fb-ee8442f87ce6"
        },
        "item": {
          "id": "c015cac4-446b-45c6-a7a5-1fe6cbcfb777",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d779992a-acdf-4bab-93d4-a34c83787eb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd711537-8f79-4b29-b91f-de501e56403c",
        "cursor": {
          "ref": "1b592e64-552a-4a98-9b53-1edcb5d982b4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a6208981-fcac-4cbd-8f79-4e8f04e4ec1e"
        },
        "item": {
          "id": "cd711537-8f79-4b29-b91f-de501e56403c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "85eec478-0174-4ea1-bb3a-12884d93e583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4049a63d-218d-418c-8fb7-bd392cd6c1eb",
        "cursor": {
          "ref": "1abab557-c984-4d42-850f-c5fbda638dbf",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cbc11f50-9d38-4690-addb-e26504b2ab33"
        },
        "item": {
          "id": "4049a63d-218d-418c-8fb7-bd392cd6c1eb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d1433b52-f854-4a87-a6dc-370c1b6f3785",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5392c01e-0336-42cb-9df4-6027bf389872",
        "cursor": {
          "ref": "b8dc8740-271f-4a09-93ae-95050d4fd9dd",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "049d0488-1b7d-435a-ae95-68e7130f5d0a"
        },
        "item": {
          "id": "5392c01e-0336-42cb-9df4-6027bf389872",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99e0ab5f-e0dd-46ed-9898-992883c1e2c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b059fb0f-dab3-48f6-b407-458267db0240",
        "cursor": {
          "ref": "384960b3-d57f-4c62-89ce-6b807d80be58",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3a714d78-641d-4d5b-b4b2-9d5c28732668"
        },
        "item": {
          "id": "b059fb0f-dab3-48f6-b407-458267db0240",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8b3d4358-6ad6-4492-9f40-b8d1d19e3465",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562d20c4-ac5d-48a7-9d93-8244ff582024",
        "cursor": {
          "ref": "b5e1fea8-b292-4f05-ac10-5434f9473f33",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "35a73d2a-01eb-4dbf-bd89-085d5a078b71"
        },
        "item": {
          "id": "562d20c4-ac5d-48a7-9d93-8244ff582024",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a488ebd1-ba92-4750-8f91-2df14adbde66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd961d81-0cfe-4512-9f0b-00e6279495bc",
        "cursor": {
          "ref": "72966f3d-6622-424d-a021-a13ef3d9f3d9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3161d618-0458-4fc2-9694-49bd366ae0f8"
        },
        "item": {
          "id": "cd961d81-0cfe-4512-9f0b-00e6279495bc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7e87d8ed-aafc-44a3-bf08-898c3297c2f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8443bee-f804-42b9-8189-cb72b97a0239",
        "cursor": {
          "ref": "c8c35567-39ec-4a48-af56-dda63c274124",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "af7e8e15-807a-4bca-b274-eba64ba5a2ce"
        },
        "item": {
          "id": "a8443bee-f804-42b9-8189-cb72b97a0239",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9f082c64-e506-4b14-a6ca-a30f3bf7bc63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d69f956-1b87-4428-96e9-3b30611483cc",
        "cursor": {
          "ref": "bdeedcbc-ec4e-4559-a2cf-2123a341b0d3",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2841d00a-8527-4af4-b3ab-ea9d3244bdbf"
        },
        "item": {
          "id": "3d69f956-1b87-4428-96e9-3b30611483cc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c1ae14ad-fd54-4d72-9ca0-3ea938b95723",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae9b9cf-351c-4ba3-a891-a58b75285323",
        "cursor": {
          "ref": "855be570-65da-45b0-8bb8-a70769c356ac",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7ca6a20e-5091-474b-b7f7-7c90ee6e9cfd"
        },
        "item": {
          "id": "dae9b9cf-351c-4ba3-a891-a58b75285323",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "12d87154-ef1b-4b06-b3a9-a7e0672b4e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c8cc45-a33c-4c06-8c13-e7377e6c64a0",
        "cursor": {
          "ref": "3d787276-244e-4692-8bff-0bfb1b66a792",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ac32fd30-ce56-4663-8ba6-fcc772ed7c18"
        },
        "item": {
          "id": "03c8cc45-a33c-4c06-8c13-e7377e6c64a0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f21f0353-b73b-4146-a160-72e077557e6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad67108-1da6-4ce1-b404-06fe6a5be8dd",
        "cursor": {
          "ref": "b11f5d3f-3390-4150-ab65-b51180d90aa2",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "708bdfea-1cfb-4643-aa91-d1de6cecf60b"
        },
        "item": {
          "id": "aad67108-1da6-4ce1-b404-06fe6a5be8dd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c767b050-354d-4951-b7e9-b6f7b8148337",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958ef643-d35d-484e-850d-bd5d3d11f977",
        "cursor": {
          "ref": "bd630ff3-ea44-4beb-ad52-ad7b2607397d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "22e16049-3002-4e60-b388-6e0a08aa8d65"
        },
        "item": {
          "id": "958ef643-d35d-484e-850d-bd5d3d11f977",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8be146bd-b3e0-4d7e-a8c3-90500281f397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc1e686-3be0-4f0f-8302-84539419830c",
        "cursor": {
          "ref": "de1b88b0-56c8-494b-953b-5b1540badc60",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "521ee26d-40fb-4b96-abba-d751225d69f4"
        },
        "item": {
          "id": "9bc1e686-3be0-4f0f-8302-84539419830c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90484829-7ba1-4874-bb0f-5d9dcfe331de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f05c5f-9bc1-4f80-b323-b398e262870e",
        "cursor": {
          "ref": "ad8817fa-6f1a-4e93-9243-cf5840d6a4db",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "429e4ee7-0398-4db0-9d7a-6184185ee227"
        },
        "item": {
          "id": "53f05c5f-9bc1-4f80-b323-b398e262870e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "296ff8b6-60ec-4e9e-ae00-4d1de8cb29e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f409c888-88f2-40cd-97f9-3f8094ee97da",
        "cursor": {
          "ref": "710d4ffb-154c-4537-b99a-94ec3f160b99",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3c3275ef-40e8-43cc-b5d1-945a6e35a11c"
        },
        "item": {
          "id": "f409c888-88f2-40cd-97f9-3f8094ee97da",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ac0ae74b-f344-40d9-96b5-c47a93f89896",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c90a2fa-e834-4814-ae89-cbc8fdbb21c2",
        "cursor": {
          "ref": "aab90dd5-5050-4c8e-9a10-40d7e166c461",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f044265f-2486-4c92-8c16-c93c6551ff79"
        },
        "item": {
          "id": "5c90a2fa-e834-4814-ae89-cbc8fdbb21c2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0c999dac-6f2b-4b4c-8a71-453878e1c46e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70679611-f200-4d93-b96e-af69fa96edbb",
        "cursor": {
          "ref": "62eec505-ac4b-4d34-a919-ab2572be70bb",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "870a1958-0f6a-490e-8a4e-b1761132fb74"
        },
        "item": {
          "id": "70679611-f200-4d93-b96e-af69fa96edbb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a7dc8d52-754f-4f26-a02e-210b594f3011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c565db-238e-4489-af52-33ea15cf6236",
        "cursor": {
          "ref": "d6b19dc9-fa72-4347-8057-3229ea728ba1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "67e9727f-4759-4ad0-be05-0cd6c2b9e3a3"
        },
        "item": {
          "id": "c6c565db-238e-4489-af52-33ea15cf6236",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "18a6060f-78d3-4eda-9b15-750feff2f6f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1071bc1-bee1-49b0-a275-718898e1a9bc",
        "cursor": {
          "ref": "bfb24571-eaca-44fa-95ac-bd2faed92345",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "43b3affa-a2c9-405b-b6e8-57b8c975eebb"
        },
        "item": {
          "id": "c1071bc1-bee1-49b0-a275-718898e1a9bc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bbf252b3-c32e-462e-ad57-4f85e922aa15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4d5f14-47f2-4a44-af17-ff1e13938fac",
        "cursor": {
          "ref": "beb77ed0-5599-4403-b9c5-62aebdacda75",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bdbd06ac-093d-4f94-b21e-327c4e7cefb9"
        },
        "item": {
          "id": "0b4d5f14-47f2-4a44-af17-ff1e13938fac",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0adc53e-d152-4ab4-8d0d-150c9835cb74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e41cf6f6-6bbd-4ee4-80d3-e2cf33a10b7e",
        "cursor": {
          "ref": "15a3fd77-446c-4057-b737-c0f0491c0607",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "40a369d2-d1f5-4a23-945a-a00ee40553a9"
        },
        "item": {
          "id": "e41cf6f6-6bbd-4ee4-80d3-e2cf33a10b7e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cc927941-5e6b-48fc-a4ed-6a30cea52186",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06baa11-f157-4887-95a4-35462cb44a43",
        "cursor": {
          "ref": "df7675ea-943d-41ae-9748-219c0af0b48f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6e4cf84d-0d98-4e61-93cc-bc5e0c482a1b"
        },
        "item": {
          "id": "c06baa11-f157-4887-95a4-35462cb44a43",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4459782e-769b-4ff1-8b76-6e0eaba83f7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4733d36b-d4ab-46b8-9550-15e7a1d41d88",
        "cursor": {
          "ref": "5c766ada-8191-4a3a-9368-72c2f29deece",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "805421e1-943f-4f3f-903b-746aa4c4165e"
        },
        "item": {
          "id": "4733d36b-d4ab-46b8-9550-15e7a1d41d88",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8cb7edbb-6665-402a-9ac8-06d60917cf17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad9b5b3-0f23-4135-b0cf-83bbfa375886",
        "cursor": {
          "ref": "c3da829c-22c7-4a03-b95f-3297592b9069",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b198eb5f-0914-42f2-9848-bdbcd8729665"
        },
        "item": {
          "id": "7ad9b5b3-0f23-4135-b0cf-83bbfa375886",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "acb2dfbb-14b8-4868-8020-647b70b0e470",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bc0f1e-9507-4385-b386-e92abeb9d1d2",
        "cursor": {
          "ref": "633ae905-bd4b-4488-8f66-d340aaffa833",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "af3826a2-1b51-4c14-a81b-10f8a4ddf3f3"
        },
        "item": {
          "id": "66bc0f1e-9507-4385-b386-e92abeb9d1d2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c76089b8-2f32-4c5a-bdea-b175d132a5ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a93bce-3b9b-4d70-a709-0b79412bcb33",
        "cursor": {
          "ref": "7af4b7fa-dd60-4ef9-90f9-ad645e3e889c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "64eeb53b-a9c6-4555-ba18-9b914368107c"
        },
        "item": {
          "id": "42a93bce-3b9b-4d70-a709-0b79412bcb33",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "06dc2e34-0b40-4a29-b2fa-2170ab504cb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57aeda90-dfee-4609-9979-a7309a849a5a",
        "cursor": {
          "ref": "11b800ae-d81d-473f-a811-ab0553b45c34",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b03b2ebf-2aec-4177-b091-5e6dbc333dcb"
        },
        "item": {
          "id": "57aeda90-dfee-4609-9979-a7309a849a5a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "44f01e73-6487-4684-b0ac-d2c3f1fb8778",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e0e557-1e72-4295-8e32-64e381f68f1c",
        "cursor": {
          "ref": "32a04d1a-56b4-4d3d-9a96-2af83447588f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2da151bd-6779-416f-a936-703906f3818e"
        },
        "item": {
          "id": "52e0e557-1e72-4295-8e32-64e381f68f1c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cf088ed4-092b-4344-9736-f9d9743cd839",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cd69c1-8d0d-497d-8cfb-391f7ee9e308",
        "cursor": {
          "ref": "719cf046-4cf0-46dd-91a7-41d1a9563dde",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2b1a4adb-f5c9-4036-ba23-590d4e6d4e1f"
        },
        "item": {
          "id": "34cd69c1-8d0d-497d-8cfb-391f7ee9e308",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3ee8ac97-5f6b-447a-a21e-045ffde0bbfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aceea58d-3784-4af3-96ee-deb107e84d1a",
        "cursor": {
          "ref": "38795480-543d-4974-9a29-a57fb9b8236d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c1b09de6-3530-4b62-b3dc-0fc06352ac0c"
        },
        "item": {
          "id": "aceea58d-3784-4af3-96ee-deb107e84d1a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "788ac396-3f60-4c5e-9b38-6d3b7b67c647",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1335edcd-d5af-4d1d-b48d-d3091b9853eb",
        "cursor": {
          "ref": "1e63639f-a6b5-4a7f-99d1-e5c0745b9ac9",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "10c5cca7-c4a1-49c6-be6e-07b08cf6cda8"
        },
        "item": {
          "id": "1335edcd-d5af-4d1d-b48d-d3091b9853eb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0d9b5853-93b4-4445-a0bb-56a85b0d9f2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0fce65-0c2e-48ec-ad8f-8c734fe5c73e",
        "cursor": {
          "ref": "e2a87cd7-8cf7-460d-a67e-0dc1b40da535",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a7c25846-4e41-486a-b4e8-bc122081fbe3"
        },
        "item": {
          "id": "3d0fce65-0c2e-48ec-ad8f-8c734fe5c73e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d631f90f-c554-462c-a744-47809c192912",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8ab8b0-760c-4733-b5aa-e6a4151d55eb",
        "cursor": {
          "ref": "5b6b412c-1bfa-4199-ba83-419bd1d9ae2d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9cbdec6b-07cc-42dc-b3a2-31d46f69c1a8"
        },
        "item": {
          "id": "2c8ab8b0-760c-4733-b5aa-e6a4151d55eb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "934e3728-e72d-45d4-b9cd-0121e8ad3c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f33f390-be4a-4524-979c-e2cfd0f7c8cb",
        "cursor": {
          "ref": "fea45a40-5549-48f3-90b3-996703c8baf8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "087952c1-b7ce-423f-b0d4-d3d596e1e63f"
        },
        "item": {
          "id": "2f33f390-be4a-4524-979c-e2cfd0f7c8cb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ff7e210f-75f7-4d9f-9498-92891b2ffc15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8873109-a80b-4931-8dda-843c43829300",
        "cursor": {
          "ref": "87efe0b6-9216-4072-89e8-f52bc0beb10f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d6c6fa16-9163-4f0a-8ca0-4f05b606950d"
        },
        "item": {
          "id": "e8873109-a80b-4931-8dda-843c43829300",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21ca9661-b80d-4c90-bebb-247ffe5788dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a684c05-b853-44ad-bfea-7ded0b416c52",
        "cursor": {
          "ref": "1d358450-a00d-4418-958d-494b292dafd4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f5423e19-6be2-4be1-8a4f-3dfb1d7ed495"
        },
        "item": {
          "id": "6a684c05-b853-44ad-bfea-7ded0b416c52",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a14cc64b-88c1-4f8d-9d79-0547a635c211",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5a5e2b-de66-4e04-bde4-52fb65ef960f",
        "cursor": {
          "ref": "3bf8c40d-0440-417c-be07-9b56156d9267",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5b45509f-bab1-4ccb-a621-eb4dff54987c"
        },
        "item": {
          "id": "8b5a5e2b-de66-4e04-bde4-52fb65ef960f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2000038a-e003-4c12-9cc7-8bd9e1da0060",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedfe4d5-f21e-4fcb-88f0-7448d5350705",
        "cursor": {
          "ref": "b225c26b-5430-424f-9ec7-e0c38565aa77",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "181c9591-d027-4ceb-b265-3741a21aa6da"
        },
        "item": {
          "id": "cedfe4d5-f21e-4fcb-88f0-7448d5350705",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "10fe4a9e-0723-4b37-9d3d-94faf533b900",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe31f6a-77a9-4dc8-a4cf-a97fe0692009",
        "cursor": {
          "ref": "bd5cf1b3-6f7a-47f7-9663-c637c5c08da2",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c7eceef0-fe75-41ae-9e1d-4e790770d37d"
        },
        "item": {
          "id": "0fe31f6a-77a9-4dc8-a4cf-a97fe0692009",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "729116d3-ce2d-4b4b-bb8d-9833d04233cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112ab82e-ae40-495f-ab9e-e3bd4ca92f47",
        "cursor": {
          "ref": "9d379bb7-4106-4bd8-a92b-dfb4cc9a4b4c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "942368a1-1303-4dc6-96c1-117723c92103"
        },
        "item": {
          "id": "112ab82e-ae40-495f-ab9e-e3bd4ca92f47",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69875c94-0575-46f5-8ac3-5d3908c71cfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979bf892-79a1-40e6-8cee-3ecf80ae38d6",
        "cursor": {
          "ref": "5520f17f-0353-4e58-ad9b-c86f2d6e0a8b",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ef778f7b-964a-496b-82b2-c8ba51bb5cf8"
        },
        "item": {
          "id": "979bf892-79a1-40e6-8cee-3ecf80ae38d6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c9e01c69-daf6-445d-95ca-70c6a0db74ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3801d327-0086-497c-8163-ad7e6cef97ec",
        "cursor": {
          "ref": "23b0db82-5c2a-4fb5-a61e-4bd0d99c2551",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1f1a724f-342f-4592-9d04-1b9d56a430f5"
        },
        "item": {
          "id": "3801d327-0086-497c-8163-ad7e6cef97ec",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "75a7171c-8589-457f-8091-fd78c4295571",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1428ba9-8222-475e-a75f-53922b6be721",
        "cursor": {
          "ref": "ba9fea95-2803-4a6b-9e8f-59e827a36303",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7e0ec668-90f3-4957-a861-bf5842c76d51"
        },
        "item": {
          "id": "d1428ba9-8222-475e-a75f-53922b6be721",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a0463909-33d9-4295-8b17-d68063ef78ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee25cdcd-b25c-4c33-b949-bc60f1a7d29a",
        "cursor": {
          "ref": "793500fa-f81e-45cf-8c92-dddd781541c4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "993f5513-0fcf-43db-8fd9-74d77d223413"
        },
        "item": {
          "id": "ee25cdcd-b25c-4c33-b949-bc60f1a7d29a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6b9448ce-77e0-488b-8f3f-86b5566f61e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd94690-28a0-4f81-9371-168478e4d041",
        "cursor": {
          "ref": "094152b9-d4c3-4b66-adea-cd7955564024",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5f899200-c7cb-448d-a17f-7becd61ac2ff"
        },
        "item": {
          "id": "6dd94690-28a0-4f81-9371-168478e4d041",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "457372c0-e16f-4da0-b102-44ce293880de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b88784-3dfa-4f0d-a0c9-3741a8be9461",
        "cursor": {
          "ref": "f53fb675-731d-47b9-a394-d97c7c64bcc4",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cad8ffd8-751e-43e7-b3b5-1f756e6e5d34"
        },
        "item": {
          "id": "57b88784-3dfa-4f0d-a0c9-3741a8be9461",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "108085a1-78d2-4ec6-a5bf-63a364f253a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed21916-8f4d-41cb-8ecf-24c991afb314",
        "cursor": {
          "ref": "59172cf3-d273-4bd0-bb1b-273b32d2eda5",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a4665650-94a7-4aff-83c6-68b6021527d1"
        },
        "item": {
          "id": "eed21916-8f4d-41cb-8ecf-24c991afb314",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c5efeb23-8ffc-4b59-b455-760abbfdba7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfb95a1-ab24-46b4-8302-634999c416fd",
        "cursor": {
          "ref": "78087731-a21f-46da-b9c8-edd1c0c88d6e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "feee04c7-f82f-486d-be2c-a1e27d941368"
        },
        "item": {
          "id": "4cfb95a1-ab24-46b4-8302-634999c416fd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d77ee335-0bfb-4084-80f9-ca82906ebe71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17650e0c-b1da-424a-a5b8-c53c9b86de87",
        "cursor": {
          "ref": "f66e3155-274e-4b2f-a2db-059e478ddd05",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "05dbbb02-f52e-4e16-ae4d-baa28deff5ce"
        },
        "item": {
          "id": "17650e0c-b1da-424a-a5b8-c53c9b86de87",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "083fb677-cfd3-4666-bf45-fe2b0c6763ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6123c3-524e-430e-a9bd-1503e5934c38",
        "cursor": {
          "ref": "4bda9f20-5735-4642-90cc-de6163387a4f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "047b4b7f-ef09-4913-b871-1b97480d1db3"
        },
        "item": {
          "id": "db6123c3-524e-430e-a9bd-1503e5934c38",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "05d868ce-1587-4eaf-8738-543ff3953c6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471c659c-3065-451b-92e5-562a9dbec05c",
        "cursor": {
          "ref": "19cde0ad-e258-4e6b-b331-b89af47f5d13",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c92f1e22-3dd4-4347-a54f-e0944945df21"
        },
        "item": {
          "id": "471c659c-3065-451b-92e5-562a9dbec05c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3240b8dd-2191-4f62-bcd2-705983ca682a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a5bea1-0435-4154-825a-e145781caaf6",
        "cursor": {
          "ref": "ddd143da-0575-48cf-add0-32bd4ac217a1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "176f4e4b-6595-42b3-9991-f8e16ad80af9"
        },
        "item": {
          "id": "74a5bea1-0435-4154-825a-e145781caaf6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f23f9c2-e15a-4d06-ac26-a295940ba689",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9c4c0e-4fbd-4f4c-b5cf-523a27037326",
        "cursor": {
          "ref": "87487456-9a2c-4ebc-80aa-495b568da5c6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c27c638f-cf2f-4349-889c-1fef7c79b57a"
        },
        "item": {
          "id": "db9c4c0e-4fbd-4f4c-b5cf-523a27037326",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "36eee1e6-b481-477d-a11a-37b25d3b28ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceb080d-fd48-4cc8-9274-629fa6ca607a",
        "cursor": {
          "ref": "34273949-3f7d-4b74-b9b1-c406824a4ef0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1e86e338-027d-4029-bd63-ca75f005f284"
        },
        "item": {
          "id": "4ceb080d-fd48-4cc8-9274-629fa6ca607a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7a4e9b07-e599-4904-869d-cc357ec11011",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b5dcc6-36cd-40b3-bca9-104ee127092a",
        "cursor": {
          "ref": "d9d5e20b-b2cd-425c-9320-878644b996d0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "754e886d-aa28-47a0-863b-0c789a7cf506"
        },
        "item": {
          "id": "62b5dcc6-36cd-40b3-bca9-104ee127092a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6f4b6b83-95fb-48c7-a5cc-e921a24c5cd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640cf6b5-f418-4266-b80f-b129fcc83755",
        "cursor": {
          "ref": "0fce2ac2-5337-42ee-973b-367c1e8dfc90",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "193ee811-cf13-4801-8756-12ad432844ba"
        },
        "item": {
          "id": "640cf6b5-f418-4266-b80f-b129fcc83755",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "810dc34e-e4bc-4e53-af85-2dfbfa61f70b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf128d4d-8756-4274-a529-97542f272b75",
        "cursor": {
          "ref": "b7488008-57aa-447d-a58f-dff49d09a80e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f87fda9-6714-4bbf-bbf0-cfb1b2719c15"
        },
        "item": {
          "id": "cf128d4d-8756-4274-a529-97542f272b75",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bbfbfbb9-03b6-43f2-bec5-95879b6c37e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be94a6ed-5550-4de2-a5f3-8d07f597e3e0",
        "cursor": {
          "ref": "c35496b1-7c1e-4c87-aabc-96eea9545540",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "677ea2f4-b9e7-4a42-b964-a12ee5780763"
        },
        "item": {
          "id": "be94a6ed-5550-4de2-a5f3-8d07f597e3e0",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "414b3d79-509d-4509-929e-1b820479b2e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9278840-3c0d-4113-83cf-a9edd4a6d90b",
        "cursor": {
          "ref": "8fcca96c-a06f-4fc7-92b4-64dd45f5449e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "571de7d6-2104-42f4-b9f3-9ae12733e8db"
        },
        "item": {
          "id": "c9278840-3c0d-4113-83cf-a9edd4a6d90b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d6c5a361-4d8d-4f81-80f2-104520f6cf19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659438f0-c686-4ba7-bf33-1b5c763ab734",
        "cursor": {
          "ref": "d3106d98-0aac-4e13-a6a6-a8bf8a22f015",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6cf80de0-d27b-45d6-9a8e-35b5cce236f5"
        },
        "item": {
          "id": "659438f0-c686-4ba7-bf33-1b5c763ab734",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ee5595f6-7df8-4fe2-81cd-d4251c1e7034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee64968-f9af-4cb2-b63a-1a12cead9190",
        "cursor": {
          "ref": "176eb48c-c5bd-4381-b11c-8c59eeb46aa3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a55f342c-63a0-4de9-97c5-c05301e58aa7"
        },
        "item": {
          "id": "bee64968-f9af-4cb2-b63a-1a12cead9190",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4a393a0f-1964-471e-a439-d32d0e55d453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f6b87f-e98c-47c0-8fa2-ed004905b5bd",
        "cursor": {
          "ref": "acf79eac-386a-411a-a1f1-8b0956417110",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6b67b6a3-57ce-461c-a547-29d224c53019"
        },
        "item": {
          "id": "f5f6b87f-e98c-47c0-8fa2-ed004905b5bd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4415fc82-226b-4cbc-af5e-6a73a4d1ffa3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed76d3f2-89f8-498e-b840-041c11ae6f74",
        "cursor": {
          "ref": "6fbe1cbb-401f-4b88-aff9-f064a99e25c4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "020d359a-62cc-47bc-8cc5-463823fad869"
        },
        "item": {
          "id": "ed76d3f2-89f8-498e-b840-041c11ae6f74",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f1fe8c6a-10cf-42a0-9465-84473389227f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb46236-85c7-4462-b017-35fb3d40ca19",
        "cursor": {
          "ref": "8bb35c0f-2eac-44af-a188-ceffaf75dfdb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d66e68f3-5edd-4800-87e4-af2895bb2428"
        },
        "item": {
          "id": "8cb46236-85c7-4462-b017-35fb3d40ca19",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b7d0665b-07fc-46ce-8813-9020ced977b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f4425b-085b-490c-be41-2d30eff17806",
        "cursor": {
          "ref": "eff13066-3e5c-4b94-9789-12fb7d1a2544",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c9f85cd0-e8ae-41bd-81af-cc9d40c6e182"
        },
        "item": {
          "id": "c5f4425b-085b-490c-be41-2d30eff17806",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3dbad9bf-b003-4ae8-8f76-c2ba359b22f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1360c31d-c308-4e18-b06c-8f26a1054720",
        "cursor": {
          "ref": "16223ec9-333c-4bc9-9a69-3a13ff1c2238",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "45868682-13f7-4a75-a05d-660526c0eab5"
        },
        "item": {
          "id": "1360c31d-c308-4e18-b06c-8f26a1054720",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b7a6a6a1-9bc0-4c26-8c81-4de7873eb198",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a1c337-2c2c-45e0-80ad-4420d95d49db",
        "cursor": {
          "ref": "7b03308d-504b-4077-a198-dbd8e9158fca",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a3558640-8d68-42cb-8343-ed700511e623"
        },
        "item": {
          "id": "f1a1c337-2c2c-45e0-80ad-4420d95d49db",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d738ebae-7044-4710-9a41-bf36215443e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98c1ffe-1f7d-49a6-a692-44fa7d3d6e3b",
        "cursor": {
          "ref": "b104c6e2-ed8a-426d-b7e1-9add63b8eadb",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dd09962f-dbf9-4755-bd85-9093a9487511"
        },
        "item": {
          "id": "f98c1ffe-1f7d-49a6-a692-44fa7d3d6e3b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d0359aad-90ab-429c-8870-612dae7a3699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1893f4a-fc60-4c9a-b3dc-0d7d1c912d3a",
        "cursor": {
          "ref": "063ec8f3-4a57-401e-8820-11bb9d58b93f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b340cf9c-ab61-4663-a88d-dd1ef1a2820e"
        },
        "item": {
          "id": "e1893f4a-fc60-4c9a-b3dc-0d7d1c912d3a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b4b312ca-1059-4351-8615-296cbdabbfd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a85bd98-aa59-4402-94c1-658529f25928",
        "cursor": {
          "ref": "2fe9a127-d71f-46d0-9165-a042982f125e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b47da4c-5b69-49f5-be0b-87cf58c760fe"
        },
        "item": {
          "id": "6a85bd98-aa59-4402-94c1-658529f25928",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "021eb182-248c-4deb-98f4-305f1edaff67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dfff88-86bd-4e2f-ac90-74c312700bdf",
        "cursor": {
          "ref": "50858b1d-88fc-46e4-b340-e59d4e7722d0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "97736942-8d5a-4016-a1de-ce1577b296b4"
        },
        "item": {
          "id": "33dfff88-86bd-4e2f-ac90-74c312700bdf",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2de20b4d-4775-4341-a417-63abff2d3f8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8713ab9-581c-403d-8f8b-9a02d1724d69",
        "cursor": {
          "ref": "d7dc454e-3ad3-4d60-8f23-a08965414d89",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "af35efd3-2e96-4d20-90db-48dcd114bb82"
        },
        "item": {
          "id": "a8713ab9-581c-403d-8f8b-9a02d1724d69",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f34544c0-39ca-47b5-85a9-e4614b9ffbce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7af7fa-ae92-4336-90c1-e31d2034e72d",
        "cursor": {
          "ref": "195ce430-4a34-4255-a029-39e8f5b57984",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8d47f381-f9bc-44ff-8a7e-dcf724ab3eec"
        },
        "item": {
          "id": "fd7af7fa-ae92-4336-90c1-e31d2034e72d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ee48ca1f-dccd-4243-9f98-26c1a02b927a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a79c85a-e8be-4db1-8e2f-becef54deca5",
        "cursor": {
          "ref": "1e269e3e-9d0a-4633-af51-38c29031c72e",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "80952d21-e0d2-48c0-852f-cffd5c8d8a86"
        },
        "item": {
          "id": "6a79c85a-e8be-4db1-8e2f-becef54deca5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7e308d5d-efda-4351-8da7-b588874217ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8edb81-40a3-4e62-9d18-8ffef28c0167",
        "cursor": {
          "ref": "7cb5e602-11ff-4347-bacc-76bb0b0c87df",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "430afe4b-dfad-41d9-8cf4-28b4fc87862b"
        },
        "item": {
          "id": "ea8edb81-40a3-4e62-9d18-8ffef28c0167",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c033ee2f-fc7a-428d-9ec6-e5d8726a879d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3534d74-eca9-4306-ba76-a33a989f7d48",
        "cursor": {
          "ref": "69de96c1-8b11-40b6-8751-0281a15504bf",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "00c47c2c-b680-4efa-a043-4de7422e43c4"
        },
        "item": {
          "id": "f3534d74-eca9-4306-ba76-a33a989f7d48",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ffa6a881-5feb-48c4-9aa1-267a3a35d77c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f4d389-9ff5-4946-bb47-1d9be4e9098c",
        "cursor": {
          "ref": "1f5f3a13-88f1-45c6-9d2e-29c90779c34c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e8f474de-a13e-4a05-bf35-e07242f13e87"
        },
        "item": {
          "id": "b7f4d389-9ff5-4946-bb47-1d9be4e9098c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b53e9afa-e0fb-48c3-bbe8-70c6c00a822b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b744b12c-50f9-4141-921f-9acf3256c77d",
        "cursor": {
          "ref": "d1ad78b6-deaf-4a76-9d46-c5f2bb164b55",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c9ab2b4d-d367-4daf-bb05-f4ed28a12dba"
        },
        "item": {
          "id": "b744b12c-50f9-4141-921f-9acf3256c77d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58970a7c-a103-4931-af69-82a58c696087",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28064001-69c9-4529-99d9-b6696e8fe179",
        "cursor": {
          "ref": "ff4279dd-2a12-4ceb-a7e8-61f1ede69f71",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9836970f-4d85-4dd6-a62f-e6c481cb8d8d"
        },
        "item": {
          "id": "28064001-69c9-4529-99d9-b6696e8fe179",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "637e321f-6045-49a7-9e63-995e74c8f4ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f6b80a-7aa7-4fb8-8315-c0d28195d0b6",
        "cursor": {
          "ref": "4831b01d-1a24-4c76-9a61-90a34df96cc5",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d9ce4326-b7ac-4162-a84c-bdb905f38175"
        },
        "item": {
          "id": "06f6b80a-7aa7-4fb8-8315-c0d28195d0b6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "affddb09-c592-4899-9db6-d72d96a3287b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2257d7-94c1-4080-9744-3eee57810dda",
        "cursor": {
          "ref": "3dce5fca-bac5-424f-8e80-cf948f649045",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "87c00c3d-a9a1-4894-a420-fe2fb683acea"
        },
        "item": {
          "id": "9a2257d7-94c1-4080-9744-3eee57810dda",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a7b18886-672e-4de0-acff-2e576959f17b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990fc67c-17bb-42c5-9dc1-c2b6f03a0c4b",
        "cursor": {
          "ref": "c4f884a9-11ea-41b7-aa08-22dcdd9d7bfe",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "257acbe6-3731-413c-bb34-792fe2864d78"
        },
        "item": {
          "id": "990fc67c-17bb-42c5-9dc1-c2b6f03a0c4b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b46bbe99-2442-4e72-a172-3df4c59f6116",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1839aabf-dfc6-44a4-ad92-1537c4aa269f",
        "cursor": {
          "ref": "e080cbca-17d2-4931-a726-5536f2c20a45",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d196f2a2-83c2-43a9-9b5c-02b0a764a77f"
        },
        "item": {
          "id": "1839aabf-dfc6-44a4-ad92-1537c4aa269f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "781bee9c-f026-4f06-b742-3d9813842e8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c07a18c-d2d7-460f-80a4-b5da1d8baaed",
        "cursor": {
          "ref": "1c6b7d74-76c2-40ed-8f06-93f2f71509a1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9685a8bc-133d-4345-8751-0ff35995266b"
        },
        "item": {
          "id": "1c07a18c-d2d7-460f-80a4-b5da1d8baaed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4e40e404-28f7-4aa5-b90c-804d6356b3b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b9bb45-6f47-465d-8ba0-1db42b8aed52",
        "cursor": {
          "ref": "f9fcfea3-a893-4954-b277-e9cf79132049",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cb2ce457-899d-4852-ae71-9642ab379e94"
        },
        "item": {
          "id": "10b9bb45-6f47-465d-8ba0-1db42b8aed52",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "90102fbc-8b8b-486e-ab0d-2b1d7e1d1799",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a47d67-98b2-4be3-b807-f8f1cf69011d",
        "cursor": {
          "ref": "f52dfb8a-177e-4a35-8aa4-d7e469ed66da",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "de59a339-1635-43cb-b3c6-0e259fb05cfa"
        },
        "item": {
          "id": "13a47d67-98b2-4be3-b807-f8f1cf69011d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cd9db247-d130-4a3a-9898-b08df7f767a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd07894-77d2-451d-978c-0dc993c8141c",
        "cursor": {
          "ref": "fe4fac38-16db-4366-a0ed-4852048b3675",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0669de89-9120-424b-93bc-83835767490c"
        },
        "item": {
          "id": "0dd07894-77d2-451d-978c-0dc993c8141c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3b268f89-470f-47fa-b512-c298a0c91837",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f79b5f7-6341-4738-aaa7-82e5ea1675f2",
        "cursor": {
          "ref": "c03acc69-80b1-464a-b882-3078c288286d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f14021b2-d088-48ec-bfc4-e23db1a27ef3"
        },
        "item": {
          "id": "7f79b5f7-6341-4738-aaa7-82e5ea1675f2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3c4a2f25-9be4-478e-a9b8-616355cc16d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df795532-5485-4cd9-8dc1-05152e211cc1",
        "cursor": {
          "ref": "43405bfe-ff0a-4a53-825c-3828b20725be",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9939fb14-d6ab-43b0-b007-633845d13cf3"
        },
        "item": {
          "id": "df795532-5485-4cd9-8dc1-05152e211cc1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c82aa423-6476-46dd-9ac4-c066c5cbd6ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c09135c-fe71-4a53-bd0c-6f0680e93919",
        "cursor": {
          "ref": "65bfca99-0780-4af1-8b4b-0a2b4bcb723a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4a642be2-896f-450b-883e-b4f015e10e0e"
        },
        "item": {
          "id": "6c09135c-fe71-4a53-bd0c-6f0680e93919",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8d0f8396-415f-4596-9694-69d2c23b565d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085363a5-2197-474f-9233-c277de16836d",
        "cursor": {
          "ref": "008a0f6c-be6e-480f-928f-efaa7e038727",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1a13712b-0a6e-4772-9fe1-c91653304188"
        },
        "item": {
          "id": "085363a5-2197-474f-9233-c277de16836d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2ac67b1f-9aaf-419c-86b4-f26d1f3b3082",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ef4121-77cc-475f-8766-6b0e1a24f477",
        "cursor": {
          "ref": "49463a2d-d074-4c2d-813d-9a2918316087",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ee691670-b3e4-422c-ac85-e0a29e0c961b"
        },
        "item": {
          "id": "45ef4121-77cc-475f-8766-6b0e1a24f477",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7bc6be96-a486-42f2-87ed-373eaeabf523",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445327cb-92dc-4ab1-ac07-e77213c14d4f",
        "cursor": {
          "ref": "5a430951-fd8e-4ed8-b9bc-7c7160fb5369",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fd720d52-143d-4fe6-b720-9b593078ea83"
        },
        "item": {
          "id": "445327cb-92dc-4ab1-ac07-e77213c14d4f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "43d834e9-a58f-46e0-8e86-d94e91f207a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740326fe-23b8-4f40-b80f-819bcb471f2c",
        "cursor": {
          "ref": "d9339c53-903c-4110-b5c3-48015204ec15",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "91560ef2-4122-4392-9edb-6f0508d4af72"
        },
        "item": {
          "id": "740326fe-23b8-4f40-b80f-819bcb471f2c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "145e0819-710e-404d-b515-18d313fcc9fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fce2220-d6d7-4c1a-93f6-9ea42477361f",
        "cursor": {
          "ref": "ad3e5e0a-c2a1-4764-89a2-636ae53026d3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "05cc9b8d-b338-41d7-b595-6fe82340dd06"
        },
        "item": {
          "id": "6fce2220-d6d7-4c1a-93f6-9ea42477361f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6fe10d30-4a2f-42fd-b729-78a0d93a8e79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1cfc52-c2c2-479a-98f4-3d4b93e794f4",
        "cursor": {
          "ref": "32e0e074-4551-4ca0-bc44-e9dae2d5114e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5d8770be-9918-4ccb-a441-5a812178e8f4"
        },
        "item": {
          "id": "0d1cfc52-c2c2-479a-98f4-3d4b93e794f4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e14cf7db-8090-4c27-94b4-f3c0432bf5c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8146fd-4a73-4310-a2c6-94bcceb6584b",
        "cursor": {
          "ref": "a9e4fc0a-19a7-4e1d-8ec0-a84bc8ab6189",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c284fd5e-08ef-4cfb-a8fb-39a7016157b4"
        },
        "item": {
          "id": "7d8146fd-4a73-4310-a2c6-94bcceb6584b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6a233019-5e2e-4253-ab27-9624b7fc8400",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86da6c47-25f7-4f53-b2db-26e298c79eec",
        "cursor": {
          "ref": "06bf8a78-f4d7-4553-841e-d8296abc5352",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5f05d5cf-477e-427d-bec8-f868b3acaf77"
        },
        "item": {
          "id": "86da6c47-25f7-4f53-b2db-26e298c79eec",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "37e5ba4e-1b63-4a0d-814d-b97b77e7d81a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dca0ede-18be-48e8-ae99-0af012016395",
        "cursor": {
          "ref": "f00c7955-4c60-4563-a029-8a49dfce1c8e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c9ccdcab-3935-4dd3-946e-458946b0e51c"
        },
        "item": {
          "id": "8dca0ede-18be-48e8-ae99-0af012016395",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f0185f0f-ba18-4143-b1f6-3a3f1bf8ef51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2afbd82-2163-429f-9b82-55e3689d9d33",
        "cursor": {
          "ref": "4349308d-3869-4436-b454-5cc8ff88d390",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1ecb9833-7344-4075-823a-c3bddb5317c5"
        },
        "item": {
          "id": "a2afbd82-2163-429f-9b82-55e3689d9d33",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "caaaba1a-9fba-4755-9cf5-dec1387785ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804de2db-4bb0-4b43-ab8e-d7fbcc523431",
        "cursor": {
          "ref": "c8d4e0f7-7769-471a-92b0-593cf0f02546",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fdb1c529-7646-48b9-bd6a-817432d7b906"
        },
        "item": {
          "id": "804de2db-4bb0-4b43-ab8e-d7fbcc523431",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5cfca71a-5f83-4022-8425-c1653bd768a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b75bf5-9373-4bb0-b6b4-65404d54b90e",
        "cursor": {
          "ref": "70d996e9-4fa2-46d4-9c2c-574d9496b027",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e3a01460-cc95-44a9-9e4b-091c4dc804f8"
        },
        "item": {
          "id": "d7b75bf5-9373-4bb0-b6b4-65404d54b90e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5f1fd31d-21f9-4355-a2d2-d6886624e5e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4089fa9-7f5e-4a0e-852f-dd300723652e",
        "cursor": {
          "ref": "58ac064b-1ce1-4500-a610-8d28e9f8b093",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5c1c9b0c-d805-4581-824e-4c440e1cb382"
        },
        "item": {
          "id": "d4089fa9-7f5e-4a0e-852f-dd300723652e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f76753e8-a9c7-4942-b8a2-147e5b98902f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addae265-3030-4e15-a559-5d958c3d0053",
        "cursor": {
          "ref": "a076ed70-a169-4b02-8f45-3371df5e526e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2cfb2c97-0d15-47c7-9a1c-9a0f4772c377"
        },
        "item": {
          "id": "addae265-3030-4e15-a559-5d958c3d0053",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bb9a5fd4-a87d-4267-9986-1c17dbeef23d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c8ef3e-53d9-4547-b48f-41f616a9afd1",
        "cursor": {
          "ref": "aefdc362-0cf9-4fe4-9171-cc66acd250a0",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "413a9248-bdb4-413b-9aa0-2cac534229c2"
        },
        "item": {
          "id": "c1c8ef3e-53d9-4547-b48f-41f616a9afd1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6bf56654-3758-4811-9f8f-d7ca48b0c33b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adc468e-df7f-44aa-9d02-179f430f85e2",
        "cursor": {
          "ref": "a591baf8-bd1a-4882-ac26-fafd79b7ecd0",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "86f141fa-bc7d-4444-af7a-0ac5ee8d15ac"
        },
        "item": {
          "id": "2adc468e-df7f-44aa-9d02-179f430f85e2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c76bb7f7-8de7-41aa-b33c-20402789a35f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414ae165-a434-420f-8bd5-bdeef9eb8225",
        "cursor": {
          "ref": "748c00b3-2fe8-49d0-8a39-216d2fa0c9c0",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3f9edd05-1368-4ece-90cd-e10c0397d072"
        },
        "item": {
          "id": "414ae165-a434-420f-8bd5-bdeef9eb8225",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1df96e02-dba3-4eeb-827a-6bec00a9c3b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e8b619-53c7-4f2c-8013-0346507553d3",
        "cursor": {
          "ref": "45ec7358-b970-420a-a14b-9b90884fa0fa",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cad1dc77-c114-4270-8a8e-49e1338df15a"
        },
        "item": {
          "id": "68e8b619-53c7-4f2c-8013-0346507553d3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fa8321d4-ca73-4cca-883b-b344e6d8186d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e03fcc-9169-460c-b372-ee3eed80e682",
        "cursor": {
          "ref": "94332e08-9efa-4e0d-a3ab-2325a800acb4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "155981b7-1554-422f-b06c-238c4bd40c6d"
        },
        "item": {
          "id": "65e03fcc-9169-460c-b372-ee3eed80e682",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8b895224-3819-4935-a9f7-b75db34f93b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82065d8b-6866-4cf9-a44c-80fe1f2bb148",
        "cursor": {
          "ref": "ee70bf39-7d77-4117-81df-aaa8bf6cb1bf",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "90af3296-35db-4e35-91c2-b36d8d97f671"
        },
        "item": {
          "id": "82065d8b-6866-4cf9-a44c-80fe1f2bb148",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ae86e09c-753a-4868-9713-b4c204b4d501",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572ec7bd-bb5f-44bb-ac0c-380dfd5aa517",
        "cursor": {
          "ref": "0c8296af-78d0-4098-acbe-d261e2b00f1b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "427ecb65-d21a-4055-832f-e80d354fd881"
        },
        "item": {
          "id": "572ec7bd-bb5f-44bb-ac0c-380dfd5aa517",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b5b9b06-4486-43a5-b32c-b9c737808447",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0393719e-1b00-44aa-8e06-ec49b4349112",
        "cursor": {
          "ref": "019dac8d-cf41-4b54-bcb2-60f6d7dfedb0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0f72f428-a7f8-429a-bbba-1897127a5f36"
        },
        "item": {
          "id": "0393719e-1b00-44aa-8e06-ec49b4349112",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "94c0d523-2ca3-4fae-860f-dff1efb3cf5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa12af96-a2cd-4819-b2c1-0d5955d5d11d",
        "cursor": {
          "ref": "2bb987fc-3ca5-46e2-92da-8f8a0529c7bc",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5ac1cfeb-c4f2-4880-8c40-b6920bced5c8"
        },
        "item": {
          "id": "fa12af96-a2cd-4819-b2c1-0d5955d5d11d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5dafab09-fd3d-45ef-9564-026c8a250cf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d89913-8d52-41a7-8fdb-63ef6a2fd999",
        "cursor": {
          "ref": "0440ea5f-8a59-4dcc-a532-b81b16fe61fb",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d7bb1592-599d-439a-b181-1c2337dd838f"
        },
        "item": {
          "id": "b7d89913-8d52-41a7-8fdb-63ef6a2fd999",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "23d67886-4cc4-47ac-b399-64b2f295d5b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6446bc2-a50b-4df4-adfd-cb94862040f0",
        "cursor": {
          "ref": "60d5230a-3786-4130-8d0b-028f2c720553",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1b10dbf1-be9d-49e1-ad70-ffc748783971"
        },
        "item": {
          "id": "e6446bc2-a50b-4df4-adfd-cb94862040f0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d2d6bf37-cf6a-4352-a68c-4a6787f63854",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6b2e54-647d-421a-8a7f-b024ad7e183b",
        "cursor": {
          "ref": "f59a7fc8-9cac-4b7b-82a9-b26e0b88c797",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a3833553-f4b9-4afb-8287-e24540c1e6dd"
        },
        "item": {
          "id": "3b6b2e54-647d-421a-8a7f-b024ad7e183b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a1711a78-dbf2-4d6e-9ab0-637af8cac526",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b586c8bf-b6f5-42bd-aec4-a87ba6ca5b3c",
        "cursor": {
          "ref": "3d7c4303-93ce-4c55-b488-289e472dec55",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d34b6796-44c2-466d-9589-e51ee7ad300a"
        },
        "item": {
          "id": "b586c8bf-b6f5-42bd-aec4-a87ba6ca5b3c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c936d4b8-a9b9-4752-b562-1692843d07c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9efed42-2fa7-4481-a783-0f3f48eb9970",
        "cursor": {
          "ref": "255ae0a2-c4e5-4d2c-8ba6-3bca9df2e46c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b801aef0-d971-4c4a-8e90-85d85ce1325d"
        },
        "item": {
          "id": "f9efed42-2fa7-4481-a783-0f3f48eb9970",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b0180caf-a3aa-4e54-8a17-18be4f695fe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2eae92-08dc-4113-90ef-114f5da18a1b",
        "cursor": {
          "ref": "dce49943-fb41-4ae9-abd1-45a7e8cec4b6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "63065d84-de29-4072-960d-cf5c91d4a1c3"
        },
        "item": {
          "id": "eb2eae92-08dc-4113-90ef-114f5da18a1b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f9f9e085-ffd6-48b7-8174-0e1208077210",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5de90f8-9e11-4248-abc1-0984d36b4950",
        "cursor": {
          "ref": "6a632bdd-3bc3-42f9-8ed3-4325a0aacb1b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a97eb0c0-725d-466f-bfac-af51bd7d91b6"
        },
        "item": {
          "id": "b5de90f8-9e11-4248-abc1-0984d36b4950",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "24ca1814-f22b-4a81-9d1f-f2d62414e487",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1827343-67dd-428b-afc5-52362118cc07",
        "cursor": {
          "ref": "2ad18936-19c1-4c24-9f89-a5c637089fa4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ebdcb6bd-5805-498e-9a7a-791a58114424"
        },
        "item": {
          "id": "d1827343-67dd-428b-afc5-52362118cc07",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c299c9d9-d7e8-43a7-9259-eae263f0bb12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7ad54c-57cc-43a1-a6fd-7ec9eab9e800",
        "cursor": {
          "ref": "bfee8db9-26c6-4d7d-a789-bcf244f3b173",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6b75a1b6-8a9e-4c5f-9540-5e9b26fe17ff"
        },
        "item": {
          "id": "2c7ad54c-57cc-43a1-a6fd-7ec9eab9e800",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "66b0aefb-fa58-45a8-997d-2e887543f74b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c166e9-d64c-4c20-abad-ca6c1aaa1d0f",
        "cursor": {
          "ref": "dd10300b-dfcd-457d-971e-7184761a0c95",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "71e87137-65e4-483c-ab06-dca4cb5ffb46"
        },
        "item": {
          "id": "48c166e9-d64c-4c20-abad-ca6c1aaa1d0f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "66fa84d3-da51-467e-b6f1-864878dd1635",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacf4c70-a05f-4d51-877a-c71be029845f",
        "cursor": {
          "ref": "51e2e7ab-7692-4479-9078-6fe5f6287807",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5dc89f2e-7e33-4495-bbed-f882a717fc07"
        },
        "item": {
          "id": "cacf4c70-a05f-4d51-877a-c71be029845f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b196163c-ecc1-491e-b2d1-030a7867e105",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fb1e0d-40ba-4534-9b52-6da5d9064a10",
        "cursor": {
          "ref": "fc455b4a-eab6-40a7-93b4-038b93e028f1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "aa2df1f8-8d4a-4aff-a436-8f1a2128411d"
        },
        "item": {
          "id": "47fb1e0d-40ba-4534-9b52-6da5d9064a10",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "84f2ff99-7c87-4754-9249-d938fccb40be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befa40e1-df66-48d7-aed3-634a18ffa1f3",
        "cursor": {
          "ref": "1e38d9f2-80e4-494f-a1b9-e5ab2d60939b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3859c745-7769-4d65-a3b3-b2c0eb7392b6"
        },
        "item": {
          "id": "befa40e1-df66-48d7-aed3-634a18ffa1f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "df1ac72b-5769-4afb-8847-bc7ebfc83a85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d112122-b392-4ece-9e29-625480e10e00",
        "cursor": {
          "ref": "61abd830-8c72-4277-b6d5-d9c062ee9966",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "92d99d94-e30b-480a-b897-c4402313ab43"
        },
        "item": {
          "id": "0d112122-b392-4ece-9e29-625480e10e00",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e5c1a1de-031e-4bab-b89f-a792aa682402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cb0b1-990b-4812-ba0a-6751298137cd",
        "cursor": {
          "ref": "df49f990-7721-4965-89de-c5188c1b5806",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3c6b615d-a04e-43cc-8940-445daf70ba3e"
        },
        "item": {
          "id": "e18cb0b1-990b-4812-ba0a-6751298137cd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "27ae9d64-fd72-41f9-a525-5481cff5a83f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd66b42-3a5d-4c19-9774-90d7f823137b",
        "cursor": {
          "ref": "73465ccc-62b9-4f0f-99a9-baf2e59cc166",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1f7804c1-442f-40a7-9769-f91727b842e6"
        },
        "item": {
          "id": "4dd66b42-3a5d-4c19-9774-90d7f823137b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e03846f9-a909-4bea-a881-84babeeff17a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a414c430-0f9b-400e-a76a-607eb0ce3911",
        "cursor": {
          "ref": "e94cb8d3-608d-4f1e-b333-50427f479e64",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c51be794-c2a9-4ef7-a5f5-3a1f95f8cbcd"
        },
        "item": {
          "id": "a414c430-0f9b-400e-a76a-607eb0ce3911",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b5adc7be-4b81-4207-af61-85b0bf78f353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e30263-7c4f-4ba1-8fab-64accfd3d000",
        "cursor": {
          "ref": "f7c7a601-322b-4580-b1fe-3f22d9847d9f",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "04c0e3e6-2c63-4549-ac9c-e8ef75e52b67"
        },
        "item": {
          "id": "86e30263-7c4f-4ba1-8fab-64accfd3d000",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "49561127-d6be-4a80-9a68-0499596d0491",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49318052-78ad-4c59-bef1-9e3b24e439a9",
        "cursor": {
          "ref": "2366a66f-e9fe-413e-bccb-fd1432c96512",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "66cf688d-16c2-40ed-b725-d29166177dbc"
        },
        "item": {
          "id": "49318052-78ad-4c59-bef1-9e3b24e439a9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7559b577-314c-43d7-af15-a5f2941fd750",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492376c7-043a-424f-83bb-a7e06a121417",
        "cursor": {
          "ref": "4e9baa31-a878-4965-b3bc-ff547df52ad9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "34d3bac3-8336-44eb-940a-3bfada987de6"
        },
        "item": {
          "id": "492376c7-043a-424f-83bb-a7e06a121417",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "85589fa0-2efc-4300-b206-ecc573e1f0b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd7c6b4-7a53-4f61-aa69-6be3247d97bc",
        "cursor": {
          "ref": "64038eb1-29c4-4d1f-80b2-cf3eb4206086",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2b77c648-a0d8-4959-a40f-505d2c66dcbc"
        },
        "item": {
          "id": "cfd7c6b4-7a53-4f61-aa69-6be3247d97bc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e556747c-c373-4f68-b3d2-3e47d4892ac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a044d4b9-7dec-4a6c-8fdd-a6fe16101541",
        "cursor": {
          "ref": "e9ec5824-6c86-4e0e-bc56-1adc6a74d1ef",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e390f002-f714-488f-aca2-1d29d7beb47f"
        },
        "item": {
          "id": "a044d4b9-7dec-4a6c-8fdd-a6fe16101541",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "34532700-fa0a-408a-aaa5-1183fd5731de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92ef177-7574-48d3-b0d4-4eba0ee8f85e",
        "cursor": {
          "ref": "11d9df5d-0d65-4cd3-b149-85d774f402e6",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "24bddc66-85cb-4a76-8d38-6547a339eb38"
        },
        "item": {
          "id": "d92ef177-7574-48d3-b0d4-4eba0ee8f85e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "96ade85b-dc78-47e9-97d1-0ea247a9f3ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d223a6b3-b1df-4d44-9475-eace3a925d46",
        "cursor": {
          "ref": "e0542bbc-166d-47c6-9b28-97c0c5a728d8",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5afd22cc-b870-4926-b89b-61dc387e3b8b"
        },
        "item": {
          "id": "d223a6b3-b1df-4d44-9475-eace3a925d46",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8709ca19-8b7c-4cec-bbf9-c40a05929b3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e343b97-786c-4b85-8a3f-b27549438874",
        "cursor": {
          "ref": "9dd405dd-73de-4c6c-9a6f-f488cb1075bd",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "753b110d-317e-4ede-8171-a4daff8dc431"
        },
        "item": {
          "id": "4e343b97-786c-4b85-8a3f-b27549438874",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5bcb3e00-2554-46ab-b966-df605725afd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 6,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601b0e57-90aa-4f61-8f30-91f5acda648c",
        "cursor": {
          "ref": "8731274f-ef6d-4d18-915d-5dbedfbb0eae",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "930e5a00-ba94-404c-93f1-b0214b3ad6db"
        },
        "item": {
          "id": "601b0e57-90aa-4f61-8f30-91f5acda648c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a2a7c1df-464f-46f0-96b0-0c730c44d795",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6722e68f-18ca-4a88-88e2-c3aa89e6e6f5",
        "cursor": {
          "ref": "4ff83e3e-d1f0-4354-b4bd-9c0b4aa5a393",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "624e93ad-4660-499a-b0f6-9d8c7f51e247"
        },
        "item": {
          "id": "6722e68f-18ca-4a88-88e2-c3aa89e6e6f5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dd96c459-efa3-4cc5-b422-340b98302a1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ccf397-f1b2-440e-90c1-c2e7d3141939",
        "cursor": {
          "ref": "801105fd-550c-4a6d-9c5a-3a12f60af08f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "49b36e7d-d9d1-4c0a-a567-d49402fe6bab"
        },
        "item": {
          "id": "91ccf397-f1b2-440e-90c1-c2e7d3141939",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1da60a2c-e75f-4cc8-aa57-4bb9fe5560d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efba480d-cc62-4613-a722-a49d90c8a86f",
        "cursor": {
          "ref": "1cc6d3dc-66f8-4719-81b8-df275eec8a17",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c82b7a12-44c6-41d7-aac2-5cf85ad52043"
        },
        "item": {
          "id": "efba480d-cc62-4613-a722-a49d90c8a86f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0c583663-dfd6-4d40-b30c-b09d59be0726",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8adf6c-04e9-4d48-b94a-16031049a471",
        "cursor": {
          "ref": "7a938941-17e7-4a5e-baa7-5f0531c72675",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "10f27f53-94e7-4544-adee-2bd49924dc5d"
        },
        "item": {
          "id": "5c8adf6c-04e9-4d48-b94a-16031049a471",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b9193bc-0cdd-4215-97b5-296d985abbe2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d34de6-62c6-44e0-87fb-f5995a221e45",
        "cursor": {
          "ref": "b0d4bd49-22f6-4fce-95d1-52a1e80f1d9b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1acc9770-60cf-466e-95b2-67df2b6c70bd"
        },
        "item": {
          "id": "d1d34de6-62c6-44e0-87fb-f5995a221e45",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2a9cbad7-1f21-45df-ab1c-faf86adcb3be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b6b60e-057c-46cb-9fa7-614de9c94346",
        "cursor": {
          "ref": "cbc5cbc0-80d2-428b-9844-0c8c3fba2331",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7b63e6f6-b8a3-4fda-83c1-a89fd5abab31"
        },
        "item": {
          "id": "27b6b60e-057c-46cb-9fa7-614de9c94346",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "80f7477b-2538-4114-b6c3-f2e84a40fb98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6619f05d-bad2-440d-b75b-e238315e6914",
        "cursor": {
          "ref": "b341fa91-4367-49ae-a422-4a7b1306b148",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f4ea53ed-766f-4d96-80a3-5312abf0bd11"
        },
        "item": {
          "id": "6619f05d-bad2-440d-b75b-e238315e6914",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2414b008-3377-4748-b633-4949e6467922",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c026d13-469c-418e-8288-4a665e2e2480",
        "cursor": {
          "ref": "738084db-8f59-48c4-a20b-6531ed4d2d83",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5c41ec30-4667-487e-b610-ac6b7d37201e"
        },
        "item": {
          "id": "1c026d13-469c-418e-8288-4a665e2e2480",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1a73769f-e892-4c5d-930a-83189858307d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78301498-84b8-4825-8725-2ec45c83a9d9",
        "cursor": {
          "ref": "a0ddd7dd-3814-49b6-b437-77714378bde0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3abc0da2-14bf-4702-b7ca-c5b0970cc64b"
        },
        "item": {
          "id": "78301498-84b8-4825-8725-2ec45c83a9d9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "75a4a23a-d583-453c-883d-1447ab63f09b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448bbdff-9f78-42e9-b1dc-8c045acc4797",
        "cursor": {
          "ref": "200c6f4e-36c5-4af5-a786-6b72a3066be7",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "aeab5fec-1c19-4f33-9e8f-47abb65a82f6"
        },
        "item": {
          "id": "448bbdff-9f78-42e9-b1dc-8c045acc4797",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9be7b704-1348-45f6-ad2a-04a18634988a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac93e665-edc3-4f07-9979-1b3abbd76fa0",
        "cursor": {
          "ref": "5d22a2e5-b74a-4d05-b5cb-2caa3b110292",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "b59cf7b2-175e-401c-b485-f8891f0af0f3"
        },
        "item": {
          "id": "ac93e665-edc3-4f07-9979-1b3abbd76fa0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3b569a60-0aa3-403b-b1ef-b4594db05ba6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9e44cc-fa4c-4525-966a-140bce69f121",
        "cursor": {
          "ref": "0679e392-c22e-4fa0-9da5-783433ad8f25",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3aa6b8d7-cf20-4286-baed-f6b6ec2df60a"
        },
        "item": {
          "id": "fe9e44cc-fa4c-4525-966a-140bce69f121",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "035e4af3-b540-4105-bcde-54ce05d22568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7825e06-c03e-4235-8e88-1a96b9ef723e",
        "cursor": {
          "ref": "4a843f00-5d90-4f7c-a678-265229accc90",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f1aa0274-72e9-4c27-b442-47836cb9cab1"
        },
        "item": {
          "id": "f7825e06-c03e-4235-8e88-1a96b9ef723e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf1ed3ec-4346-456b-ba9d-4279cfb73610",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bc9862-4ce6-4635-b148-a6738d645932",
        "cursor": {
          "ref": "0754f7d5-994d-4f70-8185-a76aeb853dfa",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "68de5281-4f2a-446d-a993-68c401f76a56"
        },
        "item": {
          "id": "52bc9862-4ce6-4635-b148-a6738d645932",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1d48ab08-ac5e-4875-bd29-878de988f1a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9650be1c-6ed6-40d6-b599-4cad4c01723f",
        "cursor": {
          "ref": "da90e783-9cdd-47d6-b2bc-c0d846e23def",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e213b4a8-635a-4cde-8ea0-dccb12778561"
        },
        "item": {
          "id": "9650be1c-6ed6-40d6-b599-4cad4c01723f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "600787ed-ecf2-436c-ac4f-65883b6483ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57af5cbc-0435-4160-9707-1869f1b2ddac",
        "cursor": {
          "ref": "579393bc-7f50-49bc-b774-09d2e2393a09",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4ff34642-6339-46fd-b87a-86808eadcd11"
        },
        "item": {
          "id": "57af5cbc-0435-4160-9707-1869f1b2ddac",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cc8a73fb-9ced-44b1-8415-6e5707a27c8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6156f7b2-d9fa-4500-884f-c7cef4e9e11d",
        "cursor": {
          "ref": "2160e04e-b15a-49d3-8660-e73b91a5a3dc",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "21bef43d-e623-41ee-aabf-47af0b5f103f"
        },
        "item": {
          "id": "6156f7b2-d9fa-4500-884f-c7cef4e9e11d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4857aeeb-5d3a-4caf-848b-968d38668474",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420d9c4b-07e7-437d-aa45-3dfebc2c51a5",
        "cursor": {
          "ref": "6515894e-1c8d-4538-a7aa-9a07e0cbd5dc",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4289a2eb-9cff-47d7-a15b-7fc850af8495"
        },
        "item": {
          "id": "420d9c4b-07e7-437d-aa45-3dfebc2c51a5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7bd26c71-921b-4ed6-90d9-e49982a65bb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8236a63d-c6c3-4b88-a4a1-260602d23192",
        "cursor": {
          "ref": "114deeec-2577-4947-b4e4-8efaf40367b7",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d273ce36-d39b-44a6-8744-6d2d26e977be"
        },
        "item": {
          "id": "8236a63d-c6c3-4b88-a4a1-260602d23192",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8e4013ed-4930-4f14-adb2-2421d3d8e4c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bfb1b9-205f-4fc2-bc66-271dd085f9c9",
        "cursor": {
          "ref": "55f4ddbe-40f3-4993-ae5c-880def27e289",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "e131bdf6-d920-4a46-91dc-2b1898a7114f"
        },
        "item": {
          "id": "f1bfb1b9-205f-4fc2-bc66-271dd085f9c9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "99229359-e9b9-41fb-9292-998936a231c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3eeab2-5351-4681-8ea4-d8ecaaa4f582",
        "cursor": {
          "ref": "66ac8465-20d7-47ac-bb45-01b7c440c2a4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "eaec079f-e190-49d7-9928-6e53b60d30f8"
        },
        "item": {
          "id": "3f3eeab2-5351-4681-8ea4-d8ecaaa4f582",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ea804d0e-6095-4c34-91ba-fd737b128f31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c788636-3dd6-4412-8a49-f9e5c8152350",
        "cursor": {
          "ref": "d3acebd2-f513-43fc-ac85-cd8fc52f11e4",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9ddcd19e-5c1f-42a4-82ff-cd72782f6bd6"
        },
        "item": {
          "id": "2c788636-3dd6-4412-8a49-f9e5c8152350",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "173e696c-3fd5-4b07-8382-dca9c33352de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838cc3e3-a34c-4a2a-8214-eedcf65880dd",
        "cursor": {
          "ref": "869cd9bb-869d-4a69-9f49-d95d87687bdc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c7665886-730c-4791-8616-03583061ac5e"
        },
        "item": {
          "id": "838cc3e3-a34c-4a2a-8214-eedcf65880dd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "33808589-6720-4cb8-a61c-32d2d7caaffa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "7c031c9c-c825-49ae-871e-27cbc324d483",
        "cursor": {
          "ref": "d171e7c4-c941-4e82-bf4f-0822d9e96ace",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9aef0fab-d7f3-4a62-acc4-bd874610117e"
        },
        "item": {
          "id": "7c031c9c-c825-49ae-871e-27cbc324d483",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ed6d4405-45e7-48b5-a7a6-6eb732ca915d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3e58cf10-5a7d-4603-ad91-26bf4ac0f19f",
        "cursor": {
          "ref": "03c03572-3a1f-469e-a33e-c6a436090793",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "bf2f8ad2-b421-4379-839d-33724a011eb9"
        },
        "item": {
          "id": "3e58cf10-5a7d-4603-ad91-26bf4ac0f19f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "762064ea-a2ea-4e14-9e19-d26e9d200bfe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "a85316eb-5b6d-4acf-a95b-5d6c027439e0",
        "cursor": {
          "ref": "4c28a9b0-5d63-4e2e-9c28-41b71ad5df03",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2b3163a4-6227-4267-a356-d2942bffc368"
        },
        "item": {
          "id": "a85316eb-5b6d-4acf-a95b-5d6c027439e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "67054752-6422-4f39-8ed6-b730b799c4d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85316eb-5b6d-4acf-a95b-5d6c027439e0",
        "cursor": {
          "ref": "4c28a9b0-5d63-4e2e-9c28-41b71ad5df03",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2b3163a4-6227-4267-a356-d2942bffc368"
        },
        "item": {
          "id": "a85316eb-5b6d-4acf-a95b-5d6c027439e0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "67054752-6422-4f39-8ed6-b730b799c4d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389ef44d-7b4c-4ec2-90f9-f98d9c17ce17",
        "cursor": {
          "ref": "627c64e1-ee32-4bcc-9565-c5a373c36559",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "54694b49-1ff3-4bfd-9be9-6bbc34584432"
        },
        "item": {
          "id": "389ef44d-7b4c-4ec2-90f9-f98d9c17ce17",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "23ae8450-b46a-4ef3-8f74-29940df84393",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f34e4ef-af8f-46e7-b08d-01cae47c5bdb",
        "cursor": {
          "ref": "29c3b99b-7234-4aec-b762-de408a45b99f",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "edbc8792-2e6b-4072-9f8f-55cc385e0d7f"
        },
        "item": {
          "id": "8f34e4ef-af8f-46e7-b08d-01cae47c5bdb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b77a1ae7-8aff-4edc-b8d8-44cb3eef0865",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}