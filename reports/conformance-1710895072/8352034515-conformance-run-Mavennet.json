{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "96b3dfdc-3d8a-4b2a-8ae5-fb87a09aed10",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ec574020-c035-41bd-9d79-d5df32d443e7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "955c3128-6a98-48b1-9abd-c8738f42e3da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "494bc989-a626-4f29-a61f-ad80d35ceab7"
                }
              }
            ]
          },
          {
            "id": "2da37a20-b935-4ed3-bd29-0a57f119d3e0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7aa18138-dbe2-4009-aba3-2698e9d43b53",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d0e4b8fb-2e1b-4d1a-8dfa-9658266f3db1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "aa57d39c-b7d0-497e-9696-42973a33e661",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d066b76d-65fb-4ea2-b3a2-025c526667cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a6b0f55-42d8-405a-bc44-5015821d57d4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08b17ad2-8407-45b1-bc78-57339eafb384",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bf79a72-f510-410b-ad7d-bcdf6ce32237"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e4987412-4835-4892-bdc3-8a264ab5ce13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df90cc76-57ac-451f-8612-c55eca4cb719"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eed0daeb-a64b-47d8-8d9f-90e8e75abece",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "867e01c3-06ca-4284-80bd-691503d6b51c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "568d5d4b-8c58-471a-87ef-c4d09c95a61b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "181d56a9-d7cb-4cc0-ac8f-b26569437d96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8fc19252-3887-44f7-8874-05b27eacace5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65e69510-0672-43e9-bf88-19656cc19543"
            }
          }
        ]
      },
      {
        "id": "55c62fdd-b898-4201-ab5d-ccc395767b7a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e63be1df-d02e-4570-a171-feb04c18b1d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "daeb55d0-a564-4ad2-a3e2-564e4e557aa2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cfe57bba-83a6-410d-a68f-8f2fb1589b26",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd06bd09-ca9d-4d48-9934-049c08f9e7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68489bf3-51c6-4151-a4a3-633039398c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea7a83a-31ae-46bc-9006-73d839b9cbe3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60897301-b1c4-4281-ad8a-ef3304858182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce32e0c8-c153-4322-bfa2-974b910876c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ad9ee2-7a07-4439-8547-b8d43dbb4ad5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab27917-3c5f-4678-9de2-c04c5abca23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c87544eb-73ef-46ef-9c04-0fa65f212071"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d9020004-68d4-4071-8a32-944fd5fb5a42",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79270016-a321-48b8-b549-a809ad69f73a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451be3ca-84d0-45b0-9088-01f90f77c3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e008e079-0f7a-454c-89a7-150caabc1943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbcd936-47e6-49b5-abdf-e5a1e8b5182e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949e990a-31c1-441c-9966-e49f4fc2385b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87da4a3f-5739-4b48-981f-d5259f0baf90",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59bfaabc-c609-47a4-999b-fdd89d49f325",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07e503b0-7b3d-4aed-bafe-b239ace71ce2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "04bc0b89-5f9f-472d-afd7-ed0217213f75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffcdf754-e5cd-4a22-99e0-db8c1efebc78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "34345578-b3c1-4f62-8aec-824939d67da1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb9b7341-dfbe-4e79-aea0-6a6f4786d350",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4891b5b8-80cd-4665-a935-fc20086af55e"
            }
          }
        ]
      },
      {
        "id": "3d2bf3e9-5204-42fa-b169-b7f7ee26a334",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "abcf6592-be01-418a-b4c9-34ff66f08ad4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "690d7a1d-cf90-4e60-ad29-4cf59a6380cb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "db06a250-070d-413b-9616-0f61e8202082",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb4cde2-a037-49dd-8222-d18000d1dbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef255c69-6e84-48f8-99de-f8d84a1965ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61ce2a7-3db8-4861-92cb-ac33cbe35ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "644f8802-1129-4fd6-b125-b30620022602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5b925f-d1c9-488b-b0cf-5997deaa2606",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb16ff5-529e-489a-b280-ff3b6f96653f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fdb540-4554-4c7d-b600-4484a59ff627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c05ee8-ed24-4136-92b5-38fbf2218ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b66096b3-184a-4085-95fb-7d00db702005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1358dc-3879-426f-a83a-cd7467eb8b51",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05785009-2da3-45a2-98df-50b1859abbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5abb5e8d-1335-454d-a485-d3b55286501a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100033e6-f18a-4520-8b62-7061532e316b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "688b5576-8bab-4240-b79a-bd0d37b68656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cff863f-7871-47ae-af14-dc808d4f8cdf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729f7c36-8ecb-4f2b-b2ee-540ee263e05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff588e4-808e-4a65-b265-8da979e9aa6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c4cc30-8f96-40ca-bf75-ab0343859937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e92dcaaa-cd77-4346-b03b-18ad45ff2e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc30eaf-1284-4214-844e-6381c9791cdb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54495dd-6eb6-42ed-affc-1b1293dd7c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99b3f8e3-5d9a-403d-a08b-959bfc1c5188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa90f55-fd86-4a4b-9a7f-76211fd17c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48056084-b011-4c71-806f-6df6bc05d853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be77c351-e1d0-4421-bb5d-36e698d6c0d8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173e4660-8220-4b02-89b4-993f8b90307a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e47c9c4-6fd0-438a-ad02-3a42d1070a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7adc10-fac2-4d71-a4d5-fe1be40d1d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9db84f9a-90d0-4a1d-bcaa-7428a59ae57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faa7604-9652-4398-b2ca-a9a6b3dc6eae",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ed2d0b-34e3-45e9-8c76-c16de9c789e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e631ce-a09e-4755-a7a1-b1ecb9d9fa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad11deb-8f62-4172-9704-2bf0685125d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c92795fa-ae3e-4913-8a18-ff72ac4de7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b33ecd-0198-43ce-928c-9dac4950a23c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8fbd07-0b3a-401c-883d-1246c04785c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1e0fc8-8d7b-4f25-a60d-8f70206bd83d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cbe830-d73b-4531-b660-ff1b9d53a3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e533c75-9446-4c3f-a7e9-027b3a516766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f449ae0-c98d-47c8-8a65-00784b2298b8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1717841-5961-4818-9534-bdd427fc1a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4fd271-c7dc-4561-a972-c6e858e15444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c83eab-306c-4afe-9149-a360064e2f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4f3f107-905f-4494-b676-bb8bb9d6c545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2152ef-3bb7-4ce6-aadc-fa128d538813",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2148a8d-1b44-4d50-8d00-c43733ea36c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9dc3cf-2167-4224-9e90-82f726ee5c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345baf83-3dca-456f-bdbc-204b6affd4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e28f10a5-01eb-4c84-8146-68b58a463af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b00f02-339e-4207-a933-c8f784b7a3a5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6021a3-d061-4972-8c58-19debe043166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4b18e2-1873-4a1c-a533-5e5731baac62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ba8d29-4a1f-4604-a4a3-22ca9d261c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f87947b3-2cab-4636-92e6-ad9579a929e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881d0d34-f792-493a-8c3e-e47076389f28",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39e1426-d7ea-48c5-a278-55cebfcd4400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390654c7-64b4-4051-971d-27f7eee57dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfbb29d-c4f1-46f4-9e9c-cbf0c8f905ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "975e0498-3782-47a5-a5a0-d27e57888a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2b009d-c2d3-4530-8aba-72355f754c8f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9bb173-a8fc-456a-b0a6-3359d7e52035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952d75ce-98c9-4d63-9589-c2858117ce23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8924485-e1e3-4cbe-8338-7e22c408f1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fffc9d90-2693-42e7-bbca-fcaf4ba4a29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f89aa7-2da2-4383-bfaf-9ec7d867e55c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458b43e9-1467-46d3-aa11-505a86ca8a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87527ed3-2cbd-420b-8928-cad90ad98501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4df4c68-7dff-4f39-ba00-e6c53adf459f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4b12a3b-62c0-44cf-add3-6b52f91fb0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ff3af1-6e33-4868-bf83-eb2f9e1af692",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074e2087-8a21-4102-b873-89a1033337c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457bdde5-2f61-49a9-a862-3504d590a9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60a9523-5e93-41d7-831a-8926555cb3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa6dab30-31de-43cf-8b35-2730fb461a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e7fe8-96de-4e0b-92d9-f75fddf568a4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18e3a33-99af-48e1-86c9-e307c50f3918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2410da5d-efd2-4a39-9f95-25844d26a398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50edf1c6-2288-4626-9eb8-dab6d0b0211a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "286d5055-f146-4e7a-a3c2-4bac944e9dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fd061c-75da-4e24-882e-610bcd470f8c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93db5a4-5690-4701-af78-42be7b2eae17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64c4451-0ff7-48e0-a4b5-d2a0ba3b9128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f863620c-969d-41c1-b138-5c637282b596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a15afee0-cb1f-4873-876e-47352e54834c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef1aabe-4e61-4198-8c79-f75e24aa2e71",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55333aef-2407-4320-a2b0-af49a65e95f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a88044-aaca-46d7-877e-bec4779aa07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a476c4-15c6-43fd-8655-b1dfd49d7fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "10d77bda-010c-4aa4-a732-3cb05042ac52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1636846-0881-4a57-88d5-54acc8b2d98b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2286fdb5-dd14-41c1-bd3c-f00673c645c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9ea82a-4530-4034-8389-88dbc39a3a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7944b787-6576-436a-98ee-9f4490749c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eaffbe0-21c8-40bf-ad6b-5e637a24394a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada0c083-939d-43fc-a523-84afb2e9b32b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d4e16d-58ab-42d9-8b84-05349a22d7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b41b007-6535-44a7-8f3e-f16e2825c1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7241f142-895a-433d-8ab7-136e76bf3ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1332196f-2dbc-42d7-846b-2ac56df66ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cd3d18-b4df-4dba-a6c2-0f62891ca223",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a56feb9-6d62-423e-b50d-da452d9d2598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b5f0f4-7279-4d61-8405-e0cb71dd8b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367b266c-528b-4e3b-a598-81275e392e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f436b475-8c9c-478e-ae29-d33f35a0ecd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdb9c5d-52f5-4a5f-8b8c-2cf0a3448208",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48be4a51-4438-4599-9fac-9899a89c9b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5ccb66-e827-4d28-af65-ca655efbd918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56364988-7ff8-4a3e-a517-e52a87a09423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24fb0244-a5c9-4502-8f82-cca5eaf5aee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1161f811-ef61-4cd9-927c-7352ff1a49d5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76d7b61-df72-49c1-84fb-932cb1d14813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c17245b-4a64-47c7-9340-688cd3e6b502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9abdb9b-901b-4109-adce-54b8ea180e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff73ad7-4710-440f-be3e-f6cd1f2778f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b526ed-c430-44c2-a53d-34d4a76e29f8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02160cea-184c-4c22-8786-c380f8b5d4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adfd6265-9b6e-4959-8354-188f837815a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d777e6b-baac-4d02-97b0-c9836588f37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "980850d2-af1f-46dc-9d09-1673b1387ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3c8464-eace-4ccb-a85f-80d6aaec12b1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1751438-5de4-41c3-9112-b25879b04258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11147fc-40e6-4551-ab49-42e42f640f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b712f51-7fa0-4160-a050-e1dc0b594a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac8153a-2183-4a84-8922-514bb763edd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126f73b8-c4f0-4197-8056-2dc475b15dba",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4c12a1-ff0e-41f7-b929-c377e7a2310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72611c9f-5acf-4724-946c-317d4c800f7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce5ad15-bbdb-4bc2-8d0f-cf9de90417c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf10f7bf-eb3d-4f4d-9a19-4f7846aaf2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6477c15c-c448-4a24-b93e-00b738d03407",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713d0da8-e96c-4b87-a167-0350c2744dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c7c72f-52ef-44d9-9fcc-5a56f4293b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f48fd3b-bebe-4d75-8c1a-a37138641e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "90bf0b8c-dd32-4692-ae51-6bb07e6859b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b310e47-a3b9-47b9-85b1-431b1f03196d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2c0c44-e676-4408-8e1d-6663f77a5921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139701f2-10df-4457-9754-841a15af4f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f160bd78-cbe9-4cd0-b0a5-64517bbcfcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c61490f1-8a94-4f49-a86e-ee54a2bb7215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b90c5e7-7e2c-4155-85b9-56e8c6aa0faf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f96bcc-d2ea-48a9-8d6a-18f417937e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e13f3de-236d-44f1-9f66-084ffd2550e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a194d694-4f74-402e-9b7f-22e49a228da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ded3de-2eb1-4ffe-b495-87e37c9e2b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a438dba-b1a4-4bd4-9007-6a4bba32f343",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e1c368-c641-4716-b71d-70be8ba213b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20904add-b3d5-483b-9041-e4b5419935cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52efebe-2fbd-4077-9143-46510b92ea28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "24bb349a-55d0-4494-bdca-f2b2edb76b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2387d23-a14b-4ef3-8f12-16adffb6714a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db424483-9b0c-4e7f-8bb3-17635cd96135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8e4531-2c81-4e08-acbb-e4f5743b1e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f486e4-532f-4096-a9fd-c04bb9eaa9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8101b52-058d-42cc-bc8a-0e15443261ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60ca7db-54fe-4384-badc-995dd6ba9107",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45f1477-71f2-461f-82c3-ab9af5c6edbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14df1f0-5d05-408c-8656-ba965282bba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7189f30c-053b-488c-bcb9-58f9e70c7f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "88907fc3-9324-4573-b1da-8d69b9453b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bffdcd-04e3-4bcc-8058-329b6da0492b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d3b9d4-2e92-43b7-95cd-cb48baf9366d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48384179-3834-487c-8639-7ab573a968bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65262683-3e8d-468e-a962-77ebcecb537e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7660fa39-c449-4f12-8b2e-04d4b81acf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c415e93-1360-47fe-a8a7-e4484fef5ec7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df1b51e-5b7f-4b66-8339-2a73500d9c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f58349e-dab4-4665-8623-540f74fbf2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af295a34-d448-4bb3-a575-a0f22c4c51d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93df21c6-9e29-46bb-aea7-cbe82c3fa0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34056bd-924c-461b-859b-b399fb878b7d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b5c74e-8231-443e-9043-0f7cbcc22f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3939d1b3-0a12-42b5-9c8f-eccccc38512f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366bfee1-b732-4f52-a6f6-3b3026df0fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "19b70f6f-9607-4eb3-ac74-378f93b3c8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d65c99-9277-429f-90a4-545a33f42d81",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50774ba2-67b4-4c0e-9bf7-d61ea47fa6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cda8385-a5da-4ada-a286-15276aec61aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102e5171-7e1a-44ac-881c-baea1314c05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "212ec18c-f333-4850-9c5b-a0063869481c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2233cc-0251-48e8-91b7-fe43b6418ae2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3e0f5e-a409-40bb-8c97-cbaf1bba2e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4856924a-af36-45ec-be15-fca1830e61d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc1a47c-96f2-4978-a2a9-93d707cf97bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef717bf-8c3c-4425-a7e4-7078bb7ead53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba68bf2-0f72-45c8-87d1-930fc35ff95a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca46145a-2cb9-4503-9639-3b3558297a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fa82d9-0d8e-4671-af4b-b3e97a083698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d900d51f-f68f-45a8-b70b-64ae6b4252cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5cf0e0-bd67-4fe0-9e8c-2b8e94e17ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2da6488-c696-4bd2-a41a-f31a360761e2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70006d8-73a6-4b65-883b-9c96be4ed6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401b70a1-c54d-4e9e-a10f-559f7b2418a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e605ab2-149b-40d4-89dd-b9fd505562dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9d5cef-68a7-49a5-8f01-a6fcdaae607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80029888-decf-4a37-8fe0-6248bc484e4f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131c584d-9c81-413f-9260-f28789ed3fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de73f9f-935b-4519-9aed-ab332af6e956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1fd765-3aac-443e-9e97-ef7b131d42cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbdbc0d-3844-4f4b-9840-5edd9a686e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b28b693-99c9-44a7-a856-dac1e1f44700",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08eae3f-40c5-42ac-9cb5-c4e7998dd211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7f4558-de85-419c-80dc-953e94017b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba416ae-7433-43c4-ad1e-043b8a3cca0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a0a2de-cdfb-4c40-9fb3-0118002f57d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430183d5-5666-4b86-8eb9-6b23513afa29",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f57547e-2cf6-4172-9c3b-55b566cc6241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be17002a-fe6e-47b5-a9e3-14e5d9d921c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060d2cd7-2cf8-4b9f-b733-c661e2e56219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "11db76bc-2e0a-4614-a490-b5947b3c56a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6e12cf-70c0-4f65-ba49-a7c82dd1c532",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbff0fea-1043-4662-8de8-bb7076adf90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c91980-fa88-40db-bf84-1d2fd53885bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08d8437-fb37-4abc-aae4-782cfa4ee445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "185a67e8-e1da-4e6c-9d4d-c89477b850a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fa5f91-9458-4b6c-b5d6-e775f3b1e2e2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b89fb60-929b-45ed-bbf3-ea81f2fe94e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a78c59-57b3-4592-8994-8152264bead3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a753e4-0a0c-4bab-b1fb-f6e09b4a4373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42fb82a-8702-4e8a-b34c-1393f986d4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2185e8e-5655-4216-9ee2-bd7aa51fcb44",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbabde4-5d5f-4de5-b4f5-d652b2fb39cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3bf21a-26b7-47ad-88d0-1fa6b89174c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096b4d7b-894e-4138-9532-50cf459c180e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a67f8de2-d467-4cbc-9817-640d255a74a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045b52d3-c285-4169-bf97-ee3c0c08b202",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52745903-1a02-4089-b558-5e7892ee65c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9876f44-76b2-4839-be22-478cd8520737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901f83c6-64be-403c-b0ab-4cecc45d8034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f61ef243-1c43-402e-95e9-4def4f9ed6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e295b72-ac34-4bd0-a086-f4c927595042",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efeefe4c-9eb7-4eb1-a6c2-59649aaaae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a406f9-d18b-485d-bdde-041056eef114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cafa4e-e0ee-4843-856b-5e1d5698f5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47294d36-4aa0-4723-89d4-4fd560da6056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c89fa2-25fb-4a6a-8fcd-f1c701c6fadb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3590b15-9264-4639-87d2-8af1cb9b0324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb36d79-13ae-4055-951a-db5d34721fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab353ed5-bf0f-463f-93f7-f91649e726ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7041829f-761d-444f-ac0b-8b30bee60012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22575ce7-afe0-49cf-b141-546b275a1e13",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05385fb5-cf84-456d-b614-cbad1931b8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44cc378-9bb8-49f6-889c-03e98e1a9515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efaf3c41-c67a-4c86-befc-0db2d5a6dcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "790be7a2-4b83-410e-a59f-0a5b73844967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7311d86b-60e5-4782-ba78-37b43188eaa0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcf8a29-5cc5-4d8e-a06c-0e5a65918650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40810f0-fcb2-46c0-bf88-614ebf1d11a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfee4273-3f18-4bba-8f8c-cdd2b5a1a55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7bbbe7-8670-4baf-90dc-0970c8694900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a1efd6-1bb2-4ec6-b64d-0e3c9d65cb26",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf2865b-5b12-4b6e-bb7c-1d662753efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e025fc4-a094-469e-8bbc-09797765bc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370644f7-8de7-42fe-989b-92a12c9e1d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4760239-48a7-4a7a-ac50-1fe257be9585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805a8ebf-6e22-4060-9ce1-5f73f50953f7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82150f34-b858-4738-8795-288f9ad5cce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78af137-cd29-49b3-b699-9722e0741833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d21d4d-9bdc-44c5-b492-e668b19173e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d17ce7-51c5-410c-b858-243bc25fe1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83d1643-19b4-4429-8f4a-74f604a149d4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263b4db4-b610-4c26-b3f0-9b5290ce1126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b213e1-3d99-4da5-867e-9d6311d6cceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46f167a-7042-44d2-ba69-1d7378f1375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c57999f-8fab-4064-9814-399e8db67cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0912d7c-4245-4adb-bf06-79009810bbd9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61bd597-6c6b-4e0c-acec-b03c5f3fe731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a908ea6-c803-40f1-ad6f-188cdccf83dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a53432-2280-4da9-9609-dc96f03946a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b39db93-a35d-44db-959f-d849da5e6eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ae3a00-8e0c-4142-82ab-7875008ae1e7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1fd391-9b3b-4319-835b-9203ffec0791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736d922d-d6c5-4117-991a-841255685cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a202445a-b4aa-46f1-9f14-4d80e2edc764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2cbb5a-1cd9-42f6-a818-74073b4d15e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbad069b-40f4-4c0c-8461-ed52e2af25c4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570bb2b8-78df-433d-b0c0-7469dbf8ac2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebe11b3-93fb-4620-8936-49d5c3046f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30736b9-8638-4163-9de5-5501dd29b345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3e13cd-d91c-4faa-8faf-da81950feeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da7715b-4ee3-404f-abe4-ede08fd0701e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f755bc39-d5d7-490b-99a4-16105c342bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dd888c-4fec-4449-9828-d989623967aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d99503-80cf-4b67-84c8-e2e525527a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d850b8-c202-4f49-8fd4-b4fe2e10070e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28a4f42-98ef-4c68-9443-44719cbdff07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01860a3f-7b6c-4f31-bc61-b94d5785b951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81735d3a-ec86-475b-9553-d22e7fdc9002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9de62ea-a109-482e-b3ef-a138454700d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d01f95-e0c7-44c1-878a-53c072f46f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b77730-fa46-4d93-81b6-4b1f9f97079d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b701267e-8089-45d9-aab0-297046e5efc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d77199-08f3-4310-9647-a82d3e1a7228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05f022e-76ad-4546-9dc2-d2a527c0c914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "91bfe0d8-210e-4ef3-be52-e017e747ab77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0168f5-8480-4853-af9d-09aa2816e898",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f553b3fe-5a47-4069-ad9a-d7efc07492dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1ce9a7-4bf2-4e5b-ae62-4f72a06bba22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fc7979-2513-4abf-833c-003c9c6103f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f263c131-438d-4646-98b1-91168cd8183a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c21f13-9516-4b28-928d-8d0fea2d0584",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50d17bf-acc7-4e51-9deb-25488a70e833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97059d3e-e510-44c1-bb51-23b6f63840b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1582599e-ba1b-4cfe-aa71-e82c729b41c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b15df6-3912-4228-9a03-0bb04d90b56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3676ca53-b289-4d89-bfd2-dffa76deba25",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14924840-e0f2-409f-83e6-5e35163efbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31f8893-9b54-47fc-9844-4c0b404d4f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c21d60-4235-469f-af5d-5265dbe3c332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae8e48e-e65b-4e41-8f73-27438c48bcb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda6b019-4839-4692-a768-6d5587062c6e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724d0941-01c3-4c50-99b4-e65679ddc4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6353f3-bb55-4f5e-a29c-01f16fc4176a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7e8a3b-061c-4c1c-ac5b-e4b7d1b1e770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca85a8b7-5944-4897-8e7c-c6b69737cb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb04115f-1c23-4d12-8d29-a32f0db195c7",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff80d83-f498-4c87-8345-ba3e131db853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0ae993-ee98-45a7-b1e1-8c41b0476367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0269c314-ffd9-427b-937a-bed06a89154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1061f0-8974-45d2-b30d-a3fc18877928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d24ea89-abd2-4b31-a0fd-de2e57c75bbd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8eb888-6082-483d-84c7-7aebac878447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10321419-6c50-4abc-85f8-745a7d3f65ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d02e27f-95df-42a7-9c5d-e33b7d574e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a054bc9-449b-44a0-8a64-57b5bdc22d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a0ee50-74c7-498d-9b2b-8ab17ce54d75",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6cebc1-36b8-4448-86fa-88ce381b69f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd833d45-53ab-4bc6-ba5b-d1d050cce9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f827b259-abaa-473f-89cf-38edd3db4477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aebcd3c-75b2-4243-9127-21ec684c915f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65080391-7d32-442b-a8b3-c72adf016567",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd30cde2-6717-4552-bc69-f0d779ca6527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0e275b-87a9-47ca-9f18-63971b003f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26b4d5f-5c4a-4ced-83f2-269ba76b7fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58e3d5de-922c-46e7-abec-1a96100c9526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdc9f5d-3e75-43ab-a6df-351b3cfecca4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6478833-f366-421e-aff8-6a563a122dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c085dba-733f-4709-be24-f98d6cf83824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449f51f8-91f3-4289-8072-e67e215db7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09888ea5-56e7-4fd6-8dd7-cec30ec04dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3da385-f515-48fa-a3c7-842fb295c446",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16064d02-7485-47d0-8359-fa1e5d3cb7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecabd8c-de93-45a0-b223-a4328315433b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6117dea-aafd-4afd-b920-eff5dd364d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e73937-5874-4891-8902-fbdbcb82d88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f558b3f-c42d-450d-85cf-9554dc2fa286",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17731399-984c-46a7-87bf-895db0579194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6593c3cb-d529-4b7f-aedb-c84a8985b135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1da8c5-e232-4d7a-b82f-cdaa5a40cc17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b31b11d6-1b56-47ac-9aba-44d03e1c4c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bffc60-29b5-4577-a6ba-f4b1103c66fa",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b534a88-ea30-49c9-8ea2-47d7e5ced29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5424232-8a68-45d8-9df1-97fd4c049e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c53e751-2384-409c-a6db-14bbab2511d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2927c4-ff98-4c72-a657-f338794d66e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e1482d-8f94-479c-9ef1-ffddf0a508da",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268c09cb-3565-486b-9310-a910d2e0db44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c737f26-0e50-4984-aa05-37afb756142d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "724cfc72-bff4-4271-a7cc-04fef93fcd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d14fa2a-4e1b-4fa4-9402-9c2e10947d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf73e962-615a-41cb-a3aa-4454cb05ee29",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b0a7f9-aec2-4f22-9c77-1859486d646a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c4c60b-9fb9-42af-bb4b-f29b0ec79c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4eecca-4913-4d84-af76-0097bbcf4ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "056dbfee-9a0e-40e9-8488-3c37279d1df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df8dd2c-6f40-4360-bd93-16209f23283f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8def71ec-aa70-4da1-b9d9-829d725a1b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c478e45d-dedb-41db-826f-91481cd90e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3df6d77-ca7a-4e24-94d4-626528285693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "703c5e92-40a8-4ac9-944e-fb434c120eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a5f961-be5c-4c4c-8536-4c370732add7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fb6a21-666c-4d63-b2ce-e1370b85eb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72419658-2a3a-428a-9537-e14972f9236e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca7ac6e-4735-4eb3-9770-5d4ff834d720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b58b189e-2ff6-48f6-bf13-d2dd17bf1142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467e2019-b5ad-45c5-bfc0-51ccd00c4665",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e9655d-f235-45df-807a-37d42fe6b49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051e6f3f-ef9d-4438-b57e-c904c78dc8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3591d5ed-4ea8-4f9c-9872-d926d3a34ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b45f8c99-3240-4139-9ca8-ea062d991756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825cc548-da6c-4255-b392-b153c24f674d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4a1e7b-09b1-43d7-9462-ec394474d81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151c2931-8797-49b8-9865-4beb3fea24e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10199525-8280-4ca6-9274-c9fcfac91849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49e4bd3d-4e9f-42f2-9bac-66eed65ec8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22935b4-7b12-44bd-998b-7753c2e7d624",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b578dde-604c-40ea-b324-cfca475daa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ea550dd-963b-40d4-8236-07ebeb293ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182823a7-ec5f-4e0c-b6a4-d779c4bc4c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2449f3-40c8-4bc1-ac8b-e902f94a33e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6424d55c-878f-4f7a-bdf7-700962ff2621",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bf27f8-52b5-4e3f-bc38-4dd12f605bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ca123b-e5ed-4c7b-bbb9-2eda41b8f73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77657b9b-2897-48fb-8290-0c00ba50f49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b6d414-354a-42e6-8089-63a2fbecec34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b00bd8-aad6-475e-ac23-859f4e31758f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7851966c-4c5a-49c6-ab3d-1651125e76d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9940439b-699e-462f-9e0f-7a955f284f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f40411-437d-4b44-b854-cd70f5f3b9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf30fbb4-4593-45aa-ac2a-e439da25dd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f67555c-fa4d-4fed-bad1-31739ae2954d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446fc969-b2e7-4a8d-949f-bf39ea8004fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb532c2-114d-4cb3-8be0-686d5d70bd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5291a1-52d7-48db-89f2-d8a5fdd0570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bac08ae-9c6e-413f-bbbb-e70980fd1bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1aaf08-0356-4ce1-b243-52a6e0a93e33",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eb446b-8158-47de-b2bf-92b487f3a182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3022f91-5f05-4172-9bc9-81df2665b801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd3348e-0051-4e8d-aa2c-19d08a621aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28e9257a-6212-421f-b43c-f7fcc4b29c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bdb440-2d81-43fa-a247-f37f52074cde",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bc17fe-2639-4872-a7f0-e2c366e3038d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9b5486-b148-4b5e-9d9f-6ad2b457ff3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9141779a-c451-4a34-abaf-7c0796ff26c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4749ae62-4e85-4acf-9201-5344533a2b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9684af-de6c-4c51-9825-23e95f5e7f31",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea43b124-9b31-408b-9816-caa221db5fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a9ceb5-5580-40bd-9c8a-d5eea4b1c627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2532b372-25db-4aec-b296-fffa6f2d787b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52dd19db-b387-4c90-a2dc-dadaa8a418e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c37b95-731d-45d9-b01b-501f8094b9df",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959d6381-4c31-4442-8f5e-6b5114d020ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91abbbe5-0977-4869-9e01-cc3af56b27cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15379239-08fb-42f8-a164-de86fb11a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "67c80bc4-8691-4738-864f-65a58c038c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d3b5a8-09b3-45e7-92a4-860575484d8b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74afbf9c-39b1-4f31-a007-2c35dd2a554f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dab7d9-5809-4f29-a2a2-1bc95d0e542b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9bcf1a2-bf88-495b-9eeb-f860bc48d629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f43dd865-d2d0-4c5e-8ddb-626bb0a2c097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f4447a-edd7-4d6c-8e14-65248abfae93",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea461ca5-f7f8-4841-95d2-5265f5952557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029664e8-a58f-45df-ba6f-26f387a41750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3bc06-728b-418b-9fb7-e9684923da5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a6492d-2816-47f1-8c35-6c1adb175bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0207d895-7d44-4cc3-8385-bd6efd3f257b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205cccaf-b081-4956-8633-64aaee3b7080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefea370-a60c-47ec-8ef0-9352b5144b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a874a4-65ea-406e-b9bc-72ece6f21980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2a7dee-eeb3-41d1-bb17-15e01ca25520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60405d5-7f44-45e5-bdd0-8c94cdb967ff",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23acd1f-0d05-4a06-be63-50139efce76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09682f2c-2d32-43ef-af7e-bbe699616b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b046b78-5170-43f3-b582-77187926c86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "24de27a0-1bf5-4d17-b8fd-d4c6c3eb8e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54c476a-98ac-485e-899f-4703b956f584",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827e4405-fd85-4495-b5b8-411f83564f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6444c79-3822-4d6a-a0e6-fe728a30b45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34c3c34-a9b1-4503-8c34-968ab050b5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a3b36a-a57c-494d-90c1-fd7488c455fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0a4a55-1d54-4c80-8c57-0baf44ecb41c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92c70d4-66ca-4da7-80fa-f5c5ec3cf670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa2441c-675e-40fd-b619-fd5dfe5d50d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c8c617-14d9-432e-93f5-c0e40bb5e491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eccaebfe-563c-456b-be6f-b71103bf7635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ca0668-ba15-480b-8f41-a5cc8cb6e496",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc73f91-d57b-4227-8763-89b554994a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6996d12d-353d-472e-80f8-c4b3c426d2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515129fa-eec6-4d5c-ac37-42f186a32b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e712e87-0308-4cda-b0e7-02b5f2f3be08"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a68239a-53d1-4dc2-b2f7-af0c8c39afe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71daca49-a793-4d89-8102-1a2a4fd868a9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae2ad38-ddcf-4fb3-9661-8c3d682ad6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c23455-c746-4c06-988d-b519e9835cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7886db70-c8f8-4c51-bd24-a21e3ff3c67b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff92c7c0-9782-49df-be1a-eeb81710fca6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1b23f76-827a-4312-8d20-f6d80d27a47c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffc889ad-788e-415e-a53e-01974c2aece4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d57bac6d-01b5-460e-b838-f9bee6d2de8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b2f62d4-913a-42ff-9e97-902bb3d54128"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88d165d2-66ff-4ac2-a266-e1bbd650d468",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31081c2b-dbe0-41ec-906b-e5def0c2d1a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "50e70cf8-f20f-4cd7-bde3-468ff6e22dac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ca5f1d8-a1d7-4f18-a08d-3a66ca87b7ed"
                }
              }
            ]
          },
          {
            "id": "23909acb-9394-4bbc-9e83-3e24173fa538",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f423379-f13c-42fe-a6dd-68588ac5df81",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5c3fe1dc-f79f-4ad3-856e-577d4bf8a1c2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bfcca9-7141-45f4-9df3-c7bc98193478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "755e01c4-5f08-41a4-aa4e-7bb54c19f3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60142565-5dfe-48f8-b99e-b65d9dc88abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc84e66-be46-41ab-b157-58c28e091981"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67c6decc-a173-41fe-bb16-21e2d3a9fc7d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a0c34e4-a5a1-4d48-899b-d36346c3a6a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea191c1e-ad0f-4cc4-9e63-4dd77382b44f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15acf595-a1ca-4bb8-9f8c-3140a1ad8696",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4917767f-80b6-44b6-ab15-3286f1b27b2b"
                    }
                  }
                ]
              },
              {
                "id": "1a1ce8f3-36e9-4527-a136-5287208d3e54",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcbea83a-2103-4d63-b213-bbfa67467ad2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a1a9ff4-1e9c-4f51-9018-ce514a6232e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d6ee963-5c80-4819-81f3-cfc28b9c9dec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39739e45-0a0a-40eb-89f5-61636d44ea75"
                    }
                  }
                ]
              },
              {
                "id": "5b5d792a-0c0c-4372-9547-0b747d0a227c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1927988-78b9-4490-bda8-db06fca6b9f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0eb49ce2-01e2-4d29-bba9-c8dce80229e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05614ec5-b2a3-471a-ba21-f0511b86e405",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10bfd38b-c892-4708-9df2-101709e7c401"
                    }
                  }
                ]
              },
              {
                "id": "5c2d830f-2853-4e45-98c0-a3f51acfb03b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef6d9679-9998-402a-8db2-9abc2d140bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a891e8b3-9372-403d-9f6b-2caec96cd0b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2186658d-2bd4-4378-8f65-fc10513a67e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3fca5d8e-8571-4f9d-9153-5e87a09dbce1"
                    }
                  }
                ]
              },
              {
                "id": "e9293174-564e-4b74-9655-c500c3bf986e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f118b68-ee67-40f1-bfd7-f826f93b229e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cce8d021-c04f-4ee7-aca3-3ff6498b38be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f94d9c0-a5c1-4277-94ac-010e21651980",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8bb54692-b0a8-4977-8145-923352ee2c6f"
                    }
                  }
                ]
              },
              {
                "id": "129a6273-72c4-49b0-bcaa-9c51fea806ab",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eb544fa-6105-4a91-a1b4-bf7686484eed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c89259a-ee79-40e9-93e0-6157e01ab9ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f929cda-0323-419e-98a6-e9081e6185c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf8a15e2-ab3d-4845-874e-bbeba133bf13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef335339-02fc-4d7c-a44e-b2b0501514b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37f0b7c6-e0d1-4ea6-9744-162562ab5b65"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb0f7920-e88d-4c42-9786-039f32613f4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e7ceb31-effc-4db5-a842-c2d7b7d77db1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d07170a-462b-43e4-9947-f5ae103294c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7007c6f7-3992-4731-8eed-440e69c7b8c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7abdf7f3-7784-48e7-86c6-3280cc5edbec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20b6e94b-cbef-4fcd-b6d7-5d565731ca56"
            }
          }
        ]
      },
      {
        "id": "1c8abbc0-24b5-426f-ab74-bc710fe1c7d1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "82b42619-deb0-4fdb-8ae4-01a3647d9b76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7312a128-c625-4fcd-9a9f-af6993d0f979",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8f48aae1-5724-4765-af56-d7a275f29d7b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b798324-6c52-40fd-941e-7d7b4cabe670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f02d247-3f3d-4d8e-9f00-9ec19c644696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5910cbf-0cf5-451c-b2e5-eb47cb2139d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f29a2b-3ecb-42bf-bec7-846ecaf98557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc79e48d-009f-44f3-81eb-88743c7a6d25",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56387b4-2d58-4797-b445-e9eae24988bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2e050c-4a55-42c8-89a8-d3512110ce1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a0473f-2cf6-43c4-89d7-5ae8fbcbde1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae268d6f-e02d-4cda-a982-3f31f570e624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa624a13-19db-40ad-8fc4-5ece81cf2267",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd11969e-3889-4892-a1cd-f114eda39393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc3830d-6903-41f5-96c7-cf1ea63315af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e87b60-267c-4179-85c7-472281eadefb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb55d29e-1898-40ba-bb27-bcb9d1f47b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b0534a-37fe-4799-b343-bc1ac20fbc12",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fe9808-d509-4ba7-888e-964bc39adbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836da46e-673a-4d2c-8e2e-cdcb08f12009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fc629d-2603-4362-86d7-036ff7ed60ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91e44076-8557-4c0a-bbe2-2b87a984d62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383c6e77-c1df-457b-9b23-7852510bf743",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111393fb-e009-4a5c-8745-35303b18c65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3164a2aa-ff76-44cb-931e-3f3b8fae3cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa55465-8571-4f6c-9d31-27b89832e42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d42dc2b2-bab3-4271-91b6-4f7319ef11d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03223e7-320e-418b-857e-ae00438da9d6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b5da3fa-1a50-4313-a378-8fb1c2faa457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e577ba6d-a2eb-438b-8577-ec2c866a3ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0098ace6-4359-431b-952f-74c6b1b8a3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a265221c-6bdd-4f97-b985-beebcf6ca337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf93a736-c5b9-4459-9527-f0abacd28665",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d833680b-43cd-4827-87a0-79986667561a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27ae506-d742-4941-ae02-8d17244980d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4597b2-4817-4779-af6c-bb7b42bc7cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8deab952-d549-4b7c-a633-4603c1b09e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af615478-1cdb-47a3-8a7d-5fedefb13c65",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ee8e47-d6cc-41d3-97f7-470e26bc9afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65b0be6-46a9-448a-bf86-11cb502839bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22149c26-48c6-4646-9d9f-3ee3a903a47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2804e1b0-fa0b-448b-b287-ca6c8c74f1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555512e8-425d-4f85-b7c2-1e307023c382",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f74805-a9c5-4b3b-aaae-b59d7453e996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace17869-6465-4174-acdd-00a70b1b0c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94af2d0-d42b-4d88-a2e2-62da36f04117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ea1d91-0fd8-4c76-b449-5580ff13e11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5956900c-f7d1-4bc2-ad4c-29b3eec56368",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51b15b7-4a10-4d7a-b6bf-64cf9a3bf2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0829c997-5faa-499e-af7b-5fccdc91f554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7810b4cc-ac20-46f4-8662-ad6481abdd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0da51f-cc37-4bea-be14-e6f9278e8af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16966fe-c4b2-442f-ae32-5b2daad5ce25",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96622bc-cd2b-461c-8a16-723e7d510f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec1d1b2-cb59-4cec-9b66-4fb3466f7827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869baff3-01fc-470e-8971-260ea3a157f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0659268a-78a8-4db2-8ead-5376a381bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d086f9-f677-4bfd-932f-f3551463117e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0496634d-a7ba-41e3-b72c-e48daee6513e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1724ffb2-08ca-466e-955c-7c3052d36609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c10617-56a1-4c5e-9c55-c876a4a33c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3c2597-cb44-4c63-9683-8fe4a682bb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e51799-476a-45eb-a49e-2371bacfd5d8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f13e927-ead6-4ec5-94b8-f081be8bf98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807c3388-fc8e-460c-988f-49bafc5a2d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308e7ac3-1393-4010-b21c-434207e5b891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f63bc3e-1bcf-44d5-86d6-816b0d51f07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768c1cad-01db-4eb9-8b50-d140573d57ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8e14ca-6901-454d-ab2c-f14ff6277a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77aef0aa-c85a-4c32-b2ee-ee52bda21b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40fd017a-bd5c-4f73-bfa2-d3329b021f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2839d320-ca27-4d20-9867-20d7b423a60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85745757-2ed4-47e1-8df3-123b2142fa6a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d4df79-cd94-4874-9b2a-4f7d8787ce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31302984-d8c7-4290-92b9-6989bad53cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb63ba7-7e34-4e49-ac47-40bf856e59f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a096420-8c7c-46c0-9f9d-3863f54c7939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd928ee-1833-415c-ae1c-dc40b36754c6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44fe1a6-ba93-4bd2-a432-10447df57bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480f38fe-5c8a-4659-b9bc-ba7ea7ec2782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "818eb9c6-23bf-4548-b333-1566d888b39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5afa78-7189-4d84-b4b7-7ad533c28284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6126661-50a3-45c8-8004-f8bd5c4f5b05",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9a9c7a-c737-4d1f-82c7-ad9434a32aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1712f5b-6b21-420d-ab51-adb8cab174a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86415e21-4895-43ef-912b-fac48cd7b823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f74923d-a2c2-4656-be5e-0a486de1bed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81261ac-b756-4775-8e0e-e13626cbc289",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ffb20a-8c36-47bd-b4cf-9a82c147c579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a225e869-30b5-4c5f-a433-7f25fe4dd10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4eb4c5-e0a8-47c5-bb69-cff08cb44493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84637c0-1a34-4f2c-8dd0-943db10c495f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b8bd50-2b25-42ec-8f16-90131993fa92",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198b4da3-75d9-47ab-b37d-bd423ba95194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886444bf-c017-4a79-b8bb-a12fbcd837bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7358e50b-e1d3-4c3a-9aa0-870677bd686a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a42c58c0-9ad8-4b82-95dc-49d1ef7f5112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e5c27f-b181-4926-8dbb-e0de648fe61e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d6425f-75b1-47dc-9d4b-3e3a6f3a14a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e524eaf-1cd7-48b8-9550-758bb06f3cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5833bc48-7e62-4770-825c-3b99cbaec146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50bdfcb7-e0f3-4ba9-a867-7fde99371056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bca7970-a2f6-4bd3-98a9-ebaad7022adf",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad4b260-9e60-45fe-835b-c16b5df38043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda89623-d0da-437f-9847-ed3d89f3a1c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd45ce-eae5-465b-a104-5c560aee4298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8d1ff5-2896-453d-80cd-ed3cf6f4b435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d9b7b3-2cf7-4281-9e18-22d21c25a45c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4447694b-b6e3-4c46-b43a-840b1cca7fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b878ab-d451-4c8b-b6a6-700d9210fe0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb7aa92-a30a-4a44-9fa3-543b50eb21f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9213054-0e90-4aa3-99d7-708186971519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a143858-4dc8-4d87-95fc-722371527ad1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aadc5ef-a44c-4864-be29-63e45657ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55e4726-07e7-4f04-bdd3-48042bba8636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93347034-af71-45f8-baeb-09c5f6d30fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32813adc-d0ca-4ac9-b1ba-b2b60296d675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d06a5c-5f9d-474d-ae89-9186ce2c9acf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb645ba-56ea-4b7e-88f6-86fa48e1a85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ba1ba4-8f16-4a09-b8f1-d5931294ce4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fab6e4d-3c2f-42db-bb77-553c19e9ed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d39f26c0-abab-4f51-b657-ea39616ca5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0226167-8973-4a4d-8738-9043ce25ec0a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcea669a-25de-4555-843a-399306bc7110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda0422f-bbda-400b-9cd9-698a28d2f67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86a3e5a-f917-4e02-8521-018d19d68fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98f2952d-9441-4ed4-94b1-f93ec0fb9fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e96d8dd-cd17-4d7a-bcf4-d066b3668cbd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cff629-8be4-4745-8be2-783b0bc2fb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae8a23e-021d-481d-97fe-e1ee475f8c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7507fa-01c3-498c-b783-5485f7f7b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9133303-f608-4355-b50b-2ff2ad7e4dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00394a7e-ecb3-4a24-be05-2057127e3469",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6902b912-e19f-404e-92a3-9ce0c669f5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7378ace-7098-416a-b1b0-95f0b884b118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58178b3a-1c82-4362-b927-5ff7010f3c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "909db37e-2316-4741-9102-c9e0e3ee092f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2da403-a466-407a-b588-113454dedd88",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328f5006-8f3e-421b-8e48-457b0a205fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce506aa8-549d-470c-9376-d573aec45eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a196db33-7764-4b58-a9d7-e7443d9d948d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e32a876c-80d8-47d0-a8eb-e6aef14c70e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e992a54-961c-485d-90ac-a7558e245231",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e344025-586f-43c5-866c-1750ed307e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff38d354-6bff-49d2-8675-4fb140cf53ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cd6150-8f1e-4925-a70c-6d2af30de7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a99537f-9775-445b-9507-3aaa99bd4e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34771c7b-6c72-4990-bf4f-b45b36319af7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834d69a0-5cdb-4190-9782-a9303db6878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d46810c-0bc5-4fec-8ac1-88b3112c40f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b309ce4-5f44-4746-a3bc-062753e59552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0127998a-9151-4d05-933f-cf881e588eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7024b5b4-5623-4729-90c4-cdd1c28f15bd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a1484b-2d84-4b64-a988-2eef70f28ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcde1282-b72f-4424-a0c8-333785ffe378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea401bcb-15ab-48f0-a5fe-037c8370807e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8b291f-7837-40aa-8314-e09414a84e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1ee32d-c3f3-4c59-9c6f-f52a2a259dba",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcb7dda-ba4d-4ae7-b452-f5184dd3688c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe70a54-5f5d-4a9b-852e-183c265f832c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d3a1e2-0779-4c00-875d-ae5ec816dff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8feb5a2-b760-4f74-8e25-1abd8e5586a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c05bbc71-50e1-447f-9f63-345ba5d153a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ceaceb6-274d-4c06-b8db-655c0ace4d94",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447b77d8-da28-4901-919f-9e047e7c89ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cde6e9fb-bf17-4a80-9d52-69d1acbd958e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456299e4-6240-43aa-b081-c34639583b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b80244c-a139-419e-b42c-a66b34d6e812"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a84aeb8-e7e3-4b5c-8003-df58359086b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d96ed849-73d9-4e6e-a806-884304371dcc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fa21aa3-6a80-4f39-b16a-f35bed567d74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "395521b3-e930-4095-9392-82d67f513c91"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db72ab85-ac59-4fe0-a50a-6caea53b517e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb098c66-b231-4832-a4e6-3348202dd3ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67b6eb55-b627-452f-83d8-96c95c177352",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2970858a-4bb1-45f1-a8f3-dd6c7f65c336"
            }
          }
        ]
      },
      {
        "id": "3d6b67a0-5cad-4211-9361-821b1486d7af",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d9c522f0-301f-4d80-9745-cc4e8a04c51b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fae04bc6-8300-465e-b77e-1240272a06e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a0616f3c-1870-4936-8737-7e7459b3c567",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655ca3b2-ba2e-4e35-aec5-de2efb3c4d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82d5cb3-b7a9-455a-9349-86db88de8eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906550fe-16ec-4fc7-af69-75dea0181a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "59713345-2975-4374-a28a-7332995808f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecaa5290-1b7c-450a-b26e-4047157176cc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f96496-516b-4905-afb5-055affb50f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0a409f-b727-4b07-b5aa-a651e359bae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8ab12f-bbe1-4423-ba1c-91303ecf645f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7eace71-2b54-4ed8-a3e8-5f4af9e2ba5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77edfb92-537d-4e66-aa8b-19952fec1440",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2ff629-54c5-40db-b28d-3bc6f4d6311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b63fda1-627c-45a4-934c-11c65efbdecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0567109-e1aa-40b6-b7b3-86ff911d3d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b7a44d-ee41-41fd-89d3-1566b9a936b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7beea4-b8a1-4e50-b9f1-637ad4204aa3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154b3348-1443-4170-9c1e-2193b96cf8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60c79aa-0c98-4825-9abb-8419e6c95bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce92848-28ba-4cf4-89aa-0ef0287225fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1058d739-4746-4053-b980-f2e6a9b43694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6800a4c-5e7b-4d19-ac38-aa32fdc19dce",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ee61e3-24ec-4a4d-b7ab-caf13a250b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff45f3eb-303e-461a-8777-26924722b314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ac97b-7f61-48e1-b24d-32ca0d83cae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcd683f-c9ea-46ce-a6b9-42c940fc2a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227e7483-ddd5-407d-96d0-528e4744ee1f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2ae3c0-6a91-49d7-8300-0f77b5d534f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64504467-423b-45be-822f-e54a4f6db8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c287b9f-6d42-47a7-a5b7-0889090904d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05e2b0e2-1a64-4c08-a38a-0bec0a520bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b7b993-1f3f-4a33-962d-0e534b9abce3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe2cec7-579e-4263-a96d-bb847879b99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7095813-b9ef-478d-8599-7e751c9d9242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741f9ac6-427e-459f-ac0b-0ab87c003a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb161a44-2bfb-4e12-8dfc-d07033e6b80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cbc82e-426e-4e5b-b80f-1d420a4487c8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77403dc7-8bcb-4c50-9d29-d0164fc71aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15153ff-411a-4206-9529-93f5051b8c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51a2103-330a-491c-a525-032c71cd0e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36fef18e-a226-4e90-b347-b1cb25c6a7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085bdfe7-423b-408c-b577-73c559f8e924",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07ea80c-c472-4f2e-a674-59aa37a93339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfe5d2f-dd62-4666-91dd-63fbe1bee38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb01eb3-db09-472b-828a-33d07e209b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b508a759-160b-4747-bd51-084ac95365dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeee912-4d24-446a-83cb-e00ac553808b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063aa5e1-00e5-41d3-a633-a8cc1ee54e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a62d906-3c4f-4227-a404-1c44d7baeb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95635336-ab62-4e85-9e03-277990e76051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d397edb-5ce4-4f2c-b0c9-ef5d44dd4237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3f38ff-f6c5-4932-9781-c24388109776",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385b9ba3-534f-4380-aa95-4985cc6db01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767f49b5-698e-42cc-b2d1-735b1302a6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ee4f24-d387-4b05-a9ce-330f886781e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb3eeb8-c668-4127-b4ba-8976a3a011da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051d3ba4-8915-4d0b-b0f2-c31e1042e490",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cece0255-69f9-4a47-8986-8a5f75d55481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c06c7e8-4e61-41ed-9676-e8afbae8fe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f2a748-e7ea-4482-bd1d-57cf849c45d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e54adc61-14d7-4aed-b7b6-12db2b1c2f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e71c33-750a-4c65-aa53-5b50b9b70fc0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01962f8-dc63-496a-a3f9-545737f5a612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d31ee5cf-ed77-4ca9-a66d-051c8f9c3197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2495ae2-e3ef-4247-ab3c-4ffcdab0d089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7beaca2-303f-40b9-910a-408ca3456526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41614d7-36ec-462c-b28c-f2fa647e479b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c54d206-36c7-4e41-9aa0-9a544ff95e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d926291-0702-42c2-b209-ae93d32fad75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a54ae7b-1ca1-4d33-803e-ee78ea1624c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "aec9d4c6-98f7-4ad6-b672-085d18e7cde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd9729f-734a-41ed-98b1-596b7b31dfce",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63f029e-f6e4-4d87-9d21-be9c5960fb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df28e8e2-5052-4030-9b6e-8b20719a22c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f35cc3e-3072-41a3-b805-71090d9044c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b65bc159-29e6-478b-9ad6-8bbbfee3d8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad384a5-77c7-4052-83ce-2c15203b84bb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fda45f-c7dc-41a0-a5da-a094ed10698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55c96f9-59f6-4c45-a4cf-cc21f10b8c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882a22aa-1036-4f71-b18c-e7bbd1cda207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b28793-8450-4cbe-9986-5baf6d77ccd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9221a43-a49b-4cc5-a45b-dbe6d5402046",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5a7bef-7b3e-4cb5-91db-36ffa9704829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce038e52-e840-4100-a29c-43adf4e6861b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ded989a-3f47-40c8-a110-3bf13aa54e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9045f668-dd9a-4a40-80d3-5163aa58b197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2db97b2-174c-4952-a812-7e3a93058927",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e408be8c-8ba1-4ab0-887e-67b3c1c8a6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3460b7a-9dc2-409b-9b9c-325479ca4724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3808dc33-3e5f-4669-b2be-056b6036f223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "31508645-030f-490e-b10b-a0e3b93b5fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45100c15-358e-445c-9ea9-8d4cb8f30281",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1756171e-c0f5-40b9-a28a-8a206abf2fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b547266-1254-4847-ac65-6178332687ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fcb2d3-c917-4335-8d00-969006b69947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71485e38-bacf-4b55-9d47-b032632e54bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2234775a-a66c-43e6-b596-dc67b1ba4b16",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0a71f6-78e1-463a-8414-f0ad0f907b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c97c05-6c3c-48c1-8b02-614dee060a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1237f0-e883-4156-af34-726a39f52d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3768ae2c-1328-446b-ac7d-e85633a45f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41db324a-74f6-44c6-8a12-dee2fe64d520",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dd431f-2d0a-441a-8c74-b751dace9077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c03a25-7f54-4d65-aaac-859acfe87946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5ed4ba-e3ff-4ddc-88c6-b0bcd66b0ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a19ca2-5113-4345-a974-e88cb200d91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435b0639-bfde-4cba-9581-16a041fe53e9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbe3208-b226-4afa-a68c-1f297128d260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe53d9a1-69dd-4a87-86a3-150ab2152cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f75137-7c2c-4348-9872-378b8f0c99d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f421f7-88de-4616-9a95-2bb5405063ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de53893-c7fe-4b71-b44f-33ca9e44bf0f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752b8df3-2da0-4919-a216-6dbbbd7b5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc8472c-eec7-44c7-8d24-5dab1bc87497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad066574-c942-4965-9140-2907be279e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cfbcb4-c88f-4a0f-9329-e4b63620bf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad5c66b-a30d-4259-aa5f-2bb29767e454",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a10a733-6ed3-4341-b392-efbe484c4a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62396e71-1d8e-401a-a1bc-f1bd8effb705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7822aa0-91c7-4bf2-bc24-c0cbbf914fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80393e2b-b5b3-49c8-8b4c-41f12a30cee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae93fd0a-b95e-43df-883d-6060b9a806bb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a407aa-094e-45d6-8a2b-eddf796f5632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58fcb45f-780e-47fe-81f3-d5f801c05557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da34367-6349-4f70-9b9d-fba3a721771e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd3ca5c-35cd-4c1c-8010-32707923f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b6733b-a9cb-4f30-8b73-1bef132a3931",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9026063b-f479-4824-92ce-2679eb75e434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a105fc-08c9-4c9c-b444-d3c6f348a81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ec61c9-eb5e-4b5e-b215-53a8a0eb5469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcdecb6-9947-453c-a5ba-c807fc2b421c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8a2ae8-2f0f-439d-ae30-e24bc06a4017",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c94260-df7d-4c37-aeaa-ad2f451f5f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8703bac5-75e6-4776-8300-02fcdac8d092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a7d290-cca8-4e98-8059-556e8d1cfc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "571fc39a-4be4-43ce-8cd7-f26557908247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c68369f-8027-4927-bf14-eea2d80ba3aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f45ac5-ea18-48d5-89b7-5309cf1548a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bdc900c-86b6-4406-b35d-21f1e7515f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eba40eb-1bd9-4489-891d-51e76b92809a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "402a4c9a-f05c-4e1d-a703-ad93b3a300fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0b8f17-d304-421d-b746-b5ded2842337",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac5fab3-363e-4cdc-baa1-044a7ae11b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2642c8-8409-4469-93e5-9d67b767bae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3085cea-8008-42e4-b8d3-16392a37297a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bbd074-906b-4684-8e62-26110a446676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963b2f8d-e5b4-436c-8845-e3c838a15897",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bcce92-de5c-475b-9130-998fa0464224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9822cb9f-6f92-4483-8511-7b7613830758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9815ed8d-0d26-475b-af44-676f647b50aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e34f983-4566-4db0-b0a5-d60a8cc8f4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3583cc5d-4cae-4450-9148-b1ef446f06c7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d64e033-961d-48c2-b04a-ddd84661778e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca050ae-8801-4e92-8d9e-677456f8c612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0700a903-7833-4f1a-b282-2dd0f19fed1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de62eef-4f7d-4848-9956-3b21c13881d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb42d7b-cd4d-47d1-b969-2fcb40317ef3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1ec8ef-a7e4-4890-8146-7ced64368cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b84d004-6e5d-438e-9689-a9a15662f21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef43630d-4a47-4a31-8550-90d6df4919d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91ae9464-2bac-4f8f-94c4-d5157840f866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f25366-dc89-4bcb-8d6f-c041267e8de8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69df98eb-6102-440e-a85f-adb9d7c54690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cdc4dc-8390-400c-b3e1-e09102864050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41273f52-3cc8-40dc-b6b4-1f70986ffa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5aae34-914a-4e17-b024-42f619a5b7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0c0daa-2d11-4c4c-b07c-4b2bcfa060d5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae11bdf-e19f-4439-b8e1-98f87899f797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2314a1cc-b7c8-4ed9-8761-ad273caed483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a77595-589d-4eb3-a2a0-543643a1de57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0123a2ae-3018-4396-9ad7-75bc167cc5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ada721-a974-4e71-a6eb-1e17adf25c00",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3998ab-6dd8-4b0e-9396-0270aa7f99b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06bed5d-eb66-4162-8ebc-623693015485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58f844e-d7b1-462a-aa45-52c9ad0094c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6d7c12-4cda-40bf-bdd7-e230b9bdbac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692d9dd2-212e-4bd9-be37-18013f2f0bf6",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80c3e3f-af09-4a5b-b131-9029e123d956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e508399-070f-472f-a871-a4623100f4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4a0c26-586f-460d-9789-22760da72f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73734681-e478-4c7e-918a-1831b1b81c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ca7c77-1797-4e07-9496-d3d8e0590697",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80be328-2069-465d-9b96-c41dcc5aa3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e846b78-164f-432f-bc8a-0a967fc5b60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837232c3-6710-4e4e-b76f-71c242ffa8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "747a5782-6718-410b-949d-e82a87a85cc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "10200234-ac9b-45ff-b82c-a8559a07c825",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "973b98cb-4285-473d-b661-cb0a061b1617",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b43ae18-3b9c-443e-8de2-74401c990ac6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "60b0dabf-0276-4dd8-9d78-db2ee840ccf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8cdefc-31cf-43d7-b599-2dd22a4743bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e23ea6fa-0461-4e25-bd89-0321471c3614"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "456ce9f7-490a-4fd3-be75-6146f96d041c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b62b600-9765-48be-bf43-89be65df93c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d1676a0-1003-4f7e-bec4-ead99016b5ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30e1613f-0559-4d2b-a446-7decfc7e782b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32284feb-0253-4c34-a5d6-0110bbaa30ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f25e4dc-8070-4b33-8402-4e774abafe1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "312a70a0-65a0-4870-8c86-7f57cca40a0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "181f7bbf-565a-4498-bb57-5f53d2c9c842"
            }
          }
        ]
      },
      {
        "id": "98545ee2-a67a-47c9-96c4-424346cd4294",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cf927fb7-2488-4ba0-a7d8-5017706f928f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de7d63f0-9764-4e0f-a365-48bf47940340",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7ca7c91-6a8f-4f17-93eb-db430aff98f5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492a5755-3ced-4a84-a8c6-29ae4f14483d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad089de-91ba-43ab-9663-7e0fb37bbd73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203aee64-98dc-4715-b5e0-482c65152586",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6f039a-f39f-4724-abe4-96cfee673f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72740535-7733-4ed9-a9e7-6dc3fddb9509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1d0dfa-506e-4513-a8cc-de3512b8aa06",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e560db6b-46eb-4b29-a7db-f492c0e5a73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683c7991-c7ea-4f2e-ac19-48aad02ca4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11373c9-08e0-4ee7-a584-741118c504c3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f079a1-f60e-4540-9284-87d372a4ea48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1d5f88-ce89-4522-8921-4011d493bbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd13dd33-fb80-45ac-9a6f-3f43f1aa5f3e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c527fac-2e02-424b-a5a7-61f047d29cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd2a8a9-6737-42a1-a73d-9f02301644d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f67be5d-2631-4ef8-afc5-481290dcdb52",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f135058-b46f-4f69-b4b2-d4c76afd168a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81688d6-e603-474c-bc9c-476247089d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d38b29-7f89-4b4f-afaa-45b61105c9fd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde108de-6f7a-44cb-8ee0-d9973960e824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d2a2e3-d662-4782-82d0-9ebfc78d75e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e732a4de-deb7-4243-9213-afe9720d9d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775faf4b-c7cd-4594-adf3-0f840a741576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1881b7de-dc7b-44c7-9d68-abb240aa9aec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766ee6cb-c8bc-4ebf-aaa5-f445e58421e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c64484d-d709-40c5-bd2f-24206d71e4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a8ff2b-dac6-4b46-ad08-23d90529c832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba3d205-f6c3-4a01-9167-e5bc8119daac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a81f06f-01ac-4457-8bb1-02ef280ce8c8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6089de3f-781e-45e8-bc79-8e3027bbf098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17510856-5d49-4a22-ab44-070ce1566b06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c8078d-0f7c-4f06-82c6-599d23bf2332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d71228f-7f13-4c4b-8f48-6bffd3d8ac67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc535960-c95a-46de-b200-7b5ec6dc9fd4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a00979a-dd62-42eb-a5a3-98f1ab4d5e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6831ecd-8303-48e6-90f4-061ddfa1e857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a07fd6e-e99c-4041-9f5e-c8cacdadeab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "263ad17b-1a3e-45c3-973e-f3e629bdb598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41290dfa-bdc6-4fd6-ac77-27342eb658dd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff85d721-a907-4852-8c3d-fa691333eb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7b2638-b503-4ac9-9150-2c9bbf41815a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fe47ae-e1b7-4b8c-8625-defeee788b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c88ece-32cc-4087-a27a-db1728ab285f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6098cca-a263-4473-aa11-865f2da7238d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5268db5-2d71-4387-8c66-346ff4fc3cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f3c2bf-49e6-4687-a6cc-ae78172ed922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25e3bef-248a-4a0c-ae49-cf6291a11943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbe0854-df4d-44ec-b531-6aee2785c31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c68fb50-161f-45cb-ac27-6dcb6e07a42a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a1f444-5208-4f0f-9807-f07167ad134b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80516766-c86a-4c7e-890c-ac79045723cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2861c6a4-b6f4-4c95-97ff-5b404ca08660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0711b563-171d-43c6-8d38-03a8201ead8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4755f42b-7b4c-48de-b99a-41434e92c27d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4850c9-69a1-4810-a5c5-1645a65583e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "073e9bfd-e5e1-4ec1-a89c-1c9457a45445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9425cc9d-8b38-4103-a654-e5abf0cda2f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdbc491-04c1-454f-b80a-fb00010c93a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbcf417-4c94-4c80-8849-cf55fc2b0695",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ba5e09-ed4d-400b-9eb1-59d88c7f000f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1e2df2-e489-4533-a718-d8c5c5c3e9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63940f65-86f8-43bb-934a-6fd9cf324461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12482318-0c17-4100-a9f5-7ea36767606f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc6851b-152c-4add-ba88-8f9a99c52ae2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7c7c78-6326-4c62-9fa2-881a16c6ec6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe5ced5-bfcc-43cd-8a67-0a5e1ca72f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a259402f-f7a7-457b-9f6c-6749fda19b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0e21a9-4a49-4a01-b436-124af3e3796b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c0bf18-9dc7-49ef-9053-4853411369f1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6942ede-220b-4ca6-bb32-db02627eba77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7094d4-6704-474c-bc1f-337b76e3d75e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f266de96-abe8-479f-ad85-cc77e854454f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d4d49b-0b65-44a1-be7e-fe0f2ef73101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94615454-1e34-4db9-9a9f-e03cbd8d350a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72a8143-c19d-4d4e-9b61-b5420ec8689c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff255641-fd97-4e02-8dc2-5c1145242e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07332893-b795-424a-9d05-60b3ef221acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5293aaab-3155-4928-8e6b-1d3196458f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc48d94-57ae-4845-aae4-0a087b547358",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342e558d-20a7-4a7b-b08c-64826bbff946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f6a146-d3a5-4d11-8d3e-d711f7cda4cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1db5db9-50d4-4420-b5c5-38b2fbb70885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28fb619c-3af7-4f3f-a5cc-54c53e07c368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6576bd5-d8fd-4e9f-87c2-8dc6b3220839",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9b2023-7588-443e-847e-5bfb8b53a9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f097df3-d42a-4239-90da-360542238852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e028bfdd-b390-412a-a0d5-2b91896e7c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f68ef2-bba4-4a62-8e2c-73ed15b935a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628825c2-ae33-41ab-b14d-f3cdaeab9366",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c94e168-9aaf-46cd-90d2-cab9f360ca68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1505acf0-d54f-4dcb-b909-ded5e6c7fd3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e2fd56-ffb5-4f09-a37f-968d9347a9ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e72f79-7f4c-40c7-9d7e-0fba9ad904b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74ed2c4-60d9-416e-8018-3834de7d5631",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab32462-18ca-4211-b3dc-9938b75f866b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3716ad8a-bd2a-4b70-af80-8b68f74aa8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbaf1dd-05a6-43fd-a009-100c149f7321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a454446-7e67-4f15-8ed1-88c3e731e0cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930944e0-9f60-4696-8156-a98d22f8266f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a89d4e-2c6b-4cb2-89a4-ea3ecc928391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ab69d3-a8e9-4efe-81ef-7431aa61cfe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cef1184-748c-45a3-b9ae-ab93f9c0b683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb51314-5807-473b-9c0b-6391737dd8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f1e0fe-efa6-425c-86a2-818b26a6c9ae",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d41f61a-b229-4b0d-b460-c0a498e0cad6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d280c824-3bd9-4bbe-95b2-1eac5858cf6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe604a6-c223-4884-a675-2a20f5a1cef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692135b2-87f9-47a3-bdf4-d1cddeff562d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a87d928-7bbe-402a-b3a0-b6daba387225",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811795f4-f2e3-4d96-b6d6-d576d213ffce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "086df28a-24b8-446d-ae97-4914de8f552e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e65139e-ecd0-4de3-a904-425e83142fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2e9140-2173-4e0d-be42-6f1717ebd00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c435749e-476e-49bf-b3dd-4cb7199939ca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f85aa4-cfc9-4105-a680-9a58b24946df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a88c4a6-715e-43b2-b4a0-765e961c62d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39de7236-dfe0-4faf-9221-3e5c439b7c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bc9498-02a9-4e60-a75b-216653e14ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14fb1565-dc56-40cf-91da-f5c89ff56281",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23173493-e1d3-468c-90f9-fd37edd262a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "697a2781-c6b6-4a04-a0b8-a4ccdbe109f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60f3d82-0e17-4ed7-a821-6f7a5040d709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191439aa-ce93-41ec-b748-cc76d1c46586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ac3e2-2b8f-451f-b5ad-00836cfcd6d1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ba925e-9af5-4b7d-94a2-f9d934033030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e1e2c4-89c3-406a-bfcd-0717ff708e96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3254deb3-5abd-4459-a07c-2b51957176ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c8538-8311-4bd9-a7a2-01ee25c8bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5156f9d0-0c1f-4dfb-a99b-556bd9d61ef0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04fa5ab-2c44-4117-9062-db9276bbdb79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4753ff7-7278-43ea-8f6b-51b55b4654c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54d5a12-041f-4275-be4b-e9c887e9f7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844bc3b2-e2dd-42e4-b4d9-72dbca518398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3ce39d-661a-4476-b269-8991800ff101",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eb4fb8-286a-4dba-bab4-710d99e82ab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d3ae9e-caf9-43a7-bba7-6fcf558628ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d1b351-dc6f-4618-8d48-c3d2f36d4d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795ba921-a218-4b3a-bc5a-b5d81d01d858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79941bc-c04a-44a4-9921-c2bbee791fd1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01ad696-fb75-4a25-ae6b-d7e7ae898784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62f9e313-20d6-4097-88c3-0952cbe89891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2352753f-e70f-421a-ab56-9b424ed81da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f33d1dc-aa69-4e19-93d4-589b728264ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddf9bec-235a-462b-b230-b8265d468bac",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d7a173-c482-4dfd-8760-4a5df2f3e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9df0465-3fe8-4daf-a284-37c337dd09bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542fdc29-825b-4c30-a91f-9ce078df9cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9b216d-a417-4dfb-8d68-05ad2d661a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158390df-f94d-4c47-9658-fd3e64f0c918",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93eb3706-7fd8-42a9-b50a-fe46704cee65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f002685-031a-4a7e-a7f6-4d79a8f0130d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c7020b-368c-4f30-939b-256b97d3a2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecbbf5c-ad93-44ac-8df7-f0d05b5cfded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cf371b-73e4-414f-b413-f858be8ef1a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b55b86-f6fb-4b57-8419-e1e842183e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6178d0c-8a50-4fb6-a07a-201eb01c62a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc0ae49-1415-466e-a3a6-cadf1fecdfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2abeb20-9d54-443c-be53-60bb559ec233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544afba4-9a27-4865-b8dd-dce470e42d06",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2a89f8-e1de-4bdb-b4e7-8d72ee0cd537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d275732-102f-4552-8de0-7129f46d0d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81854394-fcf5-41a7-abdf-ca7a08c70297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb05bfe5-3fa7-4fcd-909b-18b23034170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de8afc2-e578-4fe1-b0c0-1b2fa220596a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9d5df7-51c3-4ec8-a7f4-ac1cc1e4d47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a845b4f6-0747-4165-ac73-3a409dd86707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95535c1-5449-41ac-87d9-8b9f885a8cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceee5cc5-9551-4712-8fde-c6eec8d31915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afd5158-6336-422c-96ad-506f57b24787",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f3d2ab-9bc7-4b50-acd7-88cbebdcfbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca38dc1-752d-4acc-9ff4-9c6cd719d83e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca77c90-b04b-4955-961c-1e14750385a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b258165-6f5d-4b09-9306-15a57d171844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fb98ab-9c06-44d3-a71b-7bc1dedac284",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d20655-2f5b-4171-b3ca-f951ddc85aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a331cd34-3efa-4baf-9946-96aa94e0f220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a50867-657c-45bf-8daa-e27054086df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d3a7db-5833-45fe-a645-f0f2d797278c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2154b84f-42f6-4b85-a477-65ade7d1c748",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b578590-6070-40b7-bb9a-9dc6ba041f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3ce452-69ef-451f-be1b-cd1f720dbc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac6889d-d1fd-4661-8642-513feaca3898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c8636df-5912-4969-a034-30cf536e7722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37aa22-dead-428d-9ce9-4ff960ada80e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251f52aa-cc74-4581-b1f1-5514cfa18351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f97bbe-8573-48fe-bc78-a2e7231fc4f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0f20c7-eebf-49bd-a86a-c1bf6b5d6743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "466a84f1-9a12-4690-950d-e313967aca9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1943d7-7e97-4e94-a280-ff85841c2027",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5637a2b5-3566-4926-aba3-9d91a243d5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d8fceb-a69d-4891-8492-59cb184732c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd69e68-4b61-4ae3-b70d-3dc88ef7d23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a073627e-9b15-4f7e-96f9-90f5bb458608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f24b871-4806-4bdf-a585-b7eb04d0feb0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f81394-985a-41ec-9da1-2818e81cdd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a9bbd01-ad78-4b7f-9c87-b0e4ee257669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2988232c-a7f4-4b9c-9e60-0c2956988bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447a92fb-c80b-4ad4-bfdc-208c6ceed37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db00114f-b058-4522-b67e-1a2becc143ab",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b8d7bf-e1d0-42d9-a820-f89d41acca1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ece3ecc-1fd9-4a20-ab09-6ba2981ab047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4925ad2-74dd-474b-94d9-12cf2907cb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b42247-f701-4939-9edb-6ae7d7fd6735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a8ace9-b7ae-4c2d-b21c-3515f64da601",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9745cb-1e32-44e3-ae05-a61e84543153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9989cc33-7d1e-4203-8ab3-ea5b958d76b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8b1390-2b40-4787-8803-de087cb9c4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7cf10b-4b84-4133-b739-ff3c5ada37f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd260c1b-33b3-486c-82e1-4be3ecfc04e8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2361d6e1-206a-4f6e-bead-04f27fe3b527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c2127b-0117-4d51-ac8c-f52804011037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d556a57-e7dd-44c3-aae7-f5a2bef3c66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262a4138-2530-4c49-934f-a4448536c8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aac1be0-323f-41f1-8c55-4f9189cde9b7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61dc0b1-bb31-4616-98ea-d86f7f42bc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae712e5c-cc29-4de6-afde-6162d334b900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91138e50-53a0-4f7c-87e1-f3f606672616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdaf3314-f24b-4ee2-aa18-a05b3ef9dfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af90bd7-1772-4f23-991d-33f5e5dbf1cd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4be99ef-5d5b-4b93-8a59-48585ec7a3fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf82440-4eaa-408a-a699-b2404765a9bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5a7c8a-8b2a-47f9-af01-b428c9fc9754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad59ced9-4f43-4d3e-b0f2-22a59af5ace7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbba95e4-7a18-462e-bd7b-79f3cc7110cd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef83fb0-a9c2-42b5-bf23-478af2dd1e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "900c8f66-47fd-4eab-aefa-f2a7b4b5d290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09af898b-255c-484f-9002-18b025b9d2e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c106ea1f-3931-44e5-a40a-ac60982f6328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1e3d25-1118-403f-b89f-ffd5f862cacf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0659b8-834e-4519-bced-10daab01075f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197140fb-3c7e-4ee9-b5c8-2d3fc82b79d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4484d430-8d04-44f8-bf3b-5753687fcaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9458edd-a314-4d66-ba52-f7aa82f6ad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d60e0fa-d182-47df-a774-14c458bdc753",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5333aaf9-e900-42cc-87fd-f3b9daec67fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744315dc-4428-4de6-9a14-544dc0276b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cb0799-72a8-4246-a4ea-16767dd1f28c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3915ec83-bd19-4dd3-9d92-5ae0da063025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442a050a-922c-4093-97be-de0cadea802f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a80b5f4-535d-4baa-98d5-8ec311396abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b27210-7332-4a0e-94b5-4371765a5ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34cb7656-b21a-48b3-8442-0f31b887bfcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa49a1b9-a1e2-4809-8105-3db99b6c7e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552f825c-c8ce-4db6-8dd9-b597c761c498",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08f846d-fe82-4164-8ae5-389da6f929f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38fcc11-d36e-40ee-a783-ba29e95706a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7566fcf-fd54-4d14-9a3e-3a40a553299e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff3fb2f-ff06-4111-a802-1fe2d4694daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9bf261-c369-44f1-8756-71e09547a3ed",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc985f0b-c5ce-4c92-b3d9-91282b79d8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1739dc30-3e0a-4b58-b1ed-33d5466a4d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dadbde-46ea-4f44-9116-07e83a5c4f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538e82f4-3443-44a3-b968-792944e1453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7215e1a0-68ba-410a-8eca-1e11aac9ab63",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c5165f-9b51-4143-8315-8c4c0c7f9297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397eb4aa-906a-4920-8c69-2bd6ea6bd323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db7658-752c-470d-8a76-6b4a2287175d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12eab1a8-74c6-4c45-9463-17844e481339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f0e605-39be-4a9d-a6e7-2bab2a19da24",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d9e8e3-e460-4e57-ab21-752ca43cf816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ddf066-ecd6-4090-bebe-add42a6ae026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e1067d-e935-4d56-8d39-315993b8ab82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3589e95-d94e-4e54-a682-c2f688d59634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c18eb95-dd29-4c45-a533-da4321ca5940",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa4bed1-c531-46ee-8b75-02f3a50ce12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc15ec3-d2b1-45c5-83e7-8bd10d4fb9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca57158b-d01d-431a-b7c2-eccdb2af8194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6f103e-908b-4e4d-ae3a-3713b66fd3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0f901a-4cb2-4e23-bd1d-b6da8dac281a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f46c2d-a411-4003-bada-26802929482c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3baa199c-1070-4ffb-b283-d2d7e9730ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e9e191-3701-4285-8f45-928730093e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6982e8a-479e-4d14-a340-be31d3c743ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622d0ead-949d-4c18-8a0c-67bd02adaecb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a9963c-3f0f-4f60-9df2-536555c92481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3740dc05-7eb6-42f1-ba27-693668e73f12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22ea45c-7e68-4376-9d3a-90a4c59a6099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e50fed1-d002-45fe-8f04-cc738420fce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751ec1df-ab7a-4b64-95a2-4fe00e50ee8b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf15dbc-ca94-489a-b26d-8031ed64ecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ba3c4d-1e9b-4cfd-a325-3df147015a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8ec170-4eb5-4368-9089-74469fa20952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb38497-5a98-466d-a143-699d60f74803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b154e3c7-7eb0-4822-837e-422de40dcbd8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90e87b7-8ba4-4ef6-81b5-2ee3a8974e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccbe717-a2b5-4902-bfbb-b809403df183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ef48a3-76eb-4319-9fe3-b43d7849a303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23030bd3-fa00-4156-bf4b-f4fc77e538bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18adc34b-c765-480f-8964-cf8ee3432f46",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380073d0-6753-4800-ac5c-c0c3b77e5dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37dc5807-2e51-4730-bb2b-38b791e1b43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bf4d3f-6e3a-493a-a82f-618e80c76bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8858262a-9ba0-4b6e-be64-9ce65f9dbbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbbda86-d730-4297-8dfa-94f229a63784",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b7a112-f180-4ad1-930e-defde25d62e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42855702-b0a6-48c2-a9ce-bded6dd22f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98137beb-03ec-47cf-a04d-a9a15683df4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7d3e643-1521-4529-a6f8-9c9a62218251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a052b4a-fa19-4930-8c12-736d2222f7f3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db6b121-ead0-4219-b47e-790b6ab0619a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068a7f1b-ac76-4c4f-b9d7-382cecd6a104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f07dbf-5274-40ab-8ab7-18647dccf8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e289f4e-126b-4ac3-a73c-7be8f1f06d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b61a179-c5a7-44e0-b264-3ac16f5e9c13",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56607910-628d-42d5-a98b-8a031c311196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b81d6f96-050b-44be-af7a-062208866995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e436f4-acdd-477d-8a7e-03f65f451849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7793fbbd-3c89-49fa-bd72-b4841dc21252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf44cd5-8123-45e2-84ec-d06bc3d35ad2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62db7cd-db1f-4444-9c97-7130880d3479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0a2466-5087-4bb6-ba1f-7235aa9868d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70804cb2-9589-4f31-8024-365a5046ed1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e568b95f-deb8-486e-b1ae-dee013260085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7575b3-e2f4-493b-831c-dee5ed8f38ec",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66704f45-5f01-4f00-bd04-128b5bd016b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabc4d99-6fdf-4694-8f69-bcfa7c6bbf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3437cd-2aca-462d-ab19-1a6d03dfa5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9234a064-122d-42c3-b0b7-c4ff3043adff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0530024-a4c3-4493-a63d-145d6e8ff157",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c966f30-9875-40e2-ada1-860a94b8cb3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3acb381e-121e-4e5d-b50a-dfb80e0234e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57a8ddb-64cb-4b2e-8b84-492c27d6ab50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "997ba87d-b574-41ea-bac4-34fd3560878a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e70bc53-5cc1-415d-a414-655a28f31663",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc8b38a-e57e-40aa-9596-15332ee352ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "356ac4d5-8d4e-4b81-9ad4-373d74911d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "551b8544-6b35-4a80-bed0-d9809245e174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a0c556-c97f-4f40-b266-a42413817e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8feee1e8-f3d6-4676-b7f2-888d4080ee97",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544b44ec-fa61-4f3e-a8bd-5f7831e4c3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84f45e55-ec03-4a45-a3c4-658280a02d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ef0dd3-d7a4-4287-8aa6-a29ed5bf66ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd3af85-98c7-4d00-a8f2-3ad403905339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c980905-befc-4ee6-b55e-a694fa3e8da6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2afeb3-2dfd-4add-8443-86c0c7b06f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "724f63ae-c6aa-4b4d-bb69-7b2912b32a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1a56d0-c37a-448b-8e5d-6573ee35a947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61c0fe3-4c86-4d38-b905-030b6431ec1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26d1a64-d566-44b9-860c-43a55f6bef24",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449035bd-3162-4bd7-9638-d576d587c65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d4e068-f5b5-4e56-9c1c-f9aeba94be37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62daf71d-bd1e-4657-9ef4-9af059ad9987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982b4a3a-14d1-4799-a85b-b96e84697cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc35bc1a-bce6-44ef-b2e9-d59659478083",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ade537-4efb-4160-aa3f-9743b55417d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cc4e7ce-79ec-45d4-9b71-b62603b883ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bce3242-f1f6-4d07-b5fc-8ccc48d6959a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9e05d0-0e59-46bb-aadd-75e830c22ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fad85d-c860-4830-90f7-21976608cdd4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6981b3-0835-49fa-b2c1-28892b727619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca5162c8-f1b1-435a-92cb-0a9df00fa4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb2e877-c53f-4c92-a575-ae2481f13446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e117e99-b8a4-4347-ad27-9dabf82cd0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a934dbd0-f372-4a05-b320-94f2a08cfb13",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691a3fb0-91a0-43ac-9419-12d5a7fd1a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de244e2e-f41a-4c2f-ad30-9255e1ff4f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa40935f-d328-463b-a371-909451e4dc0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8173b316-249a-4340-8ec7-eb7a1d68c080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a20d273-0eb3-4e53-aaf8-c21291edc7b7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0968ea3-c32b-4451-ac2a-b7d5d7abe705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9a324a-e7c3-4a61-b31d-0bbd44bf1f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fd3d53-a266-4a4e-b1b2-9960a396463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4614d8a-7c38-4bfd-92f7-ff3a6ebe85da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7f981c-4b2a-4a11-b42d-bb4940d06b8c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b5b6cc-3cc5-437d-80f5-07a9e24b87e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38696124-8167-4534-9f4b-fdc40fa1e10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e18e76-4ba9-4acd-8d81-1c56303cdc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc94611-9541-43bf-88f3-fd9e95acfdea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc137c17-d48f-492d-8775-6b24edf8906a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fd5c22-2e4d-42b0-b8f0-4b67d5d27f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9c3997e-055b-4d6d-9e0f-73d2ea86108d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a17e6f3-0cec-4dad-9672-4de660c56e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a48b5c3-2c8e-4187-aca1-0ad63fcc2704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac86490-e859-4207-b782-c96ea13d6b34",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16eba1f-969c-432f-9448-ffd302c54d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52fbb6c8-8a1b-4d7b-aef6-d87db8976e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2497897f-f69b-43a8-a7a0-9cb2a70fbb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccff623-5662-497d-b0b0-f694bb3a98ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ada3ed9-8e27-4c73-ac08-42badd4e7a16",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2302dbc3-0621-4a0c-ba99-89a9e83b092e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dcc4e3b-82ea-410a-bd73-e4983c3e324e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703232c2-7a1e-4bd3-b411-c084feec84c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c097a8-78f5-488e-b0e0-8b1c58ca09fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23389294-351c-40b0-a310-e05f1e02b5a5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10de6e72-5cf6-4f74-b5b1-f0a2f9c90ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "115e3c58-98a0-49fd-962e-2937f59f6ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec88c13-8855-4581-9b0b-ac34abada027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8023ba-ef84-4003-b927-c9729bfe5f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d941dd-0479-445f-b6ce-abacf22b183f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5de7f7-8daf-45f9-a8dd-77d79801009c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57cde43f-db4c-4ec8-b812-17ee38b84d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5230178-6573-450e-87b3-37e88171599f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b0fd06-d257-4435-a904-3422c93dbf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7914f2-a261-474b-a5e4-c7589a740119",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53daef3d-97bc-4146-bac3-14c222b74ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "233c0c51-efb9-464d-b3cd-2f273b5fed23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916bb330-fbcc-4eb9-b304-446cd9ee306a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82667875-d41c-4fad-95fe-dc3835d0f9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42280e21-c0f7-4e49-8b51-4b3ef2ef35cb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ec3caf1-4271-477a-ab38-aecc7e9c5e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e87623-5d61-4893-8d89-92ab38e57cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d0d708-d2d8-4bae-99fc-62c87e4e852d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd94c3c-0b47-4560-92b4-b548d60acce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936441d0-dacb-4bc0-8663-eb7d2ae832e4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5f0941-503e-4688-870d-c9e3b3b2cda9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eef01d8-e8ab-485b-acb8-a5ebb700a5ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03d01e6-2e14-4d2b-93e0-1e0398a614a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8771b5e5-a461-469b-95c6-2d07f21f0580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6970c1-2301-4cca-a75a-5a088a6d6603",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87594c1-f585-4863-9535-8f57c55ada98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca9e1ad-c05c-4dd4-a438-de2433bcd5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07709f84-642a-410c-906a-59e45033aa24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8677e954-f1fa-4f60-a1fa-256900c53ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c0ef28-c0fb-4e71-8ba1-a48c17065660",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3699d7b-a8cd-4b86-8869-359345283411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7098c517-351a-44d9-86c5-347bd875a556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d208208-4388-4cf9-80ba-9fe40b92ca3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c530322-9a89-4cd8-9018-882fde640cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d138da4-f0b3-4f90-b5fe-5f18175a4218",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be14c91-7583-4d03-8f0c-659f4dec7464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d7efa4-4f39-403e-ae3c-869ee65b17bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e396f414-707f-48a5-b867-8d86fdfb40b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0212ea-cf83-483e-a68d-d7956f4cee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b264904f-659e-4f07-83c5-16da5764666f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3b913c-bb22-4796-a315-6d999cafda2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49274718-e6ac-4201-8662-c006c3b34209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4bc7c1-b3c8-46b8-adf6-4fc323a7d3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb500e68-1b13-4282-99f2-22bd09609938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8ec786-519f-47e8-8cd6-f39c7705114d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7687efdb-8b6d-4d6c-8f43-1bd7978bd003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c66f4f3-da4f-46fa-9522-1eb563d54a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730c542d-5824-4d78-a064-a33925639ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a36d17f-443c-4db0-8bce-8e1894c7f205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e825dd18-a7b0-4681-b34b-52bf59a486e3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba19f18-cc47-4dd5-b648-1165b3e61d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6df727b-c191-4fd6-a7a6-651bb4023790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4bca90-08d3-4fa3-b049-08addaabdee1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130b1fd1-cfcc-4372-a154-127d511def64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb3191e-06d6-4155-a690-7cd272a1b8d0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed883e8-f685-400f-8307-f3060f54399f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "312aeebb-ceb9-4cc1-bad2-ec86791b35d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6d40cc-e7a6-4b0c-97ef-08f58cc0f005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbea19c-2cc1-4a81-b47a-c3b5d2637bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55c71b5-1404-47bd-9554-6d0c2d81e1ec",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a932ad92-041a-4f9b-89e4-ed4c21003fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d1967c-cf6f-4358-8d8c-866c769fa30a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bc8c21-c364-4913-98ae-5ea488f7a0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbc8b95-ecfe-4103-8329-e9cb1e28c458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed945ab-3a82-4892-8157-af79455f382f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca114ed4-a828-4dc9-8fd5-bd7b6d0e3af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b040a686-0bff-4a24-8baa-3c07b193992b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dd3ad6-cbf5-45de-9f9a-d6ed5580196a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2367df-ccb8-4ba7-bf36-12770652f2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bef526c-ca80-4b67-a2ce-53f79c422bc2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1cecad-1e56-44d4-8985-12c670bfb577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c43e13b-229d-4f60-9611-e69fd465012b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b3d5f8-0d15-41f7-8e77-c4a01fa95cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0456a20f-1d81-4570-ba55-bcf2f9fb09e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19965bdc-259a-47da-b7c6-d8877eea5e0a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a6055c-d821-43a6-a383-8b0b6fbc6c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f1f075-96e2-4dda-bc6f-26fc2e227940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cd8317-d54f-44d4-a75e-d45c4749fbf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d007d3-640f-4c02-8f57-4b44d8dfa67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0153396-d33e-444a-a09b-2bfafcbd1cda",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01babf37-0d6b-4753-bef2-4eebbe71995f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b6fbb7e-af5f-4d45-8b9b-bb88ca20cbd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d04bf19-17d8-4aa0-9d95-78ec850704d3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef17f63-668d-4de3-ab89-150bbf2c15ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d7b0fa-aef0-4ca2-b827-ae38f37aec02",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a19c7c-6681-4687-af9f-faf8e279547f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff4a1f6-dd83-4602-8901-0c0c57f40179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f551fad-2340-4bbc-b27f-f3f2592ad497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b601974-8a52-4c59-8e76-a7bbb60a3954"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9088dddf-a178-47f6-a558-247fcc521a94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82948bdd-a56c-4d09-a169-699d83bf8671"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc102dfc-83f1-4351-8f5f-c3f7edaf70c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "375fd757-446d-43d9-ab9c-99f8880c5f5e"
                    }
                  }
                ]
              },
              {
                "id": "9668ca65-9308-4341-ad77-0bef58751a33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7084f400-08b3-4c84-9598-f451edac07a7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089bf298-39e8-4ea7-af7a-450ba3ae8b84",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "63020412-451d-416e-bfd8-114fa6c69870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f01072-1e16-4e7e-bf61-efcb6217c54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cca69288-e574-4ad6-a462-3da9ebc413a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a039e98-3321-41c0-b57f-e84d2e57b0da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e53d8a5-13e8-4901-8d19-7e655ff3a9dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3525b9a-8aeb-4d8a-9d52-c6c9486b4641",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58ff732c-89c2-4f5c-bcb5-0654aa22a00d"
                    }
                  }
                ]
              },
              {
                "id": "f5317868-9d30-4792-98ee-e1f4d8c656e7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8915ddbf-17e9-43e3-bd1b-6142253db8bb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056742e1-2cdb-4ec6-8186-2a3ec72991b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0267df7a-d20a-4085-b71a-9193ee17da33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c42a9c9-dce9-49f6-83cc-d20884764a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f8075b-85d6-44f2-bd86-4014b5df5cbd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6b5f014d-8644-4b76-b310-f593901fae80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1fd6e62d-74b8-46fe-8641-d049bbd330ef",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "541e636b-eac7-418d-af2e-92d3ceeb07f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e38efb45-7578-40ce-93ff-b65218fff659"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b5e5f80-2890-4be6-a87a-b72136da4131",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0c2f51d-62d2-4bc3-9304-d266d074bcc7"
                    }
                  }
                ]
              },
              {
                "id": "cec88731-0cea-4183-ba5c-605eda8bbdc7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06e44c1d-d72d-4df5-967f-5f63f7ac8436",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e23bcb6-d06a-4259-94df-12b6b8aa9ea4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9e48085-22d7-474c-8af9-513525ca5bdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8629563f-bad4-407a-812b-920284c95a9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f035a4c1-302b-45c7-8375-8f0abca23e49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "52b87865-8a16-4114-a651-4cd72a1b10e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91eb3281-597f-4368-8730-cea164d82a9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fa6f03a-bdc0-4bf4-9d8f-0f09e24381a2"
            }
          }
        ]
      },
      {
        "id": "11539a20-5d30-4b1d-8cf6-dc596323dfb3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "906cf134-1c3a-47fd-96df-5846f784c58a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f893a63-db46-4e0e-a3ee-26048842d142",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bfc2093-9fb6-4656-b2e5-871feac4e9ce",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764e4174-a4bc-479c-98f8-534c72c5f30c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45f19a4c-da6c-474c-8ff7-0e94aa96b79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fe69c5-1ce1-460a-9723-d2c19348b134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96fb25dd-e476-49b7-ab23-17fb3e977c71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee80176c-c6cc-4dbf-ab7d-39be98aae503",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2615310c-5599-44f1-a82c-589a743a6b01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "359c13f8-c8f3-44a6-8b6a-ec2c61fb1e39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa10ac12-8e7c-459d-801f-b1bc0ae433b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15b37a79-4ad7-4003-8f6b-6997e9c2a27b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8d44d7fb-36ae-48ba-b393-0e5988bd4c8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "375c3781-626c-4756-ada6-9995cfb07d20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d360d6f-cc41-4619-a734-16887ee44883"
            }
          }
        ]
      },
      {
        "id": "eb2aee0a-3275-47c4-a4f5-8938c1eb74ed",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5dcc429d-554f-4c50-8688-e87fb368a93b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "698238b8-0236-4764-b3bf-ebc5c8f32908",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef428b9f-54eb-4ec8-9f20-6f19187201d2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e213c0-3213-4332-88a8-d9cfe4b15002",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62e560e4-98bc-4d1c-93e7-5452a95fa3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d037796-1d17-4bda-9ad9-63f9e74159ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eedb809-91ed-4239-b730-0d044025a058"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "457a21a6-58c1-4585-9ca7-f882f40691f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1cdf0e8-9578-43bf-82b3-049438bb32c5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1072a387-2f27-4342-8448-51bdb4517406",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32064719-7772-403c-a9e4-49a852f4f647"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "922585b5-8777-419d-90c8-e84ac2fb4929",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42e6a552-e6a9-45a8-bcb9-a410717b053d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04ff10e4-102c-4bf3-9bb3-62a51a7faa5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b63a656-06df-46d9-bf98-e7d3517c1f48"
            }
          }
        ]
      },
      {
        "id": "b768f1fc-056b-4a9c-a33c-6e207111edba",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d183cc7f-1ca4-459f-bcef-6846e9612249",
            "name": "Negative Testing",
            "item": [
              {
                "id": "141193c4-50cf-4ce9-8b9a-87c6f073ea8b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b7d18a1-7446-4990-9091-354f7918d6a1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4adc590-a6b3-42af-9d6e-5b157020da00",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd49835-8743-4c84-a969-aa3d024f27b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca765f7-bd85-42cd-8111-9e08dc1a18a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "776c7408-46e5-499c-81e2-f70a1280127a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b34e9ce-8597-4765-864e-ab0d33a09df7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9de78cce-a1cc-42c5-b16e-665afca73ea6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "206e4d7e-6121-49b8-b608-bf93f610cab0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32b0e97a-e0eb-4cff-9dd4-84555b4a01cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b9d8cd1-a1a3-446f-a79b-688ad7522c36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df9ff782-8ef9-4e84-9bd0-23797418b1c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f7f2327-28e2-4c53-9e05-7eef03f250a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62430ac5-0f67-4eb6-9b2d-61417beff01b"
            }
          }
        ]
      },
      {
        "id": "1f9d93bd-4562-4fe3-a186-6176959cafcb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6009c0b-d2ec-4b1c-8e6d-9596f6316b65",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37c2ecbe-577f-40d3-810e-229991b90203",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8aa0ce7e-e2a8-4fde-982c-517f43344229",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80370c6d-a283-45c1-b1a2-1a35530dd9fd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "340cc430-4619-44ab-a4f4-525129066d75",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.70175438596496,
      "responseMin": 9,
      "responseMax": 507,
      "responseSd": 73.9983795252351,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710894837826,
      "completed": 1710894864950
    },
    "executions": [
      {
        "id": "ec574020-c035-41bd-9d79-d5df32d443e7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7ac4a932-6d0f-456f-a0ef-b6311e1f3090",
          "httpRequestId": "07e79f54-837e-4924-b0d1-e576b5f33825"
        },
        "item": {
          "id": "ec574020-c035-41bd-9d79-d5df32d443e7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c7a5231a-2818-409f-8b62-01a2aae0605e",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "2da37a20-b935-4ed3-bd29-0a57f119d3e0",
        "cursor": {
          "ref": "34348494-6d4e-4d11-8f70-bc4e8a64d270",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6d67be1c-19dc-4f4b-85da-0ff3a1091303"
        },
        "item": {
          "id": "2da37a20-b935-4ed3-bd29-0a57f119d3e0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9e6e1813-82f0-4297-8b55-2f05b170d69e",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "8a6b0f55-42d8-405a-bc44-5015821d57d4",
        "cursor": {
          "ref": "56f92c26-c412-492a-a7f2-337406a39774",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7887ebd9-a8e4-497c-b8ca-c19d4a89d60d"
        },
        "item": {
          "id": "8a6b0f55-42d8-405a-bc44-5015821d57d4",
          "name": "did_json"
        },
        "response": {
          "id": "22be592f-ed55-4c6b-99d6-066968ea5350",
          "status": "OK",
          "code": 200,
          "responseTime": 328,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe57bba-83a6-410d-a68f-8f2fb1589b26",
        "cursor": {
          "ref": "52c9d87a-e717-4544-b42e-da4325297651",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7a147d2-86f4-4560-862b-cb0e0f27f8d1"
        },
        "item": {
          "id": "cfe57bba-83a6-410d-a68f-8f2fb1589b26",
          "name": "did:invalid"
        },
        "response": {
          "id": "2c663f0b-4e26-4309-b055-f9a895a52fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe57bba-83a6-410d-a68f-8f2fb1589b26",
        "cursor": {
          "ref": "52c9d87a-e717-4544-b42e-da4325297651",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d7a147d2-86f4-4560-862b-cb0e0f27f8d1"
        },
        "item": {
          "id": "cfe57bba-83a6-410d-a68f-8f2fb1589b26",
          "name": "did:invalid"
        },
        "response": {
          "id": "2c663f0b-4e26-4309-b055-f9a895a52fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea7a83a-31ae-46bc-9006-73d839b9cbe3",
        "cursor": {
          "ref": "8dfc1fb4-9ca6-4402-b96e-c842e8fc3961",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "06c84ef2-e3d1-4eda-ab5b-3e11d1f0f462"
        },
        "item": {
          "id": "fea7a83a-31ae-46bc-9006-73d839b9cbe3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "831e3f77-ee2a-441f-b498-fed3cc9c5808",
          "status": "Not Found",
          "code": 404,
          "responseTime": 294,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ad9ee2-7a07-4439-8547-b8d43dbb4ad5",
        "cursor": {
          "ref": "87e0db1c-2b93-4948-a5f6-2b833b6674e2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8597617e-bc3d-4518-a326-fe2afb608a4c"
        },
        "item": {
          "id": "89ad9ee2-7a07-4439-8547-b8d43dbb4ad5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "67dba94a-fee2-4aad-98a6-16be5b2b109f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79270016-a321-48b8-b549-a809ad69f73a",
        "cursor": {
          "ref": "1fbf5b89-1f00-4032-956a-bcf414077b92",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "dcbbb17f-d5fd-4142-94b8-2e252c6344ea"
        },
        "item": {
          "id": "79270016-a321-48b8-b549-a809ad69f73a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1d5b9658-1e4b-4b74-8d73-b00837ee6bfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bfaabc-c609-47a4-999b-fdd89d49f325",
        "cursor": {
          "ref": "508cdccb-94c3-4bbb-bea2-fb2d292b0f02",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b82d2a54-5677-4108-bae1-0f4e168606bc"
        },
        "item": {
          "id": "59bfaabc-c609-47a4-999b-fdd89d49f325",
          "name": "identifiers"
        },
        "response": {
          "id": "94cbda17-f15a-4bdf-8ee8-7876f7415cd7",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db06a250-070d-413b-9616-0f61e8202082",
        "cursor": {
          "ref": "4a5617c4-f8cf-4c12-ad1a-c00ef569ea65",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "46ddbcb3-8db4-4faf-a588-a879717fcaa9"
        },
        "item": {
          "id": "db06a250-070d-413b-9616-0f61e8202082",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a8c024eb-bf5f-4b0d-b979-b3931eab3cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5b925f-d1c9-488b-b0cf-5997deaa2606",
        "cursor": {
          "ref": "729ae1bf-23a5-4412-8fd7-2ca7f6dfbaaa",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f64a8211-668f-45c8-acc4-9c1056b364de"
        },
        "item": {
          "id": "5e5b925f-d1c9-488b-b0cf-5997deaa2606",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e1ac30a7-8fa0-48cd-8c2f-5314ccc588fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1358dc-3879-426f-a83a-cd7467eb8b51",
        "cursor": {
          "ref": "9969f65e-f622-4aff-a133-0139da298255",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ff1018f5-e8e2-44f9-97f9-40a736f9f8ad"
        },
        "item": {
          "id": "1a1358dc-3879-426f-a83a-cd7467eb8b51",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0ae5772b-b719-4e83-90d3-79870f5696e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cff863f-7871-47ae-af14-dc808d4f8cdf",
        "cursor": {
          "ref": "aa1b2365-a62a-4289-a085-8bed2bd22a26",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b4c54c4-343d-435a-9c18-5aea73eb8e8d"
        },
        "item": {
          "id": "5cff863f-7871-47ae-af14-dc808d4f8cdf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "67e978c6-546b-4051-8243-51d7a039e9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc30eaf-1284-4214-844e-6381c9791cdb",
        "cursor": {
          "ref": "d6a16281-3a9f-45d3-8ad1-7c4e8fb628d2",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fa1688fc-d12b-4000-aa03-0bed80d6f932"
        },
        "item": {
          "id": "9bc30eaf-1284-4214-844e-6381c9791cdb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "150b3ce7-94e6-4b48-9531-a2fe7fc23288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be77c351-e1d0-4421-bb5d-36e698d6c0d8",
        "cursor": {
          "ref": "fe118bdd-2002-4900-be4d-d807f4747d4f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "df1b64de-c4c6-43a5-8a6c-0af77026064a"
        },
        "item": {
          "id": "be77c351-e1d0-4421-bb5d-36e698d6c0d8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "448d5aed-b145-4ab3-9d2e-72e222c867db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faa7604-9652-4398-b2ca-a9a6b3dc6eae",
        "cursor": {
          "ref": "4a53cc9c-4474-4b48-83f0-806e84ad567b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5bf92b2e-e466-46be-aab9-7d80d16aeaf0"
        },
        "item": {
          "id": "1faa7604-9652-4398-b2ca-a9a6b3dc6eae",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6d67a22b-63f5-495c-82f6-247042d0dc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b33ecd-0198-43ce-928c-9dac4950a23c",
        "cursor": {
          "ref": "3f3a121a-0d63-4902-82f7-1e5a1f7c12c0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "05d1ceea-c561-421c-8033-a6ae016024bf"
        },
        "item": {
          "id": "a3b33ecd-0198-43ce-928c-9dac4950a23c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "62634a57-a733-4e11-83dc-d027ffbe6d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f449ae0-c98d-47c8-8a65-00784b2298b8",
        "cursor": {
          "ref": "c8bcff53-3a73-44b0-95d8-2946fa68fb23",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5ce797ee-b091-4bd5-bcc8-1abf7729d409"
        },
        "item": {
          "id": "2f449ae0-c98d-47c8-8a65-00784b2298b8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2e6fea3f-b7ac-4cc5-93e2-73c7a4fa96f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2152ef-3bb7-4ce6-aadc-fa128d538813",
        "cursor": {
          "ref": "b5411760-399c-44eb-9c9c-35ad1080ed23",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6dddf615-0939-4793-92e0-5a716851c482"
        },
        "item": {
          "id": "bb2152ef-3bb7-4ce6-aadc-fa128d538813",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "babe66a2-c040-484b-a229-700653c87b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b00f02-339e-4207-a933-c8f784b7a3a5",
        "cursor": {
          "ref": "91a5f8fc-0932-46e5-a2fa-a840d8eef7f1",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "02db86e2-802f-4423-8cd6-fdf602a5cbd9"
        },
        "item": {
          "id": "04b00f02-339e-4207-a933-c8f784b7a3a5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "55b05f0b-0b13-4eae-b12e-7b835e40a0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881d0d34-f792-493a-8c3e-e47076389f28",
        "cursor": {
          "ref": "3e667ede-3882-4319-8df5-1c6397cb5ac1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c058c36e-3737-4b05-b9fe-e2af6a8182bb"
        },
        "item": {
          "id": "881d0d34-f792-493a-8c3e-e47076389f28",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e095f5c4-5b95-4ed7-8d41-c36b68ded5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2b009d-c2d3-4530-8aba-72355f754c8f",
        "cursor": {
          "ref": "7a06adf0-3f59-48eb-9bdb-39868bc7b1d7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "761f9b9f-da09-4111-9353-e0f4b7ea7763"
        },
        "item": {
          "id": "6c2b009d-c2d3-4530-8aba-72355f754c8f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d8f70d3a-f82f-463e-bd5d-21d6c4cb37e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f89aa7-2da2-4383-bfaf-9ec7d867e55c",
        "cursor": {
          "ref": "7003fc35-b6fd-477e-9e6d-afa1380edcf0",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ea417b5b-39e5-45a0-8740-9997ce895eeb"
        },
        "item": {
          "id": "31f89aa7-2da2-4383-bfaf-9ec7d867e55c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "10a1d4ae-27d0-41c3-b3f5-001a0be3a99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ff3af1-6e33-4868-bf83-eb2f9e1af692",
        "cursor": {
          "ref": "e9c3776c-f228-44c7-920c-f5af2d907907",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "857e4e8d-7831-47f4-a8d0-eadb2d9c2756"
        },
        "item": {
          "id": "65ff3af1-6e33-4868-bf83-eb2f9e1af692",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2b7e70ec-1938-45fa-9836-321ab8f48b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e7fe8-96de-4e0b-92d9-f75fddf568a4",
        "cursor": {
          "ref": "e709a461-3a56-4eee-90bd-ff73c4637455",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4b681c60-7a79-40dd-b0b1-2cf2f50ef03b"
        },
        "item": {
          "id": "a17e7fe8-96de-4e0b-92d9-f75fddf568a4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c67ced7c-71e3-49f5-bf46-b3ed6fa67a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fd061c-75da-4e24-882e-610bcd470f8c",
        "cursor": {
          "ref": "96172f2b-60d2-416b-99e0-a3bd62da31c5",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "35a57501-c5af-449c-91b5-dcfc14beca21"
        },
        "item": {
          "id": "76fd061c-75da-4e24-882e-610bcd470f8c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "12218c39-9706-4937-8903-02d37cc8bb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef1aabe-4e61-4198-8c79-f75e24aa2e71",
        "cursor": {
          "ref": "a9533de2-6ff1-43f5-a9ad-2eb8b1a27306",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9a07746a-38f3-42e0-b3c5-0bbe69d27798"
        },
        "item": {
          "id": "9ef1aabe-4e61-4198-8c79-f75e24aa2e71",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3dfbd065-46e2-4765-af54-908cf4ba8890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1636846-0881-4a57-88d5-54acc8b2d98b",
        "cursor": {
          "ref": "f6208dc6-fffb-4fb2-9d80-fe79d6a63f39",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e17e4dd6-9533-4a64-ace0-8441da2a6c5c"
        },
        "item": {
          "id": "e1636846-0881-4a57-88d5-54acc8b2d98b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a6bb7c12-413c-4331-880f-3bd3509a9899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada0c083-939d-43fc-a523-84afb2e9b32b",
        "cursor": {
          "ref": "b90a78b1-6b0e-4651-9212-b5518c2da206",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fbb8958f-b2b4-4f1f-877a-a8793a9124f8"
        },
        "item": {
          "id": "ada0c083-939d-43fc-a523-84afb2e9b32b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e2fe04ef-cec3-42a5-9242-3448bf93985b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cd3d18-b4df-4dba-a6c2-0f62891ca223",
        "cursor": {
          "ref": "aac681fa-fbbf-4076-b900-0a3fd2706023",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d89878d0-2ffc-45af-b242-cca06cb0c7f1"
        },
        "item": {
          "id": "18cd3d18-b4df-4dba-a6c2-0f62891ca223",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d94c55ad-2fb7-4f6f-9189-75f63187740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bdb9c5d-52f5-4a5f-8b8c-2cf0a3448208",
        "cursor": {
          "ref": "9942b26a-e0f3-45fd-a9c8-a5f9cbef77e7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "47c20609-c44d-4d02-ad6b-010459729b71"
        },
        "item": {
          "id": "4bdb9c5d-52f5-4a5f-8b8c-2cf0a3448208",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f247b0ac-3ffe-41d4-98ba-a9d85fdff32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1161f811-ef61-4cd9-927c-7352ff1a49d5",
        "cursor": {
          "ref": "e870569b-af6b-4e54-b412-d186b2972a48",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e7aadcd3-09d1-4c4d-bfba-924c997fee78"
        },
        "item": {
          "id": "1161f811-ef61-4cd9-927c-7352ff1a49d5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "04de4836-b1ae-4480-968d-095f25bc7728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b526ed-c430-44c2-a53d-34d4a76e29f8",
        "cursor": {
          "ref": "6d8b1cdd-36c7-43f2-ae8c-d7c8cda9ad15",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b86db40b-f22a-4871-975a-65b926629662"
        },
        "item": {
          "id": "90b526ed-c430-44c2-a53d-34d4a76e29f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1da4b16a-aea9-4391-b901-717974fa4f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3c8464-eace-4ccb-a85f-80d6aaec12b1",
        "cursor": {
          "ref": "e8e9312b-fade-4070-8e63-c1a1d525dc55",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "99f8e6c3-6484-47ca-921e-2b61eb107229"
        },
        "item": {
          "id": "dd3c8464-eace-4ccb-a85f-80d6aaec12b1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d75decd8-4de5-4e0c-b43a-e1056542f6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126f73b8-c4f0-4197-8056-2dc475b15dba",
        "cursor": {
          "ref": "fac4ddda-64af-4006-ada4-9f011e34f948",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "330f8067-47d9-4f7d-a472-c79ba718a6c3"
        },
        "item": {
          "id": "126f73b8-c4f0-4197-8056-2dc475b15dba",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "20c7e094-73c4-4c6f-94c2-b32981f278f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6477c15c-c448-4a24-b93e-00b738d03407",
        "cursor": {
          "ref": "bb203e89-e245-48cd-b0e6-6701ef675daa",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fbc23bbe-2c16-436c-bbb1-690c6f51a976"
        },
        "item": {
          "id": "6477c15c-c448-4a24-b93e-00b738d03407",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d12d4ec7-cbf6-4d2f-a22d-58093b3474b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b310e47-a3b9-47b9-85b1-431b1f03196d",
        "cursor": {
          "ref": "db03ee2b-94f8-4f8a-baf8-c917ce63392c",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "82aca774-2766-46fe-9f77-dee7e060d731"
        },
        "item": {
          "id": "7b310e47-a3b9-47b9-85b1-431b1f03196d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0311a4be-c412-4937-92cb-12fbcb947bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b90c5e7-7e2c-4155-85b9-56e8c6aa0faf",
        "cursor": {
          "ref": "6a8d08cf-ef28-41fd-85b9-bcbdad19ea3d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cfc62ceb-c32c-47ad-b22c-c43b89b0d6bf"
        },
        "item": {
          "id": "6b90c5e7-7e2c-4155-85b9-56e8c6aa0faf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7b48e946-aae4-4136-a58c-55784a839a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a438dba-b1a4-4bd4-9007-6a4bba32f343",
        "cursor": {
          "ref": "84f76462-3a31-4d30-9c85-904d568d94a7",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "afab886d-1e62-4b81-b10d-24abf3a788a4"
        },
        "item": {
          "id": "9a438dba-b1a4-4bd4-9007-6a4bba32f343",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "469a45ff-9382-4bd0-a984-ec934e120643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2387d23-a14b-4ef3-8f12-16adffb6714a",
        "cursor": {
          "ref": "0a84a139-dbad-49ca-b4bb-a07a1a151bb1",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "764e3ccb-28b8-481f-87f2-37926b9db587"
        },
        "item": {
          "id": "c2387d23-a14b-4ef3-8f12-16adffb6714a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "73a98733-84a8-40f6-aef7-ca953b793640",
          "status": "Created",
          "code": 201,
          "responseTime": 507,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c60ca7db-54fe-4384-badc-995dd6ba9107",
        "cursor": {
          "ref": "90bd36da-79e6-47f7-b2cb-9eb023ea7d8b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7ca70a34-2bc4-4a9f-bcac-b6e55a5cf0d6"
        },
        "item": {
          "id": "c60ca7db-54fe-4384-badc-995dd6ba9107",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "69bdd44a-5532-4351-8a99-f4e453179842",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "14bffdcd-04e3-4bcc-8058-329b6da0492b",
        "cursor": {
          "ref": "687290e8-f5a3-44b2-b9f7-5ded261d23d4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d25a98a0-6632-44c8-8ca3-d7df53a69f77"
        },
        "item": {
          "id": "14bffdcd-04e3-4bcc-8058-329b6da0492b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7d4a7610-954f-47ad-b372-db31b21efc8a",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3c415e93-1360-47fe-a8a7-e4484fef5ec7",
        "cursor": {
          "ref": "119faa81-bdf8-444f-8042-5528ba582876",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1701db4f-e15b-4b4c-94d0-33f298b2a905"
        },
        "item": {
          "id": "3c415e93-1360-47fe-a8a7-e4484fef5ec7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8fe0e7ce-1f88-4080-a119-7d336a2c7a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34056bd-924c-461b-859b-b399fb878b7d",
        "cursor": {
          "ref": "e8ba2f68-a8f4-4fd6-bc42-3ab7ea4fefb0",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "74a66944-73e1-4d7c-95b9-3db8c3e5fd79"
        },
        "item": {
          "id": "b34056bd-924c-461b-859b-b399fb878b7d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c9851142-a1c6-4ad7-b3e2-e6293be83d8a",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "56d65c99-9277-429f-90a4-545a33f42d81",
        "cursor": {
          "ref": "9b50e827-6e8f-4331-82e9-96f544dc147e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1885a96-125e-4f55-8f78-218554dad104"
        },
        "item": {
          "id": "56d65c99-9277-429f-90a4-545a33f42d81",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b5fc6987-6a05-482d-95cc-c995ba4aa6b4",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1d2233cc-0251-48e8-91b7-fe43b6418ae2",
        "cursor": {
          "ref": "7aa284d4-a95e-4a56-8546-3e2bb5f977a9",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4184190b-2be7-4773-af62-b08e88928f3b"
        },
        "item": {
          "id": "1d2233cc-0251-48e8-91b7-fe43b6418ae2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "330e11c3-32c2-49f8-b1f7-36e5d1749363",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2ba68bf2-0f72-45c8-87d1-930fc35ff95a",
        "cursor": {
          "ref": "340ff4a4-c283-4d3b-976d-0fa82e024414",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "097b84fe-8699-4af4-97cc-4e68dbe9e567"
        },
        "item": {
          "id": "2ba68bf2-0f72-45c8-87d1-930fc35ff95a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "87affcab-a2ed-4815-a146-78ec5bc23432",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c2da6488-c696-4bd2-a41a-f31a360761e2",
        "cursor": {
          "ref": "6196f009-b95c-49dc-a2c6-482cdc555e8e",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ac208fc4-e4ff-4268-b1ac-7a58f9b72d2a"
        },
        "item": {
          "id": "c2da6488-c696-4bd2-a41a-f31a360761e2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "564562cd-2e92-448b-853b-e3640219dcbd",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "80029888-decf-4a37-8fe0-6248bc484e4f",
        "cursor": {
          "ref": "6dd00ed9-43df-4d65-8f8f-f748885b4216",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3592426e-19af-4125-88e9-98c5c168788e"
        },
        "item": {
          "id": "80029888-decf-4a37-8fe0-6248bc484e4f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "61c78da6-e332-46e0-8bac-a5199651373e",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8b28b693-99c9-44a7-a856-dac1e1f44700",
        "cursor": {
          "ref": "cc886c13-5e52-486c-b29d-7dace0eab678",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4f1302c5-bf42-4b51-be01-aaee410214d8"
        },
        "item": {
          "id": "8b28b693-99c9-44a7-a856-dac1e1f44700",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b9d22bf6-632d-4791-bac1-5d30ea424b23",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "430183d5-5666-4b86-8eb9-6b23513afa29",
        "cursor": {
          "ref": "4d07b343-1307-4a8b-877c-a955b7bbc24d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b82c391e-47cf-4fe1-9fd7-fe2964ef77ae"
        },
        "item": {
          "id": "430183d5-5666-4b86-8eb9-6b23513afa29",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "854f002d-6533-4891-a0d4-c952c9138bf2",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4e6e12cf-70c0-4f65-ba49-a7c82dd1c532",
        "cursor": {
          "ref": "d33154eb-78d2-4bac-acf8-4db0619095c9",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9cb27c6d-3091-4208-9101-295ef07d2cb2"
        },
        "item": {
          "id": "4e6e12cf-70c0-4f65-ba49-a7c82dd1c532",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "0591ca76-2d8f-42f1-909c-713f2bbf0b30",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "61fa5f91-9458-4b6c-b5d6-e775f3b1e2e2",
        "cursor": {
          "ref": "55a7c47a-615e-404e-bfff-4dd87b2f71e5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "94b61214-3440-444d-875a-f9bcbf826ef8"
        },
        "item": {
          "id": "61fa5f91-9458-4b6c-b5d6-e775f3b1e2e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b95381db-6a1f-4d7d-ac37-a25bd7959cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2185e8e-5655-4216-9ee2-bd7aa51fcb44",
        "cursor": {
          "ref": "60fe0327-fc90-40d4-91d9-ed370d645c5e",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ff8f4d31-8b24-4f71-9ee8-e87347b131ce"
        },
        "item": {
          "id": "b2185e8e-5655-4216-9ee2-bd7aa51fcb44",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "96161adc-a3b9-4b16-a7f2-65ff9b4cbb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045b52d3-c285-4169-bf97-ee3c0c08b202",
        "cursor": {
          "ref": "8020b7d0-47f6-499f-b78f-3b21ee057ffe",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0191b67f-b94b-427b-ac54-dfda8cd52dba"
        },
        "item": {
          "id": "045b52d3-c285-4169-bf97-ee3c0c08b202",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7149fc46-0a56-4a35-8b95-038bf3b82741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e295b72-ac34-4bd0-a086-f4c927595042",
        "cursor": {
          "ref": "3839119f-1fb0-42bd-9f34-9943026067f3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ccaacfe5-e309-4345-a98f-c9fabb829f79"
        },
        "item": {
          "id": "0e295b72-ac34-4bd0-a086-f4c927595042",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "97563c01-aa05-4832-9fd6-b0e2b84a2f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c89fa2-25fb-4a6a-8fcd-f1c701c6fadb",
        "cursor": {
          "ref": "f4e52ddf-3b9c-4e5c-836b-ada474ca263d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ee09679a-bcd9-4262-a737-95addf70d240"
        },
        "item": {
          "id": "b5c89fa2-25fb-4a6a-8fcd-f1c701c6fadb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9a4e1bfb-dac9-4ac0-b08a-94584ced5c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22575ce7-afe0-49cf-b141-546b275a1e13",
        "cursor": {
          "ref": "9c433120-d64e-43c7-8e6d-b37d1bde48a7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3c6b817c-0bc6-4fb2-8d00-cf76166e0a9f"
        },
        "item": {
          "id": "22575ce7-afe0-49cf-b141-546b275a1e13",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "41192c2c-d38c-4d3e-a082-b4aadaeca405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7311d86b-60e5-4782-ba78-37b43188eaa0",
        "cursor": {
          "ref": "ba7fec52-63d6-414f-b09b-bad2e4e59ffb",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7fe7fda8-06a7-4d7e-a1c2-e1ee998dd747"
        },
        "item": {
          "id": "7311d86b-60e5-4782-ba78-37b43188eaa0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a89bfaad-e060-44da-9614-22068f7ceb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a1efd6-1bb2-4ec6-b64d-0e3c9d65cb26",
        "cursor": {
          "ref": "0d191732-e6c8-4e25-bccf-e38cf3c2e3f8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ce9509a0-9f0c-45c3-91cb-46b12b1f5277"
        },
        "item": {
          "id": "27a1efd6-1bb2-4ec6-b64d-0e3c9d65cb26",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d25f82d-79a9-4581-be99-f019821f7ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805a8ebf-6e22-4060-9ce1-5f73f50953f7",
        "cursor": {
          "ref": "ea359b9e-0a1e-45e9-942e-549347eb6b29",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5e95b981-0a7c-4396-8d66-be564b6ef954"
        },
        "item": {
          "id": "805a8ebf-6e22-4060-9ce1-5f73f50953f7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f14fc73f-42c3-41d9-bb1e-7f4bb2aec482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83d1643-19b4-4429-8f4a-74f604a149d4",
        "cursor": {
          "ref": "0ed81165-9e81-48a8-8e87-b3bbe3a7b808",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b5612fd9-41b4-4f06-b5fe-0eb2f92d0bb3"
        },
        "item": {
          "id": "d83d1643-19b4-4429-8f4a-74f604a149d4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5642f962-8c90-43c8-91e6-2adfbc7f34f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0912d7c-4245-4adb-bf06-79009810bbd9",
        "cursor": {
          "ref": "656c40df-8ee9-485b-8957-32eaff33ae93",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c5a287d7-671a-4068-bd8c-2e026151467a"
        },
        "item": {
          "id": "f0912d7c-4245-4adb-bf06-79009810bbd9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b7aff69c-f57c-42b1-ad44-d54523446b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ae3a00-8e0c-4142-82ab-7875008ae1e7",
        "cursor": {
          "ref": "1c533783-317f-4d55-a01a-3e4a33e4ba96",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "df84cf16-b227-4cce-87c1-f041d0f9b3f4"
        },
        "item": {
          "id": "92ae3a00-8e0c-4142-82ab-7875008ae1e7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "35431845-338c-4550-9173-64b3c4c19d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbad069b-40f4-4c0c-8461-ed52e2af25c4",
        "cursor": {
          "ref": "6ea1607e-0f79-44cd-b83d-2cbe874616d9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6f0f2575-24b7-42b3-914a-bca0afdcf3e7"
        },
        "item": {
          "id": "cbad069b-40f4-4c0c-8461-ed52e2af25c4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a778db90-5902-4528-8260-8f48ac5b6301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da7715b-4ee3-404f-abe4-ede08fd0701e",
        "cursor": {
          "ref": "3c1e77c6-e7ed-4673-8686-d1ae624004f7",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2537deee-a4db-42c3-b3e7-eb70d15e3974"
        },
        "item": {
          "id": "3da7715b-4ee3-404f-abe4-ede08fd0701e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "38c0569b-f13e-4715-a0a2-8eba7856c3d5",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c28a4f42-98ef-4c68-9443-44719cbdff07",
        "cursor": {
          "ref": "c596549c-e391-443a-bb17-d8c8ab1ab926",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6be02c47-4cac-42eb-8ffd-b6df7fe790e4"
        },
        "item": {
          "id": "c28a4f42-98ef-4c68-9443-44719cbdff07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4fbde1cd-4388-4a27-9fa6-bd97a3005d8c",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c3b77730-fa46-4d93-81b6-4b1f9f97079d",
        "cursor": {
          "ref": "b392acd1-c472-4ba8-ac28-032a0dcf8623",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5200362c-8263-4b6d-8cc0-e9c5cd60714f"
        },
        "item": {
          "id": "c3b77730-fa46-4d93-81b6-4b1f9f97079d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f6962617-1563-4f4e-8846-bc155f0c8a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2f0168f5-8480-4853-af9d-09aa2816e898",
        "cursor": {
          "ref": "098698f5-59a0-4f84-8a72-d33cafafe5a8",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "24a8a445-a6da-436a-a330-3315d2db747c"
        },
        "item": {
          "id": "2f0168f5-8480-4853-af9d-09aa2816e898",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e21a5969-e1be-46c0-8aaf-283ecc24a7ed",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d4c21f13-9516-4b28-928d-8d0fea2d0584",
        "cursor": {
          "ref": "f7492329-0bd3-4075-b310-f5becc6a33e0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b37efc4a-fe18-48e8-97d0-2a1d69f7973b"
        },
        "item": {
          "id": "d4c21f13-9516-4b28-928d-8d0fea2d0584",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "951ecaee-7945-40d3-84ce-5bc7e1e82f6c",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "3676ca53-b289-4d89-bfd2-dffa76deba25",
        "cursor": {
          "ref": "67f9d144-fa6e-4b57-b151-5c696477d8e7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c5ecb325-c66f-4599-8bd5-40bb00385293"
        },
        "item": {
          "id": "3676ca53-b289-4d89-bfd2-dffa76deba25",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "519e8e79-923e-4252-8bf5-819b14581d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda6b019-4839-4692-a768-6d5587062c6e",
        "cursor": {
          "ref": "98eb0328-3728-4c11-b91f-559fc683c15b",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5f0f464e-cb38-41d7-b3fd-7ba519555166"
        },
        "item": {
          "id": "fda6b019-4839-4692-a768-6d5587062c6e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b9f99226-c87d-4782-a02c-2702a57bb3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb04115f-1c23-4d12-8d29-a32f0db195c7",
        "cursor": {
          "ref": "fcb3f2b2-1c73-4a2f-bdd2-a8c88ee3ccb4",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bbbcb933-9d8a-4e66-a7ad-ed3319edd7ac"
        },
        "item": {
          "id": "fb04115f-1c23-4d12-8d29-a32f0db195c7",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "994eac3d-74b7-4a36-a33b-d88dc80bf426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d24ea89-abd2-4b31-a0fd-de2e57c75bbd",
        "cursor": {
          "ref": "5defafc5-d9fb-4953-a7d9-e4aee41b6fa7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e4e64df5-fa2f-4c8d-8a41-0b8b28bbcadb"
        },
        "item": {
          "id": "8d24ea89-abd2-4b31-a0fd-de2e57c75bbd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "16d3b8ca-13db-490b-b5f0-d5805164b516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a0ee50-74c7-498d-9b2b-8ab17ce54d75",
        "cursor": {
          "ref": "9ff06712-eb81-4fd2-81a3-e4d06df65567",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4d517770-c9f3-46fc-b52d-88dd6b390d69"
        },
        "item": {
          "id": "63a0ee50-74c7-498d-9b2b-8ab17ce54d75",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f51b56a4-0033-402b-9fec-5e25657a2234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65080391-7d32-442b-a8b3-c72adf016567",
        "cursor": {
          "ref": "1b7d5732-a975-4f6f-93aa-5dd8cdb647e4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "97b4718f-8808-4e91-998f-5d9a12062d86"
        },
        "item": {
          "id": "65080391-7d32-442b-a8b3-c72adf016567",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b0694824-3a78-4bb9-8aae-f2527bd7213e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdc9f5d-3e75-43ab-a6df-351b3cfecca4",
        "cursor": {
          "ref": "746d342e-8a1d-4512-8edf-d4263df1a9f4",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "76a5f5c0-dea4-4703-aa1a-91d09c077a50"
        },
        "item": {
          "id": "ffdc9f5d-3e75-43ab-a6df-351b3cfecca4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "49b4651d-df2e-425b-955a-5d66ac5807c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3da385-f515-48fa-a3c7-842fb295c446",
        "cursor": {
          "ref": "426d4b9e-6da6-4a63-8692-250930ba439f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d4ec2e3b-5392-4f5f-84e6-de46527d30d6"
        },
        "item": {
          "id": "9c3da385-f515-48fa-a3c7-842fb295c446",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ff506e9e-1d35-4700-bb0f-b42b28fc0e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f558b3f-c42d-450d-85cf-9554dc2fa286",
        "cursor": {
          "ref": "51f62014-7965-4f4c-bc17-a79f6dbed8d9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d1af4194-026d-4832-b74c-5a2e05908c32"
        },
        "item": {
          "id": "1f558b3f-c42d-450d-85cf-9554dc2fa286",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "637fb81e-37ba-4fc9-a036-837b04a10198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bffc60-29b5-4577-a6ba-f4b1103c66fa",
        "cursor": {
          "ref": "46e71383-32fb-4b2e-bdbf-467aa8710bd8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "45fff90e-71fd-4429-984e-72d3cd2127e2"
        },
        "item": {
          "id": "77bffc60-29b5-4577-a6ba-f4b1103c66fa",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "db968f72-b0b3-46b7-b892-99e594a039e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e1482d-8f94-479c-9ef1-ffddf0a508da",
        "cursor": {
          "ref": "a299c874-f1cd-40ef-8aea-83df660675d9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "76762e11-13fc-4189-b65c-24a65a430b8f"
        },
        "item": {
          "id": "82e1482d-8f94-479c-9ef1-ffddf0a508da",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a1a196d6-e8ae-473a-8c13-31bfae606ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf73e962-615a-41cb-a3aa-4454cb05ee29",
        "cursor": {
          "ref": "f99e2191-bbee-47f6-9e78-0a2deb8b1021",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "48c3e4fb-cc13-4037-90c7-688fc3b3f370"
        },
        "item": {
          "id": "cf73e962-615a-41cb-a3aa-4454cb05ee29",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7ba3850f-6883-47d9-bfe2-2c6b6d0ff121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df8dd2c-6f40-4360-bd93-16209f23283f",
        "cursor": {
          "ref": "3e306237-2cfd-4a92-b0d5-884ba84fbf57",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "26b65b92-ae4b-4354-b8c2-ab80b2c53915"
        },
        "item": {
          "id": "3df8dd2c-6f40-4360-bd93-16209f23283f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5b45707d-818e-46ef-9e28-f5fcd50d0aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a5f961-be5c-4c4c-8536-4c370732add7",
        "cursor": {
          "ref": "c98a0607-e23f-453f-9473-411c24f45634",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "82dd8014-e5dd-40e9-8e09-d5b705e21a07"
        },
        "item": {
          "id": "93a5f961-be5c-4c4c-8536-4c370732add7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "38b73744-34e2-4cd7-9ed9-b2734b76b6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467e2019-b5ad-45c5-bfc0-51ccd00c4665",
        "cursor": {
          "ref": "5a03165b-5a26-49ce-ae08-d7c7089b4d61",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1dcf4728-21a7-440a-999f-c4e2c96f4408"
        },
        "item": {
          "id": "467e2019-b5ad-45c5-bfc0-51ccd00c4665",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d2a1ffe4-f9b6-4533-b08a-72fe5de43b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825cc548-da6c-4255-b392-b153c24f674d",
        "cursor": {
          "ref": "9143a549-ad55-4bc3-8642-857a84789be5",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7a388bb1-7eba-41af-b54f-5c6e763312aa"
        },
        "item": {
          "id": "825cc548-da6c-4255-b392-b153c24f674d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7d32321e-f8aa-435c-ad7d-8f371197c72f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22935b4-7b12-44bd-998b-7753c2e7d624",
        "cursor": {
          "ref": "546cc656-6993-49fd-a847-c835444a3b2a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a7098f29-cbf6-4e10-97ee-2cfe5d051894"
        },
        "item": {
          "id": "b22935b4-7b12-44bd-998b-7753c2e7d624",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e5ce6bc5-712d-4660-b9f2-0ab1a75869dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6424d55c-878f-4f7a-bdf7-700962ff2621",
        "cursor": {
          "ref": "01a5e458-736d-424b-9258-974213761462",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5202d21d-b5df-44f3-b4e0-89cb3171d650"
        },
        "item": {
          "id": "6424d55c-878f-4f7a-bdf7-700962ff2621",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3a7a9961-f4ef-49d6-8f0a-99e43f620286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b00bd8-aad6-475e-ac23-859f4e31758f",
        "cursor": {
          "ref": "de378822-11f4-4596-8a1e-ce9272b61d1b",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f4c9bfe5-0ae9-40e8-9357-290178f58908"
        },
        "item": {
          "id": "11b00bd8-aad6-475e-ac23-859f4e31758f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "793adc0b-9665-4542-98d5-ef321748fe8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f67555c-fa4d-4fed-bad1-31739ae2954d",
        "cursor": {
          "ref": "eadec35b-9b3e-4516-8e9a-c3d03d5439b4",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8d8056d8-7bf9-43af-ba67-d83de3549bd5"
        },
        "item": {
          "id": "0f67555c-fa4d-4fed-bad1-31739ae2954d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5a44e50b-23da-423b-a905-d1f9ca885102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1aaf08-0356-4ce1-b243-52a6e0a93e33",
        "cursor": {
          "ref": "9b9ff0de-5b0a-40ea-a942-a2621e6e11ff",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bc861c33-e8ae-422c-8239-e730993fb420"
        },
        "item": {
          "id": "ae1aaf08-0356-4ce1-b243-52a6e0a93e33",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "39b5f7fc-cbfa-44ae-aa67-bd11eb0a3e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bdb440-2d81-43fa-a247-f37f52074cde",
        "cursor": {
          "ref": "b69eaa73-6daa-402f-b8e6-5dd5bdb7985c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3a4384ef-9277-4c18-b38e-aaca266ae4ff"
        },
        "item": {
          "id": "f1bdb440-2d81-43fa-a247-f37f52074cde",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eb70d67c-b3d3-426b-903d-ccc83c54a816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9684af-de6c-4c51-9825-23e95f5e7f31",
        "cursor": {
          "ref": "6110a2fb-044b-467b-93a2-f9e023797c2a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "377a2cf8-b06b-4c87-82b7-87318c59cfd1"
        },
        "item": {
          "id": "ae9684af-de6c-4c51-9825-23e95f5e7f31",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2c437ec3-1001-4f74-af93-f1a065848d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c37b95-731d-45d9-b01b-501f8094b9df",
        "cursor": {
          "ref": "aea8ae1e-b291-46d8-8237-543cd9f67a24",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8858c90a-3547-4f75-9e27-cc54e1108af1"
        },
        "item": {
          "id": "86c37b95-731d-45d9-b01b-501f8094b9df",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bff10ea7-080f-4df8-a1ca-b16ed3b75438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d3b5a8-09b3-45e7-92a4-860575484d8b",
        "cursor": {
          "ref": "66eb0c45-1615-4bba-a700-e0737eff3e40",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fb0d036e-d201-47e5-9064-d11c4584c51c"
        },
        "item": {
          "id": "c3d3b5a8-09b3-45e7-92a4-860575484d8b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f11bbdb0-4a65-490b-80b0-cd0dac7d8d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f4447a-edd7-4d6c-8e14-65248abfae93",
        "cursor": {
          "ref": "736ef493-5072-412b-bd2e-852dc0d7b05e",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e0fe6f55-836d-4650-bdb3-d4a5b2f97ba3"
        },
        "item": {
          "id": "08f4447a-edd7-4d6c-8e14-65248abfae93",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0355468b-b1f6-48a8-b9a1-03e19ae692d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0207d895-7d44-4cc3-8385-bd6efd3f257b",
        "cursor": {
          "ref": "5cd9d9cd-5ab8-4c66-85bb-4270ca4d9fe3",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "973bdeeb-5a41-4015-b146-f1603eee1af5"
        },
        "item": {
          "id": "0207d895-7d44-4cc3-8385-bd6efd3f257b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "57d3ce4c-8d6f-4b86-99f3-afdc0ea97675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60405d5-7f44-45e5-bdd0-8c94cdb967ff",
        "cursor": {
          "ref": "3f37d7b1-610f-4079-a957-54cfe4da44cc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0b94c12b-4c64-4c28-9da1-5f73c888fb30"
        },
        "item": {
          "id": "c60405d5-7f44-45e5-bdd0-8c94cdb967ff",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "017c1535-3e84-4996-bab9-b885d62c2fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54c476a-98ac-485e-899f-4703b956f584",
        "cursor": {
          "ref": "b05dd458-2896-4ce1-bed9-f55c7660e892",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ef61e5b7-f87c-4c21-8ca5-05b430ac84a1"
        },
        "item": {
          "id": "f54c476a-98ac-485e-899f-4703b956f584",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3f736d4f-9bce-4cbd-8654-36576ffcdf45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0a4a55-1d54-4c80-8c57-0baf44ecb41c",
        "cursor": {
          "ref": "d21a71c6-277a-43a1-bea8-54659ac3e485",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e9f510bc-fa99-496f-9425-d667fc809557"
        },
        "item": {
          "id": "8c0a4a55-1d54-4c80-8c57-0baf44ecb41c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "04616091-e3c8-4cc4-b202-f4dea8cc1bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ca0668-ba15-480b-8f41-a5cc8cb6e496",
        "cursor": {
          "ref": "79dc9549-d5ff-43cb-abad-86b1d72cecce",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "72ff2978-d749-4153-9285-e5c3632b6907"
        },
        "item": {
          "id": "e5ca0668-ba15-480b-8f41-a5cc8cb6e496",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "31c410ef-2980-4654-8e37-ad10128b982b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71daca49-a793-4d89-8102-1a2a4fd868a9",
        "cursor": {
          "ref": "d435189d-2eab-4301-9a60-899c44ae2121",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5d981cff-688e-4cc6-9791-97bf7f91e0ae"
        },
        "item": {
          "id": "71daca49-a793-4d89-8102-1a2a4fd868a9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "527003f7-53f7-4531-a94f-67f7507a3985",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3fe1dc-f79f-4ad3-856e-577d4bf8a1c2",
        "cursor": {
          "ref": "7e958233-c116-4fb3-bf2b-492161c94e92",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4eb79b3b-ce30-4ae1-a8bb-f0e4a604f936"
        },
        "item": {
          "id": "5c3fe1dc-f79f-4ad3-856e-577d4bf8a1c2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "78dec09d-fd78-49b8-9ebd-ae2db2962aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "67c6decc-a173-41fe-bb16-21e2d3a9fc7d",
        "cursor": {
          "ref": "46b965a2-d452-416e-a3a7-1c8bd5eb0b03",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "06113aa7-2198-486a-9189-6513ffd8ab18"
        },
        "item": {
          "id": "67c6decc-a173-41fe-bb16-21e2d3a9fc7d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "60ec14ad-d454-422e-affd-dd8b0127a8a0",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1ce8f3-36e9-4527-a136-5287208d3e54",
        "cursor": {
          "ref": "22b9ba73-04c3-424c-8455-a3b9c46ef77c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ff77caf4-d19a-490e-829e-fce3d5c0bd25"
        },
        "item": {
          "id": "1a1ce8f3-36e9-4527-a136-5287208d3e54",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "68aaceab-e40b-4ff7-b2df-899fd34caa64",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5d792a-0c0c-4372-9547-0b747d0a227c",
        "cursor": {
          "ref": "c2e3cc06-1b03-4dfa-9ff0-3c25ef64c3ed",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1c7b6332-683f-4ccd-aac8-d7328cf5da72"
        },
        "item": {
          "id": "5b5d792a-0c0c-4372-9547-0b747d0a227c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fa1c422e-e87b-4f1c-b03e-aaa0fc3ad530",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2d830f-2853-4e45-98c0-a3f51acfb03b",
        "cursor": {
          "ref": "8a0f0b35-fbe3-40b2-812d-1295697aa322",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ce2305aa-edd3-4dbe-89d6-0973a0a591c8"
        },
        "item": {
          "id": "5c2d830f-2853-4e45-98c0-a3f51acfb03b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1a45b051-901c-4379-8866-e6dd30035e5d",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9293174-564e-4b74-9655-c500c3bf986e",
        "cursor": {
          "ref": "d0006c31-f23c-413f-bbfc-a85c90d8ebc4",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f64596cf-3a39-4031-a329-f1201ae00e96"
        },
        "item": {
          "id": "e9293174-564e-4b74-9655-c500c3bf986e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "784148b5-5f53-4baf-b808-3ae50ac3121b",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-20T00:34:11.468Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-20T00:34:11.468Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "129a6273-72c4-49b0-bcaa-9c51fea806ab",
        "cursor": {
          "ref": "5ae0f88e-efd7-47c3-afbb-77b1e9078bb9",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1adb0a25-8421-42e7-bc34-75998423e7c0"
        },
        "item": {
          "id": "129a6273-72c4-49b0-bcaa-9c51fea806ab",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a011d441-12d2-43f5-905c-97910f6ec577",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f48aae1-5724-4765-af56-d7a275f29d7b",
        "cursor": {
          "ref": "faccbf35-c241-4e05-831d-b3728e5b63a3",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bd40994a-5cc1-4461-94b0-0e19d9bb24cf"
        },
        "item": {
          "id": "8f48aae1-5724-4765-af56-d7a275f29d7b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "09d47152-c014-47ca-a098-b1163125b6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc79e48d-009f-44f3-81eb-88743c7a6d25",
        "cursor": {
          "ref": "db16f789-9809-45d0-884d-897579481ed9",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c06f8063-9a5d-41e8-b310-0bc32c44350e"
        },
        "item": {
          "id": "cc79e48d-009f-44f3-81eb-88743c7a6d25",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "84483ce1-76d0-4bc0-a836-26b3ed92224f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa624a13-19db-40ad-8fc4-5ece81cf2267",
        "cursor": {
          "ref": "1d4b8a5e-bd8c-4e2f-8f56-ad89c40cd810",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2adfe5bb-aceb-43be-8f09-28707e4c05ff"
        },
        "item": {
          "id": "fa624a13-19db-40ad-8fc4-5ece81cf2267",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "81cf0f6d-8f08-424d-82db-5aef883c7b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b0534a-37fe-4799-b343-bc1ac20fbc12",
        "cursor": {
          "ref": "7df5701f-7d38-4c23-a3f3-7122b1f7627b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5afa3226-3c8c-47a8-a45e-a6c201569168"
        },
        "item": {
          "id": "21b0534a-37fe-4799-b343-bc1ac20fbc12",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8beb92f4-e0f6-4fec-ad19-2e40b12ad2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383c6e77-c1df-457b-9b23-7852510bf743",
        "cursor": {
          "ref": "c5fdca6c-411d-4058-922c-d08fb072d55d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6e314f40-4d78-4223-9e23-37fe050df75a"
        },
        "item": {
          "id": "383c6e77-c1df-457b-9b23-7852510bf743",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3eb8bc48-05a3-4398-aa53-c32b0fde3d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03223e7-320e-418b-857e-ae00438da9d6",
        "cursor": {
          "ref": "b9a01385-99e7-4664-8075-98b582c0c78a",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4b295f5f-cd5f-412d-a8c8-8c8703091fed"
        },
        "item": {
          "id": "b03223e7-320e-418b-857e-ae00438da9d6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "61d01e03-fbe3-427d-b648-a5ae35d281ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf93a736-c5b9-4459-9527-f0abacd28665",
        "cursor": {
          "ref": "b8596752-76a6-4e32-ac4e-3a97bf5b8153",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0bb48b30-5daf-42f1-9fe3-ba695fa90bcc"
        },
        "item": {
          "id": "cf93a736-c5b9-4459-9527-f0abacd28665",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6920c2fe-4867-4a9e-bba8-5d23654be36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af615478-1cdb-47a3-8a7d-5fedefb13c65",
        "cursor": {
          "ref": "07361c7d-69ad-4620-a588-05c7460d5922",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e967a041-3b66-4775-9b37-d9753a6a4a0e"
        },
        "item": {
          "id": "af615478-1cdb-47a3-8a7d-5fedefb13c65",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "82c42b4f-cc71-4af7-b298-c46574bf1d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555512e8-425d-4f85-b7c2-1e307023c382",
        "cursor": {
          "ref": "f8916ce2-6730-4a04-b381-d2fe0c193cdc",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b0bb253e-f8a3-4b16-9ae4-b1cf6668686a"
        },
        "item": {
          "id": "555512e8-425d-4f85-b7c2-1e307023c382",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c2503750-8485-4d5f-9c85-72205a3dcf38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5956900c-f7d1-4bc2-ad4c-29b3eec56368",
        "cursor": {
          "ref": "52957629-a458-4c96-80af-06e782a4622e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9a28160b-5aa2-45e7-ad75-93d6e527ccf0"
        },
        "item": {
          "id": "5956900c-f7d1-4bc2-ad4c-29b3eec56368",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "33513100-5c7f-4c31-b167-6a39b913223a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16966fe-c4b2-442f-ae32-5b2daad5ce25",
        "cursor": {
          "ref": "dd271812-b3b1-4e78-b492-66b1eeaa3166",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "637fe5ee-a48a-4365-8894-7803aa164846"
        },
        "item": {
          "id": "e16966fe-c4b2-442f-ae32-5b2daad5ce25",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a84a12b3-7bd4-4435-8570-fe08a66a9429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d086f9-f677-4bfd-932f-f3551463117e",
        "cursor": {
          "ref": "51940517-652d-450b-8791-e933bac67507",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6de7beb5-cc63-4812-92af-78c860ecdd6c"
        },
        "item": {
          "id": "52d086f9-f677-4bfd-932f-f3551463117e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9eb60918-9090-43ad-9f91-101a9fda90a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e51799-476a-45eb-a49e-2371bacfd5d8",
        "cursor": {
          "ref": "69bb409a-35fa-4b18-97f1-87c58fb26085",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "22d5add3-dd2d-4d29-bf77-300d2d835826"
        },
        "item": {
          "id": "19e51799-476a-45eb-a49e-2371bacfd5d8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "87ccf225-9971-4458-bc30-b0478865a3b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "768c1cad-01db-4eb9-8b50-d140573d57ac",
        "cursor": {
          "ref": "94ae1317-2dd5-41a0-bb30-60a3d928d751",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9eae0af2-a8ee-4ad6-b2e2-cbffe8443d5f"
        },
        "item": {
          "id": "768c1cad-01db-4eb9-8b50-d140573d57ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7b55b040-1c23-4600-ad44-dfb51ab7492d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "85745757-2ed4-47e1-8df3-123b2142fa6a",
        "cursor": {
          "ref": "aa78447b-1085-4107-85e3-ef8223ef526c",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "70ac1b15-dca1-4d91-9f0e-9f1df54f1df4"
        },
        "item": {
          "id": "85745757-2ed4-47e1-8df3-123b2142fa6a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4aa97737-ea24-4479-a305-18fa958814dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd928ee-1833-415c-ae1c-dc40b36754c6",
        "cursor": {
          "ref": "262e9058-da45-4f40-8021-c5789cc83167",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6ed086e5-2613-4929-84ac-170a1daa9c4b"
        },
        "item": {
          "id": "9fd928ee-1833-415c-ae1c-dc40b36754c6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "87c8bd3f-cfc9-4014-8407-c7bf88bca427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6126661-50a3-45c8-8004-f8bd5c4f5b05",
        "cursor": {
          "ref": "294b3c8e-6ec3-4c2f-acc7-763273582e54",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5ca9ab68-2a48-47c6-bebf-5d9c5afb7dc7"
        },
        "item": {
          "id": "f6126661-50a3-45c8-8004-f8bd5c4f5b05",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "657c0bd6-82df-4f88-8f19-93972385bce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81261ac-b756-4775-8e0e-e13626cbc289",
        "cursor": {
          "ref": "bf7f6ce6-5230-4510-9fc5-98dcf57dddbd",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "64cfcf5f-8a20-4dd4-b651-b5a415529278"
        },
        "item": {
          "id": "d81261ac-b756-4775-8e0e-e13626cbc289",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4f08c7f4-16a0-4cca-86c5-38998b52e25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b8bd50-2b25-42ec-8f16-90131993fa92",
        "cursor": {
          "ref": "7d00fd06-255c-4fdc-a5e1-c2473600e3e6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "038361ee-558e-4d7e-99cd-d723c93c3efd"
        },
        "item": {
          "id": "70b8bd50-2b25-42ec-8f16-90131993fa92",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "844d5aba-ed90-4863-af3b-09f4c2de3315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e5c27f-b181-4926-8dbb-e0de648fe61e",
        "cursor": {
          "ref": "d640e58d-4c7e-46fd-b1e9-534afb44d1a6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c5fd9a78-f569-4c8a-95e6-2cb995414fb4"
        },
        "item": {
          "id": "11e5c27f-b181-4926-8dbb-e0de648fe61e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cabad2d1-de58-46d0-909f-baa92884707a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bca7970-a2f6-4bd3-98a9-ebaad7022adf",
        "cursor": {
          "ref": "6263fe97-499c-4af5-89d4-b41e1ff3a17a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c9e01fa6-71da-4ee2-9a83-081ea7bcf74f"
        },
        "item": {
          "id": "0bca7970-a2f6-4bd3-98a9-ebaad7022adf",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e50e5275-890f-4cf7-afd4-b0ed62b3dfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d9b7b3-2cf7-4281-9e18-22d21c25a45c",
        "cursor": {
          "ref": "cc0524e2-ecc0-41c9-bf61-ba88061ddea0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "babcd1e5-befa-4811-81c6-51407866ed2a"
        },
        "item": {
          "id": "75d9b7b3-2cf7-4281-9e18-22d21c25a45c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "77efcd8a-dde5-4068-99de-58593c3bb7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a143858-4dc8-4d87-95fc-722371527ad1",
        "cursor": {
          "ref": "64418db0-9839-456c-a604-473eb4dde07a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d9d0f211-120d-486e-bccf-c9a3a044e976"
        },
        "item": {
          "id": "2a143858-4dc8-4d87-95fc-722371527ad1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "41167314-3c12-4498-a457-af73d3e6ca38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d06a5c-5f9d-474d-ae89-9186ce2c9acf",
        "cursor": {
          "ref": "95e6e76b-df01-4f25-bec3-46f9d59298e3",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c027fc8e-cd04-453f-a8a4-be58bb595ded"
        },
        "item": {
          "id": "73d06a5c-5f9d-474d-ae89-9186ce2c9acf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c56153cf-9cad-4388-9170-234fba0fb843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0226167-8973-4a4d-8738-9043ce25ec0a",
        "cursor": {
          "ref": "2b6ee016-85e0-4a20-9229-88c5a883b760",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eff3de50-1114-4f1e-896c-29b46a36f44c"
        },
        "item": {
          "id": "a0226167-8973-4a4d-8738-9043ce25ec0a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3806e1b4-2e24-4a64-82bd-6f4255049417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e96d8dd-cd17-4d7a-bcf4-d066b3668cbd",
        "cursor": {
          "ref": "73b5c772-0b48-43d3-b5f4-65342d86eb60",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2333c417-ebde-4e8d-bb5b-5eccdd352f2f"
        },
        "item": {
          "id": "7e96d8dd-cd17-4d7a-bcf4-d066b3668cbd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "62b85be1-85af-4f0d-966b-fa36755348c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00394a7e-ecb3-4a24-be05-2057127e3469",
        "cursor": {
          "ref": "6a14750b-b0b6-4ce6-bd1d-2ad3edda31e2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b3705a3e-4ff3-4dca-801a-2e98cc0c7614"
        },
        "item": {
          "id": "00394a7e-ecb3-4a24-be05-2057127e3469",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a973981d-4723-4ee4-8d91-4f00d3ab3700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2da403-a466-407a-b588-113454dedd88",
        "cursor": {
          "ref": "312fba4c-3856-4647-83d0-d54007520622",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d913669c-9232-46fc-8a38-00937f736889"
        },
        "item": {
          "id": "7e2da403-a466-407a-b588-113454dedd88",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "488bea76-330c-4ffa-b65e-e96b8296552a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e992a54-961c-485d-90ac-a7558e245231",
        "cursor": {
          "ref": "14b0b095-efd2-44fd-a3c4-db6002819651",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66d7a38c-3f3d-4e69-ad29-ab563ddb6c7e"
        },
        "item": {
          "id": "6e992a54-961c-485d-90ac-a7558e245231",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9107f261-1cf2-41a1-8a08-6c098443548f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34771c7b-6c72-4990-bf4f-b45b36319af7",
        "cursor": {
          "ref": "722244ac-aa9e-4dbc-9d82-bc6c399c5893",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "929e6311-b103-49fe-ba4e-8d1bab353ea6"
        },
        "item": {
          "id": "34771c7b-6c72-4990-bf4f-b45b36319af7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b042f0fd-fbd0-4ef8-85d9-695a1a02cf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7024b5b4-5623-4729-90c4-cdd1c28f15bd",
        "cursor": {
          "ref": "88a78080-f8f0-40b4-a843-52fdaa0cc9ad",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0125de3c-00f7-45fd-a9f0-93d380eb77e9"
        },
        "item": {
          "id": "7024b5b4-5623-4729-90c4-cdd1c28f15bd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "868f5a10-9ab8-4d72-990d-9d5e49a824c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1ee32d-c3f3-4c59-9c6f-f52a2a259dba",
        "cursor": {
          "ref": "f9d180ed-2076-41de-90cb-5bb422f85aa1",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b6945c75-7d1e-4d21-be50-24c830dc1315"
        },
        "item": {
          "id": "fd1ee32d-c3f3-4c59-9c6f-f52a2a259dba",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a4c6f135-cd2b-41c5-8eaa-a0f1c4b3ed11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7ceaceb6-274d-4c06-b8db-655c0ace4d94",
        "cursor": {
          "ref": "a0b9b1b8-4736-4662-9407-192916679b32",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "be3a9f3d-db5c-4ba9-b432-ba3f00271718"
        },
        "item": {
          "id": "7ceaceb6-274d-4c06-b8db-655c0ace4d94",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "64310c5e-a0d9-4aee-a73c-747091e5ce6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0616f3c-1870-4936-8737-7e7459b3c567",
        "cursor": {
          "ref": "9f29451d-130c-4d35-a34c-ab89b00fbf6f",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "388b04b2-616c-40b2-b06b-da9bf4360624"
        },
        "item": {
          "id": "a0616f3c-1870-4936-8737-7e7459b3c567",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c7c9ff5f-e09d-42b9-b971-8222c003f527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecaa5290-1b7c-450a-b26e-4047157176cc",
        "cursor": {
          "ref": "10f007eb-5cab-479c-98cc-e62461387b90",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "85bc8175-0a69-416e-8d36-67f1f2ffa5f6"
        },
        "item": {
          "id": "ecaa5290-1b7c-450a-b26e-4047157176cc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7a4c9e6b-ab5d-4067-9095-3a973039fad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77edfb92-537d-4e66-aa8b-19952fec1440",
        "cursor": {
          "ref": "19d41019-619e-4296-99f4-4055cd9d7d03",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "956a50e0-31d4-45df-ae2b-5a48f73acd08"
        },
        "item": {
          "id": "77edfb92-537d-4e66-aa8b-19952fec1440",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad1ebf02-2675-4ca8-b514-544275d99b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7beea4-b8a1-4e50-b9f1-637ad4204aa3",
        "cursor": {
          "ref": "a241ffd8-0726-4aa7-93dc-51f372662c0f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ba4578ac-fda8-4c97-a595-06756252fd8d"
        },
        "item": {
          "id": "de7beea4-b8a1-4e50-b9f1-637ad4204aa3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4b171e8e-5f46-45c6-9a76-8a2fa060790e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6800a4c-5e7b-4d19-ac38-aa32fdc19dce",
        "cursor": {
          "ref": "eb0b1543-4f2a-441d-ac6e-9609817ea963",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "48253719-1761-45e6-828f-d0b127634e5f"
        },
        "item": {
          "id": "a6800a4c-5e7b-4d19-ac38-aa32fdc19dce",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a773ae58-bc3e-446a-a701-47e205a889a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227e7483-ddd5-407d-96d0-528e4744ee1f",
        "cursor": {
          "ref": "0f8ab4f4-0216-46dc-af52-bd3eb1661b5b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1a19ca6b-6873-4c12-9b0c-0e3510a9e078"
        },
        "item": {
          "id": "227e7483-ddd5-407d-96d0-528e4744ee1f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4abec32b-c296-4f53-96d6-18b92302617b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b7b993-1f3f-4a33-962d-0e534b9abce3",
        "cursor": {
          "ref": "f87d9b59-d62d-4b22-b2f0-8b2e65e1ccc9",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "56348ddf-62e4-4ac0-b545-24e69b182bb9"
        },
        "item": {
          "id": "51b7b993-1f3f-4a33-962d-0e534b9abce3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3d60bd92-326c-453e-ae76-aed749ef918d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cbc82e-426e-4e5b-b80f-1d420a4487c8",
        "cursor": {
          "ref": "0eb532fb-177f-4782-ac62-976c81d088bd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2f091a9d-5544-4794-a0a3-7aa8869ca64c"
        },
        "item": {
          "id": "07cbc82e-426e-4e5b-b80f-1d420a4487c8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "839d3d3e-8b95-490c-b8a7-c28acc634c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085bdfe7-423b-408c-b577-73c559f8e924",
        "cursor": {
          "ref": "df590119-cf69-4a1e-9b84-609f0ecd7244",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1b068ab2-6da9-4c30-96c8-e04e5b576cd1"
        },
        "item": {
          "id": "085bdfe7-423b-408c-b577-73c559f8e924",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "786da739-35e7-4216-8d58-adaf535297ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aeee912-4d24-446a-83cb-e00ac553808b",
        "cursor": {
          "ref": "dc0d60ed-87c4-4c94-a3eb-97c94b85da5d",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8590b45b-a133-47ad-94d6-00d711e8bf63"
        },
        "item": {
          "id": "4aeee912-4d24-446a-83cb-e00ac553808b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "70f5b97e-7304-4ec5-a9a7-8bea4fc1dec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3f38ff-f6c5-4932-9781-c24388109776",
        "cursor": {
          "ref": "d7270add-e14e-4240-a990-52e8c22a410d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f3df01f6-5a73-46a0-9d66-573a0e070cd2"
        },
        "item": {
          "id": "6a3f38ff-f6c5-4932-9781-c24388109776",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "13c1f45f-6dfc-4991-a523-198b7bf5a08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051d3ba4-8915-4d0b-b0f2-c31e1042e490",
        "cursor": {
          "ref": "7afb0e92-18b3-4118-855a-95ba3c4593fb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5d3e3647-9f2a-48b2-9dec-2cacd25ab426"
        },
        "item": {
          "id": "051d3ba4-8915-4d0b-b0f2-c31e1042e490",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d4ac61f6-2c15-4fab-992c-37676b036ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e71c33-750a-4c65-aa53-5b50b9b70fc0",
        "cursor": {
          "ref": "a0fecc17-0371-4053-955a-a43a844b827b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d2b5e6ee-dd62-431e-8f76-99d2238b755e"
        },
        "item": {
          "id": "13e71c33-750a-4c65-aa53-5b50b9b70fc0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4c806e66-a959-4d62-9461-d4613f65f1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41614d7-36ec-462c-b28c-f2fa647e479b",
        "cursor": {
          "ref": "c7a05d98-3738-463b-9772-bbf71453cf1a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9e76fa0e-f2b1-4ca7-9e8d-00dec9e2fb77"
        },
        "item": {
          "id": "b41614d7-36ec-462c-b28c-f2fa647e479b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d2eb10d0-de1c-406f-b725-ed564453252d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1bd9729f-734a-41ed-98b1-596b7b31dfce",
        "cursor": {
          "ref": "aa4e02b1-c5cf-4401-8ed0-2342993ad7a9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6b086eca-78f9-4a97-b3d7-8f5a8df38646"
        },
        "item": {
          "id": "1bd9729f-734a-41ed-98b1-596b7b31dfce",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f1180168-cf32-4150-9be3-92c51f121b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad384a5-77c7-4052-83ce-2c15203b84bb",
        "cursor": {
          "ref": "2eed6be3-c789-4c37-8210-cf759f4c1848",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "30810a8e-da5c-4d59-bba5-f96e26d54748"
        },
        "item": {
          "id": "0ad384a5-77c7-4052-83ce-2c15203b84bb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "034b1ca1-d364-48f9-9972-71cff63f0d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9221a43-a49b-4cc5-a45b-dbe6d5402046",
        "cursor": {
          "ref": "caddbb37-d41d-4e70-a789-d3a31d46e376",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd814a6f-2329-4ea7-a733-74713652645c"
        },
        "item": {
          "id": "f9221a43-a49b-4cc5-a45b-dbe6d5402046",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "79ba4223-a4d4-4b94-bbae-ed84baf7b5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2db97b2-174c-4952-a812-7e3a93058927",
        "cursor": {
          "ref": "1a088b5c-bda9-4ae1-b0ec-ab0cf88356a9",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ceb09334-a2bc-49bf-8dda-7f31420fb958"
        },
        "item": {
          "id": "a2db97b2-174c-4952-a812-7e3a93058927",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "363fa4b1-19ac-460a-9506-11c6589612ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45100c15-358e-445c-9ea9-8d4cb8f30281",
        "cursor": {
          "ref": "c0aa1d9e-5ce9-4ea6-aaa3-31e1667a9024",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "27521114-59ca-44f4-bef1-c0aaac0c7ed9"
        },
        "item": {
          "id": "45100c15-358e-445c-9ea9-8d4cb8f30281",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3f36583c-2d2e-4879-b4f9-c23d5ccac517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2234775a-a66c-43e6-b596-dc67b1ba4b16",
        "cursor": {
          "ref": "29339cc5-d893-40d1-942d-441cb3b9de23",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "eab1862b-bd93-4592-b8f3-63053e52f979"
        },
        "item": {
          "id": "2234775a-a66c-43e6-b596-dc67b1ba4b16",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e31e5c36-9ff0-475f-b4c8-467a42019cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41db324a-74f6-44c6-8a12-dee2fe64d520",
        "cursor": {
          "ref": "3e793779-81b6-4b9e-9040-3cc07b585bce",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fa89e80d-c06b-4702-a8e8-a75fcd0b20ed"
        },
        "item": {
          "id": "41db324a-74f6-44c6-8a12-dee2fe64d520",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "702fae64-563b-4695-98d8-d1a9ada66589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435b0639-bfde-4cba-9581-16a041fe53e9",
        "cursor": {
          "ref": "db7c4423-9b0c-4c55-acfc-eb150c2ff9f7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d6033637-ddb6-42d2-9bd6-522baba47cdf"
        },
        "item": {
          "id": "435b0639-bfde-4cba-9581-16a041fe53e9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1ca011d4-1fed-4e97-aa28-0c6545590471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de53893-c7fe-4b71-b44f-33ca9e44bf0f",
        "cursor": {
          "ref": "b7499304-8217-48bb-bfeb-67c102d4e87e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b0244129-d07e-4b4c-95e5-94fe4aa7bec4"
        },
        "item": {
          "id": "0de53893-c7fe-4b71-b44f-33ca9e44bf0f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b53ad1f9-34d6-4dc1-a7f1-cd443498aeff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad5c66b-a30d-4259-aa5f-2bb29767e454",
        "cursor": {
          "ref": "5a81600f-319f-4bc8-8028-c6816a8ce771",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "34a0800b-20f8-4735-8963-12f055b8337d"
        },
        "item": {
          "id": "dad5c66b-a30d-4259-aa5f-2bb29767e454",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fcd9d3fc-9ac2-4aea-bb0d-f87ec8915d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae93fd0a-b95e-43df-883d-6060b9a806bb",
        "cursor": {
          "ref": "74766c31-3717-4311-8261-7364b4c8353b",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "86dc75f8-5085-426c-89b6-22c8188c976d"
        },
        "item": {
          "id": "ae93fd0a-b95e-43df-883d-6060b9a806bb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a9949ef1-4752-4d4a-9b08-955a866897d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b6733b-a9cb-4f30-8b73-1bef132a3931",
        "cursor": {
          "ref": "b3e85773-b131-43d9-86c9-2dfddc857eb4",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d622303d-3c25-4c57-b767-8db22dd9390e"
        },
        "item": {
          "id": "60b6733b-a9cb-4f30-8b73-1bef132a3931",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "815c334d-e7bf-4595-988c-9ac19c9575e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8a2ae8-2f0f-439d-ae30-e24bc06a4017",
        "cursor": {
          "ref": "1224915b-c418-4d6f-a4a5-312dbcde685f",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "06e5e8fb-1fb8-4688-bc04-41dfc14c8549"
        },
        "item": {
          "id": "3d8a2ae8-2f0f-439d-ae30-e24bc06a4017",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c60aff3a-8be6-4cd6-a4e1-1cd678ae5189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c68369f-8027-4927-bf14-eea2d80ba3aa",
        "cursor": {
          "ref": "984838e1-1bbc-4bca-837b-dcca3b2b0c55",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "46c3d91c-4bb6-4aa6-b07c-6af0a39904e9"
        },
        "item": {
          "id": "5c68369f-8027-4927-bf14-eea2d80ba3aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cf5aad4b-c4d9-4aca-b3de-776994ad795c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0b8f17-d304-421d-b746-b5ded2842337",
        "cursor": {
          "ref": "68284d94-9350-47f4-a908-0223c04caa80",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9d26713b-3d25-4a90-a909-454de18f9d46"
        },
        "item": {
          "id": "7c0b8f17-d304-421d-b746-b5ded2842337",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dfededc5-cb69-4449-b53a-a95bdb9d53cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963b2f8d-e5b4-436c-8845-e3c838a15897",
        "cursor": {
          "ref": "f85900d0-5e12-4b94-9991-a8589a23bf7e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a0f74d46-4101-48fd-bf52-dcf7d56f9017"
        },
        "item": {
          "id": "963b2f8d-e5b4-436c-8845-e3c838a15897",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a735971a-872b-4395-9459-c75888d7c3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3583cc5d-4cae-4450-9148-b1ef446f06c7",
        "cursor": {
          "ref": "5731f53d-e2c8-4ac6-9151-3782ed7e8052",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "48584d6c-78a0-4ad9-976f-1864f6cb0489"
        },
        "item": {
          "id": "3583cc5d-4cae-4450-9148-b1ef446f06c7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "23e2c6b0-7ce4-4516-b15e-2a2739e814d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb42d7b-cd4d-47d1-b969-2fcb40317ef3",
        "cursor": {
          "ref": "23119a6e-0853-4bf5-9341-38e49cfdb3f9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3e23e705-0f32-40ab-9119-cb8c784ba127"
        },
        "item": {
          "id": "6cb42d7b-cd4d-47d1-b969-2fcb40317ef3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "86469d4c-77d0-4373-8d85-53abad2e2e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f25366-dc89-4bcb-8d6f-c041267e8de8",
        "cursor": {
          "ref": "379aa25c-02ae-4dd6-9a6a-f73536e7ba86",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8d49c887-d4d9-4ffe-a16e-9f039e3d5216"
        },
        "item": {
          "id": "b3f25366-dc89-4bcb-8d6f-c041267e8de8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "353eeb25-9e4a-45be-8cac-8b489fd221a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0c0daa-2d11-4c4c-b07c-4b2bcfa060d5",
        "cursor": {
          "ref": "0b20ffa0-2200-4713-9a61-b21f5e23a3bd",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bdedf79b-7dd2-409e-93bc-6d28d63b6472"
        },
        "item": {
          "id": "cb0c0daa-2d11-4c4c-b07c-4b2bcfa060d5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fcbb6705-d520-418c-a554-86ee06bed5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ada721-a974-4e71-a6eb-1e17adf25c00",
        "cursor": {
          "ref": "309b5436-7ec9-4c7e-b297-0ec933df1188",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a76929c0-0867-4bbf-a8dc-60fb706c707a"
        },
        "item": {
          "id": "40ada721-a974-4e71-a6eb-1e17adf25c00",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "cdc588d7-4756-42cd-bc12-140dccfb250e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692d9dd2-212e-4bd9-be37-18013f2f0bf6",
        "cursor": {
          "ref": "c4c4e353-8b7e-45ce-aa1b-679406bee8fb",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a83f5065-d750-4d41-94ad-ce73b0ca9829"
        },
        "item": {
          "id": "692d9dd2-212e-4bd9-be37-18013f2f0bf6",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "192c9376-8b1e-4b18-bb94-5a64824a4fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ca7c77-1797-4e07-9496-d3d8e0590697",
        "cursor": {
          "ref": "9844cc62-13ce-434d-a84d-6132c30bd873",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7eed8831-79a4-4c13-91a5-ad6923f3c165"
        },
        "item": {
          "id": "67ca7c77-1797-4e07-9496-d3d8e0590697",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a6ec7f8e-5743-4bba-be42-e56e7e11010f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973b98cb-4285-473d-b661-cb0a061b1617",
        "cursor": {
          "ref": "7d5cca31-44ff-4583-9876-bdbcffcdae77",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c2fc5d13-af24-4720-9656-29efaa7d5ec0"
        },
        "item": {
          "id": "973b98cb-4285-473d-b661-cb0a061b1617",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8d0a301a-1cfc-403b-ab35-3734c148c521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ca7c91-6a8f-4f17-93eb-db430aff98f5",
        "cursor": {
          "ref": "5b25bce5-174f-41fc-b8af-2daaf5389b20",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9bc44c8f-e748-4f1e-9380-68e1cf84adf2"
        },
        "item": {
          "id": "a7ca7c91-6a8f-4f17-93eb-db430aff98f5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d36fc4f2-76bd-49fd-b191-6f9a64a9d3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203aee64-98dc-4715-b5e0-482c65152586",
        "cursor": {
          "ref": "b1a4c797-3c62-438c-84da-6db3c8c8ab12",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "60c5dfee-7316-4703-8a1a-71f501a2ae9d"
        },
        "item": {
          "id": "203aee64-98dc-4715-b5e0-482c65152586",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "75ebfa81-b16a-47bf-8807-1324f8e9ddfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1d0dfa-506e-4513-a8cc-de3512b8aa06",
        "cursor": {
          "ref": "9637f89d-48b1-4dec-8531-26765f326ad0",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b54dcdb8-b07c-4891-bb4e-e9ff51843362"
        },
        "item": {
          "id": "4c1d0dfa-506e-4513-a8cc-de3512b8aa06",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4966e2f5-01f4-4511-a1a0-4223bb6f76fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11373c9-08e0-4ee7-a584-741118c504c3",
        "cursor": {
          "ref": "27cd4458-04f2-417f-8c29-9fca22eb55ae",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "aa876e94-b61b-4f1b-8dad-c508eac6ced8"
        },
        "item": {
          "id": "c11373c9-08e0-4ee7-a584-741118c504c3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dc8fef54-e458-48ba-b389-cd676733d6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd13dd33-fb80-45ac-9a6f-3f43f1aa5f3e",
        "cursor": {
          "ref": "89a0d41a-e545-4c0a-bbb9-e97fef128c24",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "afd02664-4661-4cff-ab60-045f6ee2e747"
        },
        "item": {
          "id": "dd13dd33-fb80-45ac-9a6f-3f43f1aa5f3e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0a7afaf5-3724-4f44-9aae-f61014d14041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f67be5d-2631-4ef8-afc5-481290dcdb52",
        "cursor": {
          "ref": "7fcdf88b-23e4-4670-9971-699008d7f686",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "13709595-34a4-464c-9107-28e66f79dfc8"
        },
        "item": {
          "id": "4f67be5d-2631-4ef8-afc5-481290dcdb52",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "eeb2545b-76de-4bfb-bca3-2d87189b1ebf",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "07d38b29-7f89-4b4f-afaa-45b61105c9fd",
        "cursor": {
          "ref": "edfb6fbd-a09a-472c-8c83-c423dcff591c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7c632440-3090-4520-bde9-cd448923cbd7"
        },
        "item": {
          "id": "07d38b29-7f89-4b4f-afaa-45b61105c9fd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1672e5c0-392e-4377-8d06-2802720b7a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1881b7de-dc7b-44c7-9d68-abb240aa9aec",
        "cursor": {
          "ref": "c3c123d9-819a-4464-9236-5da77296767d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c087533e-641a-4a3a-8e7c-562656429a14"
        },
        "item": {
          "id": "1881b7de-dc7b-44c7-9d68-abb240aa9aec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fd24cfef-d8a1-4ced-a6a6-cda0033699f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a81f06f-01ac-4457-8bb1-02ef280ce8c8",
        "cursor": {
          "ref": "29b54812-f51c-4319-a258-e32edacfb95a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "36d2998b-e3f9-4d0f-bda9-345f041fb1b8"
        },
        "item": {
          "id": "0a81f06f-01ac-4457-8bb1-02ef280ce8c8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "38163d02-d358-4601-b8b4-c942ac12d46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc535960-c95a-46de-b200-7b5ec6dc9fd4",
        "cursor": {
          "ref": "76b7dc5b-0e03-447e-9867-948791c9744f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6101e048-78f7-485c-829a-48ef4f2110cb"
        },
        "item": {
          "id": "dc535960-c95a-46de-b200-7b5ec6dc9fd4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6781f9cd-4fe0-4bda-899a-2d52cac2f604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41290dfa-bdc6-4fd6-ac77-27342eb658dd",
        "cursor": {
          "ref": "6afd3218-2b3e-4812-9eee-6bedfdd1996c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9bec29e5-d620-4d38-a5c1-d885ece00a42"
        },
        "item": {
          "id": "41290dfa-bdc6-4fd6-ac77-27342eb658dd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9e820ecc-c671-41ca-9aca-d67bcc74851b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6098cca-a263-4473-aa11-865f2da7238d",
        "cursor": {
          "ref": "1d81a5a9-46ff-40de-94d6-c8a3fef07668",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "10357ae8-79d7-4596-8038-21ee702c7c16"
        },
        "item": {
          "id": "f6098cca-a263-4473-aa11-865f2da7238d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7594a285-3a27-43e7-b64d-59e054e6f3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c68fb50-161f-45cb-ac27-6dcb6e07a42a",
        "cursor": {
          "ref": "4f57c9c3-85bb-4f86-a0f4-13e28173ce47",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ff8cfe82-115a-4d2f-b7de-0e742032184d"
        },
        "item": {
          "id": "1c68fb50-161f-45cb-ac27-6dcb6e07a42a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9957e1cd-f684-4cf9-960f-1e4ab02c9e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4755f42b-7b4c-48de-b99a-41434e92c27d",
        "cursor": {
          "ref": "a6f03b80-b5fa-49e9-acd1-438c503b2299",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1436b9a8-be02-4d9b-baeb-10bc6e37bc49"
        },
        "item": {
          "id": "4755f42b-7b4c-48de-b99a-41434e92c27d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fb451d4c-d70d-4c20-98d2-672f0eb31045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdbcf417-4c94-4c80-8849-cf55fc2b0695",
        "cursor": {
          "ref": "2978a5a6-2061-4caf-bc9f-525af4e6f0ab",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "05f95bbb-7799-43dd-9302-ba247853a3e6"
        },
        "item": {
          "id": "cdbcf417-4c94-4c80-8849-cf55fc2b0695",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7d2be1cb-c16a-4441-9eda-e228784b9516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc6851b-152c-4add-ba88-8f9a99c52ae2",
        "cursor": {
          "ref": "5a84d568-0a66-40fe-a460-35d8b4a60352",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8f27bc23-063c-4e24-a4d9-822e1acd3260"
        },
        "item": {
          "id": "fbc6851b-152c-4add-ba88-8f9a99c52ae2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "88fc120a-70b6-4a11-b0b7-813d90c8f0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c0bf18-9dc7-49ef-9053-4853411369f1",
        "cursor": {
          "ref": "0c700658-7104-4ccd-a36c-db62bdf464ae",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "21ce2dfd-e8fd-476d-b59c-dfc04e170efe"
        },
        "item": {
          "id": "68c0bf18-9dc7-49ef-9053-4853411369f1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c98e398f-1eb6-46f4-be88-cd4732e31d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94615454-1e34-4db9-9a9f-e03cbd8d350a",
        "cursor": {
          "ref": "0b6b1b33-68a4-4738-b74b-f6be409435f7",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d27977b4-c12f-4944-8050-c3e48eee6f36"
        },
        "item": {
          "id": "94615454-1e34-4db9-9a9f-e03cbd8d350a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38543a8f-7d37-4f17-b2f2-d06019e4539a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc48d94-57ae-4845-aae4-0a087b547358",
        "cursor": {
          "ref": "d2d0ed1c-f559-4668-8daa-38a19a3b0743",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "db41b6a4-8fca-41bd-a497-d71b76915e1c"
        },
        "item": {
          "id": "0fc48d94-57ae-4845-aae4-0a087b547358",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "de3c6726-9dc8-44c6-89c0-5d71c33db043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6576bd5-d8fd-4e9f-87c2-8dc6b3220839",
        "cursor": {
          "ref": "181f5a18-e756-490a-8f90-02deba9478b7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8c365a99-ad7a-46c9-ba9c-f715cf72a3c1"
        },
        "item": {
          "id": "d6576bd5-d8fd-4e9f-87c2-8dc6b3220839",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "71f25285-fd19-4138-986b-86ef20704851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628825c2-ae33-41ab-b14d-f3cdaeab9366",
        "cursor": {
          "ref": "fe1980dc-5310-43bb-a3d7-b88af75628e3",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c94ab4cf-a510-495f-bff6-ceef8e3883fd"
        },
        "item": {
          "id": "628825c2-ae33-41ab-b14d-f3cdaeab9366",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "97eb0418-1ab6-43ef-90c8-8e8241aa2a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74ed2c4-60d9-416e-8018-3834de7d5631",
        "cursor": {
          "ref": "5b76658f-eb72-4ad8-a9d3-f018166d6c2b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "72b5d6d6-9c80-433c-aafd-817b7b3ccfaa"
        },
        "item": {
          "id": "d74ed2c4-60d9-416e-8018-3834de7d5631",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7db7aa36-f7ed-4ac0-9069-3cb39a898392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930944e0-9f60-4696-8156-a98d22f8266f",
        "cursor": {
          "ref": "a8f6cadc-5f7c-4cc6-b9b7-dc9a5361db58",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cd2dfa4d-bedf-4f36-b6c9-37b79de54e81"
        },
        "item": {
          "id": "930944e0-9f60-4696-8156-a98d22f8266f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e5d8f972-f3df-43f5-834d-08304948455c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f1e0fe-efa6-425c-86a2-818b26a6c9ae",
        "cursor": {
          "ref": "ebf608fc-d75a-4f58-a0df-3f5e65f92dda",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "75c8b9c8-2cbe-4ce3-b81d-e59abfef62a8"
        },
        "item": {
          "id": "f0f1e0fe-efa6-425c-86a2-818b26a6c9ae",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d65e5a47-a7f4-4600-a0b4-2cba5f8b8993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a87d928-7bbe-402a-b3a0-b6daba387225",
        "cursor": {
          "ref": "c8c61270-5c66-4c4c-9e88-acf924ef27f4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f14bcb7e-23e7-433a-9a1a-99259b6353ae"
        },
        "item": {
          "id": "1a87d928-7bbe-402a-b3a0-b6daba387225",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b034b869-bc31-46c6-a101-5f595960b062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c435749e-476e-49bf-b3dd-4cb7199939ca",
        "cursor": {
          "ref": "658b5f81-c228-45fb-a13a-34fddc93da57",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b80d6cbc-63ee-4192-9e59-b76b6fa3d0fd"
        },
        "item": {
          "id": "c435749e-476e-49bf-b3dd-4cb7199939ca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "17a271cf-33fb-4742-9a6a-154542b6437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fb1565-dc56-40cf-91da-f5c89ff56281",
        "cursor": {
          "ref": "2e83e694-9393-4630-9dcf-42461ac7a417",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8ae48233-24ba-4378-a977-d0c96a917275"
        },
        "item": {
          "id": "14fb1565-dc56-40cf-91da-f5c89ff56281",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3861cf8e-95a4-4e5f-a634-cb91557f0460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811ac3e2-2b8f-451f-b5ad-00836cfcd6d1",
        "cursor": {
          "ref": "d54471ab-7049-4dce-b8fa-f928ef811ec5",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "536fcc1d-3f3f-4177-9ec2-0cb84729afe5"
        },
        "item": {
          "id": "811ac3e2-2b8f-451f-b5ad-00836cfcd6d1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9aead9b8-61b8-4129-98b3-edaa0fe9749a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5156f9d0-0c1f-4dfb-a99b-556bd9d61ef0",
        "cursor": {
          "ref": "ebcd1697-efcd-44f5-9dfe-0b5c6c843a34",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "001c0a6f-feab-45ff-9865-5176d0cc78d7"
        },
        "item": {
          "id": "5156f9d0-0c1f-4dfb-a99b-556bd9d61ef0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "422f484c-5f24-4041-bf93-62f0e82bb46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3ce39d-661a-4476-b269-8991800ff101",
        "cursor": {
          "ref": "8c9d5d5d-dd0a-4a89-9dda-7161fe6ed20b",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6397b571-446c-41b3-8558-0ccd9353b766"
        },
        "item": {
          "id": "5d3ce39d-661a-4476-b269-8991800ff101",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f32dba41-c5ec-4cba-86f6-248c79a67d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79941bc-c04a-44a4-9921-c2bbee791fd1",
        "cursor": {
          "ref": "2ad59bec-98d3-49a9-9ffd-7c1c3daa1d6b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d6444288-76a8-4a53-894a-c4985d7c2c58"
        },
        "item": {
          "id": "b79941bc-c04a-44a4-9921-c2bbee791fd1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "45a26081-ae24-4fc4-8ba9-a9fb94345f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddf9bec-235a-462b-b230-b8265d468bac",
        "cursor": {
          "ref": "e8a46027-116e-4974-9179-a2815dac3b68",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6fee1d49-0a7e-4845-b54b-736be1f73901"
        },
        "item": {
          "id": "bddf9bec-235a-462b-b230-b8265d468bac",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "00e97b51-a813-43a2-8fa5-1c5e71c0a527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158390df-f94d-4c47-9658-fd3e64f0c918",
        "cursor": {
          "ref": "3609e1ad-cc1b-401e-b6ef-3a2cd9452e60",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "fd9178fb-fde3-46d5-b98a-5a59205248b5"
        },
        "item": {
          "id": "158390df-f94d-4c47-9658-fd3e64f0c918",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "2407c4fd-8d2f-40bb-8791-f81188a6fe4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cf371b-73e4-414f-b413-f858be8ef1a8",
        "cursor": {
          "ref": "d916f158-caea-45d7-8357-44da092bb708",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a499a9a5-f326-49a6-ac85-086636c18946"
        },
        "item": {
          "id": "06cf371b-73e4-414f-b413-f858be8ef1a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1d1b218e-0218-48f0-b128-cffbe5296565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544afba4-9a27-4865-b8dd-dce470e42d06",
        "cursor": {
          "ref": "071ff135-4021-4d18-b801-f69e8f0ae601",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "742e2c5e-7b56-4168-94fa-563c2edd953e"
        },
        "item": {
          "id": "544afba4-9a27-4865-b8dd-dce470e42d06",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2da791c1-22b0-4c8b-b405-958c267de4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de8afc2-e578-4fe1-b0c0-1b2fa220596a",
        "cursor": {
          "ref": "e52ba8d0-b826-4eaf-8899-7edd1274a106",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9c9e5424-21f1-437e-966b-100ffa9b9a31"
        },
        "item": {
          "id": "2de8afc2-e578-4fe1-b0c0-1b2fa220596a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9ed9e993-acab-4f54-8dc8-b9e02c8144c4",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8afd5158-6336-422c-96ad-506f57b24787",
        "cursor": {
          "ref": "52273dca-88d9-4918-8c1c-ce4c4abb4924",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8a47751e-88ad-4d36-bb25-0b59949c10ae"
        },
        "item": {
          "id": "8afd5158-6336-422c-96ad-506f57b24787",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0f8b55b9-d91b-4fd5-b045-e9906015a36f",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "56fb98ab-9c06-44d3-a71b-7bc1dedac284",
        "cursor": {
          "ref": "417db0d2-8a06-443d-8863-f030cf8e7247",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8e076e65-fedf-4062-adee-aee5b48733cd"
        },
        "item": {
          "id": "56fb98ab-9c06-44d3-a71b-7bc1dedac284",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6512ac60-494c-4726-93f3-705e74db3903",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2154b84f-42f6-4b85-a477-65ade7d1c748",
        "cursor": {
          "ref": "b40642f7-4c6f-425c-a1a7-e21a4ee285d1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6fcb7747-4f6b-4cd8-9930-c450a29b9c23"
        },
        "item": {
          "id": "2154b84f-42f6-4b85-a477-65ade7d1c748",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a6cabfd7-2b45-4372-8c46-daca6f51a442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f37aa22-dead-428d-9ce9-4ff960ada80e",
        "cursor": {
          "ref": "fc3ad306-e695-42e4-aa6f-aa130aebf790",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b0727f43-3a36-455b-b943-e2c34c963b89"
        },
        "item": {
          "id": "5f37aa22-dead-428d-9ce9-4ff960ada80e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d6ba34d8-9665-42be-87b7-87093bd9815f",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4c1943d7-7e97-4e94-a280-ff85841c2027",
        "cursor": {
          "ref": "286ee0e6-ad9f-4fee-96ba-3a78a06439bb",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dcb85e19-dcf6-4d10-8a6f-4e60ff78c589"
        },
        "item": {
          "id": "4c1943d7-7e97-4e94-a280-ff85841c2027",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dc930c03-46c7-40f9-93bb-875163e55858",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8f24b871-4806-4bdf-a585-b7eb04d0feb0",
        "cursor": {
          "ref": "be9a9e83-fa91-42a1-9fc3-9a97eeaad2bb",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f28ca90d-a2b6-43d2-8532-738ea5cb5464"
        },
        "item": {
          "id": "8f24b871-4806-4bdf-a585-b7eb04d0feb0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4dd7c138-fd9f-4484-98e7-952a9f8434ed",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "db00114f-b058-4522-b67e-1a2becc143ab",
        "cursor": {
          "ref": "6a18b79c-dee3-4b3c-b40c-53152e1c3742",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "716ab913-1c90-4528-bdc9-76a2e27c84b1"
        },
        "item": {
          "id": "db00114f-b058-4522-b67e-1a2becc143ab",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b722055c-1c9b-4352-971d-0c47192d35bc",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "26a8ace9-b7ae-4c2d-b21c-3515f64da601",
        "cursor": {
          "ref": "3dcb139a-9bdf-4bbc-8cd8-8c631dfa9b92",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9f2824b3-2605-4e37-801e-f27f76c1fb5d"
        },
        "item": {
          "id": "26a8ace9-b7ae-4c2d-b21c-3515f64da601",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8f99f276-9118-4458-a1bf-e0424ba740ae",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dd260c1b-33b3-486c-82e1-4be3ecfc04e8",
        "cursor": {
          "ref": "9dd66393-aee3-494b-9075-09240c910c34",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b143a11b-abd8-41fc-be55-aec180caab37"
        },
        "item": {
          "id": "dd260c1b-33b3-486c-82e1-4be3ecfc04e8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f225176a-5661-4481-8f0f-33157daf4ebf",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9aac1be0-323f-41f1-8c55-4f9189cde9b7",
        "cursor": {
          "ref": "788c06df-190f-422d-8a50-d79f5862fcb8",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7836e89f-f19d-4f96-8d4e-8617a7b5c302"
        },
        "item": {
          "id": "9aac1be0-323f-41f1-8c55-4f9189cde9b7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f645f190-baf1-4678-96c6-bf44223010d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af90bd7-1772-4f23-991d-33f5e5dbf1cd",
        "cursor": {
          "ref": "486403f2-a822-46c6-94b1-dcfe8f777fa3",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fc8521eb-5d7a-4098-9a0b-f27fde96762b"
        },
        "item": {
          "id": "8af90bd7-1772-4f23-991d-33f5e5dbf1cd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b64ec0c5-2703-49ae-99e7-db43c0d3a138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbba95e4-7a18-462e-bd7b-79f3cc7110cd",
        "cursor": {
          "ref": "0f37ad3f-d38a-4547-acc8-283cdf78a148",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "412062cf-2eb5-41da-bad0-9017d04888b5"
        },
        "item": {
          "id": "fbba95e4-7a18-462e-bd7b-79f3cc7110cd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "19a8a0f8-eb88-4793-865a-a67ed14611c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1e3d25-1118-403f-b89f-ffd5f862cacf",
        "cursor": {
          "ref": "185e4c7a-2b2b-46f5-86c4-8370bdb57064",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "49b23fe7-eb6d-4110-8c0d-02583b2ecaae"
        },
        "item": {
          "id": "9f1e3d25-1118-403f-b89f-ffd5f862cacf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f1937675-793e-4764-a73b-a21cce326ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d60e0fa-d182-47df-a774-14c458bdc753",
        "cursor": {
          "ref": "be9fa033-1c9f-4688-8eaf-7423ca63102f",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "644939aa-cf5c-4cdc-b4da-1e1e65e74054"
        },
        "item": {
          "id": "4d60e0fa-d182-47df-a774-14c458bdc753",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3f700aa3-8cde-4673-8476-1191f325f4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442a050a-922c-4093-97be-de0cadea802f",
        "cursor": {
          "ref": "f315d798-f932-4c7d-be67-458e366dbab1",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "20104daa-a4a8-4997-9b12-117c0f39fa24"
        },
        "item": {
          "id": "442a050a-922c-4093-97be-de0cadea802f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f2806d74-8883-4236-ba96-d0a924420ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552f825c-c8ce-4db6-8dd9-b597c761c498",
        "cursor": {
          "ref": "5a91c919-9995-4156-8693-f141032e77e9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "579a8842-f1f2-4509-86b5-cd7981667502"
        },
        "item": {
          "id": "552f825c-c8ce-4db6-8dd9-b597c761c498",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "09bb7789-07df-4799-9969-ea3ba0b3c38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9bf261-c369-44f1-8756-71e09547a3ed",
        "cursor": {
          "ref": "ab10d68a-a2b3-4485-9c39-b8b367e592ab",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "49df90fe-52f5-4010-aeed-e8e7b2045ea7"
        },
        "item": {
          "id": "7c9bf261-c369-44f1-8756-71e09547a3ed",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "848eeb51-9ef3-4a7b-a774-b5369b201e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7215e1a0-68ba-410a-8eca-1e11aac9ab63",
        "cursor": {
          "ref": "9df2634a-4724-4ae3-82f2-743a7def5ec8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "480c277b-289d-47c4-a34c-27081efb6b33"
        },
        "item": {
          "id": "7215e1a0-68ba-410a-8eca-1e11aac9ab63",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fa1cf6f0-83fe-44ef-b9f6-0f38b986a463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f0e605-39be-4a9d-a6e7-2bab2a19da24",
        "cursor": {
          "ref": "c1169eaa-4708-44ac-a3a3-59ce4e4552db",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "300e596c-819e-407c-8423-93e32d3f93fe"
        },
        "item": {
          "id": "f7f0e605-39be-4a9d-a6e7-2bab2a19da24",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "169108ad-c7ee-409b-9773-6ff1b7377e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c18eb95-dd29-4c45-a533-da4321ca5940",
        "cursor": {
          "ref": "a4a9d743-e519-4ac5-b114-5ed195888dd1",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8f7260e7-38a3-4899-8af0-d100a2604990"
        },
        "item": {
          "id": "7c18eb95-dd29-4c45-a533-da4321ca5940",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d456d70a-6254-498e-80b6-37b0733c6421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0f901a-4cb2-4e23-bd1d-b6da8dac281a",
        "cursor": {
          "ref": "f3d30a13-27bd-4113-871d-f6c9cb385ec6",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1caead8f-9c4a-4733-9197-38a47fab5502"
        },
        "item": {
          "id": "ac0f901a-4cb2-4e23-bd1d-b6da8dac281a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "da1d409d-87cd-4fba-b023-b9259a9ed8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622d0ead-949d-4c18-8a0c-67bd02adaecb",
        "cursor": {
          "ref": "c4a25691-7537-4f5f-be05-3ae6733bf659",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "66437cc9-3813-48b3-b648-cdd7af7079de"
        },
        "item": {
          "id": "622d0ead-949d-4c18-8a0c-67bd02adaecb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8f07658a-058d-4bec-b2ae-b8cc0027d253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751ec1df-ab7a-4b64-95a2-4fe00e50ee8b",
        "cursor": {
          "ref": "7dcdbfac-e23d-4174-900f-490804d19155",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3481c2b0-dd23-4dc1-a94e-a24b18dd79e0"
        },
        "item": {
          "id": "751ec1df-ab7a-4b64-95a2-4fe00e50ee8b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "56a9499a-5e46-4386-91bd-023c0abea561",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b154e3c7-7eb0-4822-837e-422de40dcbd8",
        "cursor": {
          "ref": "f563c9b4-b063-4a93-911a-cca6771bf923",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "13664ecb-cc9e-4ca7-9174-4ae59b2b796a"
        },
        "item": {
          "id": "b154e3c7-7eb0-4822-837e-422de40dcbd8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c55ac9df-010a-4e6b-965b-0bd48de7db19",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "18adc34b-c765-480f-8964-cf8ee3432f46",
        "cursor": {
          "ref": "5fef0c79-bce2-491c-92f2-d24483f2447a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b6e8ae14-3266-4093-8f77-c86cf76c1c22"
        },
        "item": {
          "id": "18adc34b-c765-480f-8964-cf8ee3432f46",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "31f62e61-87cf-4125-82fc-822513dca0d0",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3bbbda86-d730-4297-8dfa-94f229a63784",
        "cursor": {
          "ref": "698fa7fb-214e-4f0e-bd83-09c176374c5d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5943a2a7-82cd-4f60-9cc2-07fc1377ffd1"
        },
        "item": {
          "id": "3bbbda86-d730-4297-8dfa-94f229a63784",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "433e9ac0-be4b-48cb-9bb0-8f0d44ddc233",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8a052b4a-fa19-4930-8c12-736d2222f7f3",
        "cursor": {
          "ref": "4da1c239-c6be-4655-8960-5b1dfc663af8",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cdd9ae1e-764d-4c0b-8da4-32626f32f329"
        },
        "item": {
          "id": "8a052b4a-fa19-4930-8c12-736d2222f7f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e2cb256d-15ef-4de0-a40f-dfa1c7ca3f89",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4b61a179-c5a7-44e0-b264-3ac16f5e9c13",
        "cursor": {
          "ref": "3cef8c21-a099-4f14-8932-c0fcc2bd0334",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9bb888a6-eee5-4c26-bb6e-b9322d1ca609"
        },
        "item": {
          "id": "4b61a179-c5a7-44e0-b264-3ac16f5e9c13",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c8d5db0c-3a26-485e-bef3-67429fae1ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf44cd5-8123-45e2-84ec-d06bc3d35ad2",
        "cursor": {
          "ref": "438dd329-b05a-4325-b13d-129035f48b23",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "79dc3ae3-1da8-4789-ace4-a48a0c779f7d"
        },
        "item": {
          "id": "fcf44cd5-8123-45e2-84ec-d06bc3d35ad2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a3cca72c-29c1-4733-a14e-c0ed99b44c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7575b3-e2f4-493b-831c-dee5ed8f38ec",
        "cursor": {
          "ref": "817d4cf6-386c-436f-ab1b-230c9aed5dd1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4b8d0d39-5f3a-46f7-b3f0-af1fb06eb654"
        },
        "item": {
          "id": "ab7575b3-e2f4-493b-831c-dee5ed8f38ec",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ad165691-f026-4c7e-81c9-063c0ed5f83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0530024-a4c3-4493-a63d-145d6e8ff157",
        "cursor": {
          "ref": "ac79357f-bf8c-48b4-ad42-98fe9a41bff3",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3af681d9-e148-4c63-87dd-ad4049b16078"
        },
        "item": {
          "id": "e0530024-a4c3-4493-a63d-145d6e8ff157",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bb3257ae-09a5-4350-a35e-fc32709d1e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e70bc53-5cc1-415d-a414-655a28f31663",
        "cursor": {
          "ref": "55a05978-6b2b-4988-953b-44a79c240c23",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f1ee9d7e-04b4-4ab7-8303-3fb796b28e0f"
        },
        "item": {
          "id": "6e70bc53-5cc1-415d-a414-655a28f31663",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "556a69e9-d2f5-498e-9812-9848a752fcfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8feee1e8-f3d6-4676-b7f2-888d4080ee97",
        "cursor": {
          "ref": "ba65493b-d25b-4254-aeff-ac40b8f1f153",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bffc2584-3d08-485d-8080-363da2a2441a"
        },
        "item": {
          "id": "8feee1e8-f3d6-4676-b7f2-888d4080ee97",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a5054ee5-3c11-4f4f-a6d2-fcf0a8acec7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c980905-befc-4ee6-b55e-a694fa3e8da6",
        "cursor": {
          "ref": "ee75d641-c1ca-4de2-af7b-e9d910413c4c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d8668e48-9b54-4e56-88ee-887b645b2a9e"
        },
        "item": {
          "id": "4c980905-befc-4ee6-b55e-a694fa3e8da6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "199579e3-efc6-4c35-bfb4-774e535db9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26d1a64-d566-44b9-860c-43a55f6bef24",
        "cursor": {
          "ref": "51a8102d-c1a5-4f1a-817c-3b6f2c3ddcbd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "221390a7-46e6-473d-9d8b-8221e9253d96"
        },
        "item": {
          "id": "a26d1a64-d566-44b9-860c-43a55f6bef24",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0582f385-d033-4373-86d3-fa93cc8c2c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc35bc1a-bce6-44ef-b2e9-d59659478083",
        "cursor": {
          "ref": "c052a5e4-04dd-4796-b6cb-b0b7d6732d50",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "68a8fe39-a0fc-4820-9da5-1db8dbe59f37"
        },
        "item": {
          "id": "bc35bc1a-bce6-44ef-b2e9-d59659478083",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "62a14589-ef35-40ee-84a3-969a8b8bdf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fad85d-c860-4830-90f7-21976608cdd4",
        "cursor": {
          "ref": "9d48a721-c06a-4918-aa04-36a3396bf9c2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "902fbf81-bc86-44a6-88b4-3f8e92bdc50b"
        },
        "item": {
          "id": "d1fad85d-c860-4830-90f7-21976608cdd4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1d1e40b4-6030-44ad-a1c3-23f62f47a050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a934dbd0-f372-4a05-b320-94f2a08cfb13",
        "cursor": {
          "ref": "84bbe4f2-3eb9-404c-97fd-0f714cee6a1c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1a50bd29-d48a-42f8-9dbc-f7a052df9ff9"
        },
        "item": {
          "id": "a934dbd0-f372-4a05-b320-94f2a08cfb13",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "750d36e4-0a24-466d-85c5-117034567144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a20d273-0eb3-4e53-aaf8-c21291edc7b7",
        "cursor": {
          "ref": "1195b687-db16-4c0e-9e33-2bec622675a9",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ffbb75bb-eb1f-46f9-b644-ac948c666ba5"
        },
        "item": {
          "id": "8a20d273-0eb3-4e53-aaf8-c21291edc7b7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "127d8d07-56e3-45d3-86df-013d8554fd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7f981c-4b2a-4a11-b42d-bb4940d06b8c",
        "cursor": {
          "ref": "5176b009-1deb-4f6f-a12b-1e3eb8262ec0",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "edee1bb4-605f-4aae-bb2b-3502b794404a"
        },
        "item": {
          "id": "4d7f981c-4b2a-4a11-b42d-bb4940d06b8c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ba9e3916-2069-4882-9c8c-74a1607c7fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc137c17-d48f-492d-8775-6b24edf8906a",
        "cursor": {
          "ref": "00d8781e-6cf5-4b45-9c41-d3d4eebfa120",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ca3ae553-f2d2-41c9-8359-b8322505d4e8"
        },
        "item": {
          "id": "dc137c17-d48f-492d-8775-6b24edf8906a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6a1df7d8-e6c0-45c0-bca1-7addbda635ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac86490-e859-4207-b782-c96ea13d6b34",
        "cursor": {
          "ref": "9ca7b1af-9bf3-47a6-a222-74c3673fd11c",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3025562a-f498-4ab1-9d4d-e1bd540ad3ae"
        },
        "item": {
          "id": "4ac86490-e859-4207-b782-c96ea13d6b34",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b6497032-1fe1-4f64-8532-1697f0e9d330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ada3ed9-8e27-4c73-ac08-42badd4e7a16",
        "cursor": {
          "ref": "7979c54f-2f79-4b51-b331-d38774ebd675",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "602d5dbe-6e90-4c7d-ad33-e732a7987a8a"
        },
        "item": {
          "id": "4ada3ed9-8e27-4c73-ac08-42badd4e7a16",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ee2c7b15-b67d-4d3a-a038-27968382f5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23389294-351c-40b0-a310-e05f1e02b5a5",
        "cursor": {
          "ref": "1efc049e-3741-483a-a323-b9df825b9e91",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c2844f6d-5d76-4e81-b24c-473f16036c84"
        },
        "item": {
          "id": "23389294-351c-40b0-a310-e05f1e02b5a5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "102d91bd-688e-4a22-9920-e09c27e787fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d941dd-0479-445f-b6ce-abacf22b183f",
        "cursor": {
          "ref": "bf1c5ab1-e0ea-47a9-971e-83fb6891a422",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "332ef9a1-b165-4a1a-b58f-34ccfe2d5fea"
        },
        "item": {
          "id": "d1d941dd-0479-445f-b6ce-abacf22b183f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fd9c09ee-c4ef-472b-967f-1711cf1e0eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7914f2-a261-474b-a5e4-c7589a740119",
        "cursor": {
          "ref": "ae553145-93df-4042-ad80-e39c3c2a97e3",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9cb17a07-a67e-4f9a-bb38-163151a0a398"
        },
        "item": {
          "id": "8d7914f2-a261-474b-a5e4-c7589a740119",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "56237b7e-45f4-4f0b-8094-db7c057cf50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42280e21-c0f7-4e49-8b51-4b3ef2ef35cb",
        "cursor": {
          "ref": "d8363bfe-1dcc-48bc-9351-c7f8ab70974f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7ce0cbdb-05ae-4fc4-979c-e57e2dd9f3dc"
        },
        "item": {
          "id": "42280e21-c0f7-4e49-8b51-4b3ef2ef35cb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "79185797-469d-424b-ae4b-4f45eee52a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936441d0-dacb-4bc0-8663-eb7d2ae832e4",
        "cursor": {
          "ref": "56fc3e02-aede-4538-9faa-a1196156f936",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fa369ce8-33c2-4c75-85ee-d95c7dcfee73"
        },
        "item": {
          "id": "936441d0-dacb-4bc0-8663-eb7d2ae832e4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f0058e51-4c55-4510-85ba-d58eff44ece5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a6970c1-2301-4cca-a75a-5a088a6d6603",
        "cursor": {
          "ref": "05d42900-6e76-431b-9cce-c91e1fc0efa0",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "955ed115-81a8-4ae7-88da-9de533418cfc"
        },
        "item": {
          "id": "3a6970c1-2301-4cca-a75a-5a088a6d6603",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "76a3a518-e298-4542-9a7e-a8197764396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c0ef28-c0fb-4e71-8ba1-a48c17065660",
        "cursor": {
          "ref": "d3101d27-e5fb-452b-b523-808158d8d81e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "50b17527-3a87-44cf-9f64-fae79e04ca82"
        },
        "item": {
          "id": "a6c0ef28-c0fb-4e71-8ba1-a48c17065660",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1a10174e-f36b-4d78-936e-52cabd1a13dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d138da4-f0b3-4f90-b5fe-5f18175a4218",
        "cursor": {
          "ref": "6364709d-82b8-4a7c-829f-a6625cdeadce",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "803e9859-5796-4544-9a12-d1394ab0d30b"
        },
        "item": {
          "id": "2d138da4-f0b3-4f90-b5fe-5f18175a4218",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "12b5383b-a395-472b-a1de-b4d97cffec88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b264904f-659e-4f07-83c5-16da5764666f",
        "cursor": {
          "ref": "8202ffb8-d5bf-49f7-a697-35c74a4ed1bf",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "726c8971-7618-4a39-9e5a-31bcbe1e03c2"
        },
        "item": {
          "id": "b264904f-659e-4f07-83c5-16da5764666f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "54add472-03c3-4840-ad53-b544899c3a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8ec786-519f-47e8-8cd6-f39c7705114d",
        "cursor": {
          "ref": "e185f9c1-b88b-4030-af88-c6973bdcb63b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e61a2a0b-e851-48f6-b983-3085a294bc7a"
        },
        "item": {
          "id": "2d8ec786-519f-47e8-8cd6-f39c7705114d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a62b88d5-4d7d-49fa-8473-1916fa5420c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e825dd18-a7b0-4681-b34b-52bf59a486e3",
        "cursor": {
          "ref": "947f9c2d-804e-4ad8-8240-23e85fcf3549",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ddc7bb0d-7933-4a62-982d-663a86bba9c8"
        },
        "item": {
          "id": "e825dd18-a7b0-4681-b34b-52bf59a486e3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "753e2b35-1557-4e10-ac03-1ec0ef5e5bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb3191e-06d6-4155-a690-7cd272a1b8d0",
        "cursor": {
          "ref": "c8d138a3-a449-451f-9160-5d9e8aace78b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "2ac6b6ff-eccf-4f04-8939-df54ebb61a25"
        },
        "item": {
          "id": "3bb3191e-06d6-4155-a690-7cd272a1b8d0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a993280e-9f38-4e22-af91-aa00441f2c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55c71b5-1404-47bd-9554-6d0c2d81e1ec",
        "cursor": {
          "ref": "4e5d457e-da4a-4d0b-9ec8-f7eb65f73ef1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2a3f6725-79e6-44f4-8430-f8abc802bc28"
        },
        "item": {
          "id": "a55c71b5-1404-47bd-9554-6d0c2d81e1ec",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cf533e02-b01a-48e9-a2eb-976b843d6dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed945ab-3a82-4892-8157-af79455f382f",
        "cursor": {
          "ref": "c527a2fa-eac7-4847-9139-8ef39c2dc36b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ce18ffb0-d85c-46df-8ad5-331a0478a865"
        },
        "item": {
          "id": "8ed945ab-3a82-4892-8157-af79455f382f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b3748213-fb41-4731-8e5b-cfe8cd21f720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bef526c-ca80-4b67-a2ce-53f79c422bc2",
        "cursor": {
          "ref": "fae30b18-0bd1-4abd-b1d1-73ef903c2df0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0ce6abff-b39a-43d2-b977-ecf243a6397d"
        },
        "item": {
          "id": "8bef526c-ca80-4b67-a2ce-53f79c422bc2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a772a067-aff3-4d9e-9094-fe785faab677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19965bdc-259a-47da-b7c6-d8877eea5e0a",
        "cursor": {
          "ref": "6b905263-e291-4099-86d9-8a336d2002aa",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "28470790-f57b-43e6-932e-756ea41a6dc8"
        },
        "item": {
          "id": "19965bdc-259a-47da-b7c6-d8877eea5e0a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "53ee2b88-c7c9-4bb9-a2fd-37a29dff9390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0153396-d33e-444a-a09b-2bfafcbd1cda",
        "cursor": {
          "ref": "6441f5c1-82e1-4446-9435-ec2c4997977c",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d3d04d5c-ce72-423b-93fa-ea095672774b"
        },
        "item": {
          "id": "c0153396-d33e-444a-a09b-2bfafcbd1cda",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "20dab6d7-84f1-4908-a45c-71d31bc0bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d7b0fa-aef0-4ca2-b827-ae38f37aec02",
        "cursor": {
          "ref": "6964d592-4158-4b9c-aa61-f8bac1c1b400",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a314af44-2ba9-459e-aeff-f67fc572826f"
        },
        "item": {
          "id": "38d7b0fa-aef0-4ca2-b827-ae38f37aec02",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4d3498d4-7f5d-490b-a2d3-7a8093cf92fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7084f400-08b3-4c84-9598-f451edac07a7",
        "cursor": {
          "ref": "87d77442-37c1-4aba-923e-1d9a51a27265",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "bf465a71-b864-458b-8704-337a3f47b211"
        },
        "item": {
          "id": "7084f400-08b3-4c84-9598-f451edac07a7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9442c53a-8a96-49c4-939d-db43483fcb06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8915ddbf-17e9-43e3-bd1b-6142253db8bb",
        "cursor": {
          "ref": "1a27eb48-f30d-4e42-820d-205caa47f79c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "38c2fa1e-54e1-4dac-b672-e54b4f493c92"
        },
        "item": {
          "id": "8915ddbf-17e9-43e3-bd1b-6142253db8bb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3f03ee44-a954-45ea-8abe-7b4f64567d68",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "1fd6e62d-74b8-46fe-8641-d049bbd330ef",
        "cursor": {
          "ref": "9931e0be-6a74-462b-9295-847565d98ad7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ac85c7fa-1fc3-4eb8-8e62-d769dd6cd301"
        },
        "item": {
          "id": "1fd6e62d-74b8-46fe-8641-d049bbd330ef",
          "name": "credentials_verify"
        },
        "response": {
          "id": "16fe77e1-84ae-44be-acf8-02f3e287249d",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec88731-0cea-4183-ba5c-605eda8bbdc7",
        "cursor": {
          "ref": "4820795e-0465-4372-a158-1ce691d4e68c",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d03642d8-3a2b-4638-bade-698aab004836"
        },
        "item": {
          "id": "cec88731-0cea-4183-ba5c-605eda8bbdc7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "986abddf-9806-4546-9b16-207f79b92c0a",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfc2093-9fb6-4656-b2e5-871feac4e9ce",
        "cursor": {
          "ref": "b11c79c7-989d-4f1b-bd5a-09d9d536322e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ce60158-ac00-4aa9-90e1-0fe4f4967927"
        },
        "item": {
          "id": "2bfc2093-9fb6-4656-b2e5-871feac4e9ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4456775-88ce-451e-8989-578d2778151c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfc2093-9fb6-4656-b2e5-871feac4e9ce",
        "cursor": {
          "ref": "b11c79c7-989d-4f1b-bd5a-09d9d536322e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ce60158-ac00-4aa9-90e1-0fe4f4967927"
        },
        "item": {
          "id": "2bfc2093-9fb6-4656-b2e5-871feac4e9ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a4456775-88ce-451e-8989-578d2778151c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef428b9f-54eb-4ec8-9f20-6f19187201d2",
        "cursor": {
          "ref": "8192b52e-8c96-46d7-a3f5-5f967109caac",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "28cad2f1-ef89-450b-8a65-a98391c69cac"
        },
        "item": {
          "id": "ef428b9f-54eb-4ec8-9f20-6f19187201d2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a524833-0fb5-45bb-9098-78832a037081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7d18a1-7446-4990-9091-354f7918d6a1",
        "cursor": {
          "ref": "d6759a90-9e7b-4585-8ed4-d8fbc79f7bc7",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "89369a74-2329-444a-9ad6-e3269d44bcf2"
        },
        "item": {
          "id": "9b7d18a1-7446-4990-9091-354f7918d6a1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9dc9057e-e9fb-4637-bbb2-933a4f095404",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}