{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "71d16f9b-3ff6-4ffe-881f-3a07faa960c8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2e6a3d6d-2951-4fcb-b176-599d7513daaa",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92dc7a28-720b-4450-8548-8c77b3cebfcb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "02daa0a0-ed7a-43ed-8183-9346a063b1f5"
                }
              }
            ]
          },
          {
            "id": "6cf6c7f3-05c1-46f1-a780-1b003fa08c41",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b35e052-bf44-4fc7-9a15-f07644081534",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4a52821d-b9e3-4c48-a513-cbf4392d9423"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3294818-d2a2-45da-b34a-d5808f4235b6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ed535fa4-ebc4-41e4-8481-976a334bc86d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6410e2fc-162c-4a13-84c1-a03051fcf240",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "476be4c6-2e28-41d1-9072-ab4c87cf4993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73cab57f-4bbd-4e3e-8075-fb986b97b18a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1275c3b0-5784-4fd6-b457-f1f14f6249d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccfd4cce-61c1-4826-adfe-f1a8a5b39a73"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21cbc259-1589-4002-a62c-e1c3b20f5219",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97fd04c6-988e-4e75-b6f1-df95e227af2b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74265494-2b55-4b5f-b987-8e57af43275f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4860ebb5-b120-4c28-92d9-e1761a5f921a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a22f714-c2d0-4816-8b34-05a49bf1ea07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5cb2cfdd-4c63-41b9-bb87-4a64d0accb25"
            }
          }
        ]
      },
      {
        "id": "340a27fe-1384-4050-b454-947e1c3cb8e7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d4f060fa-9967-4df3-869e-28aff193b752",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95bc4cf6-e26c-4b41-be2c-3ba1175cb375",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df5acb63-9e2f-46af-ac82-8b4ac3c65793",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67878188-1aae-45ab-afb8-c8b62f21f40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "229fbdfd-5f74-4f3c-b315-d691205cdcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68dc951-5d25-4a29-a9e1-d7b8eb8ff3af",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec3ebd2-b683-4b74-9e3d-565c976b5183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42a4284b-a9a0-432a-988a-1baf34b683fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dc7bf9-fb67-4688-81af-2edfa1686841",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd548d0d-7b60-427a-8dff-a6e2d9f9cfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44a5f97f-9221-4ede-a2cb-322343865da8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3ea978a-d630-4487-9dba-476b992a9134",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a782b806-ea84-4225-817a-bada2670e615",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eac962-fb93-4d67-8ca1-d8bbe107778c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90e88657-ce34-43ef-8961-2ed7622238fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acfc193-0f44-4272-86f6-eea38fb3b2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5fa77c1-a02f-4735-9df4-9582a3f04c6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "db82fcfd-9343-41d0-903e-b0a3e2ffe33f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3da7fd5-fa5f-4254-a87e-62d68aa89827",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49f57068-75cc-4a43-bb26-2cc5ce83a147",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1499fc93-4415-444c-8d67-474ea06eceac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4be2827b-4650-4ad7-9d35-2c6c51508b65",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "19dac42e-d6ad-4d78-92d1-8f5fa4bb1c5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0be08acd-0700-47e6-bbfb-c34feff22426",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "180553de-1254-46e7-8874-22d71e9c7246"
            }
          }
        ]
      },
      {
        "id": "47deb0d5-590a-44e9-b379-346c3472675c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1d484da1-b855-4c47-a476-97fae9472e15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "538fa3c6-9c3e-4d38-b144-08fbf9311705",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "86e6334e-5347-46e7-9d52-5aeef3369b40",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb082afb-84a5-4067-8d3c-1ad69bda271e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb6304d-dd7d-4389-a22d-89a30c4dd006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ce4499-d21c-4479-84cd-9c1a28fea979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47397381-2e1c-46a1-91fb-b4bfd653eb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7769b9d7-06e1-44d7-b23c-1974cf3f59d4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc35e9f-ec01-40cf-8b43-75b679bef5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93339b9a-872b-4e4b-95a4-9cf468218df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764e07ab-b532-4e5b-ba00-df2489b85e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15d78c57-a7e7-4a67-a0ab-2ba3cf98db17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee573e9-42c9-417e-a133-c974c9080e7a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ee0bb8-8366-48f2-aa93-7bf0f5a41ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d0ddfc-54bf-46e6-a39e-fe8639835c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424fb039-3acc-4284-a216-00b550246e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44dbac32-de66-4380-a692-e98cff328652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118b4f47-8785-480b-b34e-8617ee394250",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93538d30-65c0-46c8-bcb9-14815739e978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753d54c6-6615-40c8-b882-9d260a32dabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b4499e-5258-44cd-b0fa-f901df7bd108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a43eecc-fbc4-4af7-818f-5bb5d53d9d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ed8394-8ea0-4de4-8007-ddbbf567c878",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31360d8-7a23-4fe9-ba84-4c95ecfa9362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee6b9b50-29e4-40d7-8e7a-43e1d59ed218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea96146-0fa4-44ab-af83-15affc3ead09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d6ba2cb-a75b-481e-a2f3-f5171480506c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022628d6-1d21-4a39-ac95-c821030e3adc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6d3c6b-7aec-4174-a366-34fba95126cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d6316f-28a4-4558-9491-16fdff0fceff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2d764f-7c51-4c90-a8bd-d7599a180818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c24c9031-35fb-4b4c-9468-ea3f8694d90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776abc31-9f33-46af-bb35-909fc47f1e51",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdd6640-f366-42ad-a2cd-4ca6af9dea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c0ba3e-a10b-4629-8434-c1670e3b20a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb51c10-f032-4237-94b8-3f95594849a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c0069db-13cb-482d-9154-1c020a85eefb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1239cffd-8bb4-47c7-b77c-51499b97788d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453cc3c7-19e2-45d9-af93-78bab451dc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db5e1db-1d75-4e47-9282-4f92ff31a2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a9404b-3d9f-4b61-a9ba-8aef4295eacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef108119-a2fb-4ecf-87ed-3a07ba8e5338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a556a31-0633-4a06-ae71-b917599b0e03",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600a7f50-146a-4b07-86a6-73f7e1cfe506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce84063-48ff-4cb6-beb8-c8d66173be6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54569fdc-ba66-4357-8482-4a149c4c17f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b5301e0-6772-4356-ab67-5c01a877115d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea27a18-1ae5-472c-925f-9773ce0bd4af",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f524a4ec-a185-4dc6-a3e4-ea3cf39a6d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5bd5dd-643c-4c71-901b-c83b43ea7a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5af3c2-8721-4dae-8d1e-c03825d215fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a57e77-5d6a-45b6-a27b-c4d613c5b511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544475f8-1ca6-447b-b233-0ffd4d1c00f4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f40a0e-a024-4c01-9769-643c25709a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1854d58-79a1-4902-b861-08f0fc9d8b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22afc7f8-faef-4022-886c-5406decdc015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5befc403-6391-4c52-9218-c3e394f92a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6aa1a7c-5e64-4125-9aff-d775efaae896",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48506cf-25a9-4e73-9d46-d19101031e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2101b8ee-56da-459d-a79e-c6e3e1b74be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc58c8a-834e-44c6-a7e1-c809f903f2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5ae530a-ba0e-417f-8e6a-3a9586815ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c7f1cc-8fdf-4d55-a2c8-132dff84e338",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b102414f-3377-4ecb-a944-3528dad81b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50af68f7-2e13-4fe2-b018-978c4e8d4215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3fa281-a582-4d79-948d-48a3c40e129b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84360baa-5e60-4e5c-98f1-9659003fa715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d6e148-8770-4087-9c60-87297fdb6c18",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40485625-bbc2-4341-978b-bebe23e597eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c750f3-1a33-4499-a0f4-8c36d1c4d10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd04b50b-bc99-476b-8bca-c401d0152309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8a63998-54f6-45ab-9cc4-9ad82ee0f862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ba2499-2226-455b-ba5e-a907fc5ef82e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4188238c-4d35-449f-ae25-7d3b33682e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58116495-4be9-4145-8635-330184baed79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bd1f48-fc3e-4905-a0d5-ebf1938aa15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e198779c-8b88-4f10-aae3-b6a51edff0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2139560-50a4-4a3f-a973-04d57cebb717",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8413ab-b009-48bc-bbd3-d12e38ad95ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f06682c-d725-4931-89f4-cb3494ed9af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22e41de-dd4d-4788-aeff-bea7845065e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5d42069-86aa-462d-871a-b8d44033862f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9417e1-ba39-460e-9300-b04991eda5fa",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7396d72-6053-4803-bf26-cdc521b5cd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3feb381a-42c0-48d2-a5e4-a13cb4c8a549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114f192-48eb-4c34-874a-f4ef92ba99ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2485711-e3d1-4052-bf34-04db258945a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8afa7a-48af-4b2d-b242-a2740531a092",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b56ed54-b6c6-4c45-9c75-96c73bb1b3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf4f941-529a-4850-a094-f6faf3eab7cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907fa171-0ff2-4c71-be81-a0ef191d249a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47dbb678-d526-43b5-b521-71c893b974a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b45117-f4d9-4597-90b8-d68bb5306de4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac4916e-3b46-474a-a674-c09657ccdffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8ee9e6-505d-4826-8aa7-26f502b13f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2cbf76-1668-4755-bc70-063d51ce525e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8541f8-4c7d-4309-b8b4-eb6fc86c6fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bd5ad4-99fb-4163-a528-26ac5aeab2c3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd98e710-41bd-4eca-8dda-6e72ca3c665a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dcfc971-ac9e-4a21-aa84-73bc7a59cae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4668f418-8094-47cc-bd8f-52a75c36f1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc03ebd4-cb6c-470f-860f-8b91b66df9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161cc5d9-ae99-4573-ae6c-275b268a91fa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71a05fa-654c-44ee-893a-f4026b956168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c91f880-c396-412c-8745-2d0faaec819e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b02f39b-5b7d-48ed-b968-a5808a969088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3c5e27-f5e3-444a-9c35-598a19c7ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bc5186-78e5-4a38-851b-80d585ed5e3e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89a576e-ef80-42ed-b445-23c9c9f19a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb79f100-a35e-42a5-afd8-5a3c4b09b99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0753bc52-c0e2-4860-b2b7-bab54ae6a3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a7f9c7b-d111-4d20-aade-7de96f32b4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2d40ff-fdbb-4bb3-8e2d-410547919a1c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7be83d9-809d-484c-b1ff-b58c3690f78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a85748d-2c97-47ea-ad34-f7fa1c4e8294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bc9e06-0730-4e56-8037-6520b4d45d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13a873b9-ffa5-459d-a9e7-3de674fcd20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0aebaa6-00ff-4649-b5c8-b9c4bead6590",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe2ad61-51a8-4e8b-9e53-4bfcf9939168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93bf25ac-50a3-4189-acac-4e3a10ec29a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99b92e7-11c3-4c2b-80bb-2961daff5603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "607f05f6-d8ba-416f-9f30-5130d5f68f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5691a2-7a27-4404-aba8-6723d83a0279",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8525b573-db65-4ca9-9ba8-10d0129002c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee76dd47-84b0-4da5-8619-6c66326063e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dec175-6710-4365-be6c-a93d6ba3a92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c882c1bc-caa3-4bcf-9412-87885c598c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4964daa8-bc4e-43ab-bce5-c89c722debe9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278fa70-e4ef-4f5b-a720-24b7f0f49d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c076bca7-78af-42fd-8d18-6dbbef2cac0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029189a9-af9e-47be-9d5c-56500e7d5acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8fd6e7-a7ed-48f9-b975-d471ab49c38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09341529-ecc1-4edf-b434-67079f8d1afb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df001f38-c0e5-49e1-89a6-5d3c45e448a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0bdd04-6664-45e3-9e22-b245adb4c52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9793dc-ab35-4510-b818-fd3901e615ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c43567-3405-4bca-a2e4-dcdb1329b566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffd7806-8d2e-4215-8ac7-4e1fe8e44015",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6062b9fe-2659-497e-bc7d-cabab9af07f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6346a231-3676-4248-92a5-4920256a721a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c9b54d-e136-448c-87aa-0804e38da365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9494fa9f-b513-4a23-8efb-1d7b30fd6dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0522afd1-5e48-4f52-9b63-7978f645c36b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f159e605-6521-4500-8462-59131fc79761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73eb4df6-b141-4e5f-8334-512cec74ddc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53928f0-ebc4-435b-ae85-a2126e084595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43267b73-226a-4f60-8a1d-56cea5f4c3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e807030a-ca76-499a-a2eb-6d140a66374d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1138cac7-ee7a-41de-9a42-8db144eedf78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db25ce4a-fd90-4404-9fc5-9d9e69091780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8148833f-44de-433a-a998-b0734b2366fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d847af2-4c34-4822-b45c-05f924701667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733ea679-f708-4910-857f-2512c3cc3d4c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e695e9-5b46-4644-b6e4-8eba12c541a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a16794-6997-4d52-8ce3-22ed9301fd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96501f6a-c5f3-46a1-a891-9e3d7408a20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94dad48b-2e83-437e-859d-6977efecf155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701a6032-141c-4d4d-aeaf-b189429a9e4d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ffa416-d0c2-4c23-aba7-173ba8323069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23354b5-f635-449f-b0a3-f63368ad5064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c555d1-dee7-4a25-a33c-baef29e853d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0b09c5-b764-4bc0-84f1-04723cca5a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a55792-e803-49ff-a34d-91e305ffc342",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2786ebf9-4be0-4e3f-83ee-9c188070f2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634d5741-5b0b-451b-81e4-fd0fbe237cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f05f8d-5f7e-49c5-bced-9e14bdf7c9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a438ddcb-8da5-4b8b-9d16-34d794088178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b333b61-2f86-4011-8013-6c0488d8e608",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aafa4d-c3f0-47e1-970a-e6a3dc49fdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4f6a2a-54eb-40bc-bc29-7b36dbba9c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d216cb-9aa4-40c6-9672-0cbb2668b1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7d0595-da92-4637-9d53-c444f66596f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2399001-dab5-4b7d-8c80-053304c1afbc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5e04a9-8a53-49b8-8b00-060d3e645f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab01ae9-4b64-46a6-a2b3-908c82b95d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d714aef-9315-4a0f-8f07-405f72aabf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "89bd612e-1bca-4728-8bd4-73c8cdbcdf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bd0092-5b59-4684-8c11-5b625afd03eb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434bbef6-fdc4-46dc-9b07-8df5f4c7ba64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e36d61d-00ef-4802-89b9-3c2e3db68511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45717e5c-91a0-4622-8a7a-67b95cdf359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db199f28-ce4c-48ab-ac0b-95d3ea3a77d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c478d2da-1e91-4def-bc26-76a0d9679f73",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bf83ee-795b-4ae8-bf0d-2e6475c97510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db9781f-d48d-4559-a41c-1010cc5d2f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cc1e5a-481e-4120-ba98-653f5db68da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b27deb8-03b7-41cb-9e4d-c215f0a719b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb2b45-3918-48b0-9d89-eaa1f5a0914c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6ac75b-3dfe-46fd-9d68-4da220c065e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78cda89-d897-433f-a07e-83423e0d3b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2f394b-141f-4959-aeb5-6b9025e9f473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56fde46a-aead-43c9-9989-d424410b7413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f46c3c-b34e-48d2-98a8-1208a7e63744",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c37716-1d1d-4830-a74a-5e70c7926dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8956373f-5770-4594-9c22-e872e0b13a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff1aed1-de6a-4fc5-b121-318651911d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b4d45ec-c1be-4f80-9e8a-dba7ded4ec5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78c5597-e260-40f7-bb17-e5e1b386b3fd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8ff47c-0331-46ee-98ab-3d35aa4dcdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6629e3e0-bbfe-4cfe-96aa-33776d44ac05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d629c80-b019-4ba7-b922-a47eb333cc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "911d2b4d-a8c7-49cb-91e2-774b6418313a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdfa20f-dfca-4629-a875-65d3bba515f9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4ad708-0ef9-489b-8078-c4ef291fac81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf6d2ab-bc6e-447b-9a0e-692396bbab68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e924a7de-346b-45a4-8717-26b6cd479df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9560bbd9-587a-4b95-bcab-f4b569175b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ee0ea0-440b-4920-b73d-8a3e70f64bef",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9667171c-d382-4ce9-8a34-81453e40a587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84393215-c32b-4c39-bab5-de988476a3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b9ca35-9c75-4a5d-86e3-ade6d4e3fa72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "850fc699-42f4-4097-8ed7-13e4cbd00adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64f15e2-00ee-4d13-a325-87992b3fc086",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daacfc1f-5d54-403b-9d88-a90da7ead40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071807aa-7784-4025-8076-3030ca080463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ebd2b7-5107-4cfb-afaa-24a6c727d9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0938285-2c75-421a-9aca-715d65f04f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f3cdd6-9c3e-4858-bc4c-834fc1ff3389",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce761b3-e1bc-42be-bc32-57e4b4ee2824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa77628-3894-48f5-90e6-b70a5c1b1601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00229be-90b0-4ad8-88d3-26881fae54cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fefc30a-15c9-4c7b-bc42-a5b3269e54d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b779cb38-6e5f-412a-a27f-ce8256a6465e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e843af18-726b-4b5f-b53c-2e80a6be7321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6819e063-da52-42cd-bffb-5ea04151e8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24322877-7565-4a1e-a230-af2aacc2bc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b0b317-4212-40df-8bb6-c592b0801128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409c4470-8bf9-4d04-8730-83ae6884a029",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cd33fd-d0b8-40d4-8db9-f0855397d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0938dea6-727a-4e2e-aef8-207812272048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6142ec1c-3e93-418a-ad7b-60ff1faec2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca99ea9-9d2b-4f2f-92ea-ad0ba59337ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caac354-5b51-4527-972f-e3e8a1c95962",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106a1113-5894-40b6-8c38-08ac502462f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f498e97-d328-44e2-96d1-73200a5b682d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b03302-0780-4da0-8ca3-27a83361be14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "618c9d21-ea7d-433c-83da-e73b288c5dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48a9e9f-db95-444a-a3b3-fe77d6ec994a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275fdcdb-ddcb-444f-9ce2-fc6cbc0ba665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4eba61-163c-4dbb-9e42-b64246c815bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577a3f84-5124-4340-9f2c-969cc2072dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b1733b-26c0-4cd4-a7bd-4c6e53ae4407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9472000-e3e4-4a08-9f82-ceb0448963bf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cd9dc2-9d94-4de6-aa6c-9a051dc58d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab049a1-51e7-42da-a64e-165bf5f414ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dbb896-d7ee-44fd-9e64-e57c66d71ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "939024d6-d8f1-4759-b18c-bc0a1b149a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41dbb04-67c4-4b52-b598-d89c54e3c9a6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2ec07b-109d-4111-af45-d7e5177e5025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40547128-5422-46b7-a1ee-363ee176beef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b066fea-9f35-4d5c-bfc8-1b1575de438e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92a46a85-0b1e-41e4-84ce-804b748abd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd12ef6-f6e7-480a-aa93-f26207336173",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf7cb58-5bd8-4372-8476-5bb3ea10063a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c18b950-bc2b-44d0-ab65-7458847c4a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7674dc76-8b0d-43d4-954b-bf513a55b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ecfca38-7214-49b7-932a-bb54c710b520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e342487e-f940-469b-bee0-0176acbe550d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4643312-5b57-44d7-b64d-74511084a419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8028a9d1-7a65-4590-a63f-67d3b3affa55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9432176f-51e5-48d4-847c-426cc3a1a5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3f0621-692d-4385-bd43-9ee5dc262d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8063d8-fd9e-443b-8b38-f69cf19334a6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626ed675-7fc4-4253-bc6c-f73b48563e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc537195-1889-4eeb-bc88-277f64845a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89783aff-3080-4cb1-b0d5-06433770e1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a6908c-5755-41a4-bf89-986f302d6296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f590ee3-cfcd-489b-b349-b1dde0aec473",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e2f67b-6360-44b5-b2f6-43e4163744b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0c92d1-77e0-4c49-9b30-ebd561748733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4813b78b-0b1d-4bfa-b205-1bdcadda9822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed83b533-7c41-46b7-b256-271e369f4769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660dbfc4-a0af-4d51-9033-331bd091e262",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50412322-aa57-4e25-8985-eefa78018445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11a1745-7b52-4384-aa43-bd5c15c62619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c1f08c-d2e1-4eab-832d-45911d7d111c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e8d998-4e84-4c7e-a76d-fec5afed8296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8685594-5720-49a6-be0e-0b53dfb164a4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ffacad-48ba-494b-b037-ed8ddadc85a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1361f21c-d38a-41a8-b1c6-45ca649a4fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65d48cb-507b-4834-bf7b-984e9fa96e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a6154ef9-5163-4039-8c2c-142c6fd18e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d7f2cf-9eb7-4213-869d-542dfeb545a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab29f2cd-4bce-4794-8996-964ff27ce8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c956db-0679-431a-bea7-7b57e0a48cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a095520c-24eb-4019-9e2d-8aadfb77730a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7da5daa-2ab3-4669-b024-2470ecdbbe40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f435df96-40f2-48e0-a88b-3d4b472fee05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1607592e-cba1-4243-b2ec-2bca7c499ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbd1723-da83-434a-84a2-430d780f0e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bb5388-5494-4a46-a723-f4f10b319c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9425b5b7-b306-4f90-b314-c8ea271cae67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34f22ba-dc9c-4172-bb85-f0cae59f91fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a844d86b-fb97-44a0-baee-cab07340cf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc6a653-4228-4d68-8be8-1e2cd876e103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82ca666-1fb2-45c7-b703-10075bf53704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "42a462ea-2802-4109-b68a-d9cbdb524040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c6dd32-2a2b-4c13-8e7f-c2a79dcfcf15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffc7a44-804d-4c6c-9cbf-97a3c71c5514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a79b20-78ff-4e1a-8d0c-c649a77a1df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef24300-c9fb-4c2c-ad2e-d96d54abade5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2275c67e-6224-4a26-85ae-af23176557ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe8d85c-e729-401a-a88d-cf1b35a418cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99330927-18ff-4341-9573-3391ecff9bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e57c93-ad23-4f7b-bbb2-e2cc0ba238a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec76c46-503e-4a70-8bf8-109d3486073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5169fe7f-b48b-4349-b3c9-b3aec03f11c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f176f0-d054-46ea-bf5f-79254c1ecd38",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f91b95-8d82-487a-b854-26643db336bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e60ae63-0f41-4669-8886-14d1c8dc845a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fc1969-8e96-4d4f-8c5a-2c534d4e569f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7447bd0-0c05-4019-b4b5-17a0545945e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6436c3-4197-4773-b233-bbb540d7932d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd32fa9-cfc5-4631-a6d5-6d7db8755bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ad67f2-98a4-4b79-8e06-dbb58724375b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8678ceea-e085-4c11-89fc-aa3f1b511810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c46ec497-66bd-4c4a-a048-5cad871d7ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5cb0f1-3805-417a-9f54-57352c20bb38",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "583920fd-f8f2-44ad-86ef-ce0e8cc9ee2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f910cd-b83a-4507-a35b-8b04b132b9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e33e5a5-e7b0-488a-96d3-b62e4ad2c943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3d9c50-f010-49ef-b9ec-77e52dec99f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3556f447-961f-422d-8cc8-88158aac7555",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6916144b-dc72-4612-a0c9-b28917867e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67dff300-85c4-4cc8-a9b0-e8ff74d82297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84e0273-5244-48d4-aa54-58e236d0af0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07e3206-6130-4ac4-8abb-13c8ffaa0cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839a75da-2572-426c-a901-5209a23963d4",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2006b6ea-db9b-4029-87c6-0f6000399a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1ee0b2-70e1-423d-bddd-19a8c6b9dc94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3496f8f5-2e55-4900-8943-94ef486ce0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b98a62b9-f230-4f2b-bf15-c449c43374e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965b726b-175b-4720-b270-93a601d8cefa",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a060b8-a98d-4112-b1ed-6c07cda61c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe77aca8-c3b7-43d2-8c38-162b6ef0bc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d6d946-fd3f-4091-958f-7eee56bc6bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbd5e96-62c6-40c9-b55b-f429ec234586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a760f0ab-6646-4938-86df-77459f6a4f8a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22685c6-0a29-4961-b9af-89e6de27efb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a86e930-acda-4ec5-84a8-890d7e24a929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4a32bc-c515-4ace-a61f-e46187daf160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "532817af-25d4-4427-8c77-629101caadda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7198d70f-5d70-4322-9cfa-f395632b8fcf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439025dc-2dee-4c83-8c48-f850f2f304e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb089758-940a-4557-9f1b-a289c5ce6a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4328fdd9-f3b1-45cc-8473-9d503f154fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa295895-eb0c-413c-bd5a-28f768af860c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c3aaed-8d59-4bc6-8101-56d3897685c2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cbbec3-a0b1-477b-87b7-ff15abdb1c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2219f426-1cae-4cd9-93ca-5ed7e23960cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9120e1-7c97-4206-be6d-4afc700de335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9db6a42-ed12-4308-926b-f0a82f2e47ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139b78e7-f492-44de-a061-1798f8b2b284",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a6726d-01f5-4808-94aa-47e78da7a3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a76238-9714-4610-97ca-ba67e542d6c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7d2b74-43f2-456b-b069-7333b66d9e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1804e4db-e4fa-4568-9bf5-a56c095a9bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6674f64a-baf6-4b41-b43b-242d3d4da0f8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990d7ad8-9c3f-4822-b776-87af497eb697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1818edf-e69b-4620-bf7e-ee4658e68e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e591e35-b1d4-42b6-ba1d-b16c2b8851d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfe3b9a-edaf-4e8e-b9a6-d68173d7bdd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26a30ff-245b-476f-80cd-d4efb60e0fde",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a04ba9b-5ced-43cf-bea1-c49f30bdc58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa12d13-8030-4a8a-b9e3-052b6c0b413d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc50c08-9bc7-4fd2-98f2-bde79619577d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5ad49e-1f76-43c6-9b7f-bed3bb962ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9c4131-0eba-4610-ad1d-641170cd5ab4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a139d9-0225-4834-8cdd-f01f33c451c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0df64b0-cb85-4966-ba47-c9d63157239e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d169f94f-fa4a-46e6-8557-22f021f30ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8466a6-fecb-44a4-b32c-6fcd9dbef4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1affe346-e59b-40ba-839f-a8b9eb330d5e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d6b27d-181c-485f-a4af-5de5a8ff1633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd9071b-3134-4a09-8405-25f2a1354acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0e745b-4c21-46ec-a6aa-f5a42a6209d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d161bc6-0355-4acd-bc65-a3f3c6b9ff76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e4ca2b-d771-4607-8d56-7414107ad717",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47482e64-4386-4543-a28c-080b1942d0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11082073-4f52-4152-9ade-74ecc7658952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e46dc98-5d98-451b-aaa3-04d3dbce0c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "781aba04-ee12-4259-8a34-6474f0adffeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379dcb39-1f9f-4dca-bcb7-b3ddb6bc1acd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ed8c0-10c2-4060-8e4f-e1bfb9830725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d657f65d-fbcc-4413-bc8a-cae986daf8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49e89a1-fc89-408f-a3d3-44741f770acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "103f6c2d-d396-4afc-9f60-12c4c3d7a999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae27a93-4b0d-4ff7-bccf-6fe45e50f991",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04020653-98d2-480c-8c4f-ac5d9267e239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4754507a-6922-4d3c-b518-25933f131031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723d465e-0923-4b92-b6dc-647fe8a8dd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad57af7b-38f7-4920-90e5-e6cfb1aa5b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c1f240-4862-4db0-8f21-79b415719966",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee051495-cb5d-4b2f-9880-b4f12efcdbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "850ee166-0653-4413-b5cf-6cca402768ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c6386d-1692-407b-b108-79cd88cab21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13d2520f-819e-48e1-9858-7a828e69ded3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c521d4bb-e2b4-4b85-8d4a-9c3e90a41a68",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb02512-95d9-49c3-9c6e-d7d151d1df86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b257ca65-26e5-423c-9274-c9cf185f564f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b643404-b38d-409d-be7d-3bf615ebf463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e13860d0-3a3b-4ffd-a948-7e897ebcaa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04312de-c5d5-4537-959c-89f6abea814a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8dd09a-9f47-41a3-a81f-75937b51968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abfaf3f-9efd-4c48-b171-75e1ef80ede0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71893b2-718b-4e73-a148-b0a30071d7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4df7e9-e4b9-4b0c-84e8-0ed4ef4d9a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809811a7-5dea-4d56-9b1b-eabfcf9258f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c70944-ee15-45ec-b820-4e3b378668ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9ab604-e147-4d68-b095-db6b49df079c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0623d4a2-d075-46ee-bb54-1b81edfcf739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad00165c-7bd6-43c8-a03b-24bc7e40b908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e152ee1-025e-4662-81ee-f9140504b129",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ce76a4-c298-4010-85e6-f723b0fba0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73b573d-ffda-49cc-9d2e-afabdf14f533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d658150b-3302-407a-a3ed-54fbcaef5d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b927c593-896a-49fc-ae38-e02894be3bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cf75a1-3df6-4795-9def-7c010502a28f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5d8ea8-b3f6-40f5-afa8-a7e048937f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f743ca9b-415e-4529-aa63-48ac6c1ff3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ea917d-916e-4a5e-9bf2-37e896928b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62fce96-f3db-45ac-b4e0-3cc3bac3d98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a8065c-b74d-439d-9e47-ee48a5d215f9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18655ebd-a05c-4853-9092-820c91bc845d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017208a1-85df-42a5-b8fa-30a457bc17ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c55d8ac-d40b-4fc3-b74f-d717556ecfaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c35329d-cc57-4680-aa74-93d8eb53fd1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd18acc-ad58-4abc-8c3a-d32c25169f2d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4525610-3074-40f9-b669-7b396a10dd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b96153-fe06-4c7a-bc28-eb562ab83a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ecf143-80c5-4f81-a8cf-393f48d0c996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ed3608-5a65-41e9-80b4-b218135befd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d023ad04-5a64-42c8-878c-b7b7e055a200",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9930639b-0d07-46bf-b90e-dec4a8685dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70025f60-3e4f-452f-9787-df4449c5c977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702b1fe0-53c0-438d-8509-5dbfedda15b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "57de1cfd-2f14-4a45-9aa5-910869b42c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dde31e-b2f2-42b8-b6b0-56eb621d3015",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb230a1a-f0d5-4af7-8eb8-899e96aaa0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9745d13-d6ce-4b22-b83e-7aab441915a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64cf81d-fb60-4449-a974-27a10ec6aa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aac8c63b-ab36-45aa-8665-61fcc6685351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ab2a4d-8a87-4086-8f67-6c2f4ce285b1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e57c3f9-354a-4c98-a648-d47fa4a762ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce28e43-220c-4bde-9478-f90874e084f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e576cddc-ff83-427a-91a4-19d541a6669a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "135274c8-e781-427c-8fe9-827630745622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf8ac8a-dca2-4062-b3c1-63fbf8bc4b62",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd90451-fdf6-4cee-a92d-8f90ea7da560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad758a-dcc0-49ed-87af-c4cbd679a8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf9af0e-afbf-4146-81b4-c4c8b6242e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4d4c0f-bfb3-4d8b-a69b-e9bb5b31792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd05a136-a9c2-4db3-9c97-eb2e6519b912",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d068835-8ec6-4b78-8527-902f8dfd0daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11addb40-da31-481f-9ac0-beda8b119814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d87695b-a8e4-4674-adc5-ea9ecf9c3367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e2c2e8f-67e3-4a82-bc5b-b9c4b81699c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30881ce6-7d1b-4cd0-a927-c1363b53a455",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2410037d-9384-4ceb-9db4-0358cd107727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0675ff45-ca91-4878-97c8-428d5e20ff5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7402ee36-ee5a-453b-82ab-f2b0acede3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ab5f1f-b242-41c9-988a-ea24fa93467e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cdc9e2c6-5f35-4d40-ba76-0e0063e95590",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "128c94df-1bd8-4b7b-ab49-c243686f4968",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2540d5-6e2c-42f0-90f7-d0a9f4c30d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44bba94c-368d-4973-bf83-422d0b0ccc3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99d13a4d-42a6-4ddb-a712-895446a5f62f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24c60143-41cb-4fb2-96fb-b53e51872a78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74673d3d-7107-466b-b1e1-79a1365de3f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dee30ebe-1a3b-4d94-84cd-66382ae358b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab398972-282b-43e4-8258-5c6d6ac94797",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baad0b0b-1ff5-42a3-b001-208fda863a47"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "747e7075-3171-4b6b-8348-05afcb0dd9ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1463538e-24a8-4bd5-87b1-c068693326b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f72d69d-3864-4bcf-8137-4ebe8d308e2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42d67bf1-d153-480d-9d14-b40274c6d03c"
                }
              }
            ]
          },
          {
            "id": "18e5c409-a378-4e10-88fd-d849ed106d12",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f01fc5cd-dc1a-4e8c-9afa-ddebe56ad088",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9ad279f-c973-4d05-bc03-6dcb060be3f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30056f82-23e7-4091-a5e5-ff51bac4dfce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07a4b80c-acb4-4f68-8c44-3e4a0d8b28ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fda9bafe-3398-4beb-b3c6-647659bac70a"
                    }
                  }
                ]
              },
              {
                "id": "d0483006-c2ad-4607-9a53-db8dc8c896d0",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2cd44fe-0374-4ffe-a924-a586bc5adf93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e30299d-36e3-476b-9050-92e6b7810f0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eddf7524-6ab2-48b0-bc5b-0b73b249a6ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "831943ef-b248-4701-8adc-e5aae5b10f60"
                    }
                  }
                ]
              },
              {
                "id": "8deb91b0-5c94-4ee5-8a13-0a471d4a647e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10808fa9-dbf0-4a39-ab3f-b83d0481f5d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0ced2a2-121e-4025-8e34-4b4f8443de77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db9ab201-3f62-436b-b6fe-3dc19a3bad9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65531ce4-cb7b-482d-85ed-0b605adba6df"
                    }
                  }
                ]
              },
              {
                "id": "007bd418-7e37-48ee-95b0-a1f7fe48e0e7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f3fd06d-5d75-4c83-bd68-44ced262e5e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9071ea3-22ea-482a-a877-a4a82a69f1ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "641aa5fb-8f92-4bc5-88ec-5e7eb51969d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "686fd84d-18a7-4579-8e32-17d395d14a67"
                    }
                  }
                ]
              },
              {
                "id": "5aaf76d7-c425-4e60-8473-b675bfa82405",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d631bee7-ef16-4673-8a13-056530989122",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9de68818-8618-461e-9a07-15f8f7c59d6a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e01b869-aa3d-429c-b3dc-77bb0eb8492e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e297b8b2-8c77-4769-99b6-beb901731ed8"
                    }
                  }
                ]
              },
              {
                "id": "e91d0ed1-bba2-494f-910e-cb1b00a4502e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "baeb8791-b0e2-422e-8d08-a5c526f14c01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16835613-ccd1-45c8-a725-cb81e4fb3b94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf0ab059-3d1b-4aea-bbb9-05d215366e36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1f0f6e31-92d5-4605-9f49-6dc8e33f7917"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3104495a-3189-44cb-859b-8bc8ef725054",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "989b5706-929d-4da8-8c25-ea20d27e8e36"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "392609b0-f0f7-40d8-b9d6-a328e4e1199a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3383c997-1aa5-438c-a8df-1790c0e6cb55"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5fee2cd-76f5-4049-ac07-2d0a07038803",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a5222d62-c012-4f70-916c-d78e9f2adc0d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00279dcc-837b-4e26-8d7e-0b66df239594",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "367a7264-207c-46f6-a346-cc14e45e55e9"
            }
          }
        ]
      },
      {
        "id": "0fea6c3c-4016-49c8-ac8e-0460aa09a594",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a21da8b1-a019-44c9-9660-47d2f82a61bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5cfa57d-601a-48d4-8fb5-3d502452f1a0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47093ec4-8973-466d-954c-bdcb5107fd85",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794e4d44-d1e1-40fa-8f18-8ac745ca45ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b4c3be-696d-4d04-9555-ee96d90ef945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b637f196-50ad-4dc9-bbd2-ed38a0b92dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62ad8a0b-7a77-427a-94af-33bfb16b3dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ee1991-8b80-4b6f-b5e6-2440a39ccce9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ef2104-9366-4180-bd58-c2ec16605522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8a8cfa-e086-496a-8f0e-ef750373134e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314abfcb-bf31-47fe-8565-f4b1f616376c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62468ca1-8c4d-4f52-a0ad-64298108e699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a83de8-9c9f-4d6d-a793-cf19c9aa9679",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10543d6-d994-46a1-b09b-8bfa11e62947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71091964-e781-4984-9f6e-b4824840d408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a700cc6-8ca0-4fc3-b572-c89e83d5adbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23cca368-60d1-41c9-810f-d29411bfa194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961e1259-6f44-4ffc-a2f7-1895c174a13f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d65dc27-fd8e-4b61-a657-94d1b9c887ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e71f698-ad26-4ac6-bd6c-43da0182b20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e56b795-453f-47c8-9e89-5a48f515b74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "256d9985-d4e6-41e1-9d5e-3218e9fab73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e994a1-0c2a-42b0-a52b-a3b1b5bc5b77",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39287e34-6c9d-403f-a033-08af3b5ce1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0757d717-9fed-4e64-93ec-e7a3cbea5518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad87b1a8-c63b-4416-8140-c4ce4d26dbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3dffbbe-0737-4b85-b8c2-e65d95a4898e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491db781-3d48-4a89-855a-a846e7ab7472",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc1db22-e4ac-453d-ab1d-c02e20a7609b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd0c9f3-fe11-4449-97f5-12bb8af21f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97b98f2-d161-43d3-95a4-f463da02f299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "271b852f-1466-486a-8ffc-5ee6bf3a601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b587fdcf-fd9c-46fc-9534-eb769f45f346",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad52678-1850-47ee-bfc0-87ee139b4306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00a7faf-eace-442b-a1f0-6d2ed6014833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2395b0-2cc0-4dd5-919e-b7db1cacc9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8be24a79-c25a-4599-98f8-8623f3f178eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655fa3db-9395-4b3d-8f08-818b63a33e51",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6a6298-638d-4d52-a127-295fbff3802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665c2168-a42a-41d6-bb61-ab0e91f27190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447730b5-3086-4785-886b-fa8b0c45ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a43b1760-02fb-4bf4-8f9a-7d4d840fae85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2871ad43-56f5-4514-b8b0-0ad97ab90af9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcf1e5b-d9e7-4e63-aaa1-be2fcfe17ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1562fa84-e95d-4a44-bff9-3886cb1d724f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9e8564-80b1-437d-8c66-689624bc633e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c10f67-550c-4db0-9438-94b6f0cd2ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ec41b3-3a10-4943-9616-250b33595a14",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0bc061-02ff-40ca-8bef-9d88c23680d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee07034-c6c0-4a13-8caa-0f9b501803c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fccc7a66-cf53-4d56-aa57-62ece2e6125e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "149b78f4-7d5e-499a-8b22-88aee6a42b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef33c788-7695-4e3b-8f41-ec1464be5eeb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c27a3c1-298a-4ddb-a2c8-09c53847b821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec27fc03-b713-49d5-a5bf-44d5fcc97eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6a1894-01b3-4e7f-a79f-b5b64b10f86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd4e647-e124-4aae-8531-f45bbc09d857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7fd076-235c-4979-b293-514dea08b7d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e828ea0-d171-47b8-8a09-094a94aa52f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69bad18-e63b-4743-8a8e-c1e6c197edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbc60da-09aa-47b9-b624-73922d60b1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f20d14be-87cc-4be5-9ede-d76f7823d925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d96c84-1a33-4b58-83cf-edb540a8859f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1721d1bd-2846-4679-94de-91fb4144b48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f5d3c7-8037-4fd6-abd6-8a6ef6a4b6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cac492-e52b-41a8-8502-b7264ace4ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e833fd-5707-4a4b-bb7a-311ad099af09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccdad2b-5b79-494c-bece-e49ec844a228",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74315fc7-2b32-4bf7-aab2-9957676b58ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0628db2b-df3b-4af4-b369-604d93788d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82eb6075-c56d-4cde-80d8-701aebb553a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1825498-c517-468a-a299-3b3a72e09324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb42a25-3c74-408d-9367-db53395f4a61",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffce134f-1dd4-446d-8358-e1581dc811ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b17b1d0-d84f-4d01-89b5-11313f1a2936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07c9c7e-7c86-4907-9172-ad36f3d4577a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec64473f-4a19-4f19-9065-ba19fceb6ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8de6154-18a5-4848-b221-b33f6d757318",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243cefec-e7f1-4472-ba30-3ab7c9926040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8ff5da-b789-41ca-90d7-2dbdb66d4aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadcc21b-b081-45bf-b8d1-8b167d2948ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11619a0-cc96-4840-87e1-4250bd6ce038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a190607-6181-4378-8379-1714692e425f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a62b428-f25d-485f-9c7c-6ea44de5b96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41559a4-307c-4ec6-9b0a-4981da363537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ef4daa-37d3-4994-854d-65aaa273a071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae408650-3b02-4dc0-b16e-a95a656f8002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9495243d-ac7b-43ec-8c2d-252bc3804ffb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfda8d8-cbb2-4f11-b0e7-af755027a056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105a67ad-cd54-4010-8846-f900796110ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf37abc-844c-451b-91f0-02a798282305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6abfbefa-83c1-4060-893f-e049122e5ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d152d12-7af8-4452-a47b-24bdc5fb110c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "259e1d22-3e22-43f2-a5bb-48b95f627a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f6a0b5-bfa6-48ec-a3c3-0281a1faa888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f5c7d6-39df-4485-b240-07473bc4ea4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca6c6d1-a92d-43a8-9833-9b7357882838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8148064b-0c1c-45fc-8ca9-d7d53eeb58bb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13da5ba8-042a-4b4c-9bb1-070e986679f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a9b6c9-8f52-440a-8b33-f312b15a26c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789cd223-bb9a-42c5-b6c5-51ea0cefa2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "191c11c9-9a9f-4141-8149-18e9e9f8d33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d203de22-df5f-49c5-8aa5-bb9ada78dfff",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8b37d7-8bbf-4267-9938-c06e79afe7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83bb337-6eeb-4c48-8441-f0a943738282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83061063-aa1f-4a93-af27-0b1322fe0e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2553ab-f4dc-4f98-b093-3038f0875a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2fcfd6-e025-48f4-8ecd-a522cacd368a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46487d2d-e686-40fe-b7cc-a8b1dd3f37f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82334e34-f1b5-4687-ace1-830fe1f9778c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d113d2c4-1b36-4b49-b181-e7b9b4da2a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa0a75e-cd2f-409d-9d27-c3ab932611c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3595dbc-1d5b-4702-a7c8-d4b9981023ea",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0bb049-9bfe-4481-9925-b2a715281d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071e692d-f9dc-4ec0-9b07-48b32d4be837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9bb28a-8035-4490-a685-2d57b84f02bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d93c022-0dc0-4bd5-befb-c0d6c10e0013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c90402-1183-4dd2-8340-b65631ef6cbc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a73f474-dc8b-4e6d-a19f-3cf8d01f85d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9b498b-42bc-4a97-81eb-489d89b25d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e70623-fc70-4d30-864a-46b237e2b0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b83b13c-9024-49f0-baef-37b5aa6e7eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70d610e-dcb9-4804-acea-e8537ae42a15",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dc9c03-94ca-422a-a9b4-4a92e0d81eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b94a7e0-dea7-40e3-9cfc-0be4bf7701d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df84b97c-7226-423e-b22f-0b99a9273b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d98342-8353-465c-84f0-f0d35bb79a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f72116-1cde-41b6-8078-a979b7867d95",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9916d381-713f-4cb2-960a-36b7950c2b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1cf3d2-989e-4ad8-a82b-0d574aaef079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a7d05b-3e50-476e-b371-7a7e10dd2255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb1f251-ceb3-4f7d-a55c-055bfd263bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645b92b8-75f4-406a-800e-ddf547663f9c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a280191-e756-44f7-8e67-1228d13ebe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1b6553-8528-498d-9d85-484e7dbc7ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd0ab78-06ed-4d84-b121-16d697675e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecce9101-3b31-400a-9a13-9e6530145046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e381cf62-e056-4dfe-9b68-56154c3a091a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5444d7-ec68-4306-832d-d4647ecd07e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471d05db-a1c5-4c9b-8963-6e9ca8935129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dcf407-0aaa-4b3d-bfe2-daf3cb314130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "768e7e3e-108a-4bf6-a942-77ead8209fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793f3960-cc2c-4663-9f04-eae2bce97f05",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29713e95-3328-46a3-afab-d376fa613891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506791db-8051-43c6-a751-c5ef417ad737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af19b44-9c92-4267-9fe9-74da698b847b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b88759-db71-479f-ae10-6fc30c68b969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39750859-dd56-4161-a594-d4cb1982636b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd95539-ff46-4fd2-b72e-fdf94c2af71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e875c87-024e-4755-b114-c4be3d0634d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53589c1e-70f6-4ff9-8704-4faa3a0fd7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce811d72-d02f-47f2-a296-fee606c76eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20000a7-e400-4a71-b23c-b26928aebd98",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183a9864-8377-4d07-926b-888b0a679440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b69a96c-e722-4181-b599-593aba275639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa6a7ff-9e67-4c44-8c6c-4d59f3810849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b5b5df-7302-4e83-9c6a-875cc4b6b979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439d0dda-2da1-4d72-9e4f-afbddf8cdef7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760acb24-f29b-4016-a5e4-72c58245e172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6515f657-a5c7-4b0b-af01-60cce57f1fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828ef879-939d-4629-86a2-4ba1d3556b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19c59f6f-2c0a-4a7c-a30e-58fb9b61d23f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3567ad5a-3280-43a2-bb53-246d20f80ab2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f860b0fa-6fd3-427b-b9c4-721a647ba625",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abd3267-f4d5-4add-9aaf-ace7f92aba91",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66074d33-7033-4474-be1d-f41316a011ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122f695d-347c-4505-adeb-786700d409af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0b3aee6-7e62-408c-a75b-5e99d6df391f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "323cef72-a9e5-4abe-bf75-02e4467d12cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36d7ce21-fbf4-4c47-8f43-d1a19c77f9b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8a07bf9-a13b-46d1-b063-36cc999dbd9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e329a62-7032-4fa0-8f95-c67928a1eafd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f9c4a3f-5511-4042-9e01-1079efc1e083",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "052df310-554d-468c-b6c3-285dd291fd7a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dafb4744-8737-46d3-a2f5-3865ba4c9a47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8953c55-a221-4b2c-8fbe-ed64c8c749c1"
            }
          }
        ]
      },
      {
        "id": "22bcc6fc-d04a-4bcc-8b6b-6b4c369f5b50",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "954ddc61-3b05-4a93-9fbb-d379af6093c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "043e30d9-6423-4d42-b7a1-fdcca5c11be7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d087dad2-d0f7-4bc5-ad01-7e1b67b066a4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f77a07e-8523-4487-98d9-606db9f31826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226ad64a-e053-4e3e-a203-5f105eeefed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446d152c-9d2e-45e3-9c46-32e10d8e1183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "28ca3a72-b21b-419e-a64b-2eef8e81e5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e985df86-215e-48d3-82c2-9cce7a85ec1a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5acafd8-c33b-4fdc-ab35-4a83da5dbf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e772b038-1a17-40eb-beb5-0de1b913c047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b62a37-b6f7-4ae9-ab0d-8b55686b39b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62287cf-a4b2-40f1-819c-939ba24ffbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad05567b-dc69-484c-9a69-a3519d429af3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f4475d-0a6e-43e0-babf-6ce84a0cf21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4e647e-2fab-468e-875b-04bb3f353851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b262343-1759-4027-83fd-79f0e6ffbd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c40f16-4ca5-482c-a0f4-86c821f34d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c86dfdb-212b-411c-b6f7-6f9856278eb7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec234e55-7e7e-468d-b53c-891d4940308d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca62d323-108d-4c16-8a8e-198e075d2825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58a99fe-20e8-4860-8f4f-11d0df9d71b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f384a0-b5c9-409e-ab24-2b8e26625721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e3595c-98d4-4376-8297-25d859d531f3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0f90e9-09db-4874-81f9-fd697b76a044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264e0638-2e88-4573-bbb5-27d1862fcfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba9e0de-6bab-4932-9711-33bb8af3cd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5091a778-1f87-4c93-85db-001b7a0057be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777efa6d-3a6d-436b-8481-c6642a92b9b0",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d83f4d-a1a4-470b-854e-f0539f09b3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "225eef54-6a28-411d-8249-8e8ad50e92ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d41b96-7c13-4d1f-82af-da0e3651c97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26b915fc-4120-436b-86d2-0644d31a87af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8655b493-672c-4d92-bf7a-b2aca698e952",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672c6fa4-82de-43fe-9343-78008c5d6014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b438dc99-07fe-4d7a-b5c9-0ef7978382c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80520bd8-ff9f-4ab3-ac05-5bf8cfc03fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c00af8f-368e-4a17-8609-4d1167ed7165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221b343e-e9dc-4d0a-a4a4-8a303f8cc545",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb10e51-6b1a-43a0-907a-c10724bfd29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7c1938-a0c9-4cba-9697-16f660251b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f46ec1e-0215-4495-9655-61142ec3f87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7426a414-b7fa-45b9-8481-5c28aab45869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0713d1e4-c6c5-4c7a-afd0-8fabfa50a703",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c815039-5485-4a1f-afe2-e267d3b0091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70beb5ea-f82c-4a58-9b70-09684a60b7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a624a247-7814-43f8-9734-7ecb895f8f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0313958-ecd1-4529-b17a-9569b5d97e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dc44ee-3ec2-44db-9126-1154cae789e0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbc97f9-8e1f-4de4-9a16-1ad03c2eb0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a4374e-f61e-45d9-89d3-f4ba9a793db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f195f36-9ec0-415e-95ed-8ccd4ada5bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e78d76-04eb-4be5-b7f3-d272585a31de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc59197c-f553-4e4e-b7fb-c37440af3ce0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360d8e80-862e-4c15-be5e-7332412268b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecdae0e-f01b-4a89-a315-7b55480cabdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ece98a4-e3fa-417e-8772-ef7ba8554857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "26d3fc53-2b8d-49b2-843d-d26ee92f86c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0205c788-9de7-4c30-a480-11315176b761",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056efc38-8b7d-4e0e-be4d-2f33aa5b1f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c13a5f3-040d-489a-a916-2c6aa4b6afec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c991f61-9632-49de-ad7e-72931873a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30340ee3-b837-497e-b811-f64045abfbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc43814-250b-498c-a86e-47a194fcbe71",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b76d88-078e-48fe-ab56-f40ef158473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3cfb56-2f7f-4c9c-8b29-06f1830bc1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dfe582-f23a-4eb1-8bb4-7c8ca7480999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f57df6a-709a-45c2-b0aa-931a3c85efba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59090644-ccf0-4a01-bf87-7eb4df40f711",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c52f9a8-c802-43f0-af2e-ef041f6ddcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7784db-e16c-4c2a-a9d7-236ee32ceaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f9917b-d3ba-4743-b9c1-0f504333473f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d492c2a3-ed4f-422f-bc61-335112a72137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef9910e-d790-476a-83a3-2d735a04f399",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "753fde53-da32-4cd9-9927-83c53ecb1e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1af450-5889-4cd2-8596-6bb523bb6a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac35290f-bdad-4aeb-a64f-1faece225e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38fa382-a234-4706-98c9-b347a974534a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e141fa00-6d83-4fe9-9a38-e6273d258a51",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562342e7-035f-4319-ad05-01f795750f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137b1bd9-6d9d-488e-95d9-f0a8dac7d87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef8b5ca-48b3-49aa-a76d-154fd373cba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "57379c81-62fc-4030-bbd2-3d462504e5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf6de70-44ec-442f-a124-06aae95a56e7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d90ba3-02bc-472d-a0f4-e8afd18b314c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4ac09b-d05d-4fcc-a9d2-706319349335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14854b7c-b289-43d1-bb7b-e8465aaeaf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "df921ca3-0a36-4cfc-888f-27f6c86cf544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43479af-d9ad-4690-8a12-9aab69122fbc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d74465-3496-4c79-9691-91fd478c16fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daaeab31-c876-4a60-b16d-6dced6646b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befdc84e-c1cd-45f1-bcd7-87cebc0132f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "689c7eb2-32c4-4b78-ba49-5884ee9e9d18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80cf9d54-1e91-42de-8a48-3289d3bb4b29",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422236a9-6ec9-426a-8ac7-b5b467c56103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f7325f-d22c-4ac3-b0ff-080e2726bdc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53edc4f0-7095-43eb-a71d-0b408eb2418b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce718884-8e1f-4a7e-a661-82a633b220ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa49f51-398d-4ad2-8725-e71cb14825c9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0096ab0-bb23-4f61-8d0a-0363acdebc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbbded81-82b7-48cf-ba2a-4ecff185e85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2360ea-56dd-4d96-8053-271b9bd9d945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3588f785-b872-4e6e-ad29-bad89fa2601c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec66b093-131a-4f0f-85ed-2f4f4dcafd8c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5069550e-b3c5-40cd-be7d-2a83dc91263e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266342a7-8d2c-45e2-9409-3f329e70c468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a20d5b-8cb0-46c6-930e-fcf7f3caa610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dec822dd-4d8b-42e0-b08c-05df254b6a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cb0339-12e5-4818-a7ef-299dbfd46905",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfec60d3-a528-4aa6-b59d-e7f013f1e8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23716675-f49c-46e8-b9f4-c5f27989d0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12001f5c-4749-4eaf-8241-f3e05f11fa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ed799a-116e-4728-b092-d281a338cb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7ec3e1-c9a5-4f56-90d3-8aed9eeec721",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1601d96-03e7-44ce-80d9-8dff5b9baa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8da191-2beb-4217-9455-c6b188165570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f22b566-c3bd-4293-a926-46a62b6aca21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3f31f4-e4af-49f6-85e7-5fdce26bd540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eed125-91f3-440c-8464-1d1205922510",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7973158d-face-4a8c-bd5a-9e4c31cdae52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f262f4-adfc-429d-8399-1b3f83d85470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defedc6e-7206-4c8f-82f1-dc1b7f3c8fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "189bd70f-fd4b-4412-aedf-077dd27c71fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d10afec-d9cc-4ef6-a3b2-bee59280e2ec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "017eb2a5-8d92-4f09-8cb0-36b038ed6798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98225f6-44cf-4aa4-8385-1fcc3e7f6bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ee0bb5-6706-477a-9115-1ef83e16ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45439bf4-b64e-4c2e-9000-157964d848ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e0e7f4-8010-4f82-b041-6245ceaec1b3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f4512-9362-48b9-88f5-9dac529a22d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e756e627-dc0d-41a0-8883-69503c799992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8772292f-685e-4011-9a5b-0f598465a1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e415ee-3584-47df-9424-2d09f1b97944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e14a4922-4d2b-4462-bfe7-24ac4ad1f4c6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee81170e-292f-4f7e-8a5b-3f66b78855aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8a1d8d-ac9f-4a71-88aa-4c9ffc1c7847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77403f0-13a4-4074-98e9-04f4f99d8509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73b75355-a58a-4c26-8fab-123233ab812b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022081a6-b070-44fe-888d-bb31da9c74ff",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4168d176-edad-4b33-8a42-d7b4d433a1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33da55ab-ce70-4cc0-bef7-62cfef78540d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf660fe-d3ea-4fb6-89d7-7cad3fc629e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b075d05d-4262-4ceb-a8e1-674bed75dc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fd6e42-5c20-47ab-8853-fd7398b8db9b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156cd7fd-22df-45c7-adb4-21bf87ba4f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7dbd0d-c3d6-41b3-b5c5-d45b732204b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d905c66-0462-4cfd-8b22-6a12c78653cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d65090-b618-45ac-add9-c816a14f3191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7664e412-d506-4fbe-8cdd-43b07fee14ab",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5703baf-9994-416e-b947-0d3c0baf7f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a2fde4-b074-4202-8d56-a38dc9dc3a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936c549d-8c57-43fb-83cf-598e48280796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f3e4f0-fe2a-4c9f-8ec2-bdc093b708e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b4c39c-a658-414f-a56c-401c0a7804a4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fffc308-6514-422e-8b89-810a02fc8779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68e8699-ab1f-44ab-988e-e160652f041d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a640ce61-3457-4fd0-8a83-bb2ed60e1dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e00cc6f3-c69e-40b4-92c7-0ac19fb03976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b81bd59-5067-4969-b901-db9f2461d712",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3819f99-fd4a-4bfa-8e8e-40ebe4d17c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36de18a1-5f95-45aa-b993-251daec54da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d70a89d-de2a-47f6-bf65-cab73bb815d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d280badf-0041-4ab6-adbd-49b1fcfee047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cae305-ef0a-4210-8982-0189a46a930a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfba261-831e-4a9a-a7d0-09f2bc1ba34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49c6f45-e1b4-4a42-9041-ddc05a6271db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2739ab45-6414-48c5-a8ba-9c1b144bceb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3342c6c-78fb-46de-ac8a-381e0390b786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8a7a8e-8809-4fc6-a7c2-1e1c59bcef11",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bec9ec-5660-4ab3-a3fd-d79c5ffe954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42bf9006-07a4-4026-999b-6331171fc2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6622f11-ec46-490f-9364-bd37b855921c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "659908c0-82c2-4ee3-a55a-fe672d181814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfe75e3-18c2-4310-85ea-c247ca1749b3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da45a8e3-dbbb-47b6-bf65-92a746747759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bd5ce4-cf01-4706-8ad5-5a959640beba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35daec69-7217-4076-a1cc-657a2984d6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4073b04-93ff-4813-bf80-b8fb2b8966bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92b4137-40c5-442d-ae0f-7ce01b28c7e9",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3956c4f-2fb9-47d1-90ce-ff3146f9ca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328ec035-499c-4dc9-a975-29880650261d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c75dbf-fbf0-474d-a2d7-4440f8d346e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d858fb04-c5f6-45b1-a96a-e814234ae704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ebb937-2679-4143-a9b1-8f9453ef6234",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf0568e-f017-428d-a71b-328969dcc5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176c39d6-0382-4303-b971-87a6fc142b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a365d14c-974e-4b8d-960e-b3c5612af72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4819d4-3765-4b73-8eb8-f0e2ae12920d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4ac0b7ec-eeaa-4ca4-b1d0-a719a602ca41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a37cf71-d3e4-424f-a7bc-beb3a2d106f8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3893444-ad04-4978-a51f-96cfa9a01a2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6f055a62-b9b1-4e50-a986-af71b0d237d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76f2555b-f0e3-4aab-859f-d6a2475f59e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5e6d343-07b1-486c-8e27-b1634475135e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75333954-72ec-4f47-805e-cf2e32d46246",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af98b7b7-f3d1-4c7b-97b0-dd76edf6cb63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46125ff6-2d0e-4a28-b7f5-2ebde7bfc188",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d31c0b93-e6bf-47c4-9c5d-0d11a0cc3bf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "845bf46b-e0ec-4004-92ec-2964bb20694a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fc26d24e-cffc-418c-90c7-df57e6eccb76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "896ebf6a-ead6-400c-8c6a-57a9deeb30ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99b01a9e-cdf0-4484-b916-eb2bbf8e2ac7"
            }
          }
        ]
      },
      {
        "id": "41a37c80-e88c-45b6-b1d3-8f4ea949b928",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c699af86-3a7c-4192-a162-70f6d72d08b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ff88a4e-5642-402f-bdb2-4b47c756a5c8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55daecc3-9f17-4f94-8a2e-3ed2e88cd6f8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5235b6b3-9bdb-4213-90d2-9c8ece8a0222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56dc942d-5c99-4737-bae0-a6b386f1370d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70222e02-5828-46b6-af0f-f85411cc8046",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb00b034-6a16-405b-998a-4ae15a24fd5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "738eb1c7-6805-49ae-b9b7-ad762b539fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db3f7d2-72ed-41c3-83cc-39061af65b04",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a21431-37ce-4e99-923e-540917b1de3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9fe286-ba54-42c1-868a-caad58025ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a719450-5d0a-4acb-8fd7-9c900066eaa5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672a4eb4-2cf7-4d52-b40a-16ae7038f689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c38f2c-42e9-457b-a02e-43f9d72af7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665cd6a6-05a4-4b07-9384-0a639f3b3ca3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8759a2b2-d529-4c56-b797-8dc5a2c7704c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9f511a-e0b1-438f-abf4-f422def2dc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65341fb1-0c95-43e7-ac28-953e041fa1e8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919cb510-5d08-4450-b9a5-728aca26d5c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07428b78-78b1-4da8-8cc3-ea1b587eabc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0031ac4-b254-4d5b-8342-c191cfae5705",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9969222d-dbf5-4347-b3fd-5c54479c2c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07693cfe-d6c2-4ea2-a444-933687589439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6d8081-6597-4736-978f-50c3afa1bba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6115a22f-17a5-43b0-baf0-ad7d9a5a3de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f16cc2-c524-4b56-b8c8-55d2f7784996",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d704930c-79d3-45f1-8b10-268de3e07cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f008a74-513d-444c-b5ed-faa23d38c03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08493be-1556-4878-8224-0b7c0be01c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d46af9b-6ef6-46cb-a996-b5a9b157c77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654f4b0f-24f9-406e-80d1-e4256c4b9eea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2a92b1-80c6-4e0e-8c32-f6c47ee54921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eef6cd20-1e31-4e4d-b554-d0dea64a054b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00ac79b-12a6-4402-95cf-84d51f7d6bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6671b93d-a8b5-483f-8350-f6402d55ef46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c111fd0-ee12-45ba-af50-16365e84e6b9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34670608-48fa-44a5-b2f7-d28f03fdc477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7876c8fc-370a-473f-954f-913088455f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f6a24-6871-46d8-8746-e6dc4fdacdb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dda686-afdc-4fc8-a0f2-4750e4f71753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423cfcb6-0d5e-4dc4-b7a5-020d772d9996",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efb5cee-2603-473d-a982-5cec8d61dc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0697cd7-0940-4919-ba02-73a9452f711a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14392c92-3ff1-4b70-ba3a-eda2686c2d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8781015-8b9c-4f1c-8506-4c2a8f24cabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3714b22-b248-48ae-8ae8-d4cf1ae50173",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4ea72f-3f1e-4ada-8d87-cd0824a748fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f085ded-6972-4a87-a12c-8df289397a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdff6062-291e-47e0-8db0-f0cf2fb45120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d313333-9b53-4e3b-aff4-87c00397d1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f64dc9-5008-4c43-a89e-a6c417be2ff7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d51a5ea-6c90-4949-b51c-b5d3ca96d92b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c20659-316c-42ef-beac-7ce76bbaa31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c253c59-dbcd-4608-b60a-896bc2770254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010b43c7-a282-4f9b-b6dc-8edd8bd226cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6a7de6-0222-4ab0-b3c9-c8c2de7b6ee5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46903926-5e86-4779-b3fb-4382227168b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df5a1f08-4229-4385-a663-53d9879864d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b493a312-a703-4a21-80d0-5714c7db238e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc229d5-5233-4e90-994f-66eb4fec9a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84881ec4-0edb-4681-ac75-34cbcd5f5ec5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c73d4b0-9178-4b4a-8512-841f4e97f515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64721364-ab43-4292-ad8f-d34e2a627dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66fd3e6-7a81-42c4-9838-2ea952ff6fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e759b575-4e5e-4c70-8284-e181df29d3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ca8b35-f48a-4bd6-ae2d-b0dcf3491679",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc52bc7-32b8-49e3-a092-5c06f7ee3265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68438147-e649-477a-807b-adbbffacce24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3719e2bd-62b1-4375-817c-f8e10e4db77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ce8204-2bb5-43bc-aea7-7336ad62719e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc220b3c-9058-428d-9f7a-2c74c3cf1977",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bb1e50-a098-47fa-b8b7-6070c7e59327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100bcfb2-e1c6-45a9-b591-f62955bcd0a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15460292-7665-4dff-9e27-bd431527c10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06298b91-7cce-46cf-ad95-fdd6dcfce215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6543ff-898e-4447-8d7f-b16516198229",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af69a3ad-6087-4f76-8862-a6b5cf8ddf23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f09001ec-4b4f-428b-815f-a56c0bd22afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81c211e-1fd5-4da6-8b9c-7ec569930638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25064f5-e0da-4e8f-9990-fc7f48541a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5e28de-c63a-4137-9d8c-c3e119399b57",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96184d40-ecc0-49b6-9d55-7804f5b3b155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9db39c8-f919-4214-9f97-1904e215d45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e13d92-6ff9-49a2-baed-d2cd663b582e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab76765-d10a-4a5e-a37d-1cba196566ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f84f83-643f-4b17-ba4d-60ec4802cda1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690367d0-6d23-41f3-8183-125cd112b8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae394399-b2a2-40e7-b182-94a8191270bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086a912a-3f0b-4d71-950e-8e928e8dc909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4268b8c8-0b18-47af-a6e9-8feb08ae63dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aa2790-d9ed-49c2-87ce-7cc441169a34",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56763b6-661b-4db8-99f1-e4d1160cda15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769428cb-1bc0-48a2-bf10-910f1773a442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ded9578-eac3-420f-aa7f-453dff18decc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be095ce6-4f82-43f8-9580-a4dd22cb2438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a1014e-ff11-456e-9ca1-f9f227521916",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f92ff24-8a41-40da-b433-b5f4d5c9b19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc915733-2e2a-4486-8413-cb36901887f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32768805-c701-4e3b-9a2a-1ed8021e7e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe2c381-2799-48f4-a2b6-1552b3143ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db09105d-e748-4894-bf4f-db006d75f42e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c6f3fb-b70a-459b-8199-a4394ca0bb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92f711c-73d9-4806-8a25-31a5107ed37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fe5d03-3c1a-4770-9bb7-e50a4d5ec97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93950bf8-339e-4832-aa64-38186c081dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd5ef1b-13f0-4363-ab38-71d6b9c4dc2f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c423477-cd85-471c-9491-3d6d78371024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ca3c73-ad41-4e30-8f46-7ab3e397381d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38af1799-c52e-4947-9673-c925a99bea2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b09804-4d10-467d-bcad-5df8bc7dfc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baca1786-0080-4871-9c23-25ddf827ec20",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4e6b61-bb55-421c-8dc9-df3b3993efca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e5de11-7abb-4cd4-a9ef-6dbdd7d01b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c62bc4-fc2a-405c-ad8e-3b4877b6a751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18388096-e881-4e6f-b208-aac70b4cdba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2bc4df5-aca8-410f-bb13-f2abc1c32a23",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b098dd40-4806-4218-bfcd-dd2e80af2532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06ad154-a5ba-4c88-ac2e-cdd94a8c9bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0485080d-d7f6-4149-b133-9056bb6abbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174d3a74-1fb0-4508-acfc-c9f8d12b6e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dd041f-f7c1-4ba6-a196-3eda5332af8c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869ad30d-1821-4478-8ae6-0e726c430ee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915518a7-17cc-49ee-b1d0-efd4322b4b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91f4a87-5217-4eec-89e9-834e23a0cf4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30084b45-0439-4e71-a2e6-09211a8acc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18c8946-cbed-42a9-8d8b-20213c7ff4f6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931d78d2-ee4b-4c83-a8a5-4f100e200faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da1e57f-3255-4bb3-b85b-805686b53fcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3539ece-2942-4905-b0a2-80cf8c1cedfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15833da9-b370-4e1e-a24c-d4899a4d7e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c158e0-f6cc-4893-be2c-94b1e9469fd4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da31df9d-ccdc-49ec-bff1-d31784a6a123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25e573c8-5388-4cee-a87d-f9e1d9703c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5435902-0ab6-49cc-90d0-2da436c8d5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a609269-4405-41f7-8751-f2c9a355808d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58df3df2-611b-4a1f-a312-bb443c171778",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52168b3d-3759-4af0-bd14-1017f3771cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd0d06d-c552-4845-a050-3e48dfb788a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1d0224-01c9-499f-b841-d5c9bf486acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b3ce0b-a278-4614-9f2a-45c0a0349d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11341c49-7992-4d7f-9bce-cc561501ac25",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a03e8e-dbe5-4125-ad6f-62eb83c6d2a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b75907a-7f75-4df2-a3bc-189d9a3e0216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9857ef09-8961-432c-9837-1a9bc50d529b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9258974-b314-4577-815d-13557027f39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445093d8-37e4-4bd3-a4d3-d589912c7f0c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc95db45-55c1-4e5c-811f-ae2f7045d51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aab9fe62-3c81-48b1-a4d2-8083a165b634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc572de-a98e-4ec6-b844-89fa3546aaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e9bcac-4d4b-4feb-b8a2-95c66a44dc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee3ec8c-f0c1-463b-9050-a138fbf8de48",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31329394-60dc-4855-b9eb-1b0f8f6b2a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bf622c0-7810-4147-8de1-2ed429295196"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332b6f0c-d078-4e32-bf4d-78a1c1c50a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e27dba-3296-4e1d-856c-1e28eee631d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ed6f85-3de9-4b57-b679-4c4fa81c36f2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33621282-f43e-4ace-aa96-2c69d11e7c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a71d5e-9ef1-4d71-a5b7-260d8c37c0a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9763f84d-e3be-4d1b-905a-09ac49c966ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43daf165-e9a1-4761-905d-374a33b94762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5521eb43-4f0f-46dc-8a11-3674ed606f9c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60357184-abd4-44da-8338-dd67fe02608b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da89b7d-5e5c-41a7-9962-3d76147f4d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59045cc2-3c7e-4cb3-8ab9-6d73e4ae453b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbe36a6-4844-4d16-8b0d-ca8491a912ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a2dbf3-f8a9-41c3-a4eb-6eb1c9603690",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dce1210-0fff-4e2a-9e2a-72c27954b67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea64ef5d-4797-4849-80b4-96cbd4ed51ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd50bdea-9111-404f-bd0d-29fd2b02825f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71071b3-eabc-4f4c-bd56-08ca8b127512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9aeaa48-d893-4f9d-a41c-f197cd669161",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e55a4e-a432-4bd8-8a1a-319166d985e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab48452-de70-4b1d-bd7f-fd32d3c80b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d5d493-60ab-4429-a581-b0d2767d5789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1105858-ef75-4740-952c-3198d51a6318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa12c4f-d79c-4e7a-afe9-0f9491c04992",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b1a9f0-7417-49b8-a45d-899259499089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35108dba-95cc-439a-8386-9a9f7053700c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e2acaf-3cac-4f7d-ac4a-cf85a2e77c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2240f41-37b7-407c-b918-753517e0cee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea51d5dc-283a-4b06-b5cf-8c475e5fa7e2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36db2893-d517-4474-9877-9c95165d65de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b37988-3060-42a3-a31b-e7d5a3473932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7ed5ad-1458-4738-9bc2-0d6c17dd9e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82e7832-cc31-416b-bcd3-f28329947fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942814f3-66e3-45ad-9f9e-57ebe9b5db93",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6527b2c7-a1b0-4c24-920b-767ad5303c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f7a31e-4ef7-41b9-9a9a-249b8a308a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd80866-dafa-4a38-af5d-27caa2fb5373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3579cb-e343-4724-98a4-ce144f239ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c544e76a-d2e8-4d0c-8b40-ffcd9cbe48e2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b6b08f-585d-4311-8073-5cf893450729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd5c341-e03e-45f5-ab00-7207ff01724e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77a1e5b-a01c-4723-b79f-b4479817bdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d4784e-eb93-4602-bb0c-273756887fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05c7329-9f53-403a-9570-b47eb42558fa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6000af5f-b1d6-447c-ac59-0c2d9f97f88c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f11c8ac-9fb6-47c6-b46a-ffc838333ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4579ae7-efbd-4d00-a999-f6bf7b510aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c5ab8e-e11a-432f-9908-2bb8dd35af23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f4768e-e33b-464c-a0ae-28053ae152c4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9face42d-fbb1-48c6-ae1f-a93c8f0a8e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efe1443-ac38-4bec-b785-6857d98df300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671f70ce-83c9-445a-b5e3-db805e898cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecb1268-3b67-4e85-9e81-1406b9eb6f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e20020-eaf8-4f0c-b58e-efe11b431532",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0833a648-6f51-4d8e-9a7c-d6dce2f9faa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785abcb3-67af-4460-bc76-91bd79e1cd0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e24d4f8-1c24-45d3-8f7d-8f04c28e99d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746653c8-6653-4013-b85b-33a2906edde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9a9700-c8b1-4bb5-aa6e-1be4d2ffb0d8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05d6792-4e12-4036-b463-8e2fb2dfced5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e764b933-de78-454d-8215-0ffe7445176d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f566b8-e8e3-4863-bcbb-087f74eee682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6207dc5c-8ba4-440c-905f-38df9161cb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589543ba-480e-44d2-9d7f-790ed9ec814e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29851508-4d0e-4642-bd52-d80b66c5ff6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7080a73-95f5-4b26-ae8f-15a31cc015af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964999eb-00f2-4d94-974e-f3bda0139fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1a0000-1610-4547-b401-0c4723239401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10611060-d4d4-494d-b816-5735a4867e4b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4bf0dd-f062-4574-a3b3-32ce7435a451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dae2951-76b3-4046-b179-486358e0066e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2252b7-cf89-4a21-920a-854b9936e3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2141d121-1a9e-4447-a250-042fc940a5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f920fcb-239a-4fda-9b4a-e1502fd51f0a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171e9e2f-68a1-447c-a2d0-f9591c0e6b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36c63dd9-89e4-49a9-b0ba-fb2a50ff5c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73eb377-613d-4015-8a1c-191eefef6ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de2b48f-7810-4a88-bf7a-0e42b3cefc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd1aafb-decd-4e20-ab26-c894db4ad9de",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96af3990-524e-486d-99c7-48d38affbce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e74c4d6-abdf-4618-b885-1059af520d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d6debc-6710-4ced-9536-af232a7beebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a91664-ff82-437d-bcac-55ce4bebb6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e484d2c4-1c52-48c5-abbe-1dedebae6194",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91efb431-645f-4b02-ab19-c699a77b917a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838efe41-97b2-4416-975c-df59b1124aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcda36f2-08bb-4ec2-9832-d0f9e7555fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93cef32f-688d-430c-8ad7-7ce0e1edb6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d710b472-3d08-4374-8825-8991a20717cd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33df4d8-6079-4da3-9f03-3a114fd10e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ce486d-e3a9-4e33-bebd-d9b7a5e2be5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b1d23d-adcf-49ca-af94-f997377ac8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986df219-d793-4d16-bdfc-d78031ccc208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0034bf15-e267-4d3f-b7bb-ff4b297184ba",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7292977-be1c-4099-b370-36fd7a141740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cb61cf9-7a2b-48f4-b1b0-6c2ee9ebfc61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0448ac4-0dc2-497d-bad2-d4bb08f33154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17def94f-19b8-4501-a16a-5f6b5b330b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42ef4e9-4fd1-4f52-968b-aee67a3b59c8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0390605-b9bd-4318-8f14-203c46021b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b18907e-7323-4657-b069-9426c5b8d085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6519a2e-8210-4f2a-9b1a-6a02a8797089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7ffbf8-9f63-4ed7-b881-46c5d2eadaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd1dc96-fb69-472f-af97-35266cca0557",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34c352f-ff05-4160-8ddc-65fa0cee74e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a926dce-663c-4f3d-a712-75fb07df0b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "445cebe0-a549-471a-97b5-9951f1de99ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f1325d-890e-42b1-b17a-68fef01fb1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b00237-8f73-42bc-b304-ae43d3d652eb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e708ac2-c923-4e5b-b29f-650987f9f8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ced0a18-f62d-41dd-879a-d8ffa6fc67ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce580fce-80f1-4dc6-b1fc-515157caade4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd05c8a-bd1e-4bb1-b82f-16db7fe90c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d246f76-d14d-41fd-af23-d1d126f2f13f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90202f15-bb37-44a8-a6b3-9f7090450221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4def817b-2f16-4b59-ac01-144a058f8f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7a53e9-4359-41a3-98a6-c95271016eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79db1a7d-29cf-46a2-9402-0281e97cc000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd066bd6-e1d3-446c-b306-1626521223d2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a2c446-23de-4f26-84c6-43cdff6a5784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd202aad-0710-4418-97b6-c26099b91252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94aced84-ac70-4711-80ef-d68ddd24326a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91803088-8f87-4766-b8bd-6dbc342ac0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08aa878-5ae3-4021-a1a9-bee6b1c1f377",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6908e8-c232-417c-bd67-af1628baba31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171181e9-f751-4c65-8088-338262f9b594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3b385d-1a20-4949-b5d8-44dbc20e6773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4430f95-7854-480d-8667-45c581480bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c84c6e5-9e81-46e4-8c77-cc75bf5227c4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabf6d1b-2d1e-4e43-abd1-0a394cf1b500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4b61c5-bd97-4ced-9f8a-c24e30ba12c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918f388d-f211-42db-a2c1-1ab79e38462f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9467e01a-047e-4f3c-8a04-033d87d4f166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979b4d8f-a31a-4a64-b794-a879496d0435",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab224c0-9441-47b5-826e-ec447d549b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4510f4f9-d0b6-482b-8e66-ed98f8415b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4dd3e78-8c8a-4925-be00-940f7e833853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2455a5b5-c8d6-4476-987e-ed8328701c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe8491e-a4b9-4876-a27a-0cdec44db033",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd3b444-b50c-4207-89ef-7e82ae60b9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4b80e9-f0be-470d-8ec3-1310307ced20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0324d4fa-b1e0-4a00-9b6e-949acbe9e01f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7317bd-83cb-4e72-81b8-cec86a776dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08916d71-1075-4003-acc1-0d2596adffa2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885a92a3-316d-49ba-b99e-b0495717b7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8a02e2-1744-48d2-a3eb-9d4c045262db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2248b7e-e33c-45ca-9bee-35734e959d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "920bbf21-6048-42c4-91bb-b059b8fee305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3782e57f-e4dc-4462-a655-2ff8038efd82",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8a4c11-aa79-4082-84cb-dbd29ae0febf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd36723-abbf-4278-9f41-bf37394631a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c015ca-3060-41c6-b635-cebf26e76f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8976ea-5389-4ae8-ba56-9ff28a25e79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0fc4a1-4895-4d01-9136-f86e0dcf0268",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617942e4-58fd-456b-8985-05453e41ac5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f171b474-cdb6-49f8-92a6-9502a7c6117b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011a3743-d318-470f-b6ae-6db5b0fdbcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad139f8-91b5-4f92-b187-12d65ca30074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807f3b7-aea8-4c93-8116-c12720fa11ca",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22ad546-f1e1-41c2-9674-d2548bb4eb3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2cd6109-9f8d-43d7-ae5e-a4b68908fc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba59443-263e-4976-bedc-a55e1899c5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486d1b19-f7eb-46df-a9ab-19af8325bede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7779aa-2461-4d45-b45f-340ca3713f12",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ceb139-d155-4b9c-9379-8a6ab462f731",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f169362-dfd6-40ea-a5cf-0e44c05581a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3980ef9d-d253-4248-9ed7-1d239bc74713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324e6308-9d4c-4ae6-9e61-a16de88e4418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f26272-9358-4819-bdfc-612675211e26",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bc43dd-0fea-4b4a-a109-0ee1d7a1a404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbff3ba6-180e-4031-892e-7baf105377d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8667cd00-37d5-4e90-b5e2-d17b37c8492c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25e9c55-3f97-49a3-a2e8-b0b258212d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a084fe7-6d49-472b-8374-c57d139c8367",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6f04a7-e5c9-4e4a-b17e-8ec6d58e808e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94ed11aa-1cdc-457f-8c73-5e07a4495e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7790824e-8b04-405a-866b-712a0ac3feee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a30ab6-af6a-491d-aa90-4287062b3dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c011990c-5b17-4af2-8d9d-eb076064229d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2fce23-31bf-46ca-b51e-cf2330dd4d45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ab989a-d1fe-4903-b151-23cae8a25bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff85d19-c5ec-4db8-a092-6f3e7faa5b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f0ff0d-e933-490e-8de8-f22cb8d8fbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056d15db-86b6-4431-8986-8b6023983fb3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a593b611-1d85-49bd-bda6-1f951f72a3f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f10a25a3-3757-4fbf-a9bf-985535d593b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979430b6-fbad-40f0-bb6e-33483d53f78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffe8fb9-8ddf-4bf0-887b-f339c15ded43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbad7d7-8180-419f-bf36-6108a53055f7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3c259d-64dc-4355-9f16-4e4a8e50ba59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a6b9d8-2bf2-44da-b2e5-b7079349ec10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edbfcb7-1ed0-46d6-94b7-92f446167f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6215b3e9-176b-4f1f-8bd7-6ad250b6bddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d24844-cc20-4848-9f38-dad369a7c5e8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089288e2-ec32-4bba-b3e6-cd53058662a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd4d1ec2-c3a2-4c09-95ec-6a0713f7fe86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8323645-77ec-4679-b774-67358e8390aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8d4c84-edb7-4512-91f8-bfb9283fe52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893d22bf-28c3-4752-8b02-86f5e8ca45be",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a97a35-2197-408f-a653-92a9625c5009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f4a7412-2a4a-4ae3-a96b-c5e3798f2cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30052e47-502d-4e15-9c28-33dd771c4043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7008a1c9-0fe9-4533-8058-428fa58e2db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2a3c89-ff23-48c0-9c02-b8d4472fdf3d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d16d6b3-7ffc-430a-bab1-0263e7574eac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140a1e98-75ee-4731-8b99-9a7d419fde2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e94e89-f93c-4933-92f8-36a2e799fb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25f82a6-c924-414f-86f4-1f1352282653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4cf4a4-5053-40e1-8fe0-69e43a61a198",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bf5df2-865f-40b2-8c6b-6e10a6a1db24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7840b8-8bc6-4582-96e2-1d9e292dbd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae70d3e9-633a-48c2-b5af-9b3bb136b01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0276e348-af83-4b52-abf1-d5292362caf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b2f15a-2017-4d84-a489-7d4d951ae24a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ace1248-549c-4a13-b9d7-7905ab5b7dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d65e55-c2ec-47e6-8902-035d2330836c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9160e230-9b1d-420d-b3d8-ef98d6c5b245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce16519-61a8-4d68-bb9a-0593d84420b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58dac689-c220-4608-8bc2-8ff226fabf08",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ba3ba8-12a4-4728-ae21-0eb4fe50eaa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "635cec3f-5702-4351-9b1a-d759a5379756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36cc26e-7898-44d3-b998-1813acf23ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1307e5-9066-43da-a7ab-b1d36b234e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0276c5b0-5da2-45ee-b9ad-fcee6168f4d8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70f8580-616e-4dd7-bd15-c9cf608e194e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a66273e-2e8d-4f8a-9fde-d7fddd33291c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a2f32e-edd8-461f-a6d7-4c66fc0ddc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e99be7-cb58-45a2-b5b1-0c506d1a8251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7385050-c4c0-46d6-997e-47fd3ce6e1e9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c974ea4b-dfd5-4f03-87c4-e14f1ea2a56a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac54ab53-f88b-4ed3-a2d7-1074fae0821d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0c07f4-6363-4564-8626-75d4849f2023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48a570f-71d1-4a93-bf2e-deea2592b715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da092007-c528-4a48-ab11-120a66b81f08",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1ae863-9c7e-4c32-930f-e950207349cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f47631-a654-45bb-b3cf-e07c92ceb7fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5723cbd-1bf7-4e2e-b65e-13eaebb08351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6711fcce-da60-4b0f-8206-1ecd9afa6181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e969735f-f71c-49d4-b54e-a7d78cd32035",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81be4c66-6e73-416b-9347-43a11c886610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f393e3e-88b7-490d-a6ea-75b82535ca51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1619a1a7-be83-498a-9217-9c4c79f12719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3fb026-a81d-4a52-9ea9-582ce9ed6faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ace9ea-fffc-4247-85aa-c4dd3d839e3e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e72cce-8268-48bf-9722-e9f9cf6785fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fcda846-3142-4068-bced-29b3d2373ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3caae9b-7426-4b17-9532-976942e7c5b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3110dd1-efb1-46d3-a95f-d0a3b60efd81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78334960-7681-44dd-89be-f25034814c72",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1cc15c-40b3-4d5f-9ba1-aa86bca25e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c3a742-4541-4ce6-8020-472c517fd90c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089e98f2-a11c-4560-9e15-884ae2d01114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ae8f61-0f2a-4ea0-9dea-d5e14b753a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9579eddc-be00-4cac-a7e4-7c328a33ad60",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d8b86d-08a9-449e-b190-6e33630f0713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7627891-b833-4e4f-ac79-5f04adb3c5c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "090a0c6a-b9d5-4bfd-a70f-42cdea3731fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea434f7-5545-4583-9028-31ec622fd229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d828a48-c2a0-4814-86d1-61ae7b984311",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de04f3ef-42e6-4c32-8d76-a8f9ee960298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ea1ad66-401c-44ab-9726-6825121c8e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad059770-289e-4adf-9a8c-ba488e18bf46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e675f9e4-279c-417f-a83b-a02973218d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808dabed-a40b-42ea-a773-98cc42964b72",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6d8cde-e975-46c8-8f2d-007a33f617f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1341db-30d9-4c59-aeb3-048cd4ba60cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9647088-f48c-4b5b-b973-756d77a31f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e4ad68-0e28-4e06-93dd-4ccdda8579a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17cca8f-c046-4211-aa67-71bb30be86a3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031cbf69-4660-4671-89c8-34609922f76e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f53132f-a4e7-439d-bcea-dc9596e6ba00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baf523b-1fa3-456b-8f7c-3e4bf5e2c62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764d77b7-aa4f-4029-aa91-37f5e8803c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3910f29b-9a1c-4eea-9ece-a7afbc85114b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd63445-c465-41b0-9da8-25c8c0efddc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f1f2d7-e041-4199-bc80-0d6621f3993b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60163ff-2f22-4caa-894f-b24fa362c92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3ae146-13e0-4306-8c11-e70f9688f1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d6eaf5-c19f-4992-842a-03aa28352e65",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74b8050-5f57-4e87-b0b6-81ee596dd6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "518a4221-3f30-4fd2-b2c3-8d221c2ebb98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dcf697-912a-40a9-9463-1e323674f5c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b602ff-a3b9-483b-a64d-f188409d45dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54c5816-3176-480f-8422-a0d16137fb18",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53d27fa-59e7-4c94-84d4-76f20bbde217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71622b0-5d16-4eca-9da8-26a6c9ac3fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8edad35-02a3-48ae-b737-56c45435a5ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581ff331-0e93-433d-a989-8e7d00d3f42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ee4ef0-1122-43c4-9427-6eb25f9d0db6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34484fb0-c093-4776-86f3-025a5e0494c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42656386-0d39-431f-845d-23758e97b4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb8f567-2c40-49d0-9e18-f5690a97bea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c4dd76-892c-44b4-918c-a428807f9dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c606c936-44a0-498f-83f4-7abd8b8c043e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8c12a3-65a8-488a-bdb8-799587a606ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a69641b7-930c-4785-be7e-1fe1a481e8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8cf09-9aa5-4f0a-99f0-c210bdbbf4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba853ab-2fa7-4e29-8e11-e4a4b96c8cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243140ef-3b21-4612-bac1-6aece844244d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2ab1d9-9dbb-41b4-99f4-5dae2c54b9c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb8f0669-2187-47f0-9af2-498f911d893e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8926de6a-0314-428d-8945-50b6ff1bf998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552d1b1c-3a0f-4444-a49a-bd772960f96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee642842-31ca-41d1-b89c-340f6cefdad2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb52d1a4-d193-4ea6-a907-6437ecc14018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b227d476-b7b5-4570-8458-aeaefa673d56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a9bc8c-8100-49af-8b18-872856018ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34adb728-134d-4775-a24e-2726773d3a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923fd7da-6224-46d3-b0e2-a32ed8081cb7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af4e5b0-e1c4-433d-a767-36d4a67796bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9a31c0b-2080-4420-8447-50bd9b6fad50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a646b2-a758-4c65-b5e5-554f91a8cac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fce8063f-fdb6-4d66-9104-054100df48eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cca8195-96b9-4789-bd80-0b81a2cbce2c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292bc880-6986-48af-a7f7-f523cc396fb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2748542f-670f-441b-bb33-56dd430e5174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2a0bab-4e64-4810-a57a-be9c0703143d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039ad173-8e33-4ce9-b805-00653ce34405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0046c9d6-dd42-4111-8990-e813a05ef1b8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad25d4ae-732e-470a-aea9-e1390311b4f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34ef88e0-56f4-440c-a297-5d2b1e4baee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bdd44a-311b-4ec5-9401-50d4f5a245f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88ffab9-af0f-4a3e-b7b1-69c1f2d6ab12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb739263-5bca-49be-8354-235d5af595c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e680a07-518e-405a-9297-9435e29b4b84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d844dad-c7ab-44c1-998e-e89ec83d3a24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "616cba23-d870-4e62-b572-3b77f203b2fb"
                    }
                  }
                ]
              },
              {
                "id": "cbe5b3c7-e495-4e82-89e3-496650a7062d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ec414f1-71c7-4511-afab-6b4aeb7d4efb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f2eec4-061f-41d2-a390-aeb2085f77a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a01a912e-4722-44c0-9bab-02051fb712a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24745ba-3c40-4441-9d49-d28d9844e4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3340200-5a5c-42f1-8559-d9a075c7a17d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b9013c1-11e5-4419-b771-9d62f9d64762",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5efd9b3-54df-4c71-bf3f-72d5338280e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "105b91b6-80c4-4ebf-8cb7-4eb43559c016",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a985485-ce36-4865-89c2-e1f79229fccf"
                    }
                  }
                ]
              },
              {
                "id": "f36aaf3b-0575-4723-b6a2-6fa73a8a44a8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c5c2627d-eee5-4160-aa9e-eb759c9c6da8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6970e3c-d238-468b-b764-f49ff3695afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "672ad0ca-0590-4755-aca2-14d759524a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26787ee8-5a4e-481a-bd55-02cb09d7bd33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0166f0f0-6b6c-4a4d-9faa-c6f28cfd16f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9cc006e0-a4e6-481d-8197-8b18a96c0a99",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8a5eea35-1e83-4f88-b90c-ecf9abd249a4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3699163-2ac4-41af-8177-a7adc7c84afb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8b3e93e0-16e7-4fe4-85fe-1f769c3b92eb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51792c1a-31bf-4425-b5db-12a9bf492b58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6045a0b0-031b-440e-9d14-ced8adedf214"
                    }
                  }
                ]
              },
              {
                "id": "3fed88d3-d08b-4f5b-b7ae-3a5ff1510b77",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ad5be32-2bcd-405f-bb84-7a12e06292ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4571c51c-fba0-4fa8-8754-cdc94aee71b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a50ce26d-bf6b-4d72-9fc5-43c727796df9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9f4347d-dedf-4c0f-baa5-74bb434192f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f539fd5-be42-4200-883a-5b9b8be1059a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d54c2045-6c51-48a0-b355-df57fd87ef4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04de1414-6d10-4f0f-90bd-82637ac711af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a47bc4dc-a318-4e58-9079-d5312dff62bb"
            }
          }
        ]
      },
      {
        "id": "4dccc1f2-2b19-41bd-b2f7-3ad03690c446",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dd8658b2-627c-4f67-8da1-384aa06e7242",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3157a4ea-c94e-4b75-ac0a-e3f591c77adb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5dd41e46-b092-427d-9560-b72f270e07f1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abbb925-50b6-4b95-93dc-74d595d279b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "66f72343-d520-4665-a3de-3428609bf841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94071777-d508-4a26-b566-267f1fea8606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "098e9462-8ced-4f74-afb4-e1c73570ecfa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ff3c440-0406-4116-89dc-2974c622476f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61313179-b78b-4ede-92c2-cd3e7197a16e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf12755a-e10c-439a-8d90-ed876a2cd88b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42dfef5a-4fec-47f0-b9a0-4dc5bd963e4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b095513e-2520-4831-ad0f-250486962a61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "79239b0b-430f-4f33-99d1-5b0e064cecbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "227551b2-b6d2-42e5-bb4c-97750cda057a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94a06be1-6359-4c9f-96cc-be1ae01f88db"
            }
          }
        ]
      },
      {
        "id": "5bfb99eb-10f8-4142-aac7-f61e18d41e7a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "04e5d896-a738-4cb4-93dd-9629c7b61926",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3dc22f83-de1d-446a-92e5-5528d342693e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e44487ab-1d68-44cc-ba82-f450849f055c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1336df-2a7b-40f3-b0fb-c549d4357fde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ba3717f-3508-40ac-89c8-0851633ef5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff1c198-843d-4960-b545-d7df3a07265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c45e6149-4d0c-446f-a668-9a9bd79df08a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67a4230f-e9ab-4f99-8919-4208bebdf0ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa7fff3e-64cf-4c76-9c6c-2883ea08ab0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bbf205e-0832-426a-9ab2-2cf5894d6b47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2f85f85-3c96-4078-a436-4b5ea67d4499"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68420a96-101b-4cd0-a5af-4c9ba349e011",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "33a0a868-dc67-4534-bccd-b11800ad80f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea1ba786-bba8-4fe2-9d6b-80f047bada5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b35945d7-3702-4d0a-bf44-580a64af58e2"
            }
          }
        ]
      },
      {
        "id": "a3d1d307-4e1b-4074-9311-1dec3be364bd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1b8647d3-e0a8-4a5f-95ac-f3caea58b48e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d9f51b2-f812-44d9-901f-73f79e87a2c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b70f5dc-318f-46eb-8e95-750903211171",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72786be1-2678-43c5-943e-820697947d08",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c3cc4c6-24dd-48a6-a0d2-ac9e8a59741c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0850f2d-ea78-4c02-b478-1b303e6b2e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65e43f8c-8a8f-490d-945d-71f6787ff675"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ccdeae8-e40c-454c-8389-a5ca8710fe1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f60c5b34-2167-4c1d-9a85-f907dcdb0b43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "177c97bc-b3b5-4021-b68e-9ac7cca76612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ca417df-69fa-47c1-b806-316a5e240c96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80855bf9-5d34-4870-8794-d0f76d329e3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f09bea6c-250c-4ac7-8d93-aaf22db2fea8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f549437-46c8-4bcb-89f4-87be049bee29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b792308-d9b3-46ba-b793-84ac9c8e56a1"
            }
          }
        ]
      },
      {
        "id": "b874be99-336d-45da-bdbf-c35ab42bb116",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10ac9164-b41d-4bf3-b7a9-8f6523d35016",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "957ea029-a514-4915-bdb6-b3e565a8dfb5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f122c596-764a-4869-8b86-dfc1a2024794",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3712c757-8cf4-41cc-8b0b-0287597086c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c43db918-f5cd-4f9c-b31c-4d1345feaa92",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 95.54929577464786,
      "responseMin": 6,
      "responseMax": 2013,
      "responseSd": 232.98481415376537,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695861198657,
      "completed": 1695861237947
    },
    "executions": [
      {
        "id": "2e6a3d6d-2951-4fcb-b176-599d7513daaa",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1fd0505f-69bb-4664-85c6-48d6a0444972",
          "httpRequestId": "c5d7bc52-0161-4bd1-b7fb-23ed539c7dd7"
        },
        "item": {
          "id": "2e6a3d6d-2951-4fcb-b176-599d7513daaa",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "57080e6e-3405-4ff3-9695-424969a3ae53",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "6cf6c7f3-05c1-46f1-a780-1b003fa08c41",
        "cursor": {
          "ref": "21f444fc-23b4-4322-b11f-712b575f8c7a",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c6d9acd2-5f4e-4c6f-8279-1b2401b6c1b4"
        },
        "item": {
          "id": "6cf6c7f3-05c1-46f1-a780-1b003fa08c41",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d96ea93b-cccf-476d-8244-07060fa7bbf1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "6410e2fc-162c-4a13-84c1-a03051fcf240",
        "cursor": {
          "ref": "b5d47f45-24fd-46cf-ab67-c97ad17c566c",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d8393f0-d1a4-48d0-b9c7-60f0a1f24405"
        },
        "item": {
          "id": "6410e2fc-162c-4a13-84c1-a03051fcf240",
          "name": "did_json"
        },
        "response": {
          "id": "72b03561-9b37-42a5-b387-bff1c09986e4",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5acb63-9e2f-46af-ac82-8b4ac3c65793",
        "cursor": {
          "ref": "c3c44a8d-36a2-44f0-aefd-9d9d8c6b1dd3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca083218-a6fc-43a9-b4cb-2bd01be9269d"
        },
        "item": {
          "id": "df5acb63-9e2f-46af-ac82-8b4ac3c65793",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e9f9901-497e-4a30-ad45-ef6db8f83300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5acb63-9e2f-46af-ac82-8b4ac3c65793",
        "cursor": {
          "ref": "c3c44a8d-36a2-44f0-aefd-9d9d8c6b1dd3",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ca083218-a6fc-43a9-b4cb-2bd01be9269d"
        },
        "item": {
          "id": "df5acb63-9e2f-46af-ac82-8b4ac3c65793",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e9f9901-497e-4a30-ad45-ef6db8f83300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68dc951-5d25-4a29-a9e1-d7b8eb8ff3af",
        "cursor": {
          "ref": "07406bc5-4f28-4580-b1af-83b503f74850",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4dab739a-f6a5-42a2-b7ef-770ed9473985"
        },
        "item": {
          "id": "a68dc951-5d25-4a29-a9e1-d7b8eb8ff3af",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "95c54721-e0d2-4558-a6f2-1fd3be7c283c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98dc7bf9-fb67-4688-81af-2edfa1686841",
        "cursor": {
          "ref": "72e89feb-d584-40b3-9f8d-d3bab25ab556",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e3799986-dae6-4ed5-aac7-a55daa9e9ce4"
        },
        "item": {
          "id": "98dc7bf9-fb67-4688-81af-2edfa1686841",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eafca7dd-8dc5-4f26-88a0-6950c9bd6822",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a782b806-ea84-4225-817a-bada2670e615",
        "cursor": {
          "ref": "ae0ecd08-030b-42e9-80fa-4e5e59b0081c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e334f1b7-99fc-4882-8d2b-776e44ba9785"
        },
        "item": {
          "id": "a782b806-ea84-4225-817a-bada2670e615",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ad870f6e-0718-49e1-81ae-0bf1a960591a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3da7fd5-fa5f-4254-a87e-62d68aa89827",
        "cursor": {
          "ref": "9a9ef6c8-4110-4b2a-baac-04d0728fc065",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5f78d17e-2f27-46d2-b4a1-6213c2020a32"
        },
        "item": {
          "id": "f3da7fd5-fa5f-4254-a87e-62d68aa89827",
          "name": "identifiers"
        },
        "response": {
          "id": "c75d16cd-c5ab-47b6-975a-dacf6c1be875",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e6334e-5347-46e7-9d52-5aeef3369b40",
        "cursor": {
          "ref": "efd8bd90-40db-4223-855d-39969a340ce7",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "24e72b13-2e36-4d34-a684-c3ba8818f25f"
        },
        "item": {
          "id": "86e6334e-5347-46e7-9d52-5aeef3369b40",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "da160bba-aa28-4afa-b63b-4740571a9805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7769b9d7-06e1-44d7-b23c-1974cf3f59d4",
        "cursor": {
          "ref": "e997c679-b915-413b-908c-a16215dcfdc3",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dcc21e27-42ff-4a06-8077-a7381a02297f"
        },
        "item": {
          "id": "7769b9d7-06e1-44d7-b23c-1974cf3f59d4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5e133660-8df5-4266-83c7-a76db6c03602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee573e9-42c9-417e-a133-c974c9080e7a",
        "cursor": {
          "ref": "12637720-3e83-4550-8343-11810887cbc3",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9abf3d2c-6954-4f97-b74f-a6a8a79d6f5b"
        },
        "item": {
          "id": "7ee573e9-42c9-417e-a133-c974c9080e7a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "75a5a910-b666-4d2a-96b1-c5d560ed7222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118b4f47-8785-480b-b34e-8617ee394250",
        "cursor": {
          "ref": "c8f5c49a-5fb4-423a-bdad-e317df66aa6d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cc8dfbd3-25f5-4134-97fc-3f8a4b601060"
        },
        "item": {
          "id": "118b4f47-8785-480b-b34e-8617ee394250",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a4fc7347-399d-402f-8341-b9f08f4b29cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ed8394-8ea0-4de4-8007-ddbbf567c878",
        "cursor": {
          "ref": "4e1a7b6f-0ece-4f25-bc94-e7f212d126e7",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5575a41b-a72c-44a1-b617-5df32a31b992"
        },
        "item": {
          "id": "05ed8394-8ea0-4de4-8007-ddbbf567c878",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f2dd1b02-19af-4823-87c4-e23c24e0cc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022628d6-1d21-4a39-ac95-c821030e3adc",
        "cursor": {
          "ref": "4e4242c7-245a-4506-b64f-e076e3f026be",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b6210cc-3f6f-4522-aa5c-e56c7d868b97"
        },
        "item": {
          "id": "022628d6-1d21-4a39-ac95-c821030e3adc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d2fa70fa-3297-4618-816c-e1ca47178426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776abc31-9f33-46af-bb35-909fc47f1e51",
        "cursor": {
          "ref": "0689d1cb-a490-4cca-9bc4-d74db8f44a2e",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b1f6d198-787d-47a6-a81c-0ccc77449d83"
        },
        "item": {
          "id": "776abc31-9f33-46af-bb35-909fc47f1e51",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e2e62d80-bedf-47f2-9fe9-72322a7aa240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1239cffd-8bb4-47c7-b77c-51499b97788d",
        "cursor": {
          "ref": "69460089-e0f7-4306-aed2-5375cd9eb0b3",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a98c7b08-b3e6-4e93-9848-63e6c16c4869"
        },
        "item": {
          "id": "1239cffd-8bb4-47c7-b77c-51499b97788d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "62803b2c-d393-44ff-a970-3ee7077efd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a556a31-0633-4a06-ae71-b917599b0e03",
        "cursor": {
          "ref": "6c5d7640-c98d-4a83-a7bc-e61899da45fa",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6a37da82-95f2-40b6-9a3d-eacf4ddeae5a"
        },
        "item": {
          "id": "1a556a31-0633-4a06-ae71-b917599b0e03",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0c542eab-34de-42b2-a55a-4c619ea3bf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea27a18-1ae5-472c-925f-9773ce0bd4af",
        "cursor": {
          "ref": "5978563e-d54d-4cac-b31b-63ba24da9293",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "843e38e8-f4a1-44a8-9592-707fca24ccc4"
        },
        "item": {
          "id": "8ea27a18-1ae5-472c-925f-9773ce0bd4af",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e310029b-6f04-4748-ba0a-7fe9bde169a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544475f8-1ca6-447b-b233-0ffd4d1c00f4",
        "cursor": {
          "ref": "84b8642b-0dd2-4504-902b-3816ca05a359",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5fd48128-76b4-420c-846e-266a27c94a5b"
        },
        "item": {
          "id": "544475f8-1ca6-447b-b233-0ffd4d1c00f4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e26f368-adef-4ef6-9091-0f2914df0fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6aa1a7c-5e64-4125-9aff-d775efaae896",
        "cursor": {
          "ref": "2a0933ed-282d-4554-a4bf-9b41b0bbc4a1",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dbf8cfec-c578-4871-9d62-435800bb1f64"
        },
        "item": {
          "id": "c6aa1a7c-5e64-4125-9aff-d775efaae896",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3384e67e-0cbf-4d6b-a7f9-142af2ab2f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c7f1cc-8fdf-4d55-a2c8-132dff84e338",
        "cursor": {
          "ref": "88f8dd96-227e-4e6f-b47f-8a0a667ac5a7",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "86945a17-8bd5-43be-9345-32de1a391da5"
        },
        "item": {
          "id": "65c7f1cc-8fdf-4d55-a2c8-132dff84e338",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "05d4bb51-d094-431c-95ee-92bec9d8f895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d6e148-8770-4087-9c60-87297fdb6c18",
        "cursor": {
          "ref": "58f0a9f0-2d36-456b-8283-95791cba2c6f",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c6b8e976-6a04-42e3-90e4-1c4186c15e05"
        },
        "item": {
          "id": "c9d6e148-8770-4087-9c60-87297fdb6c18",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0c5eecff-4577-4c23-ae67-81ee80f77bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ba2499-2226-455b-ba5e-a907fc5ef82e",
        "cursor": {
          "ref": "72d82fe7-6ed9-461e-8793-278870d429a3",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "428a1b14-016e-4976-aeb5-756432bce231"
        },
        "item": {
          "id": "a2ba2499-2226-455b-ba5e-a907fc5ef82e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c50c7acd-2a45-4ec9-bd8b-4a4afae85737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2139560-50a4-4a3f-a973-04d57cebb717",
        "cursor": {
          "ref": "5d4389b7-f4c5-4a5f-94ef-f5d5c210bdee",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f8fb7d07-739c-4d68-9f18-5fda6ebd9c85"
        },
        "item": {
          "id": "b2139560-50a4-4a3f-a973-04d57cebb717",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "de2d361d-602a-4095-b05b-610a9f00081c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9417e1-ba39-460e-9300-b04991eda5fa",
        "cursor": {
          "ref": "eca47d73-47f0-41b0-b18e-0b8c96e01e3f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e11619ac-58e0-4a05-b39c-6409e051aff1"
        },
        "item": {
          "id": "9c9417e1-ba39-460e-9300-b04991eda5fa",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a5805b01-c596-4cd1-b7be-8909237436cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8afa7a-48af-4b2d-b242-a2740531a092",
        "cursor": {
          "ref": "716640ba-6402-4594-8696-45d2ede3fd0b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f6cc917b-858b-4fd9-b293-6076b22c80fb"
        },
        "item": {
          "id": "9f8afa7a-48af-4b2d-b242-a2740531a092",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "76b6cdbd-537a-4d5e-b504-afe328ed20fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b45117-f4d9-4597-90b8-d68bb5306de4",
        "cursor": {
          "ref": "b1eeb52d-bcb8-4148-93f1-6ad779377214",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a114cf1e-90b2-460c-8db5-d8d4a5f4c5c9"
        },
        "item": {
          "id": "93b45117-f4d9-4597-90b8-d68bb5306de4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ee9005d6-c174-4936-b433-ebd9eecb5790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bd5ad4-99fb-4163-a528-26ac5aeab2c3",
        "cursor": {
          "ref": "aff08eca-69c1-4a36-8dfd-cecaa4e57445",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b71125de-7bcd-4686-aa86-f51163a88cfa"
        },
        "item": {
          "id": "f1bd5ad4-99fb-4163-a528-26ac5aeab2c3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d0db2273-4995-4803-8a97-6d231ed3d36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161cc5d9-ae99-4573-ae6c-275b268a91fa",
        "cursor": {
          "ref": "72bb62e9-ea1b-4526-8917-447e443cc75d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a14a4aa5-4566-4a66-8128-9650ab007784"
        },
        "item": {
          "id": "161cc5d9-ae99-4573-ae6c-275b268a91fa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "08fd5f0b-ff14-4cf4-a53e-e8f2ceaaccde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bc5186-78e5-4a38-851b-80d585ed5e3e",
        "cursor": {
          "ref": "b0bd49dc-c4b7-469b-96c2-c198595bda4d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "13376e06-3d60-4503-b51e-8748c9e452b9"
        },
        "item": {
          "id": "46bc5186-78e5-4a38-851b-80d585ed5e3e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b385673c-d836-46bc-96a6-db8ae4f0901f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2d40ff-fdbb-4bb3-8e2d-410547919a1c",
        "cursor": {
          "ref": "d5b230c7-0e40-4477-83c5-9131cce8684a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cca6ed57-a048-48f2-ae06-c86e1909b328"
        },
        "item": {
          "id": "bf2d40ff-fdbb-4bb3-8e2d-410547919a1c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1a630ff0-bdfd-48b6-9ff7-bb4523de0898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0aebaa6-00ff-4649-b5c8-b9c4bead6590",
        "cursor": {
          "ref": "82ad6cf0-4394-4387-a5ff-a212c0aad9ca",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "af2870aa-8e9c-43f6-adef-93e7d15e9df8"
        },
        "item": {
          "id": "b0aebaa6-00ff-4649-b5c8-b9c4bead6590",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6873e9f4-1ef8-4e2d-b36c-7b92e210c795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5691a2-7a27-4404-aba8-6723d83a0279",
        "cursor": {
          "ref": "6319f975-5316-4705-bc11-118cc5879ca2",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0e326236-a499-4a12-8020-9765919b11ba"
        },
        "item": {
          "id": "eb5691a2-7a27-4404-aba8-6723d83a0279",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "14bd6049-18bc-480b-8373-a2f2d5f4b4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4964daa8-bc4e-43ab-bce5-c89c722debe9",
        "cursor": {
          "ref": "20fb80aa-cfb6-4506-abec-a3b844b3c8a0",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c37082bb-0190-4722-8651-a6f0a626d785"
        },
        "item": {
          "id": "4964daa8-bc4e-43ab-bce5-c89c722debe9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "70f958bb-ac75-4684-ba6b-06dc5a6f4a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09341529-ecc1-4edf-b434-67079f8d1afb",
        "cursor": {
          "ref": "89ed26f5-e620-4d6e-9ec3-f2ad65514b9f",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cb461399-59f8-4d6d-a656-a3d968274534"
        },
        "item": {
          "id": "09341529-ecc1-4edf-b434-67079f8d1afb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44310468-cf00-4c8c-962e-65493b2623bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffd7806-8d2e-4215-8ac7-4e1fe8e44015",
        "cursor": {
          "ref": "dde39abb-0a1b-4c3b-abbb-4626085647b7",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e8e160b0-966e-497d-92d5-176a519f4e92"
        },
        "item": {
          "id": "3ffd7806-8d2e-4215-8ac7-4e1fe8e44015",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7f5d870e-2e90-4083-862e-51feea8fef0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0522afd1-5e48-4f52-9b63-7978f645c36b",
        "cursor": {
          "ref": "202a8714-5de8-45a1-a8a0-f078e1f19c12",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f81ce285-316f-40ce-96e5-fd113cf963f4"
        },
        "item": {
          "id": "0522afd1-5e48-4f52-9b63-7978f645c36b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "47f1be53-29fa-4403-bdae-8e6ff8c34e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e807030a-ca76-499a-a2eb-6d140a66374d",
        "cursor": {
          "ref": "972c21dc-e256-48f5-be49-289f0f2aae71",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "67443af1-329f-44ec-9d96-1d0293995fc5"
        },
        "item": {
          "id": "e807030a-ca76-499a-a2eb-6d140a66374d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f1b21f03-d38b-4615-834c-01234280d14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733ea679-f708-4910-857f-2512c3cc3d4c",
        "cursor": {
          "ref": "64d12df1-a394-42b4-927c-5ef229aef777",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1bb14f94-331a-49c3-8c54-78f56d81c6f7"
        },
        "item": {
          "id": "733ea679-f708-4910-857f-2512c3cc3d4c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cc14436d-147d-4ca3-a5cb-553e73d693e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "701a6032-141c-4d4d-aeaf-b189429a9e4d",
        "cursor": {
          "ref": "246e6364-e6e5-43ea-a97b-d0e0587b6a80",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "39d9f7df-5e4c-4dc5-a50f-4b6901003631"
        },
        "item": {
          "id": "701a6032-141c-4d4d-aeaf-b189429a9e4d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "516c6403-d9ab-4ca6-b9a0-1d0e6aea97cd",
          "status": "Created",
          "code": 201,
          "responseTime": 2013,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "85a55792-e803-49ff-a34d-91e305ffc342",
        "cursor": {
          "ref": "e78252e7-8e4d-41dc-be33-49d590476f9f",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "76aa8947-e97c-42ae-9926-16b661fabe02"
        },
        "item": {
          "id": "85a55792-e803-49ff-a34d-91e305ffc342",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fd5fcde5-5de8-4630-8d10-80943d185056",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7b333b61-2f86-4011-8013-6c0488d8e608",
        "cursor": {
          "ref": "4502950b-23e5-4c2d-ba63-8bd807a1708d",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d8f9fdf5-1fd4-4c2e-9e80-262fc196cb4e"
        },
        "item": {
          "id": "7b333b61-2f86-4011-8013-6c0488d8e608",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bfb1de14-bc36-4247-8cc1-f63df16e06bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2399001-dab5-4b7d-8c80-053304c1afbc",
        "cursor": {
          "ref": "30ad570c-86b2-47ec-8137-599017da8b26",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a4abe3f8-c11d-47ac-8cdc-998290d744c9"
        },
        "item": {
          "id": "e2399001-dab5-4b7d-8c80-053304c1afbc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cb70da6a-bc9f-483e-8656-837b54e6bb72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "08bd0092-5b59-4684-8c11-5b625afd03eb",
        "cursor": {
          "ref": "335b7eb5-d2f5-455c-b6da-ca5c3b66f482",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c747e451-9a67-4efd-94ae-b351e1ffeb0a"
        },
        "item": {
          "id": "08bd0092-5b59-4684-8c11-5b625afd03eb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "69f24e28-c82f-4f5b-9206-821d83583810",
          "status": "Created",
          "code": 201,
          "responseTime": 1047,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c478d2da-1e91-4def-bc26-76a0d9679f73",
        "cursor": {
          "ref": "ce13f869-a794-4850-a0bf-87ab6bb260a7",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8ac23c3-8456-4227-9246-fbc1e162c35e"
        },
        "item": {
          "id": "c478d2da-1e91-4def-bc26-76a0d9679f73",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3623141c-2775-454a-8388-48e3e2e2b053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d3eb2b45-3918-48b0-9d89-eaa1f5a0914c",
        "cursor": {
          "ref": "0d257617-0100-42f1-96fe-7c535dbe1b70",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b802bf9d-0bc4-4f5e-adb7-9e4842e5076d"
        },
        "item": {
          "id": "d3eb2b45-3918-48b0-9d89-eaa1f5a0914c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "731d8527-72f1-4e32-8d84-acc504049ae4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 637,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "01f46c3c-b34e-48d2-98a8-1208a7e63744",
        "cursor": {
          "ref": "507df525-05a5-4574-862a-d08ad8e34e37",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "9632ad34-83f4-41b4-8f3c-db7791a6555a"
        },
        "item": {
          "id": "01f46c3c-b34e-48d2-98a8-1208a7e63744",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2407f3b2-41af-44ab-8883-b332edff7e8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e78c5597-e260-40f7-bb17-e5e1b386b3fd",
        "cursor": {
          "ref": "f6f2d191-64d5-40b3-aa93-73ed13bec938",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "62643d2c-99e2-4647-8953-38292623abff"
        },
        "item": {
          "id": "e78c5597-e260-40f7-bb17-e5e1b386b3fd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "acb9f717-39f5-4595-9481-13cb17d5b1ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0bdfa20f-dfca-4629-a875-65d3bba515f9",
        "cursor": {
          "ref": "009b3416-e226-44d1-8695-645b3fc342a7",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cc73c03b-e502-4dce-a5a0-3f88f7ac0685"
        },
        "item": {
          "id": "0bdfa20f-dfca-4629-a875-65d3bba515f9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "89e93a84-7cc2-4600-897c-cdbcf7826860",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c7ee0ea0-440b-4920-b73d-8a3e70f64bef",
        "cursor": {
          "ref": "d4312747-e7f0-4458-9879-450e358bdadf",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bb256b8a-e84c-4a1e-8b72-0aef03d5210d"
        },
        "item": {
          "id": "c7ee0ea0-440b-4920-b73d-8a3e70f64bef",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3a18fc5-7fdd-4566-9c6c-d69e7104d1db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b64f15e2-00ee-4d13-a325-87992b3fc086",
        "cursor": {
          "ref": "0d428d5d-18fb-4d78-bb13-f514a58c5362",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9727ba12-d332-4fdd-8b83-21107e0e697b"
        },
        "item": {
          "id": "b64f15e2-00ee-4d13-a325-87992b3fc086",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "01c85cf7-25f7-40fa-9d67-6e96594268a3",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "42f3cdd6-9c3e-4858-bc4c-834fc1ff3389",
        "cursor": {
          "ref": "074d8451-7f34-457c-bd33-1e2ba3aeb8ea",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0ee0cfa1-5208-4106-8609-249d8d932e08"
        },
        "item": {
          "id": "42f3cdd6-9c3e-4858-bc4c-834fc1ff3389",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6b95b756-d116-48b7-9fab-23805286cfab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b779cb38-6e5f-412a-a27f-ce8256a6465e",
        "cursor": {
          "ref": "7f7e6114-50bd-4222-96c8-925f82eb2f4f",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8129e91a-cf44-4719-b1ab-84d039565e06"
        },
        "item": {
          "id": "b779cb38-6e5f-412a-a27f-ce8256a6465e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b5fb433e-e2d5-443d-ba5d-5d782b798bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409c4470-8bf9-4d04-8730-83ae6884a029",
        "cursor": {
          "ref": "588f1a98-1e5f-475d-b8af-0c5440c0358b",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "67ec6bdb-326a-4129-bac2-2d1908e5dc2b"
        },
        "item": {
          "id": "409c4470-8bf9-4d04-8730-83ae6884a029",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "513711d8-ae91-421b-906e-3a1a7e8c3b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caac354-5b51-4527-972f-e3e8a1c95962",
        "cursor": {
          "ref": "8c75bd58-c4c6-4bca-8585-8d98085e5182",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a940ef7c-ac40-45be-bb13-1b8529d1a253"
        },
        "item": {
          "id": "0caac354-5b51-4527-972f-e3e8a1c95962",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fbb184f4-530b-4d52-ab3f-9ada5e2c1831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48a9e9f-db95-444a-a3b3-fe77d6ec994a",
        "cursor": {
          "ref": "ea7b2884-c9a2-4237-bf3a-c5cedfd7fab1",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8cdfddbd-4909-49e5-ae87-e8ec0d5626e9"
        },
        "item": {
          "id": "a48a9e9f-db95-444a-a3b3-fe77d6ec994a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c9b39a2a-f933-4b0c-9b6a-eb923f97eedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9472000-e3e4-4a08-9f82-ceb0448963bf",
        "cursor": {
          "ref": "b3ae9b94-fbea-4cdf-a41e-293a415b412c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52d18b1c-b54b-40d8-945c-4ffce40423d3"
        },
        "item": {
          "id": "b9472000-e3e4-4a08-9f82-ceb0448963bf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "734bc035-e449-478a-98f9-34fddd249b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41dbb04-67c4-4b52-b598-d89c54e3c9a6",
        "cursor": {
          "ref": "e3290b5c-c47c-4159-af2c-fd6dfebe9a82",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "991ee651-cfa0-440d-9191-678bfde3496e"
        },
        "item": {
          "id": "d41dbb04-67c4-4b52-b598-d89c54e3c9a6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1b04af61-c9dd-4c02-b8fc-a0af563be1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd12ef6-f6e7-480a-aa93-f26207336173",
        "cursor": {
          "ref": "e867c459-1db9-4cf4-8622-d37575b85468",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "63e0e322-3aa9-46fd-b3cb-97d99222ee8d"
        },
        "item": {
          "id": "9bd12ef6-f6e7-480a-aa93-f26207336173",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "dbb3f815-6570-4891-8080-9d03b3150d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e342487e-f940-469b-bee0-0176acbe550d",
        "cursor": {
          "ref": "447bd709-5855-4032-905c-c7dde58a8bb1",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d77ea85c-4354-44e6-911c-bef81f0563bd"
        },
        "item": {
          "id": "e342487e-f940-469b-bee0-0176acbe550d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c8c14236-2add-456f-87bd-985eb5d9120c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8063d8-fd9e-443b-8b38-f69cf19334a6",
        "cursor": {
          "ref": "286ffcf3-e869-4b05-bf8a-ddab3763b476",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "14bf47d1-f54e-43bb-8f63-e26e389f4a04"
        },
        "item": {
          "id": "2f8063d8-fd9e-443b-8b38-f69cf19334a6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b90ff65c-482d-47ca-bbf4-c7eac0899b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f590ee3-cfcd-489b-b349-b1dde0aec473",
        "cursor": {
          "ref": "4e54e427-15c2-445a-828f-afdd5502eb21",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f9d58299-46e8-4fdf-ac9c-085e5e24f5b3"
        },
        "item": {
          "id": "4f590ee3-cfcd-489b-b349-b1dde0aec473",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6d2a2ff2-0292-42f2-9504-bd30045547f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660dbfc4-a0af-4d51-9033-331bd091e262",
        "cursor": {
          "ref": "3bad6878-3366-4340-a71c-3f95a2f9eba4",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4be68878-6fa5-4f03-be43-43be42315be3"
        },
        "item": {
          "id": "660dbfc4-a0af-4d51-9033-331bd091e262",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "19e695a3-526b-4a14-a64c-30339d2f0f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8685594-5720-49a6-be0e-0b53dfb164a4",
        "cursor": {
          "ref": "5086a26a-569b-4c9b-a55c-0b285c8b90ae",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6f5d9bb1-0d75-4d05-baa8-48a5d2e81b7f"
        },
        "item": {
          "id": "b8685594-5720-49a6-be0e-0b53dfb164a4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "37c59918-3705-4403-a1e6-e6ee0a22fe12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d7f2cf-9eb7-4213-869d-542dfeb545a8",
        "cursor": {
          "ref": "5d896a08-1544-42fa-ac11-9f919c3aa086",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8c25cb78-ac40-4e9f-9c49-8953977dd207"
        },
        "item": {
          "id": "15d7f2cf-9eb7-4213-869d-542dfeb545a8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b5f92039-d05b-4867-b8c5-1676588fce91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 609,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f435df96-40f2-48e0-a88b-3d4b472fee05",
        "cursor": {
          "ref": "4be54614-ec41-4f63-9f79-c3246c289e9c",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "213d3085-064f-47f6-b612-ba36ac9a0a40"
        },
        "item": {
          "id": "f435df96-40f2-48e0-a88b-3d4b472fee05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "34682097-a3d0-4320-ba12-60ac9470a082",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 656,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a34f22ba-dc9c-4172-bb85-f0cae59f91fa",
        "cursor": {
          "ref": "cbd10a05-b6cf-4a60-92b0-1ace7816566b",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c367ce8e-664f-45dc-bf68-6843446796f3"
        },
        "item": {
          "id": "a34f22ba-dc9c-4172-bb85-f0cae59f91fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc56a76e-bbeb-4aea-98a6-c3c5367abf9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "96c6dd32-2a2b-4c13-8e7f-c2a79dcfcf15",
        "cursor": {
          "ref": "c2f00207-eaf0-4331-a463-6d11abcc3969",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f7ff615b-46ef-4ad3-993d-be828ef57522"
        },
        "item": {
          "id": "96c6dd32-2a2b-4c13-8e7f-c2a79dcfcf15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "82fe8814-0cb9-4e4e-8166-9a41861bfb1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 648,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dfe8d85c-e729-401a-a88d-cf1b35a418cf",
        "cursor": {
          "ref": "c3c589fe-3149-42ab-9f88-2a09abbd0a47",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8136c2ff-8f19-4bf5-8521-e0564fed5fb4"
        },
        "item": {
          "id": "dfe8d85c-e729-401a-a88d-cf1b35a418cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d9af300a-f819-457c-a20f-c9c74f536a67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c5f176f0-d054-46ea-bf5f-79254c1ecd38",
        "cursor": {
          "ref": "c5fdf1f9-336b-4598-8b2a-f5989fa73150",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f8fc5a4b-c1c7-4ae6-be18-55650f081212"
        },
        "item": {
          "id": "c5f176f0-d054-46ea-bf5f-79254c1ecd38",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2138df36-da29-4fa3-b076-28a2e6981120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6436c3-4197-4773-b233-bbb540d7932d",
        "cursor": {
          "ref": "c40c54c6-d54a-4b31-8c1a-d8ffe9bf7ea3",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fa911e74-2897-4200-8244-e0a81cd84adb"
        },
        "item": {
          "id": "5c6436c3-4197-4773-b233-bbb540d7932d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5a43199b-f024-413b-ba4c-442d40d9532e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5cb0f1-3805-417a-9f54-57352c20bb38",
        "cursor": {
          "ref": "5d6940a2-23bf-4891-b9f7-886c505836f7",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "097bbac3-6775-4e0f-8634-d90ad3117c23"
        },
        "item": {
          "id": "cc5cb0f1-3805-417a-9f54-57352c20bb38",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9ea1f7cc-56f6-43cf-9eb5-7f3b5f708eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3556f447-961f-422d-8cc8-88158aac7555",
        "cursor": {
          "ref": "4fe67ca8-58c2-4eaa-a767-1aca3e4d099a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7a22e1cb-4f8d-49c5-a2c8-709664d91456"
        },
        "item": {
          "id": "3556f447-961f-422d-8cc8-88158aac7555",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8614992e-9130-4edb-8e4b-5e8a7dc4ca9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839a75da-2572-426c-a901-5209a23963d4",
        "cursor": {
          "ref": "9424a50a-d62f-4dfe-b44b-4f1a69dd0e25",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa9875d4-ae50-4238-8867-9f6e7130cc66"
        },
        "item": {
          "id": "839a75da-2572-426c-a901-5209a23963d4",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a3850544-315f-408a-918d-0eec9bd82ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965b726b-175b-4720-b270-93a601d8cefa",
        "cursor": {
          "ref": "550cc3b5-cbc3-43d3-9435-dbcdd33cc8c8",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0139f5d9-aa80-49d0-b67e-542772164ce5"
        },
        "item": {
          "id": "965b726b-175b-4720-b270-93a601d8cefa",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ae6954bd-b755-4fc3-aa74-61fcaff46edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a760f0ab-6646-4938-86df-77459f6a4f8a",
        "cursor": {
          "ref": "eb40d920-3ef6-4762-9d91-b06faacd69c5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d25f4663-3639-4ae7-b14a-9599942450ca"
        },
        "item": {
          "id": "a760f0ab-6646-4938-86df-77459f6a4f8a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7fff0e99-a361-432f-b3e5-4b44c1abf9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7198d70f-5d70-4322-9cfa-f395632b8fcf",
        "cursor": {
          "ref": "e0d3693f-2e2e-4c63-add6-ccd352f3574e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b5ebf695-b319-4275-91cd-5085d68072b1"
        },
        "item": {
          "id": "7198d70f-5d70-4322-9cfa-f395632b8fcf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4dff31bf-c1e7-464d-ba0b-de29e5f64317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c3aaed-8d59-4bc6-8101-56d3897685c2",
        "cursor": {
          "ref": "39d9903e-4cc3-4851-b0cb-c9b383214913",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a3fdb8c6-3855-4e21-acd7-ed8451544ba2"
        },
        "item": {
          "id": "25c3aaed-8d59-4bc6-8101-56d3897685c2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "38c2de8e-bf95-438a-9b57-3c8d3fb006b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139b78e7-f492-44de-a061-1798f8b2b284",
        "cursor": {
          "ref": "c417ce1e-3dfe-4c73-b43d-0c05f1e291ef",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f7cdd6b3-314b-4dd3-88a4-287ad400d564"
        },
        "item": {
          "id": "139b78e7-f492-44de-a061-1798f8b2b284",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "abfc12bf-29a2-4019-8b5d-ad33eb77fcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6674f64a-baf6-4b41-b43b-242d3d4da0f8",
        "cursor": {
          "ref": "1cd7f7e4-e95c-464e-803c-1f51c4b60c64",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ceb7828a-656a-45c4-ada5-51285f593e18"
        },
        "item": {
          "id": "6674f64a-baf6-4b41-b43b-242d3d4da0f8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "76729253-885a-4d97-8e52-746f497e7884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26a30ff-245b-476f-80cd-d4efb60e0fde",
        "cursor": {
          "ref": "2c265db8-2100-4582-ac5a-60fae2174b07",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c7d4e9c2-b31e-4edd-8b05-e3caba48c933"
        },
        "item": {
          "id": "c26a30ff-245b-476f-80cd-d4efb60e0fde",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7091ee82-2e43-4e8c-bed2-b538785ea310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 259,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9c4131-0eba-4610-ad1d-641170cd5ab4",
        "cursor": {
          "ref": "1add7032-2a47-43d2-a1cb-5da3cacf4bcf",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3952408c-deb4-4bfa-b960-96a65472ed85"
        },
        "item": {
          "id": "bb9c4131-0eba-4610-ad1d-641170cd5ab4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "59b3b295-fb31-4d66-8d42-8caa8fd1f269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1affe346-e59b-40ba-839f-a8b9eb330d5e",
        "cursor": {
          "ref": "da0c86b8-b542-4768-8209-9f7fe27d8b19",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bc91bf5f-0c05-49cc-ae77-6cc18817c5a0"
        },
        "item": {
          "id": "1affe346-e59b-40ba-839f-a8b9eb330d5e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0297fb90-993f-4841-b42d-4debaabb84f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e4ca2b-d771-4607-8d56-7414107ad717",
        "cursor": {
          "ref": "4ab7f6fc-7106-4d3f-8989-381a09bd7d32",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "67cea2b8-2ac5-4279-a49a-0dc19627da82"
        },
        "item": {
          "id": "95e4ca2b-d771-4607-8d56-7414107ad717",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0a8d2e3f-3127-4ac3-9153-2c1ec0f74ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379dcb39-1f9f-4dca-bcb7-b3ddb6bc1acd",
        "cursor": {
          "ref": "ad1dc0c0-beff-4074-9577-68de376067a7",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42dc86a1-a3aa-445a-a51f-eda02b4bc6b0"
        },
        "item": {
          "id": "379dcb39-1f9f-4dca-bcb7-b3ddb6bc1acd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "abfe94a4-0241-45e1-87ef-501ea8c5f03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae27a93-4b0d-4ff7-bccf-6fe45e50f991",
        "cursor": {
          "ref": "dbd1ad90-a017-4182-a488-f0dd2903bd5b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "fd3883db-cb35-4306-adfa-92302548fc15"
        },
        "item": {
          "id": "aae27a93-4b0d-4ff7-bccf-6fe45e50f991",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a06f0527-4b43-48f9-887a-d4d7ca9e21c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c1f240-4862-4db0-8f21-79b415719966",
        "cursor": {
          "ref": "20c3883a-5fdd-44c9-aa75-bd2a773ed1e6",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "85e21cbe-77fb-48b9-8ab0-a14ac893964b"
        },
        "item": {
          "id": "b4c1f240-4862-4db0-8f21-79b415719966",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d5c1d61-e293-4a29-9468-1dedc224797f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c521d4bb-e2b4-4b85-8d4a-9c3e90a41a68",
        "cursor": {
          "ref": "b9be94ae-556a-40e0-b291-9ac8f2254685",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e39a8ba4-490d-4e3e-bad7-5dcb424358fa"
        },
        "item": {
          "id": "c521d4bb-e2b4-4b85-8d4a-9c3e90a41a68",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9f998d96-b1a6-41ab-8dbc-51d7ab675c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04312de-c5d5-4537-959c-89f6abea814a",
        "cursor": {
          "ref": "87db70e7-d240-43de-a981-d837281552cf",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a64959a7-4904-4dab-b1a3-08c4468bee8f"
        },
        "item": {
          "id": "c04312de-c5d5-4537-959c-89f6abea814a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "65a48f8b-1423-4329-be9e-7d7f1a4b0f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809811a7-5dea-4d56-9b1b-eabfcf9258f5",
        "cursor": {
          "ref": "a02b47cd-2668-4b3b-ace6-1a80668613ab",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dbc72c56-6943-4173-ba4b-94cf67389cf7"
        },
        "item": {
          "id": "809811a7-5dea-4d56-9b1b-eabfcf9258f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "483adebc-55d4-40fe-b2bc-64028384f7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e152ee1-025e-4662-81ee-f9140504b129",
        "cursor": {
          "ref": "2a7d5cef-291b-4e34-85e8-9d5485e0c5e8",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "49433095-4422-4652-a7ce-0c55c15a0fb6"
        },
        "item": {
          "id": "9e152ee1-025e-4662-81ee-f9140504b129",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "669fa575-31d7-41ad-bb63-a123d05841d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cf75a1-3df6-4795-9def-7c010502a28f",
        "cursor": {
          "ref": "0dfe592f-4787-493f-8218-5e495739236f",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "93e48d05-01d0-473a-a97b-ac037e153547"
        },
        "item": {
          "id": "90cf75a1-3df6-4795-9def-7c010502a28f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "90636f31-bad8-45ce-832f-96960848d950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a8065c-b74d-439d-9e47-ee48a5d215f9",
        "cursor": {
          "ref": "3b4d2361-07af-42e4-8d70-1c40d8b180fb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2414565a-48cf-45c0-a908-1b1d7e2bdae7"
        },
        "item": {
          "id": "70a8065c-b74d-439d-9e47-ee48a5d215f9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "02ac8baa-3d69-41f0-ae63-5f79c1bdcc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd18acc-ad58-4abc-8c3a-d32c25169f2d",
        "cursor": {
          "ref": "1e267f67-cb24-42b7-90e3-07997095ff73",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b16e493-ac2e-47b2-8457-ba7acbccdb15"
        },
        "item": {
          "id": "cdd18acc-ad58-4abc-8c3a-d32c25169f2d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9cb101d2-86c1-4b35-a9c1-3702e1e67900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d023ad04-5a64-42c8-878c-b7b7e055a200",
        "cursor": {
          "ref": "26a91edb-4386-4142-8540-a420ad46aa90",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3ba58dc3-bb3f-4fd3-9b79-23493b5b72df"
        },
        "item": {
          "id": "d023ad04-5a64-42c8-878c-b7b7e055a200",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "efedf21a-d54f-4f6c-b53f-c9ae3356e732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dde31e-b2f2-42b8-b6b0-56eb621d3015",
        "cursor": {
          "ref": "364a42d0-6525-46eb-afa9-e446e279642f",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b79da4da-01c0-4b41-ab6f-6b2eb2d10fd0"
        },
        "item": {
          "id": "51dde31e-b2f2-42b8-b6b0-56eb621d3015",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9b2579ca-e98d-4421-9dbf-a046ed346a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ab2a4d-8a87-4086-8f67-6c2f4ce285b1",
        "cursor": {
          "ref": "f6bfa2ad-689f-42ec-b068-d37769e9c068",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b2b1f4ba-34d6-4c8f-9234-62c2f7685d2c"
        },
        "item": {
          "id": "95ab2a4d-8a87-4086-8f67-6c2f4ce285b1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5d27d01c-f989-43fd-88bc-c36376a8a403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf8ac8a-dca2-4062-b3c1-63fbf8bc4b62",
        "cursor": {
          "ref": "1f63f69d-5a35-490b-9c52-8d6f62b78ed0",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "69d2028d-8f84-4916-853b-a293eec51794"
        },
        "item": {
          "id": "eaf8ac8a-dca2-4062-b3c1-63fbf8bc4b62",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4b0b9e7d-b7d1-48d5-9e7b-6752eab9c4a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd05a136-a9c2-4db3-9c97-eb2e6519b912",
        "cursor": {
          "ref": "0a7ed1b1-d58a-49c1-8da9-ec138059bd23",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4c3d152a-b7f1-460e-ac2c-88e5254f4fc5"
        },
        "item": {
          "id": "fd05a136-a9c2-4db3-9c97-eb2e6519b912",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0ab3f1f2-df63-4a16-ab79-54e58825d252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30881ce6-7d1b-4cd0-a927-c1363b53a455",
        "cursor": {
          "ref": "8b338263-d2cc-4d25-b6df-3ff471d99f1e",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d9900688-34aa-483c-bc1c-47877cc66cee"
        },
        "item": {
          "id": "30881ce6-7d1b-4cd0-a927-c1363b53a455",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "afb3d9e2-25f4-4b08-b449-a1b53f2916d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128c94df-1bd8-4b7b-ab49-c243686f4968",
        "cursor": {
          "ref": "7d49ff6f-24d2-49e5-8e12-645f9facfcd0",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ee95fc5d-1562-49ae-84c6-dbd614d704c4"
        },
        "item": {
          "id": "128c94df-1bd8-4b7b-ab49-c243686f4968",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f12d822d-c540-4ffb-a25e-bf9ce033a186",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01fc5cd-dc1a-4e8c-9afa-ddebe56ad088",
        "cursor": {
          "ref": "83205aaa-f029-405d-833a-c533e32ceb4c",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "06bb3435-dc5b-4ef5-9a35-7dc1e423931d"
        },
        "item": {
          "id": "f01fc5cd-dc1a-4e8c-9afa-ddebe56ad088",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6451b250-a559-4fa3-8acc-b3514b258ea2",
          "status": "Created",
          "code": 201,
          "responseTime": 1024,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0483006-c2ad-4607-9a53-db8dc8c896d0",
        "cursor": {
          "ref": "3fc5cecd-2879-4c5f-8b52-7c902f4fea71",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "85202d70-0475-44c9-922d-d57c53088982"
        },
        "item": {
          "id": "d0483006-c2ad-4607-9a53-db8dc8c896d0",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "829a1ef2-d408-42a0-a5c9-604ccfc6c972",
          "status": "Created",
          "code": 201,
          "responseTime": 912,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deb91b0-5c94-4ee5-8a13-0a471d4a647e",
        "cursor": {
          "ref": "bef11958-bb67-42b7-8d91-3c72baf98b4c",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d7113e00-5fbf-4a34-8ffb-805451469860"
        },
        "item": {
          "id": "8deb91b0-5c94-4ee5-8a13-0a471d4a647e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "90e9dc45-7ef5-4bfa-8a8b-ba0a1d7e3a08",
          "status": "Created",
          "code": 201,
          "responseTime": 877,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "007bd418-7e37-48ee-95b0-a1f7fe48e0e7",
        "cursor": {
          "ref": "ed7a2095-1692-4fc7-bde6-a293039a885c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "11538bc4-77b0-4ffe-9e9b-4658c7896236"
        },
        "item": {
          "id": "007bd418-7e37-48ee-95b0-a1f7fe48e0e7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "139938fa-951d-4957-b0a8-8f86d1a44327",
          "status": "Created",
          "code": 201,
          "responseTime": 862,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf76d7-c425-4e60-8473-b675bfa82405",
        "cursor": {
          "ref": "cf1cd537-cfd8-4151-9a64-2a88eabcf8df",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "97aba791-1d08-442f-891f-8d887fe104a8"
        },
        "item": {
          "id": "5aaf76d7-c425-4e60-8473-b675bfa82405",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "641efa26-e86d-4831-8138-aee18efd334e",
          "status": "Created",
          "code": 201,
          "responseTime": 882,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91d0ed1-bba2-494f-910e-cb1b00a4502e",
        "cursor": {
          "ref": "78346ddc-beaa-4faa-9038-2e7669652c1c",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "267656f8-2afa-4733-a50d-446663aad94c"
        },
        "item": {
          "id": "e91d0ed1-bba2-494f-910e-cb1b00a4502e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fb95907c-f102-4dad-809c-bd7f173cfad1",
          "status": "Created",
          "code": 201,
          "responseTime": 1328,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47093ec4-8973-466d-954c-bdcb5107fd85",
        "cursor": {
          "ref": "af6535e9-38c0-43bc-8d2b-06dfe5b5e76d",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "226ca387-f2e7-477f-b8ad-cd635cbded6e"
        },
        "item": {
          "id": "47093ec4-8973-466d-954c-bdcb5107fd85",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c63ca148-cd9b-4c88-89fa-5f2e78966d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ee1991-8b80-4b6f-b5e6-2440a39ccce9",
        "cursor": {
          "ref": "df6f241e-83e8-4cbe-b08d-91e67b8adeb3",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fe383480-6d71-4968-8e32-10bb0154377a"
        },
        "item": {
          "id": "c9ee1991-8b80-4b6f-b5e6-2440a39ccce9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bbd014b6-a5c1-4be4-9141-354361ad7545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a83de8-9c9f-4d6d-a793-cf19c9aa9679",
        "cursor": {
          "ref": "71e0680c-42a2-4abe-a8c3-63b81595b482",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3324bf40-5040-4370-8a61-4f3b97ad5462"
        },
        "item": {
          "id": "c9a83de8-9c9f-4d6d-a793-cf19c9aa9679",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "983dd629-e72f-4d21-b505-d90a7c3d6cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961e1259-6f44-4ffc-a2f7-1895c174a13f",
        "cursor": {
          "ref": "d3208b40-1d6c-4a79-98c0-411173fe0939",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "61d3a7d6-e6c8-4e2f-92e6-9ebb52292b91"
        },
        "item": {
          "id": "961e1259-6f44-4ffc-a2f7-1895c174a13f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f92f87fb-79e0-463a-a0e9-296d4d4bf710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e994a1-0c2a-42b0-a52b-a3b1b5bc5b77",
        "cursor": {
          "ref": "0f957d47-3619-40ba-91ca-fe98b86ebaa9",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3f7d0f64-8173-48ce-9e5b-c32af1ba870a"
        },
        "item": {
          "id": "01e994a1-0c2a-42b0-a52b-a3b1b5bc5b77",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "641b825d-031a-432d-b8aa-a890b59eaaf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491db781-3d48-4a89-855a-a846e7ab7472",
        "cursor": {
          "ref": "2293925f-2f18-4f02-82ef-8c201e1d4258",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b1753cb7-d748-439f-bfc4-6c78fbe76ffe"
        },
        "item": {
          "id": "491db781-3d48-4a89-855a-a846e7ab7472",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b070ba3d-1b64-4b5c-80e8-892eebd8b7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b587fdcf-fd9c-46fc-9534-eb769f45f346",
        "cursor": {
          "ref": "9a7692c9-940b-44bd-be85-d277c54e4478",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cca5ca55-a65a-4024-874c-8b1f9a238135"
        },
        "item": {
          "id": "b587fdcf-fd9c-46fc-9534-eb769f45f346",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e73d1485-a586-45d3-8ceb-1553e66885d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655fa3db-9395-4b3d-8f08-818b63a33e51",
        "cursor": {
          "ref": "9fb1928c-0cff-4e0d-acc4-a876e4978dde",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10c9770d-e613-49ae-88e6-4e4a48c60e4a"
        },
        "item": {
          "id": "655fa3db-9395-4b3d-8f08-818b63a33e51",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5c3d6b1e-7925-40bf-8b78-6827c7676f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2871ad43-56f5-4514-b8b0-0ad97ab90af9",
        "cursor": {
          "ref": "6a31441d-ff43-4efd-a97b-dfeabf7c08ef",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1c000172-28a6-412d-a27b-3c3a78ba84cb"
        },
        "item": {
          "id": "2871ad43-56f5-4514-b8b0-0ad97ab90af9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f8daceaa-45e2-47b2-b758-ff6f4a0354a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ec41b3-3a10-4943-9616-250b33595a14",
        "cursor": {
          "ref": "34e70e09-571f-44d3-b2aa-2849ea61cd30",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "c675a945-1c57-4564-a516-d9fb23251bba"
        },
        "item": {
          "id": "e0ec41b3-3a10-4943-9616-250b33595a14",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "db2add60-651c-4fe8-802d-a4138fc19a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef33c788-7695-4e3b-8f41-ec1464be5eeb",
        "cursor": {
          "ref": "022ebb50-2333-4238-9588-5b4322ef512c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d2857d0e-6bef-4791-9a44-99a957d5ad34"
        },
        "item": {
          "id": "ef33c788-7695-4e3b-8f41-ec1464be5eeb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c9e3aca-83f6-4b46-8f35-5e7a0af3c9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7fd076-235c-4979-b293-514dea08b7d7",
        "cursor": {
          "ref": "f0e07ff2-557a-4a20-b72d-07cebfce577f",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "097816a2-b0f9-40a3-a371-7ff74e876fbb"
        },
        "item": {
          "id": "cc7fd076-235c-4979-b293-514dea08b7d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c16cccc5-5e89-40ca-9641-c71bf2a803dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d96c84-1a33-4b58-83cf-edb540a8859f",
        "cursor": {
          "ref": "ce432c84-e79b-4dd1-b62f-e6d9071f4c82",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a332a251-d86c-4e07-8212-d425ca6e9437"
        },
        "item": {
          "id": "e0d96c84-1a33-4b58-83cf-edb540a8859f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "87e3fd20-7409-4775-b1b3-db254de112c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccdad2b-5b79-494c-bece-e49ec844a228",
        "cursor": {
          "ref": "40c856d1-bfb4-4cb7-be2f-dfe890c0c8bb",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "05a862db-f787-4a63-bd6d-6e1ecc189a54"
        },
        "item": {
          "id": "eccdad2b-5b79-494c-bece-e49ec844a228",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a0784b00-732f-4d0a-865d-0021366e2348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb42a25-3c74-408d-9367-db53395f4a61",
        "cursor": {
          "ref": "36dd7809-2391-460a-aac3-d3e00567d975",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2a736ffa-9fed-4523-8505-89dbf78f3623"
        },
        "item": {
          "id": "dbb42a25-3c74-408d-9367-db53395f4a61",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "caec7fc7-0ef5-4bf0-8414-d81fa53f79f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8de6154-18a5-4848-b221-b33f6d757318",
        "cursor": {
          "ref": "c10e922c-f54b-4273-af17-5455cf4afa23",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5f968d9d-8efd-4959-949f-46011dea40cd"
        },
        "item": {
          "id": "b8de6154-18a5-4848-b221-b33f6d757318",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3dcb883d-022a-4d7b-8cd0-ab5db7253e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a190607-6181-4378-8379-1714692e425f",
        "cursor": {
          "ref": "0d3e5796-4117-490c-9014-3646df713b27",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "94b2e76b-1a44-409c-838c-3c4f40cd0af8"
        },
        "item": {
          "id": "6a190607-6181-4378-8379-1714692e425f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0ca49731-28c1-467e-9a4c-b1cba700bded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9495243d-ac7b-43ec-8c2d-252bc3804ffb",
        "cursor": {
          "ref": "658b1afb-9f69-45f6-95e9-384669e20054",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9771349b-a2f4-4366-9796-69714130ed5d"
        },
        "item": {
          "id": "9495243d-ac7b-43ec-8c2d-252bc3804ffb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3ef718b1-135a-45a0-b014-47b5e562a6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d152d12-7af8-4452-a47b-24bdc5fb110c",
        "cursor": {
          "ref": "585dc83b-9eb7-4472-b628-743e664559f3",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "123b9ae1-5ed6-4cf7-b622-d1a11e0ca2f2"
        },
        "item": {
          "id": "6d152d12-7af8-4452-a47b-24bdc5fb110c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b75965cc-3f9a-40f0-a3a9-cc19e685e03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8148064b-0c1c-45fc-8ca9-d7d53eeb58bb",
        "cursor": {
          "ref": "90945b79-7276-4edf-bd4e-5d4b8eed866a",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "111a614c-35f4-4b1e-8a6d-a9ac7b3d2125"
        },
        "item": {
          "id": "8148064b-0c1c-45fc-8ca9-d7d53eeb58bb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "adc0cc02-71d4-4074-a7e1-eed51b1f6d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d203de22-df5f-49c5-8aa5-bb9ada78dfff",
        "cursor": {
          "ref": "f7c20fb3-8a95-4a29-914c-1528d913567b",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ab69ab90-3b91-41d7-bfd1-efad9a23119f"
        },
        "item": {
          "id": "d203de22-df5f-49c5-8aa5-bb9ada78dfff",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4f6d82a9-d277-48d6-9ace-5d7b3daa4e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2fcfd6-e025-48f4-8ecd-a522cacd368a",
        "cursor": {
          "ref": "7ed7bc0c-1aa8-4dc2-a666-6aa719dbcbe4",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2b08f59e-7f11-4c3a-8fea-06ee49a5b13a"
        },
        "item": {
          "id": "cb2fcfd6-e025-48f4-8ecd-a522cacd368a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "756a5ab1-87f2-48f1-8857-0d360638ec8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3595dbc-1d5b-4702-a7c8-d4b9981023ea",
        "cursor": {
          "ref": "f9a5fad9-6c2a-4d26-83d3-b7447b9db0d1",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "01d14275-a230-4d90-b20a-da0454ab7928"
        },
        "item": {
          "id": "b3595dbc-1d5b-4702-a7c8-d4b9981023ea",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7a2307c7-268e-4e40-925f-a31bd323c0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c90402-1183-4dd2-8340-b65631ef6cbc",
        "cursor": {
          "ref": "908cc41e-81b0-46a3-9c2d-e9f4b726e935",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5c5e41f5-bb96-47e0-8b53-9d7c08d45686"
        },
        "item": {
          "id": "17c90402-1183-4dd2-8340-b65631ef6cbc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0576a261-f402-4370-9c31-5421d618ab5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70d610e-dcb9-4804-acea-e8537ae42a15",
        "cursor": {
          "ref": "57f7b827-36c8-44e0-a2dc-60e249a5b921",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7fcca146-a578-47a9-aca3-e518985bcad3"
        },
        "item": {
          "id": "e70d610e-dcb9-4804-acea-e8537ae42a15",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "471b2803-f46b-4449-a971-82569f1b85e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f72116-1cde-41b6-8078-a979b7867d95",
        "cursor": {
          "ref": "31b61066-9031-4f40-9c20-745201fcf6ec",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a1d97b8f-04a2-4daf-9e4f-5ec31881e678"
        },
        "item": {
          "id": "20f72116-1cde-41b6-8078-a979b7867d95",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "de7a23ce-d3bd-43ac-aa2e-7f869f82fda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645b92b8-75f4-406a-800e-ddf547663f9c",
        "cursor": {
          "ref": "4c67d3e1-cf23-488b-a1b4-5f177d08f255",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5a629ec6-3be0-4897-9dd9-ff787067ab45"
        },
        "item": {
          "id": "645b92b8-75f4-406a-800e-ddf547663f9c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f3fd81be-5a6b-4dca-b893-756e8386775d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e381cf62-e056-4dfe-9b68-56154c3a091a",
        "cursor": {
          "ref": "ae08e048-e837-4101-8444-2de62bce3429",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3cdb9f7e-341d-4ae3-8f1d-36d0d02ed9c5"
        },
        "item": {
          "id": "e381cf62-e056-4dfe-9b68-56154c3a091a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "355edc42-d3d2-4fca-82eb-7fc8bc8f229b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793f3960-cc2c-4663-9f04-eae2bce97f05",
        "cursor": {
          "ref": "1c1fb571-76e8-4f17-8b32-eba55fb7bd46",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b08cf940-066a-406e-86cc-8620d13a4cda"
        },
        "item": {
          "id": "793f3960-cc2c-4663-9f04-eae2bce97f05",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fcc40660-7d1a-48b4-a787-b6279105ca4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39750859-dd56-4161-a594-d4cb1982636b",
        "cursor": {
          "ref": "9fe5ea90-2eda-44cc-8327-68fee6b0ec09",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "63dd50db-d250-4f51-a734-3cb91130769c"
        },
        "item": {
          "id": "39750859-dd56-4161-a594-d4cb1982636b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "67e31381-84a1-4e94-abe4-ab9083c2b8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20000a7-e400-4a71-b23c-b26928aebd98",
        "cursor": {
          "ref": "eb6a3ca2-5365-4277-ba1d-0fd8797dea57",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "21a3f32e-88bc-4f38-9808-40cc03305af4"
        },
        "item": {
          "id": "d20000a7-e400-4a71-b23c-b26928aebd98",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20b49056-ed33-4ba0-aa07-a777065892e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439d0dda-2da1-4d72-9e4f-afbddf8cdef7",
        "cursor": {
          "ref": "b1adeceb-d92e-4d35-897f-d9ca16ff4d3f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1f6623ac-1d97-4ef7-96ab-91bf3949b284"
        },
        "item": {
          "id": "439d0dda-2da1-4d72-9e4f-afbddf8cdef7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6ce191be-91c6-472c-9c17-95a9fe83d004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f860b0fa-6fd3-427b-b9c4-721a647ba625",
        "cursor": {
          "ref": "79055bce-8358-414c-bee8-e3ba8b7c68fa",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "733df138-c7b0-427c-aef7-d3974b03a4af"
        },
        "item": {
          "id": "f860b0fa-6fd3-427b-b9c4-721a647ba625",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "aec4f13f-05af-42f9-8713-1e973a427f88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d087dad2-d0f7-4bc5-ad01-7e1b67b066a4",
        "cursor": {
          "ref": "28566485-c60f-452e-a398-f776ebeb5fa2",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3e6e17d9-4c06-4580-98b7-5e84fbc01942"
        },
        "item": {
          "id": "d087dad2-d0f7-4bc5-ad01-7e1b67b066a4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e1499039-9800-4c2b-a289-0d74476c2c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e985df86-215e-48d3-82c2-9cce7a85ec1a",
        "cursor": {
          "ref": "085de942-cfb0-44f7-bcca-30e00c2b5619",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f089a811-0057-411c-831c-ab8c927311f3"
        },
        "item": {
          "id": "e985df86-215e-48d3-82c2-9cce7a85ec1a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "52874521-8da1-4aa3-a711-79b937856703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad05567b-dc69-484c-9a69-a3519d429af3",
        "cursor": {
          "ref": "91a0184c-b0b2-4ae0-91a4-481039ecb59e",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e0029a9b-66d5-439c-aa3e-e948ae76db00"
        },
        "item": {
          "id": "ad05567b-dc69-484c-9a69-a3519d429af3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cdd783a1-8e7c-403a-bc11-ce75573f4e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c86dfdb-212b-411c-b6f7-6f9856278eb7",
        "cursor": {
          "ref": "7f821d76-8fe9-4a22-81fd-e45fb765bac7",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8fc97fb9-feba-4c18-a4a9-7ae486722e1e"
        },
        "item": {
          "id": "3c86dfdb-212b-411c-b6f7-6f9856278eb7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1a62d3d4-a946-4e9d-8bdb-c6fc5c43fb26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e3595c-98d4-4376-8297-25d859d531f3",
        "cursor": {
          "ref": "7e4980fb-9c1e-4d34-949d-5e0e8db67a0f",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4b6b4cfd-375b-4ad2-b9f5-e7dd97617c54"
        },
        "item": {
          "id": "84e3595c-98d4-4376-8297-25d859d531f3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "308da215-d1a5-493e-8e4a-40cb2c91961b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777efa6d-3a6d-436b-8481-c6642a92b9b0",
        "cursor": {
          "ref": "ab9565a6-8a1c-4466-8b0c-e90a088c7592",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f1f1cdb9-5aa0-40ef-a3b7-c62eda05990b"
        },
        "item": {
          "id": "777efa6d-3a6d-436b-8481-c6642a92b9b0",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f0a147e4-e888-469c-b56e-316e6b2458e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8655b493-672c-4d92-bf7a-b2aca698e952",
        "cursor": {
          "ref": "e6df7475-c9ca-4b94-b153-f7b0cde31993",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c116a9af-9250-46b3-9c36-d21374c96f3a"
        },
        "item": {
          "id": "8655b493-672c-4d92-bf7a-b2aca698e952",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "418499ea-ad65-4fdf-a85c-196e445b0708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221b343e-e9dc-4d0a-a4a4-8a303f8cc545",
        "cursor": {
          "ref": "7180545c-5edc-454b-9cc2-09d9ba1f1dc6",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d20b1526-db74-4531-8f1d-2e8d0598971e"
        },
        "item": {
          "id": "221b343e-e9dc-4d0a-a4a4-8a303f8cc545",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a0a15e16-f6f9-40a3-b037-cc0d0217806b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0713d1e4-c6c5-4c7a-afd0-8fabfa50a703",
        "cursor": {
          "ref": "f02463fc-a9a5-4673-9521-90138a1ce51c",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "deea78a1-f52b-4cfc-a779-7d29a620dd1d"
        },
        "item": {
          "id": "0713d1e4-c6c5-4c7a-afd0-8fabfa50a703",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d3c63562-ea80-408d-9a51-009adaad542f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dc44ee-3ec2-44db-9126-1154cae789e0",
        "cursor": {
          "ref": "33252c5a-befa-4d45-96d0-35336f6413f4",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "42178869-7dbc-450e-9c10-12f13f958442"
        },
        "item": {
          "id": "82dc44ee-3ec2-44db-9126-1154cae789e0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44712f78-1157-4ad4-8f2c-460912b9a724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc59197c-f553-4e4e-b7fb-c37440af3ce0",
        "cursor": {
          "ref": "066310e4-3d6f-4d1f-8841-71d0c55f0ef8",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2fb7a3e2-e879-4a37-a20f-c6369c481ed2"
        },
        "item": {
          "id": "cc59197c-f553-4e4e-b7fb-c37440af3ce0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a0e146a9-c988-4ee8-aa6f-fdb14cc84bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0205c788-9de7-4c30-a480-11315176b761",
        "cursor": {
          "ref": "340861c1-46b6-47f3-823d-d72db76e53eb",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "51630c1f-4bbd-4372-9864-b5c39338d021"
        },
        "item": {
          "id": "0205c788-9de7-4c30-a480-11315176b761",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "714a239b-696a-4bdc-8a40-e4d1be67963f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc43814-250b-498c-a86e-47a194fcbe71",
        "cursor": {
          "ref": "582d5ab2-558b-41d4-af88-64bcbfd7077e",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "005f883e-b581-4e29-a0d4-d224ecca584e"
        },
        "item": {
          "id": "ccc43814-250b-498c-a86e-47a194fcbe71",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eedde52f-ecf5-427c-b48f-0274f4874862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59090644-ccf0-4a01-bf87-7eb4df40f711",
        "cursor": {
          "ref": "799b220a-eb10-47f5-bae8-30a3a2627ae8",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e7da1e77-ebd5-46cf-a743-fa4450862b34"
        },
        "item": {
          "id": "59090644-ccf0-4a01-bf87-7eb4df40f711",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9d3ed777-3ef8-4de0-acf3-49a793a45a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef9910e-d790-476a-83a3-2d735a04f399",
        "cursor": {
          "ref": "ba68791c-1b21-4c73-a269-a1a76f0894a3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fe10c535-f840-4945-96a7-7b10f36e2aec"
        },
        "item": {
          "id": "bef9910e-d790-476a-83a3-2d735a04f399",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "23dadf6b-cee2-4ddf-ad7e-ec32c4c8a0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e141fa00-6d83-4fe9-9a38-e6273d258a51",
        "cursor": {
          "ref": "bdfae6bf-2662-4bed-bc2c-36db7b97c21f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f5c4c88a-f8b4-4b7e-819d-b0b6f64f4da6"
        },
        "item": {
          "id": "e141fa00-6d83-4fe9-9a38-e6273d258a51",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "94d5fcf0-ef40-4545-a0bb-d81b95d10c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf6de70-44ec-442f-a124-06aae95a56e7",
        "cursor": {
          "ref": "ebe5c851-1e89-4725-b201-8e5f65bb1267",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6451be8-25ba-4d04-bde4-36567cfc2af1"
        },
        "item": {
          "id": "5bf6de70-44ec-442f-a124-06aae95a56e7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d3b6ed74-051e-4f5d-9edc-4ca8fd12861d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43479af-d9ad-4690-8a12-9aab69122fbc",
        "cursor": {
          "ref": "166d62b3-cda5-4862-b22b-28fbb1f6d003",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "309f6624-9748-42dc-83f4-83de3301a483"
        },
        "item": {
          "id": "e43479af-d9ad-4690-8a12-9aab69122fbc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c2c39dac-b70e-4f84-9018-b2363b76387e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80cf9d54-1e91-42de-8a48-3289d3bb4b29",
        "cursor": {
          "ref": "0cf62a4d-61fe-48a9-b72c-debb1808f3cf",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2905ac62-cb36-4864-9f16-2a46b1746458"
        },
        "item": {
          "id": "80cf9d54-1e91-42de-8a48-3289d3bb4b29",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f871ccd5-7358-460c-9610-a2ebadd411e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa49f51-398d-4ad2-8725-e71cb14825c9",
        "cursor": {
          "ref": "aa7356a1-306c-487b-8a99-0b2f1ed146bc",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d8d6e527-5125-4247-8e86-bb04a432a5b3"
        },
        "item": {
          "id": "3fa49f51-398d-4ad2-8725-e71cb14825c9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "86b657ce-86d5-4536-906a-0faf4a038051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec66b093-131a-4f0f-85ed-2f4f4dcafd8c",
        "cursor": {
          "ref": "891fbeed-bb68-421e-931e-3d5300e0f4d8",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ff3d730d-1a8a-4ff0-bc05-b9c030291ad2"
        },
        "item": {
          "id": "ec66b093-131a-4f0f-85ed-2f4f4dcafd8c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8e0289f0-8781-4eaf-b486-6428b66e315e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cb0339-12e5-4818-a7ef-299dbfd46905",
        "cursor": {
          "ref": "6e13fc04-6881-42d9-afc4-055c2e1e6d94",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4285686b-7d58-4fca-b733-5908821a250a"
        },
        "item": {
          "id": "17cb0339-12e5-4818-a7ef-299dbfd46905",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "67476af5-f52b-435d-b214-e7d4b4922d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7ec3e1-c9a5-4f56-90d3-8aed9eeec721",
        "cursor": {
          "ref": "b73d4b0e-63cf-4e25-87f6-b3584a2f2281",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "48657716-6a44-41b0-9b59-7d78088dbf05"
        },
        "item": {
          "id": "dc7ec3e1-c9a5-4f56-90d3-8aed9eeec721",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3da2bd98-5396-4d06-9a3a-ecb5635b8cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eed125-91f3-440c-8464-1d1205922510",
        "cursor": {
          "ref": "69a4e560-5348-4cdf-862c-90e70403ca6a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "197b101d-eddf-4ccc-9109-315efcdfe695"
        },
        "item": {
          "id": "f1eed125-91f3-440c-8464-1d1205922510",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f66a333e-ae0a-46a5-8b6e-5491eac45346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d10afec-d9cc-4ef6-a3b2-bee59280e2ec",
        "cursor": {
          "ref": "3fb7db99-61f0-4a67-acc6-008b50661c9d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d4c76f3d-abaa-4781-8ae4-388323f285e6"
        },
        "item": {
          "id": "4d10afec-d9cc-4ef6-a3b2-bee59280e2ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "391b0eaf-12fb-43fe-bdb9-5ff54720f559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e0e7f4-8010-4f82-b041-6245ceaec1b3",
        "cursor": {
          "ref": "57e17f40-759e-4b8e-a695-eda7f509ad67",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d2933ba-a170-4483-a16b-e1012dd47276"
        },
        "item": {
          "id": "c5e0e7f4-8010-4f82-b041-6245ceaec1b3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a068539f-301c-48fe-8200-b89735ef1d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14a4922-4d2b-4462-bfe7-24ac4ad1f4c6",
        "cursor": {
          "ref": "d1ca91dd-c5da-42fd-9bfd-5f8b24c9e3f2",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0949049c-ca78-40a4-997b-12748c191ecf"
        },
        "item": {
          "id": "e14a4922-4d2b-4462-bfe7-24ac4ad1f4c6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "01fd19ba-24b3-4a9a-bfdb-b9408479c696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022081a6-b070-44fe-888d-bb31da9c74ff",
        "cursor": {
          "ref": "a230e636-e3e7-408f-9bb6-6542431a3766",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9fdfe3fc-e3a9-4969-9fd8-0ba64c2ee6f6"
        },
        "item": {
          "id": "022081a6-b070-44fe-888d-bb31da9c74ff",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1fcc28ed-f62e-4d8c-ad5d-c741150429d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fd6e42-5c20-47ab-8853-fd7398b8db9b",
        "cursor": {
          "ref": "1e2f138c-ca29-4a6d-96ac-fb55ebaafff0",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1d9029f4-09d2-4d0f-ad1f-1620fe413060"
        },
        "item": {
          "id": "22fd6e42-5c20-47ab-8853-fd7398b8db9b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "726f2d1d-c733-44c8-b9a8-2c956675134e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7664e412-d506-4fbe-8cdd-43b07fee14ab",
        "cursor": {
          "ref": "3e770a49-1b05-4a87-bf92-9427ba2b8e25",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "113adedd-ffd6-4866-b828-5ab30f664594"
        },
        "item": {
          "id": "7664e412-d506-4fbe-8cdd-43b07fee14ab",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7384b50c-b139-4ba0-b3f4-d657ef502091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b4c39c-a658-414f-a56c-401c0a7804a4",
        "cursor": {
          "ref": "7281c9e8-adc4-4240-8759-919fce377815",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cc368dc3-aefe-442d-8ac6-d11484b3737e"
        },
        "item": {
          "id": "b0b4c39c-a658-414f-a56c-401c0a7804a4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c293f24f-46ec-429b-a603-98069fb1ab32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b81bd59-5067-4969-b901-db9f2461d712",
        "cursor": {
          "ref": "b18f353a-a826-4e92-9f90-41ebc7e220bc",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5fb5248b-abee-4ca6-bc45-70136b47c158"
        },
        "item": {
          "id": "7b81bd59-5067-4969-b901-db9f2461d712",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "40043c4f-4de7-44fe-bbd7-8938bba55b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cae305-ef0a-4210-8982-0189a46a930a",
        "cursor": {
          "ref": "9e49b445-6017-4850-91dc-cdf2e913bae6",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6b1e46c3-d642-43b9-b481-47829837401f"
        },
        "item": {
          "id": "02cae305-ef0a-4210-8982-0189a46a930a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3320c452-79f0-4617-a00b-091cdaf9a731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8a7a8e-8809-4fc6-a7c2-1e1c59bcef11",
        "cursor": {
          "ref": "b0875cab-6515-4ce9-b83f-4cf632e07b6a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c6bcbf83-b529-4c3c-953b-0ca5c65d87f0"
        },
        "item": {
          "id": "6e8a7a8e-8809-4fc6-a7c2-1e1c59bcef11",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2b98d8d5-4ab0-4198-8984-ca62179eb850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfe75e3-18c2-4310-85ea-c247ca1749b3",
        "cursor": {
          "ref": "efc0129d-ce1e-4aa0-b682-088a39cda306",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e29e71b8-4f03-4c15-8fbd-51bf304bc258"
        },
        "item": {
          "id": "6dfe75e3-18c2-4310-85ea-c247ca1749b3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "80a97c11-fc0a-45bb-9501-e3d7a073cce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92b4137-40c5-442d-ae0f-7ce01b28c7e9",
        "cursor": {
          "ref": "93132dd9-03f9-4e14-8d0d-76df664a8b7b",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ad101f80-3b14-40ad-ae31-012b597f6613"
        },
        "item": {
          "id": "f92b4137-40c5-442d-ae0f-7ce01b28c7e9",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0ea7e739-c3ce-4150-951f-3204a52c1524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ebb937-2679-4143-a9b1-8f9453ef6234",
        "cursor": {
          "ref": "3e3798a8-ccc7-4f40-99e4-75882d3fc60d",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8f3aba3b-6744-43be-97cb-1f64f3199e41"
        },
        "item": {
          "id": "92ebb937-2679-4143-a9b1-8f9453ef6234",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "177c1368-029a-49f5-a9a4-a81ac42435e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a37cf71-d3e4-424f-a7bc-beb3a2d106f8",
        "cursor": {
          "ref": "6602fba6-acc3-4b54-ba63-8bf2dfb65494",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "19bbb2b2-ab4a-4035-ad67-8c17ae83fe19"
        },
        "item": {
          "id": "5a37cf71-d3e4-424f-a7bc-beb3a2d106f8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1e559284-0a3f-433a-83e1-83e274ff3712",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55daecc3-9f17-4f94-8a2e-3ed2e88cd6f8",
        "cursor": {
          "ref": "6a192f02-4a08-4499-832c-ddcef3d3e50c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2207f1cc-f72c-487a-862e-2fa45dfbbcfb"
        },
        "item": {
          "id": "55daecc3-9f17-4f94-8a2e-3ed2e88cd6f8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "48e42c42-49f4-41a6-a134-41c88311f972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70222e02-5828-46b6-af0f-f85411cc8046",
        "cursor": {
          "ref": "7483fc6c-d502-492e-9b6a-18d52b13365a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "53b78565-581d-4521-818b-d65e089b2a1f"
        },
        "item": {
          "id": "70222e02-5828-46b6-af0f-f85411cc8046",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "53be0a3b-5ac1-49fb-909b-35a8a538d3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db3f7d2-72ed-41c3-83cc-39061af65b04",
        "cursor": {
          "ref": "e45b363a-ecf3-4d3e-8f78-317efec60466",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "161eb681-943a-4df0-acb0-32e6169c5af3"
        },
        "item": {
          "id": "2db3f7d2-72ed-41c3-83cc-39061af65b04",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3cf8c8bf-9300-4c4c-8dac-85c0907cfc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a719450-5d0a-4acb-8fd7-9c900066eaa5",
        "cursor": {
          "ref": "94e7192b-6210-4fd5-bb68-92f2cc5381b9",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "aa78e42f-036b-47bc-8107-a84a42c527fe"
        },
        "item": {
          "id": "0a719450-5d0a-4acb-8fd7-9c900066eaa5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5c1ec2d5-f775-4908-b169-e26e5251b0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665cd6a6-05a4-4b07-9384-0a639f3b3ca3",
        "cursor": {
          "ref": "8bb27547-7ee8-4887-9a17-f17ac477e805",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f99d0e13-6b69-44ca-9040-0c3cc8fbe016"
        },
        "item": {
          "id": "665cd6a6-05a4-4b07-9384-0a639f3b3ca3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8561608b-f7fd-46f7-90b7-cf7261169218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65341fb1-0c95-43e7-ac28-953e041fa1e8",
        "cursor": {
          "ref": "b60b504b-0ad9-4953-bdaf-aaa68951af12",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b0f8ab66-6db2-4353-ac2d-1999d0e0b657"
        },
        "item": {
          "id": "65341fb1-0c95-43e7-ac28-953e041fa1e8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0b27e99f-8f1a-4842-bc43-d313df541159",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a0031ac4-b254-4d5b-8342-c191cfae5705",
        "cursor": {
          "ref": "21125267-d18d-4f45-9b9b-0a992e87ca6c",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9d1bdc72-1d0e-4b7d-98f9-5c2fbe83ad7d"
        },
        "item": {
          "id": "a0031ac4-b254-4d5b-8342-c191cfae5705",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3ff7826b-d889-4ee3-9ea8-ac5b6b98aa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f16cc2-c524-4b56-b8c8-55d2f7784996",
        "cursor": {
          "ref": "aff96745-5f3d-4b55-905e-325213b6a45b",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5aca69e7-af2a-4012-b321-c0c231642d52"
        },
        "item": {
          "id": "11f16cc2-c524-4b56-b8c8-55d2f7784996",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3325978d-5cca-4086-82bb-1d7e4fb3e757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654f4b0f-24f9-406e-80d1-e4256c4b9eea",
        "cursor": {
          "ref": "bbe85a79-6bd5-4298-83ec-1906ffb9dc5f",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6b83e0eb-3272-459a-bbfe-191ea4e3e814"
        },
        "item": {
          "id": "654f4b0f-24f9-406e-80d1-e4256c4b9eea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c38a717f-9641-43b4-992c-8b6ad4458d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c111fd0-ee12-45ba-af50-16365e84e6b9",
        "cursor": {
          "ref": "db75ee83-1ad7-45c9-9ee8-4bcdde3b5bdf",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0da439ff-2aea-44f0-92a1-0b128724db7e"
        },
        "item": {
          "id": "1c111fd0-ee12-45ba-af50-16365e84e6b9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "90328d9b-8da9-467d-b346-dff5a5cee21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423cfcb6-0d5e-4dc4-b7a5-020d772d9996",
        "cursor": {
          "ref": "dbdbc466-7af1-469b-a1ca-220044a1e563",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7d086bf8-1105-4403-8875-127d79f71bb1"
        },
        "item": {
          "id": "423cfcb6-0d5e-4dc4-b7a5-020d772d9996",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f933bbbf-d5be-489a-9d6c-c77f366cb835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3714b22-b248-48ae-8ae8-d4cf1ae50173",
        "cursor": {
          "ref": "cf3e42cc-0f87-419c-98e7-fc939d613622",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "590196b6-b453-4b51-8bfc-b548891960a5"
        },
        "item": {
          "id": "e3714b22-b248-48ae-8ae8-d4cf1ae50173",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b61dfceb-d950-4986-bf06-cd0373f7301e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f64dc9-5008-4c43-a89e-a6c417be2ff7",
        "cursor": {
          "ref": "ff9afa2b-6927-4e0d-a538-0977574b8792",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f6fbb507-8efe-4e72-ab96-7f464e0d129a"
        },
        "item": {
          "id": "44f64dc9-5008-4c43-a89e-a6c417be2ff7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a6d63953-b9d9-473d-a236-35615c830ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6a7de6-0222-4ab0-b3c9-c8c2de7b6ee5",
        "cursor": {
          "ref": "8e5b38a6-9a99-4a7e-936e-e9554fae9e09",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "adf84704-b10d-4ec6-8683-139484ec79b0"
        },
        "item": {
          "id": "ea6a7de6-0222-4ab0-b3c9-c8c2de7b6ee5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6b0deab9-636b-432d-beaa-17f89f2369b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84881ec4-0edb-4681-ac75-34cbcd5f5ec5",
        "cursor": {
          "ref": "6e861eca-1aaf-4c6e-bc5e-d045643ac7b1",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "84873327-bf3c-4c04-bec1-6a74bac76425"
        },
        "item": {
          "id": "84881ec4-0edb-4681-ac75-34cbcd5f5ec5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ab577003-25b7-41a7-bb05-24828f857815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ca8b35-f48a-4bd6-ae2d-b0dcf3491679",
        "cursor": {
          "ref": "2d95d05d-47d9-46ad-a0a7-323c3756387d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d97274fc-9100-45f8-9d72-1b8bc6aabf88"
        },
        "item": {
          "id": "26ca8b35-f48a-4bd6-ae2d-b0dcf3491679",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f803de72-753d-4d24-89a8-3e65c4dc5ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc220b3c-9058-428d-9f7a-2c74c3cf1977",
        "cursor": {
          "ref": "ff996180-6b0b-4e44-a038-8bcce54f5e11",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6f8271b4-9bd7-4c81-b530-9cd693421bdf"
        },
        "item": {
          "id": "dc220b3c-9058-428d-9f7a-2c74c3cf1977",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9de72d89-85a9-417e-a9f8-64f76ebb5c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6543ff-898e-4447-8d7f-b16516198229",
        "cursor": {
          "ref": "2b25cc75-bf99-4c48-a9c3-ba8750a8c769",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "67669400-25df-4871-8650-e2b522d5c3a7"
        },
        "item": {
          "id": "5c6543ff-898e-4447-8d7f-b16516198229",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0ca26d7a-839f-48b3-84b9-67631eec879f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5e28de-c63a-4137-9d8c-c3e119399b57",
        "cursor": {
          "ref": "7366d147-5577-40cc-8603-a26c2bd0e654",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e69f584c-e24d-4bde-a6a9-d74bae39c2e2"
        },
        "item": {
          "id": "7e5e28de-c63a-4137-9d8c-c3e119399b57",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "da173df0-56b9-4f89-a69d-3026122ea477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f84f83-643f-4b17-ba4d-60ec4802cda1",
        "cursor": {
          "ref": "a9db39e7-e296-4752-8ab8-04824bd43472",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "638bbbb4-2d51-4d66-8f72-448bf19de531"
        },
        "item": {
          "id": "c4f84f83-643f-4b17-ba4d-60ec4802cda1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bce922f2-56c6-439f-a00b-4ca950b7c64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aa2790-d9ed-49c2-87ce-7cc441169a34",
        "cursor": {
          "ref": "2f650b9b-6fdc-488a-a47c-3702bd27fd3f",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "54c71c51-b3c9-4ef2-a83c-9cfff0e66f3f"
        },
        "item": {
          "id": "98aa2790-d9ed-49c2-87ce-7cc441169a34",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fa132ef8-b631-4198-bfb1-7b1f4840a0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a1014e-ff11-456e-9ca1-f9f227521916",
        "cursor": {
          "ref": "d536ea37-7ff3-46d4-bb52-af9deeb928ec",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "19275a91-8451-4550-a12c-a47cf161b798"
        },
        "item": {
          "id": "25a1014e-ff11-456e-9ca1-f9f227521916",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9406ebd7-b8ac-41e6-9a27-b26a32eff7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db09105d-e748-4894-bf4f-db006d75f42e",
        "cursor": {
          "ref": "40ba9009-26da-49b7-9234-3df8d3712fdb",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "95ec1830-9268-4b34-b5f0-d5a34f93a56d"
        },
        "item": {
          "id": "db09105d-e748-4894-bf4f-db006d75f42e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "de0d54fd-49d5-4ae6-8f41-73cee7a29941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd5ef1b-13f0-4363-ab38-71d6b9c4dc2f",
        "cursor": {
          "ref": "8869a268-108a-4d1a-a7e7-201b62b17cbe",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "893824ee-2b24-4dbe-8c43-65bc8849a11e"
        },
        "item": {
          "id": "ccd5ef1b-13f0-4363-ab38-71d6b9c4dc2f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f1437eec-1142-4544-9709-80544532fe93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baca1786-0080-4871-9c23-25ddf827ec20",
        "cursor": {
          "ref": "1ad12411-5af3-43ce-b5b6-348dd05995da",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bdc0897a-a16d-412d-abbb-9909c1a28cda"
        },
        "item": {
          "id": "baca1786-0080-4871-9c23-25ddf827ec20",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "305da415-ff6b-4af4-a45d-e7fd52dd7df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2bc4df5-aca8-410f-bb13-f2abc1c32a23",
        "cursor": {
          "ref": "2172fe52-2f67-4c04-a00f-fa886193b29a",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "dada618f-1732-4760-b6d2-70b553f79ec6"
        },
        "item": {
          "id": "b2bc4df5-aca8-410f-bb13-f2abc1c32a23",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1c7bf299-b400-4357-b31d-128ab5fec949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38dd041f-f7c1-4ba6-a196-3eda5332af8c",
        "cursor": {
          "ref": "c2ed833a-6fa8-45d5-81dd-77be372bc36e",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6e561b6f-fd4c-4212-9de6-b910c222784b"
        },
        "item": {
          "id": "38dd041f-f7c1-4ba6-a196-3eda5332af8c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ffe3916-fbde-4a74-af1f-1375daa86811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18c8946-cbed-42a9-8d8b-20213c7ff4f6",
        "cursor": {
          "ref": "4660216b-a3ca-4aad-a620-7b3095eb9578",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "244193f3-ceb8-4b13-b419-5d8072e4afc7"
        },
        "item": {
          "id": "f18c8946-cbed-42a9-8d8b-20213c7ff4f6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9369d653-3ca9-4972-9ddf-93c1e65c5ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c158e0-f6cc-4893-be2c-94b1e9469fd4",
        "cursor": {
          "ref": "4e06be1b-ddcb-42b4-9925-33172cfdf4fe",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1e47e05b-c502-4c96-9881-0a135ef552a4"
        },
        "item": {
          "id": "b3c158e0-f6cc-4893-be2c-94b1e9469fd4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9a6ff2f9-9a45-4ac4-94cb-3658b0ab90ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58df3df2-611b-4a1f-a312-bb443c171778",
        "cursor": {
          "ref": "0d69f1ca-7551-4956-9bdc-e8667abe813a",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8ff908ab-c10d-473d-ac7f-2f1df32f52a9"
        },
        "item": {
          "id": "58df3df2-611b-4a1f-a312-bb443c171778",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "53d7b273-156c-4239-a65d-d64bf11f1c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11341c49-7992-4d7f-9bce-cc561501ac25",
        "cursor": {
          "ref": "a752d26d-74bc-4cea-9381-220daa18e23c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "96fcbf8a-2552-44e7-bafd-63165d296077"
        },
        "item": {
          "id": "11341c49-7992-4d7f-9bce-cc561501ac25",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "499bb663-7d40-4222-8757-e753e0b24a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445093d8-37e4-4bd3-a4d3-d589912c7f0c",
        "cursor": {
          "ref": "de239158-3f79-4f50-a50b-176e96d70a34",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "99f5ecc8-5441-4d24-8a9d-1c2f8fc1168c"
        },
        "item": {
          "id": "445093d8-37e4-4bd3-a4d3-d589912c7f0c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8013becb-8fb9-4018-b2cc-333caf6f0df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee3ec8c-f0c1-463b-9050-a138fbf8de48",
        "cursor": {
          "ref": "094d2bf9-cd71-48bf-b718-2bb98af47333",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "96de2e4b-d5db-424e-8171-b294aebdca22"
        },
        "item": {
          "id": "5ee3ec8c-f0c1-463b-9050-a138fbf8de48",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5e3c4bf8-73ed-4a5d-8048-606b09fd74e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ed6f85-3de9-4b57-b679-4c4fa81c36f2",
        "cursor": {
          "ref": "c889c227-411a-49a9-9c8d-147f6d2c455c",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "84e4ce5d-f67a-444a-ba2d-0f7d30facb32"
        },
        "item": {
          "id": "33ed6f85-3de9-4b57-b679-4c4fa81c36f2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e733324f-c68f-492c-8c34-c57139f81cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5521eb43-4f0f-46dc-8a11-3674ed606f9c",
        "cursor": {
          "ref": "7acee9ca-481c-46f3-ae65-53a30846514d",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff94b9bd-31a1-4888-ad58-4bdd6115ab3b"
        },
        "item": {
          "id": "5521eb43-4f0f-46dc-8a11-3674ed606f9c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "16186d8b-4902-4254-8783-68142f2da887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a2dbf3-f8a9-41c3-a4eb-6eb1c9603690",
        "cursor": {
          "ref": "f1dbf875-604d-4153-9d37-b3bedb1ef631",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d3b334cf-2e34-47fe-8b4f-c9b63cdf3156"
        },
        "item": {
          "id": "a9a2dbf3-f8a9-41c3-a4eb-6eb1c9603690",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3c3b00fb-17c2-4e40-b036-5abb15c52872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e9aeaa48-d893-4f9d-a41c-f197cd669161",
        "cursor": {
          "ref": "d518b35b-6882-4005-bb29-9b80325b6d4c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8bf9f505-6e5d-45b0-aedf-4c239641e60c"
        },
        "item": {
          "id": "e9aeaa48-d893-4f9d-a41c-f197cd669161",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "36c1394e-95c7-4d3b-b9c6-6602e7e983ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9aa12c4f-d79c-4e7a-afe9-0f9491c04992",
        "cursor": {
          "ref": "d982f314-988e-4d3d-aece-886eb8907382",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "38b10ce3-0ce5-4fe6-975a-fe7ce4537e61"
        },
        "item": {
          "id": "9aa12c4f-d79c-4e7a-afe9-0f9491c04992",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "56f64aee-c25d-4360-a4ce-328d14100ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ea51d5dc-283a-4b06-b5cf-8c475e5fa7e2",
        "cursor": {
          "ref": "a6f449e0-8416-4f7a-8665-99a46a9b3df0",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b7e2b819-0368-4148-a49b-88b06cb47566"
        },
        "item": {
          "id": "ea51d5dc-283a-4b06-b5cf-8c475e5fa7e2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d83fa2f4-aa00-445f-af5b-15570aef7259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942814f3-66e3-45ad-9f9e-57ebe9b5db93",
        "cursor": {
          "ref": "319597b7-96cb-4d8e-a824-d327570f563d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ef69c5f4-39cd-42d0-ad54-4de3aa2fc922"
        },
        "item": {
          "id": "942814f3-66e3-45ad-9f9e-57ebe9b5db93",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "135dfd66-77ea-442c-a711-278cd5e8051c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c544e76a-d2e8-4d0c-8b40-ffcd9cbe48e2",
        "cursor": {
          "ref": "f718cf24-3082-4ab4-a355-140b40eba2a5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8cd39ed9-003b-41ce-8334-fc95cb656cd8"
        },
        "item": {
          "id": "c544e76a-d2e8-4d0c-8b40-ffcd9cbe48e2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5ca7e2f1-8e2a-453d-8bec-cd9790a58c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 766,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e05c7329-9f53-403a-9570-b47eb42558fa",
        "cursor": {
          "ref": "a7551de9-2dd5-4c44-a0ff-adc8bd7bbb4e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9fcc376b-2f4b-47c9-838e-261585a95e48"
        },
        "item": {
          "id": "e05c7329-9f53-403a-9570-b47eb42558fa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d760cb8c-f44c-46ee-9ada-031b1e34dd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "67f4768e-e33b-464c-a0ae-28053ae152c4",
        "cursor": {
          "ref": "577effce-903d-4dde-84cb-9bef315920f3",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e25758ef-f932-475e-bb43-2a75305d5847"
        },
        "item": {
          "id": "67f4768e-e33b-464c-a0ae-28053ae152c4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ddee1035-2128-4a48-81c7-3b02ec338f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "04e20020-eaf8-4f0c-b58e-efe11b431532",
        "cursor": {
          "ref": "d90f89e7-e800-4021-a159-90b54b75dff5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b58cb844-993d-4048-a7f5-5e9b2024950f"
        },
        "item": {
          "id": "04e20020-eaf8-4f0c-b58e-efe11b431532",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4402d3eb-9f21-410d-850e-ae9f1e7c1e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2f9a9700-c8b1-4bb5-aa6e-1be4d2ffb0d8",
        "cursor": {
          "ref": "c6165207-5ad5-44b6-9d26-dc2406dd3412",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "70303f09-5158-487c-b784-285fd9e4c146"
        },
        "item": {
          "id": "2f9a9700-c8b1-4bb5-aa6e-1be4d2ffb0d8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b4f0e15-480d-4958-baad-9d34a6f1b911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "589543ba-480e-44d2-9d7f-790ed9ec814e",
        "cursor": {
          "ref": "e00dceb7-e9ac-4bb2-8669-368d0faa375e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "87cc1031-bae6-4918-bb4e-8c64b94dca3c"
        },
        "item": {
          "id": "589543ba-480e-44d2-9d7f-790ed9ec814e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2323dbfd-bdb3-4234-9947-c9c11c0145aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10611060-d4d4-494d-b816-5735a4867e4b",
        "cursor": {
          "ref": "599166cd-429e-4bdc-a7fa-be6249becf61",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "90d7ebea-9726-4c90-be97-b6ba8d5e41ca"
        },
        "item": {
          "id": "10611060-d4d4-494d-b816-5735a4867e4b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d2498030-4a1e-4bf9-b093-78fa0298ae38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f920fcb-239a-4fda-9b4a-e1502fd51f0a",
        "cursor": {
          "ref": "f71b7f20-1a3f-4a3f-802a-6dc13655c4b2",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "230b4c0b-0904-42f1-9947-c271c41663cf"
        },
        "item": {
          "id": "0f920fcb-239a-4fda-9b4a-e1502fd51f0a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bcad3d94-1d9b-4f52-9baa-2734bb218c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd1aafb-decd-4e20-ab26-c894db4ad9de",
        "cursor": {
          "ref": "59db194f-c0e8-41cd-8490-8c78e3a2dca5",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e5b3d021-080f-4f8a-a05d-8b52b97bb907"
        },
        "item": {
          "id": "1bd1aafb-decd-4e20-ab26-c894db4ad9de",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b494a53-14f0-43be-996e-2060885eebe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e484d2c4-1c52-48c5-abbe-1dedebae6194",
        "cursor": {
          "ref": "36c87d34-5d89-4b0c-8875-4fd5d597593f",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3de1d1ec-e7df-46f3-afa0-4c19d6c2fbd6"
        },
        "item": {
          "id": "e484d2c4-1c52-48c5-abbe-1dedebae6194",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "385b888f-434e-4382-a905-3099810a14d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d710b472-3d08-4374-8825-8991a20717cd",
        "cursor": {
          "ref": "98bf4e9c-29a5-494d-8f27-ffd577f21a20",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "04362c65-c741-4b84-a6b9-656304346ad1"
        },
        "item": {
          "id": "d710b472-3d08-4374-8825-8991a20717cd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "47e4b917-e876-486c-ac6e-73b932a14ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0034bf15-e267-4d3f-b7bb-ff4b297184ba",
        "cursor": {
          "ref": "9b14b5db-155e-401a-8e68-888fd1613012",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e6c3a0f0-f41e-4f9c-ac19-1d695268d9d0"
        },
        "item": {
          "id": "0034bf15-e267-4d3f-b7bb-ff4b297184ba",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a94735b2-d200-4d1f-985e-b76202f10183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42ef4e9-4fd1-4f52-968b-aee67a3b59c8",
        "cursor": {
          "ref": "877f07d8-923c-46e8-a99e-e77038354ff6",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "94fde795-9779-47d3-8ef5-ebd93d30f8a4"
        },
        "item": {
          "id": "e42ef4e9-4fd1-4f52-968b-aee67a3b59c8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "914fe8ad-0f12-4063-9763-dfb16d655133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd1dc96-fb69-472f-af97-35266cca0557",
        "cursor": {
          "ref": "3a7d9af0-0f4a-4c0d-b4cb-bc5fc20cd165",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "21503d4e-c794-4461-a82c-78f5572187d9"
        },
        "item": {
          "id": "0dd1dc96-fb69-472f-af97-35266cca0557",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d2a512bc-8f0a-40af-b6b9-46653e078bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b00237-8f73-42bc-b304-ae43d3d652eb",
        "cursor": {
          "ref": "8b364cf3-7848-4f87-a105-601492fff283",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "299237c4-219d-4743-9669-4906df89350a"
        },
        "item": {
          "id": "c5b00237-8f73-42bc-b304-ae43d3d652eb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "797a7f53-bb11-4a98-9f2c-8840c836a449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d246f76-d14d-41fd-af23-d1d126f2f13f",
        "cursor": {
          "ref": "16fb8f3a-bbeb-4c47-a00f-0af2afb5e404",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "74765bb4-778b-466a-a69b-a4a3e1683340"
        },
        "item": {
          "id": "1d246f76-d14d-41fd-af23-d1d126f2f13f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a402101f-c88f-433d-b673-3e252c9b1276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd066bd6-e1d3-446c-b306-1626521223d2",
        "cursor": {
          "ref": "85dce9d0-ea78-432c-bf4f-d35cf405c10e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1ccface3-5490-4407-88ac-774bcce6ffeb"
        },
        "item": {
          "id": "cd066bd6-e1d3-446c-b306-1626521223d2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d80161fc-9588-498c-983d-f64435bb47c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08aa878-5ae3-4021-a1a9-bee6b1c1f377",
        "cursor": {
          "ref": "04e86ed9-4700-409e-875c-cd9164981598",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2ab78ae7-8961-483f-aa8c-f65aad06b55f"
        },
        "item": {
          "id": "b08aa878-5ae3-4021-a1a9-bee6b1c1f377",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d9b86088-b0c0-4832-bf15-93e9a1d17d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c84c6e5-9e81-46e4-8c77-cc75bf5227c4",
        "cursor": {
          "ref": "bc3b68bd-fdab-4bb2-ad68-496ba3e3991b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d01ee79e-afc7-4664-bedf-e26616a55479"
        },
        "item": {
          "id": "2c84c6e5-9e81-46e4-8c77-cc75bf5227c4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2f66a376-61b4-42e6-91d2-a62745a09df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 610,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "979b4d8f-a31a-4a64-b794-a879496d0435",
        "cursor": {
          "ref": "77b0b9fa-f322-4420-bdf8-8f87e228bf92",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "94762714-f3a4-4c93-9d5c-e0913edcfab2"
        },
        "item": {
          "id": "979b4d8f-a31a-4a64-b794-a879496d0435",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e63f4996-51ec-4a37-8111-a22d19503a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 654,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2fe8491e-a4b9-4876-a27a-0cdec44db033",
        "cursor": {
          "ref": "5dac2b27-de8b-4719-86db-d0766f151b98",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b062e364-1294-4251-b091-ebb24f5d0e9b"
        },
        "item": {
          "id": "2fe8491e-a4b9-4876-a27a-0cdec44db033",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3a513de6-5525-4be6-89c8-f99c2f03ceec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "08916d71-1075-4003-acc1-0d2596adffa2",
        "cursor": {
          "ref": "f579f324-4041-43a1-bcaa-9fa622d6f56b",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "da19bc7a-5b37-47d1-b859-977adb674f5d"
        },
        "item": {
          "id": "08916d71-1075-4003-acc1-0d2596adffa2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f5530e3-c894-457e-af41-8dfb5e7b3c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 668,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3782e57f-e4dc-4462-a655-2ff8038efd82",
        "cursor": {
          "ref": "1ddd4737-9b16-4772-8845-5e97d08c98e1",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3161e486-4331-4e8d-aa2e-2bbce4d4b81f"
        },
        "item": {
          "id": "3782e57f-e4dc-4462-a655-2ff8038efd82",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8eecdb6d-c5c4-44a7-a756-5483cbb0ee17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0c0fc4a1-4895-4d01-9136-f86e0dcf0268",
        "cursor": {
          "ref": "3cd971ad-bb73-414d-ac6e-ec65e18eaaf9",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6f5d4ea2-f3da-4bda-899d-9c268ebd9083"
        },
        "item": {
          "id": "0c0fc4a1-4895-4d01-9136-f86e0dcf0268",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e39273ec-b4b9-466d-97e4-c268bea2bcb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807f3b7-aea8-4c93-8116-c12720fa11ca",
        "cursor": {
          "ref": "39dfee86-2e10-4d18-b11f-f1f856e97001",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ee28ea21-5484-493e-a2dd-b9c4de98fd0d"
        },
        "item": {
          "id": "2807f3b7-aea8-4c93-8116-c12720fa11ca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "136cda97-0e56-4692-ab1e-e54b3cd6b6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d7779aa-2461-4d45-b45f-340ca3713f12",
        "cursor": {
          "ref": "bd7f429e-dbc9-4c13-a8fb-b33a621f54f2",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c1b8f12d-1300-4dde-8fbf-98501a2a0dac"
        },
        "item": {
          "id": "8d7779aa-2461-4d45-b45f-340ca3713f12",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "61ae5ac0-2919-4f72-97f6-cc6fc1e6c3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f26272-9358-4819-bdfc-612675211e26",
        "cursor": {
          "ref": "84b7833f-6443-4cff-b45b-c80beae339bd",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1d801a71-c6cb-47fe-931e-d3811b2beb40"
        },
        "item": {
          "id": "56f26272-9358-4819-bdfc-612675211e26",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6736854c-7865-45be-a1b3-8af26ae58d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a084fe7-6d49-472b-8374-c57d139c8367",
        "cursor": {
          "ref": "0ad96e08-6610-4759-8a74-252af947f44e",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "549888d3-8f07-462b-a012-85893c52100c"
        },
        "item": {
          "id": "6a084fe7-6d49-472b-8374-c57d139c8367",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1af1dfc0-2f51-47e5-bca1-d7867b399952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c011990c-5b17-4af2-8d9d-eb076064229d",
        "cursor": {
          "ref": "da603821-5ce0-4599-9997-feb804463e3d",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "49eaceae-940e-4544-a296-18b66b0586c4"
        },
        "item": {
          "id": "c011990c-5b17-4af2-8d9d-eb076064229d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c2b3856f-fadb-4fca-8296-e414dfb2fdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056d15db-86b6-4431-8986-8b6023983fb3",
        "cursor": {
          "ref": "5c4226f7-d916-4bd4-bc67-d6cd91043259",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "caaa5cca-0314-4f16-8dc5-07883f370b1c"
        },
        "item": {
          "id": "056d15db-86b6-4431-8986-8b6023983fb3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "15ae2580-35b0-4242-ab5e-2b8fb2e3029e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbad7d7-8180-419f-bf36-6108a53055f7",
        "cursor": {
          "ref": "eb4410a8-0b12-4382-9f66-0483ce2fc9f0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4739f035-4efa-4c27-89fd-bce6d5062755"
        },
        "item": {
          "id": "afbad7d7-8180-419f-bf36-6108a53055f7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "03d475d8-bd74-4a47-8b1e-b5ce19e0f59b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d24844-cc20-4848-9f38-dad369a7c5e8",
        "cursor": {
          "ref": "cb9e6095-2dd4-4b0e-8d0e-f6cbdefb130c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e2c7dba8-3a12-4651-9f57-6115f787f25e"
        },
        "item": {
          "id": "26d24844-cc20-4848-9f38-dad369a7c5e8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a4544384-0e52-4b05-b0e5-328d2fa672aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893d22bf-28c3-4752-8b02-86f5e8ca45be",
        "cursor": {
          "ref": "69201aa9-2f45-4fb6-aeda-1359fbf96725",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "672a55a7-ae0f-44d9-b2e8-68b9dfd41cf8"
        },
        "item": {
          "id": "893d22bf-28c3-4752-8b02-86f5e8ca45be",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "68db49d5-daf2-427b-a65b-314bfef47806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2a3c89-ff23-48c0-9c02-b8d4472fdf3d",
        "cursor": {
          "ref": "13aaf292-2c22-4f62-bab9-0c4b85ca3795",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0e5b2575-d956-45d0-bfda-7e54c2b9fe0b"
        },
        "item": {
          "id": "6b2a3c89-ff23-48c0-9c02-b8d4472fdf3d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "31483c0a-9838-44b2-a29e-7ba625f97224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4cf4a4-5053-40e1-8fe0-69e43a61a198",
        "cursor": {
          "ref": "c3cc0346-d6ef-4f2a-a70e-e58baeeb1690",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "781177df-3530-49e5-820c-957138959c9d"
        },
        "item": {
          "id": "8e4cf4a4-5053-40e1-8fe0-69e43a61a198",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "85156b56-2dc2-4b40-be8c-491e283d2356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b2f15a-2017-4d84-a489-7d4d951ae24a",
        "cursor": {
          "ref": "8d01f627-37b7-47a4-9dd8-25a247b5ddc7",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9b732adc-d836-4ad3-9291-1676ee1911e7"
        },
        "item": {
          "id": "33b2f15a-2017-4d84-a489-7d4d951ae24a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6a3fb607-8205-4e38-a53b-cf7c8232dcee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58dac689-c220-4608-8bc2-8ff226fabf08",
        "cursor": {
          "ref": "de08c690-8c3d-4a9d-a9a6-d1d1d3a8d828",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b3e26017-2939-4c29-babd-5cc9e087ebf8"
        },
        "item": {
          "id": "58dac689-c220-4608-8bc2-8ff226fabf08",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "af826313-820f-4dfe-9ac4-24fa327af947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0276c5b0-5da2-45ee-b9ad-fcee6168f4d8",
        "cursor": {
          "ref": "002d790f-f028-4d4d-877f-3960872e63de",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "35e8bb97-b50c-4979-a51d-74fe65e89c28"
        },
        "item": {
          "id": "0276c5b0-5da2-45ee-b9ad-fcee6168f4d8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a591f6fc-4859-44f4-85a8-ce54b5ea850b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7385050-c4c0-46d6-997e-47fd3ce6e1e9",
        "cursor": {
          "ref": "10954b1c-7a6e-43a2-a55b-1713dc63c972",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "82cb1557-5e2d-4086-9e2b-c09c91b03b53"
        },
        "item": {
          "id": "f7385050-c4c0-46d6-997e-47fd3ce6e1e9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0f771e4b-1209-4202-a65c-140a13ba827f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da092007-c528-4a48-ab11-120a66b81f08",
        "cursor": {
          "ref": "455e2ca1-444d-4bb3-af09-54f65f834513",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e4b387be-cc22-4090-a116-78c9f5b2d0cf"
        },
        "item": {
          "id": "da092007-c528-4a48-ab11-120a66b81f08",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ec2d05b0-3d4d-4ec9-97b0-8a4b941f3933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e969735f-f71c-49d4-b54e-a7d78cd32035",
        "cursor": {
          "ref": "76f875ca-1e0a-4870-b94e-2ff7fcf4405f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "77a33b33-5d28-4ad0-8575-e05ce683045a"
        },
        "item": {
          "id": "e969735f-f71c-49d4-b54e-a7d78cd32035",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "663ddd27-419f-428f-963c-6ec4674f85ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ace9ea-fffc-4247-85aa-c4dd3d839e3e",
        "cursor": {
          "ref": "cfc96053-0d7b-40ed-92ad-6a94c39f5701",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "18b5da8f-490c-48ac-9181-d1826b390727"
        },
        "item": {
          "id": "65ace9ea-fffc-4247-85aa-c4dd3d839e3e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "799ba8b4-54c3-4d77-aa5c-bfbd46137eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78334960-7681-44dd-89be-f25034814c72",
        "cursor": {
          "ref": "7ab064c1-7df9-46ac-a5fd-29c7d12d4cb5",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "420e32d4-9539-43f7-8b9d-b73f6780a8ef"
        },
        "item": {
          "id": "78334960-7681-44dd-89be-f25034814c72",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8daf251c-0153-4e11-ae01-17f25ca5c8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9579eddc-be00-4cac-a7e4-7c328a33ad60",
        "cursor": {
          "ref": "266983d1-0225-4baf-b332-e8436a074990",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "bcd59126-8052-42ae-bce9-bd55c7c2e10c"
        },
        "item": {
          "id": "9579eddc-be00-4cac-a7e4-7c328a33ad60",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "88f1d030-4b35-438d-8f66-f7a8f86645ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d828a48-c2a0-4814-86d1-61ae7b984311",
        "cursor": {
          "ref": "d8ea5a64-989b-4f88-a397-f38b1b57a431",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3092752a-500c-4be1-a371-e60f83ca390c"
        },
        "item": {
          "id": "2d828a48-c2a0-4814-86d1-61ae7b984311",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7e88f074-d42d-49f9-b34c-da8a5fe86063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808dabed-a40b-42ea-a773-98cc42964b72",
        "cursor": {
          "ref": "0386bf49-aca7-4bec-b89d-03e3d7f01022",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "b7d71e23-e4a9-4163-b8f3-ad77a5c3ffe8"
        },
        "item": {
          "id": "808dabed-a40b-42ea-a773-98cc42964b72",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b2d38f68-33ec-48c2-879e-9722f951913a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17cca8f-c046-4211-aa67-71bb30be86a3",
        "cursor": {
          "ref": "202a125f-ba93-461c-a1ae-48a59e0b6dc4",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "31032ba3-51cb-4efb-8200-9a30d7742e22"
        },
        "item": {
          "id": "e17cca8f-c046-4211-aa67-71bb30be86a3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c20427f7-f2cc-4350-855a-b66fa7be3bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3910f29b-9a1c-4eea-9ece-a7afbc85114b",
        "cursor": {
          "ref": "9994af13-5497-41c7-96a0-e0f19b99a30c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "96fd474c-8028-4fd5-9f9b-c8d4d0f413b3"
        },
        "item": {
          "id": "3910f29b-9a1c-4eea-9ece-a7afbc85114b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1175e433-80b7-403a-b8cd-5766a92b75dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d6eaf5-c19f-4992-842a-03aa28352e65",
        "cursor": {
          "ref": "0efacac5-3ebd-4e5b-9446-eccf01f1978a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6140472b-558e-436d-aa4b-48da5929a05c"
        },
        "item": {
          "id": "a8d6eaf5-c19f-4992-842a-03aa28352e65",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "bac062f0-c069-4980-92f0-55183e26e6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54c5816-3176-480f-8422-a0d16137fb18",
        "cursor": {
          "ref": "6ca1ae9c-64d8-42de-877a-bd63fb8094af",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "96ecb18e-db44-4963-a8c1-04e1f4ba37f3"
        },
        "item": {
          "id": "a54c5816-3176-480f-8422-a0d16137fb18",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4ca4f272-d38e-4ff9-992b-274cbeaa7cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ee4ef0-1122-43c4-9427-6eb25f9d0db6",
        "cursor": {
          "ref": "612aa20b-6bf9-4f3a-9d61-7b5b370c62c8",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "042574c9-3cd3-4670-8dca-d6f187003f42"
        },
        "item": {
          "id": "b9ee4ef0-1122-43c4-9427-6eb25f9d0db6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62e1545b-5c74-4b6a-a540-f937c44eb26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c606c936-44a0-498f-83f4-7abd8b8c043e",
        "cursor": {
          "ref": "a204cced-9b8e-4978-8faf-9b9ead6121c0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "03f9a081-62cc-4c49-b317-20becfd36fc8"
        },
        "item": {
          "id": "c606c936-44a0-498f-83f4-7abd8b8c043e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cadf7085-3ed4-45e8-b57e-ec96f6bb454e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243140ef-3b21-4612-bac1-6aece844244d",
        "cursor": {
          "ref": "3fd6381e-601f-4814-9c4a-3a3d797a19f1",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "10581d9a-dcbb-4fcb-a4d4-05796db2b584"
        },
        "item": {
          "id": "243140ef-3b21-4612-bac1-6aece844244d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "56ebabdc-0903-415b-ab8b-589735db3801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee642842-31ca-41d1-b89c-340f6cefdad2",
        "cursor": {
          "ref": "4ed9da54-d6a1-48ab-a605-8b099e7717e5",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "29f5e9e4-dd26-49b1-aa98-38231573a4b1"
        },
        "item": {
          "id": "ee642842-31ca-41d1-b89c-340f6cefdad2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bb65aed8-ef16-4e10-ba36-796148d9588a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923fd7da-6224-46d3-b0e2-a32ed8081cb7",
        "cursor": {
          "ref": "fb0471ed-a313-4463-becf-e8236bee7268",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c1a5b0f2-6587-470d-956c-83006ec49265"
        },
        "item": {
          "id": "923fd7da-6224-46d3-b0e2-a32ed8081cb7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cca9bda1-daa4-4259-8e5b-993d86fec691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cca8195-96b9-4789-bd80-0b81a2cbce2c",
        "cursor": {
          "ref": "7482b1ff-85a3-4446-87d2-06ff08f6fd8b",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3671c843-c869-40a2-a6fc-eac8fc8ad628"
        },
        "item": {
          "id": "7cca8195-96b9-4789-bd80-0b81a2cbce2c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "299fe30c-d41d-4c41-a446-aa8084f9a854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0046c9d6-dd42-4111-8990-e813a05ef1b8",
        "cursor": {
          "ref": "ad0d961d-cf12-47a9-8f29-7ce16819b72e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "048f74b3-44e4-463f-9e47-56f70706e6be"
        },
        "item": {
          "id": "0046c9d6-dd42-4111-8990-e813a05ef1b8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d2405bcc-5450-47db-8d9a-d1c3d2984f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec414f1-71c7-4511-afab-6b4aeb7d4efb",
        "cursor": {
          "ref": "9e8675e8-fa88-4548-8f89-23c7358dc316",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "75cbbe4e-33f2-4523-a7e2-7a5cba5d2139"
        },
        "item": {
          "id": "1ec414f1-71c7-4511-afab-6b4aeb7d4efb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "034a2662-d963-49a7-814d-88739dba3a14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c2627d-eee5-4160-aa9e-eb759c9c6da8",
        "cursor": {
          "ref": "de310ec0-1b62-4fea-aee3-76b531bc292a",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6db740d4-9252-44c3-afd5-f580ba2737ef"
        },
        "item": {
          "id": "c5c2627d-eee5-4160-aa9e-eb759c9c6da8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6b8835c2-76d2-46f7-a0ed-181fa9bbff41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5eea35-1e83-4f88-b90c-ecf9abd249a4",
        "cursor": {
          "ref": "9c470525-ec82-4ab7-bd52-845dfb7c3673",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ab608b33-57bf-4406-a53d-8097d8c0028d"
        },
        "item": {
          "id": "8a5eea35-1e83-4f88-b90c-ecf9abd249a4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c89f4ed4-f38b-4cf0-a5d2-8e4f546396d7",
          "status": "OK",
          "code": 200,
          "responseTime": 711,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fed88d3-d08b-4f5b-b7ae-3a5ff1510b77",
        "cursor": {
          "ref": "47112e2a-2dad-4d07-9863-2aa0972e5a9b",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "158c06be-0a6c-455d-b648-b39d5da7c1f8"
        },
        "item": {
          "id": "3fed88d3-d08b-4f5b-b7ae-3a5ff1510b77",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "031ffe17-8c91-4467-8073-c31af90de7bb",
          "status": "OK",
          "code": 200,
          "responseTime": 1264,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd41e46-b092-427d-9560-b72f270e07f1",
        "cursor": {
          "ref": "ddf1baf4-5ddb-40f4-b154-d78b1557f9df",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4e7502e6-c5a8-4add-ab2d-afcce0b7616e"
        },
        "item": {
          "id": "5dd41e46-b092-427d-9560-b72f270e07f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c65e56a8-2a62-4821-a2a0-93d6969c7d01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd41e46-b092-427d-9560-b72f270e07f1",
        "cursor": {
          "ref": "ddf1baf4-5ddb-40f4-b154-d78b1557f9df",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4e7502e6-c5a8-4add-ab2d-afcce0b7616e"
        },
        "item": {
          "id": "5dd41e46-b092-427d-9560-b72f270e07f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c65e56a8-2a62-4821-a2a0-93d6969c7d01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44487ab-1d68-44cc-ba82-f450849f055c",
        "cursor": {
          "ref": "c8c2c72d-14b0-45de-8775-b32317ae1423",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2be055f2-ff11-4a5c-9353-834ccd0dbe69"
        },
        "item": {
          "id": "e44487ab-1d68-44cc-ba82-f450849f055c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "635d50a9-2615-4de4-8dc2-3bfbc370ebe8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b70f5dc-318f-46eb-8e95-750903211171",
        "cursor": {
          "ref": "b9403eed-66a8-4d67-ba2d-b2b92ac930d1",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "a40ecd68-d612-4c73-ac05-74ff34540447"
        },
        "item": {
          "id": "2b70f5dc-318f-46eb-8e95-750903211171",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e92f94a6-87e9-4fcd-b8a2-5ce7475d5b27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}