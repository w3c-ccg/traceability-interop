{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "27a1f482-2ad6-4874-8034-c30764e72a9f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a11daaa5-30c9-4c38-bef8-e5e135115300",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d1204954-039b-4d43-9ef4-cfc88fc8ec24",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00ef9dd2-23cb-4549-9e7b-e0622ec7d378"
                }
              }
            ]
          },
          {
            "id": "c7629bf8-0a83-463e-a8a2-4e6b45efadab",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1453c4f5-dba1-455f-8c5b-47d160ae59ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "50df9b28-7d6d-4506-b467-d4a94b3ca668"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "94c5cb02-2a2d-477e-a0ae-cb03dfd52726",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2dbe3b83-0730-4da2-a2a1-5b118c807587",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fd0d4e3-b2cf-4016-8081-7a140ea7abd6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f242d032-42e2-4269-9ba0-577b151e4623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1dd02b8-c4d4-475f-a63c-1afea41bcb08"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f943302b-f8b3-413f-b369-2e604ff8e6a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73254eb7-eeab-4de7-b1ed-22c822b3dd4d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "17e85cf0-93a9-46dc-81bc-401c9e0391bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d975e68b-7576-4000-80d2-1a40026d431f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8b51048-40fc-4f26-a210-5ad090a470ff",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2174dffb-70fa-487b-986c-ab1291010574"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5efacfed-6595-461e-9320-232e63805e8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ff5f959-a6b8-46ad-88c1-e8e96deb140f"
            }
          }
        ]
      },
      {
        "id": "af0116fe-9935-4d82-8cbe-ac86ce9593eb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "46a38502-b97d-49cc-9319-bd4b40d56c90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d315658-9234-43b9-ada1-e3f5ea2113a7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "967dfa61-fb9a-4e61-a968-21eacad9c37a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e5e20-bb39-4fa1-b2bb-8d017ecbbda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e3cc0e2-b22c-4347-9a24-62d0c849f2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5b7984-08d2-469f-b7e7-b794a0c6cb70",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc44661f-b170-4509-bea3-c69a54f78ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac0a7fd0-ef08-460d-8225-8f2ba38355fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e01405a-c948-446b-b7ad-70c8873f02e1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a3d586-77e3-4d06-880c-3046f3b302d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b21a8c3-fcf3-49f3-a18d-059a10495c4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf4875b2-d9b9-479e-8f39-0722fcabd9d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "949481ce-69be-4296-b53e-6b8e5c18dd45",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d8a20d-2058-4040-bbc9-cb83ffcd293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b3929c1-8096-4faf-89d2-53aec0afc792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72830750-694e-4799-a5e0-037ecec27710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dae010-c9d9-4b4f-bfea-2f88a9a3ef37"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61885781-1422-415b-93d9-6096e5f249c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02a4f222-b998-403e-94a2-6f4534e5eaa2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1142434-31ef-402b-b477-897b0ca493dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "92acee6e-14c4-49ca-bb88-05d45c7ee383"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4443090-ba73-455c-a725-9f9f4fd857ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "0892a60f-37ad-40bb-8717-3786e6079f01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee8e5115-b074-4aea-bc57-4b7c1f3483c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f8f59e5-7294-4c80-b21b-8a074baddfdc"
            }
          }
        ]
      },
      {
        "id": "a077d0b8-9ee7-4e9c-9b2c-edae0fa3b8fc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bddbdb10-afda-4572-86aa-71249143d948",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f0bdd30-fb23-4f27-b24d-c22953cdfcd4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a5903426-8fc9-4612-ba03-41c1ee502775",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681ba7fc-b07f-4421-aac9-99d8a32cc0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ac3634-8afb-4434-a884-c861ee6f30ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5483763a-c6b4-478c-bf76-056f8dbac294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9fdb39d-18c6-4ff1-88ed-baf3138c45ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfd319f-47ed-4ec2-9c81-466f7d40947f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cdf1e4-377c-46aa-86c9-4ca92d6beac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c41592c-f786-4d8e-9a3c-6dc725d7cf3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad150455-f2f6-4429-841e-bf6e785d902c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc12edcc-8aaa-494b-8019-b82976a37ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700c946b-4736-49b9-9d29-2cd9b11136c0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f790a97e-4214-49f6-b915-0b1b3664bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209b0741-a0c0-4623-a320-b17e37d21321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5de8677-11e4-43eb-817c-293659563414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58f570b9-5b5f-4d2d-99ab-06c732e89efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9912cb-b4e7-4394-8803-6a67d9e9d1cb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612bfc83-ea9c-4f65-9e79-1fe2b434489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d11632-b374-4c59-b7d8-8971f3060fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fdd79a-afc1-4504-b675-1024615a838b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "446780b5-faa5-4227-b05d-cc55df496c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9461f204-c341-4b01-9319-f9230a290637",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa7c710-8cd5-47b1-b51c-35e55c9bc125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc9bc11-f21d-47c5-ac53-93e6a2bfa986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e61ff0-0962-4839-b7ce-14d4a78a0240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29163445-6f2c-423b-93e0-9c816dc735d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21fd5e4-361b-4309-aa05-938abb6201dc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7eb0d7e-0d59-4933-912f-52a6b08069bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645a87c4-154a-4a1d-9bde-d6e3213e4d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c01607-bd17-4cbf-abd9-947b749f43a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b076c9f-3787-4e3c-aa29-882dbe81aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ddb489-5478-4add-8dea-098da787d949",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4be28f-3e00-448e-a5cd-bda25d273fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41a9f19-efbf-48c6-ba4c-99dc132d6b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4286f261-1a67-426d-ae68-e15f364f32a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0a3876e-97fb-4a6d-936a-472526c523ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd6184b-ff23-47a9-a5e9-a201fae9a601",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e88d78e-4385-4198-93e4-2090a9fd6ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44466fc5-c533-4a43-adad-54cbfa6bdec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83889e6d-68df-4637-b1a4-efef4c09b628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af34e6f1-863f-43c4-9d78-43bed30ee818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7acd66-d061-497c-be85-762beb3931a0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc098d1f-9e6c-4efc-ba5e-0979cbec77c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0a95c3-73f2-4053-a314-756f29e30e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd79bd58-ff11-4f35-9a64-a77b902df3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5d6f304-8f8d-439e-b697-07eb29d9cb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f619e70-ded6-46f7-bbf1-e2ab08671d22",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc5d256-52e2-4f37-98ef-4819f7c08851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8082e48f-e452-46e3-bc88-127d88a87e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2070bcb5-64f1-4f88-b56b-79e8ef6817ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcf18572-f8e4-4a81-a32b-120dd61b55d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13381f56-7c7d-4dbe-9363-117c2d1f1730",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66ad327-ae1c-46d9-9dc9-7acdb935f7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5121f26-d84a-4c39-acf2-9bc579d5162e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3063062e-2894-448b-88f0-1b710e85ec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8430d3b-4e19-4063-9550-04e6195fda28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16afd0f-9f95-4b8c-9f35-d67648d8f7a1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec0c695-571a-41bf-ae25-696d7a7e3b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253bba51-5be9-4215-8fc0-dd0817804bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bfdbd0-3885-4221-a078-661a7ab65b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326a04c1-f536-4960-affc-9f31c8c1e810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbca1b4-3087-4049-a5cc-424bffccd572",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb718ab2-f4a9-4343-818a-51e9f458b48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9324c9-7bc4-4355-ab05-ffea76e547f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939096cd-86d6-4176-8ac2-bd8bcf8e97ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f623ea-1c9c-4ef2-92c0-ee12d43bb95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0e931a-a133-4fcd-bd5a-1dff3688e517",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a5b2d9-98d6-4eaf-ab7e-ed56374df7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ff230a-357a-4618-aa86-9f76349f08e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a76052-651b-4c2b-9d93-ea481f4de072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97fcd095-bb9f-4229-9039-f088d6a20099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ed573b-8873-4eb7-a22c-a64d0286a3bb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9722ae-b1a5-4c25-a8b4-724cc8d71fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bde5189-757b-4b50-821a-d802103dccd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac757c6-21be-486d-bcc5-80148d478d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80da2cf4-5329-4d7c-9460-bfe21f161665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a3920c-ae14-4b98-afcf-9e9e6dd52dff",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef980b2-8086-41cd-9815-dfa122430e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2cdca3-62b2-46c1-a54b-c9d51f1d3c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53570ac-0140-4b6c-ba7f-22c8e14199fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33d22da5-65e6-4546-bd77-402811105e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855d0104-49aa-47a5-a25a-377598cb3838",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e285c62-414d-4319-b9c5-9008cf97866c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edcaabf-0773-48a6-bc98-5ae46f0d17e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c64cc3-add3-4e7f-8fa9-4bab208ea1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a346d5b1-3243-4a82-8129-845276f7c5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb57646-3ea6-4bb4-9b04-6de01bdb3027",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e5f509-a987-4f22-80e6-369bb2c605a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d455b5-4cae-4a7d-b840-911f5a2a94a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd284fc2-78f6-4975-b8a1-6451e97e1f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "361b2339-9ea5-45d3-b154-25104a7350d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805ecae8-3740-4346-867f-086744e52dee",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01924ee5-cc0e-41d8-8570-024399513e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb844f0-80a6-4a0a-be6a-b69196a54914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106d8ccd-c19e-42ec-859d-5a0fc93e6a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "411bf4d9-2305-4cf1-8890-816bd9066856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac70252-bbd8-431e-a4b5-92013ace67a5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d868ba73-b067-4b3d-a8f1-0c142cccc5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046d5a3f-6bb9-4d9e-966a-34af56cd2042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933d30fb-cdde-40c6-8313-d7f4c84480a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b674c04-e623-4560-8dc8-d1a45f89cb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f3e924-9ef6-4698-b278-b25de1c1c6ca",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b1605-d719-44eb-9703-798b6d786957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f625cf-2701-4120-a560-f22a5ced39fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263f512e-329e-484f-97c0-1384b4c2cca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20862b66-83cb-482b-b0f4-967395cc6dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1e924c-1fc7-429b-9644-3555c3cc9a1f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe694041-1268-4763-acf6-663563f6d0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3940464c-a252-455c-b6bd-219aae9d9b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64537a46-fe28-4799-b0b1-0ef97bca097f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd7a0bbf-decc-4130-ae3f-f6f85c75a0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a05d26-5992-4d68-8d9d-a36f1f01ecec",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7296551e-3a42-46ad-aa06-f69a4a0a7527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa23bf5a-6b8b-42dd-ba04-4314a7aed5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbafb04-274a-443b-8ca2-79a4c0df6543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00f71ce8-27c5-4589-bbe1-8664871053da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e92d5a1-7749-4dfc-9cda-17add6f3b887",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de8b27a-59bf-4535-9f44-20b8f05aba2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c13f02-dc9f-4c30-9a80-abd5580f5e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689a8208-07d1-431b-91cf-a5a7f5b47901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5453db-6a95-4962-b7d2-8eb1c8609b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebedc0c-0093-4e26-b63a-b376354fc24f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41389520-88ef-46a9-9944-d4af86187160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52d61bf-8e93-4805-be42-1fe95403d455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f586431-3071-46f5-8953-94e7ad042967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8a8351-6f2b-49a4-9524-ef18ddf663b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7dbc32-b852-492b-b0b0-0e0ffe37b27e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424fd988-d600-4662-9bd9-fbe42e14502b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da40582-afc9-491a-8ee4-8925ad2cbf49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7deff08c-1bfd-4c41-a3d0-4cb85f540560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6235a25f-5555-4c29-8740-e74aa3311984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7ad28c-a4d4-4831-8055-e0e885b9ae23",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a8663b-9616-476b-9693-25443aec45ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d39c36-9780-4128-821e-4601864c93c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e56a0e4-28af-4674-913d-52260afd48b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50bbd2bd-bc75-4cda-a830-acaeada85af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619b85b6-8219-4270-b903-55fa9b338a2a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816f376c-ec48-4690-9471-4b2c9ac0c74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9c21c5-39e5-473c-9f6c-d3c455cb3b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441b183b-584b-4a6a-9acc-2d78e790fc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d412781d-0d2f-42cc-8296-14ebab84b256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8507d380-c305-4042-83dd-674db1ff527c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b8d873-1031-44ac-8f07-e7e8a898e18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251331c7-eba8-4ac7-b78f-b4e4032047dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd0e3d2-2ee2-475b-bf55-6d529b61e743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1813d6f2-dd9f-4c81-9c13-a81e66114f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977151ff-f46f-4426-8ded-40ed992c5eb7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8552d4-0665-4c1a-8f8b-b96869240fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf2400a-8c0a-425e-bc15-fa4788e4a8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66730265-2c54-46c3-b736-cf37098f79f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b71f8869-4e38-42a4-bcc0-f9b1100c7c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932e86a7-a295-4b75-abdb-a33687519c70",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8a0432-4d0f-4d1b-a8e3-770bead55cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef09e4fd-b064-4366-8926-2d291135d7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edcc568-d1b5-45b3-baa9-6eb6d1392aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eab348e2-66fc-44c3-aff6-4cadd0afada2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4aa49a-7f59-4422-81ab-d47ecba31c47",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b091ba6c-bbd1-4a7f-b6d8-074b4aa9c143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb2227b-0d45-4e7f-88eb-33b1c30f27db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016fcb1e-6ab8-4fdc-b3b5-9bfe2ceea635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbcde573-54bb-4442-849f-8fbe99f0af0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51331ab-a2e3-426e-b884-363aa208354a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc13f29-c427-4d94-8f88-55c93a0a268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bbaaa2-1a91-4e67-8152-3061af74bc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419af5c1-5ed4-46ea-8727-3de3fbd844b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72064dc2-c16f-480d-ae6f-754068009082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544b6404-3a2a-4190-b4ce-7b3374626cef",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a134800-aa47-47c1-b3d8-eb080735cc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a880de-c883-44f5-84cd-251baf18d087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0218829d-730b-41c7-9d75-3e3d5b624600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5750b5b2-9261-4dc8-89a8-3bcc3b768bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8438df7b-8319-49c0-88a5-83a641cb98d8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85262a5-ab22-445a-8b31-eac415b5ae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fd2019-bb45-4ecc-9e66-74b47b8d69f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0394614-ac9b-4499-beb5-46ff9639418b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b13b1fdd-9fc0-4cbe-98ec-bf65c03a9324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b21f8a-9417-43ca-a61f-b457370bdf7e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a2e925-da31-4a05-b213-48f8640e0e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7c9806a-aba2-4157-9faa-1bf57177b038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cbd9eb-2952-45cf-8655-f650e20b114d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ede58a-ba02-426b-8aed-91d743e1d657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f57fa2-23e0-417b-9b36-63bb0b8a13d0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3addcfe3-3162-4a00-b6f7-c0a00f08b5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "623d7ab7-88b0-4c04-819f-46e0241d3be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeb2f75-7992-458a-8578-ab19cb4428cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4877861-9066-485a-b269-ad7a38a59c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a305f163-1798-4c42-890e-45dbba1c4cf9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef2e70b-20f1-4f5c-8819-9cec220d54f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe891514-5b7e-43ec-9c42-cec429b694d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada7cc75-9751-44bd-a796-0769cd7abefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0779ac4f-c879-4263-a752-d5b8a22da678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d05fe7-8292-4c4c-86dc-677a29859e09",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253ceb14-7f1c-4375-84de-20027b0a4dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f396c8b-ef81-47fe-9741-918d29878db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967abac1-2fbf-4632-8883-447f9a3d149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "31cbd754-448f-4d82-a124-2dda0f1d5618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3a933d-a7da-47ea-b9d0-5dd21824df03",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06640abd-f710-44cf-bf9c-ba57edfd102e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaaa878-57ef-4a32-b5af-c6c582b0786e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d648f04-adb1-4aad-8527-f6f3ff7a2126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee185e0-2804-42f3-83a6-0575d2002976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7909132e-0a0c-40d5-aa4b-8f8a0c3d17b1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "163b010a-9595-4824-9103-8544267dc2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea3003e-63c7-4df7-b027-621d2f5d1ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abace0c-8cd9-445d-9235-9490475614ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "851a36d3-f9d7-4c5a-b076-996c62415a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09885f6e-e646-404a-b7b9-a12299c5d2b5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee2ced2-7872-4a6f-98e4-d618d4795359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34278b0f-efd1-47c0-b587-25ec1c0c1ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbf8b70-e618-432e-8ac7-9bb074857a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f90064-b056-44b9-a248-30bb539ee8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d2a3b5-b620-4972-ab5f-d18b9553eb66",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c95a3c4-6bbe-47c8-9806-e99299c1569e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b99c9c-6ab4-41b5-b2b5-6114e8c9f115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39538b80-9c8f-442c-ad86-03b4cd65d09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4a6c84-6b9d-4911-8601-9384b1d45ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972bd70b-0500-42dc-999f-d37718c8aaf1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06990d62-7524-4e7b-8c84-5889e4f8fe9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b84178e-d72e-40df-bfc1-8c067d96763b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07667ea5-6354-4069-bcfb-8d175c76cfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "29db74f9-4fce-4147-8786-076fece0c80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecee712b-5cdd-43e8-aedd-7f9aa46dd710",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f28d6f-bbea-47aa-a84c-17fc69877187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c327f2a5-485f-4fc4-8732-098ce90faf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5034dd15-f81d-485a-b444-75f223209a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2020d2e8-d1f4-4ca8-bba1-7e15ee5f5d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0a780a-d391-420e-b013-92704450a192",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d73341-17fb-4d78-b34f-743d35eb3eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc50ed6-2123-4df2-99f3-5260096fc5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8a7434-a415-4774-97a5-c75f3d489fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c95b9406-836a-4278-a831-7b67afe7dba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d2465f-0bb6-4eca-9314-00dd431d3eaf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0624b68-4353-4729-a913-effbef373507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d106b5b3-2fd7-4c25-b4b2-e3c06cd105f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e8e0c1-d2d0-4353-a9e3-382ca6b67c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5eac67-0a9d-4dac-bc61-98e645ef7528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ba8725-d7de-44a6-bd00-eaea35db3a30",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b84450f-8c4e-4f28-ac09-977771c16b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea734a9-e67b-45fe-b5a2-c0efd881d836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4dbfa0-e605-47ab-9884-3b5717cefbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e14a0d9-2240-41cb-b01e-5b764bfa7a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231a0519-ddb7-4598-a9b2-f959c50d7a05",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35597772-00fd-4c49-b144-d87a38339517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae6392c-1750-4f1b-bc9c-185207041528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb222b90-485c-4a2c-a80c-7b4b645835f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6be5739a-7ca0-4ab8-9dcb-b1021d4de429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763cb9c8-1d85-4c96-93ea-2e8885a2bbb1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd966fa-d03b-41c4-ab5e-33fce7571b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52371cb9-18d4-44a3-9f9f-7ec652047bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eaf2e4-e1de-4419-9c3a-b2375c6df713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0a21e5-fda3-4f07-8174-0b4373a354bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023f2069-9160-41da-870b-88fc0ce7fde6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702458a2-b848-46ce-996b-d2dab516da79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56aaada5-2863-4282-a6e1-4ffab3ce8b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96675b5-e3d3-48b2-83ff-252ace1b043f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9412bed-c43c-46c6-a7d3-91331ba3d37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a89b80-44e3-424b-ab1d-a0fc2a9428a6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb8f8e4-94ea-4553-adff-be9727e46b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54371fff-e02d-4d8f-88c0-a944e5b77263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103a568d-52aa-4613-85de-7b1d403931ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "38773451-e988-4b6c-8c97-37210f9f5c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac4aa7e-e159-4679-9e3e-8dba3b63e17f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af40bee-0e34-43d8-9396-95b11b74cd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b515891-5d1a-435b-8b66-996f33735fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98695da2-8bd2-484e-b3f6-719d84682f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6413d05-ba95-4fbf-947d-0e297cbcb482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3397f64e-5729-431b-bf7c-29f40be8fcc1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742a2101-7470-44f9-ae1e-da4fec96025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e15748-9212-433f-9c13-3162769293f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadb4798-2644-4e45-82cd-862893136505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eea1751c-69fa-4bb3-a310-3cacc25f74dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f73fd1-2977-4b45-8a8f-969828feaed4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c868b1df-71c9-4a47-bb29-66783930c641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995f1312-99d2-4b25-a1fe-62e3fd2fd1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1a2311-8423-41b4-add0-271013f3fafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a52c674-7f74-485e-b7e2-6345d5860714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4bf16a-13e2-48e2-bedf-01d49a5075af",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fc1d63-551b-4bff-9f45-9ebb2ac2c39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0cc091-e61d-46b4-9ad0-9a97b7133f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8e7ab2-9622-4391-b53a-1521577e62e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b0cbf7-b20c-4a14-b529-2b7951d15df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a47b80b-ac74-41a5-beed-786f36efad7f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a72c98-6e37-4713-a36c-0f5035d089b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7a1b44-f543-48c7-b91b-8890a4285b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b156f91f-5910-4c4c-941a-f1d74328f67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "adcfad16-5aea-4eb8-9209-c80bdcad8865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e0a56a-2670-4a4f-819d-ee7200f17bbd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e526eddf-2e44-4e12-86a9-033bbe6d8b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db8490c-8d73-4551-bd6e-8e954fce5579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d899dcea-718c-426c-a511-9e46ac1d863c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e224fa6-94eb-49ae-85f1-eaebfe79d027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819e7783-8940-45a7-aa8c-b193c3dca78a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82afb23d-6623-4013-a899-ec2553c0239e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b90f58-b0c6-4a12-b9e6-d7852b4c02ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd63632-3c93-4fc6-a215-38389d2dd5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "406a1744-7183-44ad-9f6d-7cb15ba909dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a750b896-dc97-45d5-94c9-ab15af268ced",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cbdfca-5e5e-4d40-8433-d2a5d35c90c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20085273-caa1-4fc2-9f11-61db66ff1832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb7cad6-3b89-45f3-907d-27bf379f3e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a245eac3-adf5-4447-b458-c3af3c5274d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548be4b3-cc8f-4d4d-976a-50097f32894d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5feac8-d589-4c67-b35b-2f1704d4d83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16869004-5267-41ff-aa06-67ac12339064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d397dffa-1804-4f20-99b4-fc65913dae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c356188-ac28-49ef-a358-daaf64f40c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bd67b8-89da-418c-baed-7ece6910f0c6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d97b0a7-23fc-4fa3-992a-5b3167f72ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdac8dd1-ecbd-4051-b248-7073379cfbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e93e28a-39f9-43ce-8756-e854c273513a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cfa6d5-f762-434f-ac98-a174f99a2c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8f1753-981d-4e63-85c6-71e2372d300e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588c6168-5e15-4c72-87aa-c2c779f37a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f148c158-4e58-4efa-816a-c83bbd5b850a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869c3c99-1b80-4ce3-8f1d-2a4e399a8862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "063b9909-2688-475d-9224-ec675f2e1682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a483fc07-a769-4786-b15e-cfb9d0296ebd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320cdc6f-5a8f-4848-a6a2-7789fc08910c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840d3ac9-1e52-497f-bcbb-f4e03a43e6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdeb6aa-afba-4f31-8592-fb830023261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0d7971-a606-43b4-a358-432f546497db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4faa3a-c504-4432-89fc-c0ff796485f7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6bc2a5-a301-48a3-9a50-0ddb0e2a905d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00601e29-f236-425f-a018-0dca0d1e2f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e019eb09-1c85-443c-9552-3931a8eed560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40afa736-851d-44c2-b93b-99d39957bcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497e6559-6244-41a1-a6f9-0cd1fe2a4263",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e771f267-489e-4eec-9123-0303a36ec874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8509075-ac05-4750-a3da-4b5690fa5dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6801087-d948-42c5-b8c1-345d8fb34acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd27959-b09f-457b-a310-5a8ebcf84426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a782ed7-e53a-4f63-a0ac-a2427cf94230",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81773940-b318-4fb1-aa7b-5b22a8f16bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65689f6-1670-4d35-9257-ccd1e2d2d167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b7555e-6646-48fd-bfc0-f89609b192d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cab8611e-cfd2-46d2-adfe-80c54a7fa8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df45ae9-2328-4035-a2a6-dfb89f8a3fac",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed81f1aa-1a44-45f6-b426-c3cb725ac0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa73f88-f50a-43e8-9084-fb7ab0143940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5409ecaf-853b-4bd1-829d-e0996a204886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f182f2c6-d060-4f15-94d8-8edbb154a5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03b9068-1d56-4b54-b8b2-a529592994e4",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e30c446-51c4-4290-b134-6d420230be20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c213759-ca49-4309-a8d3-dfe003903568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed3a21d-dc04-41ab-944c-81c924dc8210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18a2f92-3488-4513-a205-6131f73c210e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcaa1b9-7204-4b59-bcd6-a75c0fdfc7ff",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d91aaa-a800-45ef-8a12-76dc74c42666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe702c2-2ba9-47c8-8036-bbf487962612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5e65cc-4651-4c73-b025-afbeac8f3d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e6a9d5-7d15-4242-9955-109fbdd276b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad12048b-3345-4035-aa96-b3b3a4531eea",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e5ea2d-8733-4aad-8360-08f18e5ac232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7629060a-e2e8-4c96-9893-4aea9bfb3572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bb9867-b2d8-455b-90b7-82454bc6b93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23a479fb-84d3-4c56-b4a8-d96dd76611d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3819a4-5716-4f38-b0d1-ff1437c397fc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa746df9-2b99-413d-a1c2-55f64a354ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e3a111c-64af-446e-bee7-560ea34eaa3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e832593-f3f4-45d5-acf4-0cbe1806a8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6ac758-e360-47f8-a837-01952d57d6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9416f2ca-6b9d-451f-a3b6-b9204b703f98",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50490ac4-3273-431a-bdc1-629079371f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdaa1df-25c9-4418-be94-2538cf2964b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ce2daa-fe3f-47c3-8e07-c9a67263631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "093f5891-48f7-45a0-a3ec-29bb7580c8f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9ef885-c3f5-41bc-9ef7-fbc6e0a14f5f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ef89a0-226c-470f-b474-d2f14630ee39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0508a9-314b-4df3-aa8e-a8eee5cb6407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcd2d26-2ab8-46b7-92d6-7fe031e508c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49c76ac1-280b-47ba-8b6d-bd4baabbb4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93281c73-65fd-4137-b5fa-dd703437995e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcca0fc-1999-4df0-908b-f379cc42828b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffeaf9c6-74e1-4192-bdac-7ab85c916f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dce12bf-e08e-4bcd-b6e0-8c80984049a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "058ba713-28dc-4613-86e1-d6ce468d28f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b66eda-1c13-4169-81d2-f5c1c1d64344",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb13d5f6-e9a0-4c08-b287-c2ded26539b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc915a72-8b72-410d-b915-06e495f7bf64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a144aa-9114-4219-8abe-3a0acf4499cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9a47df4-2fe8-468e-8938-f4c37b3202a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a28861b-918c-4b80-98cc-6998306b685e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99303f85-4621-4c2b-9fab-3f62555b6f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c60fb49-d6e1-4578-a055-bdc5b28577ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26552f9-9231-472b-848f-535f79ebb30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9182f055-1d81-4a28-8141-2af2367e96c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d69ee2-e229-4ea1-be76-79fc4c2c3d10",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d999563d-32ae-405f-8d2d-ec432a17224b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6560ef9a-76bb-4dd3-bc49-439b3fb6ae8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff2a1a1-2d6e-4b10-8c1e-a7f38ed17d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7e6952-9e1f-427e-95bb-be1e6c3d018d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8466f8-2c00-4567-832c-cd5d5e9437b8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5f1e0c-823a-45a1-9635-fc6b9b33bf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64d0faa-2849-4ed9-94ee-d201d2e99fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bb218b-566d-4afe-b864-7c57e86b91f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d13b7770-409e-46db-83ac-0f5e46511fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c0d430-7c43-4a2f-8f9f-d465e6f12c05",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3bf75c-d42c-4cad-a081-2c4ac971444c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313ab884-8fb0-4a4a-ad64-76c0407b0653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf3e5ed-9fb5-4a17-bd0f-f9e8578c2342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebad7d7-ceb9-4f8b-b4cc-a8d734ee9adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f97eb7-1a8c-41f6-bd9c-666ce8428fa4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b07c002-2903-45a9-998f-de67076c4b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d61f2b-6db6-4643-9329-546d157f271d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b62d7da-e361-4f51-a505-8a2b5ae47689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60a3c471-24e8-4a4c-8dcb-6a4ada4355ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c732d4c3-2819-4bf4-a7b8-dd71f99b21f2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f8388a-319f-43cc-9c4d-147231adc1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3fba3a-549e-47a7-b9d7-6fe59fc3aa28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db1b217-95df-4ec8-ba97-4f128e510169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f6b72d-0ad9-4524-b709-2f1e1e22f32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b78fea-06aa-4dfb-9ee5-8da551a16d2f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f439c142-e361-4d69-8f2c-fa431d7adb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b1e2b2-505c-4a1d-8f7a-a782d0113082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476f233a-d4a4-4295-b500-3e668f12c73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed445ca-a35d-4d3d-8fef-05bec51e74a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b0618f-72eb-447e-9ca3-155ff2aa5fbc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbb78f3-8424-4f4e-8674-39278c40b8ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de164fd-8a5d-4747-b4e3-2afea0019573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1c1a0f-5cd6-4c26-a558-0e6f8209cf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "204505ff-d9aa-4d48-b481-19e4030e133a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664f3b18-414d-4bfa-847d-e58ff67c5eed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f53770-6cc0-4816-8581-3af24f860f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef320676-c235-4798-9b84-861ceb1c6572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a639620-cea0-4d11-b6f4-cff1c9c13a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f9a9cc-3699-4e0d-a51a-40d7dd07e0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7898d84b-c100-4eb5-b262-f3d80b597437",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decee94d-3b07-4005-856a-9e9fc6c588fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d9ba15-5fcd-41f4-ad5e-7e4e14941043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a17065-ca59-4547-a656-2543990caf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20081b9d-13e6-4f63-8a71-a7bca6cd08b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef00185-bb7c-4017-be6b-dd6a333922ff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d578da96-a554-4e04-a813-98bd53950613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fc1f33-3d44-40a3-b9c3-f1e38ad68946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39d8bc6-784d-4e85-9784-23abb978834a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb9b21b-24c2-426b-8951-778ad42c1c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10bb9d1-7ac1-40e1-bc65-d7926d09858a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531f90f7-c055-4c63-a69e-2c372f210c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bd94e2-ee6c-444f-9436-357ab03bb06c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c46d1d7-b29c-4384-91a8-453562fc19ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "22670c81-1aaa-4402-94b2-2ee2346e757a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d82226f-b6c6-4578-bcbc-6a47349147cf",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11011271-fc23-4874-93e5-ba5cc6e121d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63584bfb-35db-42a4-ba98-6f4949d0fb0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1389519e-1995-4a19-948c-5c5d08b925b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c380ae1-03f5-46b9-a892-d1e4d2ef66ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1275ed-4770-4f17-a053-118f98eed056",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b907ca87-930b-493c-914b-e772521230d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0012ba-b370-4b9f-8dee-66f57f78a230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe2a685-e84f-4c1d-b4ac-2a80d61339cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c119967f-1269-4160-be8d-0d0bf6fccf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaad157-3928-4087-bd08-a739b13aadd3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4e018f-0206-453c-8fca-e250a1df9a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eacabbf-8a98-44c7-b084-9fef290d2a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202af0b7-d312-49dc-8ab8-662416bebcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "45f13aea-3721-4444-9541-22b26d808e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e703d4-209e-4f6a-a374-4486ba99274d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5cab2e-2db3-4418-b799-b0b04bd1e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8c748523-1d48-4547-bcb6-76e6ca36f2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e742bf5-b497-423f-bb8f-921d6f41f65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "036b704e-6855-414c-ad34-231e7f294f62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d3d82af5-0689-4154-9a1a-0f8bd4585dc0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eff35ec2-2ca5-414f-8139-4f8a344625df",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b967858-e22b-481d-9b7f-07854ec0c027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb472feb-cb85-4c3e-8c80-a9b7c7dd54b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42169f38-221a-4e18-933c-98c3ce5aa480",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2cedc7a-6a0c-46c8-b3d2-73f143bf7559"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "359ad12c-dde9-4250-acb6-40e337d7d1ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7af969f1-0ca2-4036-8bbf-cecdfa48c3ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d5a2444-ea75-4be7-a97b-3337eb723c8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c9527ad-5f15-4c13-8b19-a5b537f5bcb9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "feff89f7-0ddc-4e23-bdee-e3848d11e6d2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1c3054d-6af6-4ddb-8d73-9830590db5fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b9a8a309-ab2b-444e-9ce0-361b45660649",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33ad5ea5-6a1e-4e22-b3cb-4aff4623682d"
                }
              }
            ]
          },
          {
            "id": "17b617c6-d38e-486d-ab11-6a34f3b9d6b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bebc0c62-cc51-474e-bcc6-8b5fd6368cf9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "987f6825-b688-4cbc-ae2f-b1c5bff585c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a13f9eb-fb4b-445a-bc77-97972e1db0dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c276246-b772-4edc-98ea-03fe4a1517b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40132da7-ff70-40f8-980f-305e9faa807d"
                    }
                  }
                ]
              },
              {
                "id": "750859fa-8b64-4526-adda-14309bd53085",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7d67d26-d91c-485c-b3d3-a5c4ccdab20c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cba8114b-9542-4a69-a811-2df9f21cf8e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cd9b6fd-d515-4251-ad33-c30847656125",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55db3fef-ae1f-498e-bc6f-54fc1f54b875"
                    }
                  }
                ]
              },
              {
                "id": "455b7fb6-a703-4ed6-9108-c9b1967acd9d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7b2b417-6268-4363-b13f-9bbd6e9811dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae7a10c0-9330-4120-842c-ab288cfc29e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "315970b5-c5bb-47b1-b7bc-7b8ddd3dcfff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "74c92eea-e29d-4783-9100-4ef5e8856453"
                    }
                  }
                ]
              },
              {
                "id": "6e7c5c88-19c6-44e6-913f-3277e7d545ec",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbdba6b0-6229-41d8-ab80-2648c97f992a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48df5d89-5bf4-496f-bd2b-4430c4469f75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d14f36a9-352f-430c-bb37-fa33b1b67771",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "28206367-8636-4758-9df6-9fd9f5ad8086"
                    }
                  }
                ]
              },
              {
                "id": "f26f0f35-5219-4a21-8a27-e9bfb6efcc59",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ed788bb-d18c-42f7-90bf-7fbce5b7f7fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34ff95b5-c5aa-4650-9c68-36cfed4744c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21938021-90a1-4b77-b183-5be7db567dd9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "66372b29-4087-4a31-9660-92bd5d9283da"
                    }
                  }
                ]
              },
              {
                "id": "6be6797c-89c5-4e46-982b-cfbfdfe1e7d2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2be884e5-0277-4f99-abd8-68700fc1d8d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1eb066bc-fe5c-4353-9a4c-8d03953b911f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1c402d5-5527-48a1-ac78-f2bc96dcc0df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ffdfb1d1-7b82-449c-9aab-da2b3971d8b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1d1e2b5b-60fe-4310-ba77-6a9b255388ae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e57e8a8-1fcc-4f7c-9697-eead08bf5f09"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0475507-31ec-4e42-8338-926c083c28a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf4ea992-60f0-4b00-9624-1a9675b347e2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d1a6d6f-62c7-4b93-9ecf-a11e119b7a5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4458a95d-0a9d-4d29-aa26-50abfddb343d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99e211b9-3634-4237-911d-2ae4efa9c444",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69eb671e-dcf5-4960-b6ea-2b35dffb69d1"
            }
          }
        ]
      },
      {
        "id": "ce62e578-e798-4a44-8606-6f31a1ec3bb4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7d2db1b7-c6e2-48cc-889a-e2f6ac24e600",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42711c0c-2112-41b8-a226-0b44b6a82f9d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4a38a7a8-8707-40fc-b7cb-2c42e1b2f2fe",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62597a05-0072-4d26-bac7-494e6cc64892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e672062f-01a8-47ba-89b8-2c551c0ede0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4148b962-531c-4c8b-902a-6ca0cbed6c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e034eb0-3ca8-4ab2-948d-a51004c7fa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108bd24e-132b-49aa-a672-1948ff38033f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127437dc-6e2c-4e50-a6d0-661dd4c60e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5198143-76fb-4df7-9b4f-72bfcf260dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa3b3e6-6dab-4a86-b7a4-27bbdb0bd991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b3a4342-aa98-47b1-aaee-6d9d1c148342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9c7d8c-c45f-4e23-ad6c-e40910500a47",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e351fbd-be27-4e8f-8493-38a350362350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36fcb42-9808-42f2-84d6-b985187d0cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66640bf-fbb0-4737-9c94-35e10f567ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4016018-8eb8-420e-9707-59c23888b7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3b1288-0495-475a-988d-477ba390341e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde8cb69-00ef-4941-a47e-4c9eaef4cffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5589d457-da8c-4e86-a76b-effa759b5f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cded9e-9322-4d1c-ac22-d75ceb4113b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edc9f3cb-3e9b-418c-890d-6baa19c827cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee22b13-a5fd-4e4f-a7a4-c993e348f08f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b33bbc2-8c08-4e08-8a21-545ef74e58df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5653398d-c1a4-4f4b-a11a-c6f8ec733171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a07a38-c6ad-4e9d-b653-5905c48d6df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "590d630d-8012-4c7f-9d34-e69136d10799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e448671-8d90-4be9-964b-b52edf297fda",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa8f809-cd6a-4217-8194-ba3fe8291129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62530838-bc27-4319-9159-d7b1adf81b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9283a76c-8b21-479f-b34d-b9e7b7820d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa1eeacc-8c66-4bef-bae0-61462b854ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44f7ec7-34ec-429f-9d92-925a918f3a7b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd06d10-837b-453b-91a7-ee0e5be8f357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf940530-8c4a-485e-ad7e-96de7ad6eacc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3a3fea-62f9-4c9e-98e8-32403ef5388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cda60e0-6021-4ce2-b342-c3ae7aa5a36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be6fa5b-616b-496d-845a-011a9d9862d6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2468166c-7690-402c-aa11-3adc7c114173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4963c006-4712-468f-a982-b7688a689a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795be195-d444-4656-a572-5e3513a11dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9759b94-4ee7-44bf-a0f0-643e763cdd01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51d6b7f-8dc7-4e2c-ad0f-3bac5735cfa0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0945a90-224e-458f-9aa5-d4f3d7865575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc35fe04-ad69-4fdf-841e-7780d717caec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb92a37-507b-4cae-af1f-994f5a1b44d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0fc90ea-7b78-4a32-9f8b-388d673a4876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fd2817-366e-4f14-925e-187746a972f0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e611fdb-8e68-4bcd-94e9-0768e6d7b2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1a9ca4-0021-4164-9fc7-b863dcd8f7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec55d65-9144-4b34-acfa-cd3f71b9ae25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b18afb49-ce1c-4b7f-8dc0-6d04d2e2642e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b0d93f-29f3-4ffa-85b3-95c7fd96c9f1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7de3382-a2be-4c7a-848f-357d3894183e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff6be3a-d6a5-46ee-8d40-ffc1efaf025d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319ca871-ffeb-4bc0-bf17-76c4bd4b62b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "374e07f7-d248-4d14-91ad-07d0937b773d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5cb0e0-4c1e-4d84-96d9-0f6008669a38",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e605cd79-11ce-436b-9f2c-1723d1393e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d326144-c768-4c5c-a34d-63ce8a2cd1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c306036-3902-4d6d-8d3d-d0ab6dee2093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4b6115-51b5-49fd-868b-d3c0b64499f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce0798a-0510-4c44-b819-0629d0f0c321",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128a5d04-b07e-4328-aa22-fe6caaa82b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164e3513-e551-4080-8bed-5997f58b123e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f791e7e-ef9d-4d48-8c81-7acb6534763f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4d5c1e-a0c7-468f-9ae8-8e49af5bf469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa9c696-7cd0-4831-b3b8-4fafb282281b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce253f36-9ba7-4de2-be21-ddb845113130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6f1dbd-c749-4639-a17a-84bc78a3d422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a515c9-2eff-45e6-a487-e129ced4759b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d89921b-306a-437f-ae63-157d2c3ba457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f89234e-cd92-442a-bb15-21b023f1053c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd9263f-d271-41f9-9688-245906c5c42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0de56b-4213-49b4-8705-745d21390717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c203a131-ef5c-4d5b-8258-1a37cd17edc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2f8296-b525-48b9-8f75-2359900dc06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e0f058-2ae8-4c17-938c-a6281b124754",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4df9cc-4830-4dfc-9245-d4d771aa4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4a654e-1063-4260-a619-24bf15ac60d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de60b49-ba62-4e1f-bc96-22db9af89ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "01b4dc97-2816-4d0b-a3b6-373dff19aef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14e60db-d026-4270-b0c1-311c09aec8f9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0637ea0f-11fd-44b5-b9ae-a39802d251b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d0e388-01ec-44ff-965d-dc5046a19156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff84f01e-40dc-4da6-895d-a8c15ccd473d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e48790-b89f-4e28-b4ac-61f59bb2f223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49e2d5a-1cc0-435e-826c-7f4152e18f1c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3e5fa4-e313-4cf9-82af-429d70eceaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61f45eb-92ec-49f3-b7b7-3895f8ff7b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96101b8-48b3-4c08-95e4-355671e8671a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "831429ac-2bb9-49e5-b11f-d57e0efebe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc460f4f-6756-42f7-b5ce-458976f0d022",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62eeeb6-861c-4326-93c3-c9dabe784701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7899d565-a18b-4315-ba95-f748942c7f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a0e780-344e-45d0-898a-5ca206b3e181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb69df3d-2838-4c63-95d7-eb3c84757cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4d41f2-b536-46ff-8ac2-9dd41fec3257",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cdebe1c-67e3-4c60-9d6f-f6c490f44d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facbcab2-7a1d-4a1a-8090-0030499c0124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d270cde8-3fbc-42ec-aaad-83bd44ae0c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f3506c-5d8b-4c60-81fc-27a625ab8b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d935ed-120f-443b-b956-4c4275805adb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a5603e-67bb-4f6c-8e36-bd1d44c73607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c4f322-5498-4dc1-baea-4b59e98d18e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0fcee1-d408-48fa-b207-94191ddf90c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9574ba62-a4dd-4fbf-acda-136d7b204f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd90f950-00eb-412c-b17b-f47327606f34",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc00c093-d3b0-4197-9fbb-c27a886e8714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe257a05-3174-400e-bedf-04803723c62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452929b1-9b45-4d9b-8354-a843e6d91d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "547ffe6a-96ce-43c1-89c7-e375830500ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bf354a-d714-44e6-9bc4-09d31f2e5b1a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426df2ad-1ff4-4c55-b7cc-a726c8d5d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7260f3-6642-4e27-8ee2-4a9514182f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2746fe-1ae6-430d-bd63-05c05156bf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4912dcec-ffd8-4b74-8c35-1845f399a420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def1ce7a-9ca6-4199-8356-53830cc3fc61",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552b5102-3128-4068-9545-ea490474e01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a47f929f-ae82-4fb7-a873-715e328f0d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fb6b5d-b5c0-4b98-95e5-8851ddfe5ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c363c6f-ceb8-4d7a-94fb-63e174318b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c13ea4d-5e0b-45e0-b1eb-0623e6e2af94",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d918d0d-59ea-4c6e-aa29-44a1c94c6e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e0d9aa-d8cd-42d7-92f9-a9d87c206d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ded4fec-b8df-4ede-a2e7-638ef6611c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7bbbcce-aec1-48db-8cae-db9cb4b696f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b5f381-3be4-4943-ac04-8601d3e0dcc7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f51e9f-1577-4dea-ace4-60064c54feb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa776d02-fd0f-49fb-a4c8-569c5882f63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f834ef-6f15-4a2a-b191-848e98246e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8c18d1-af16-41f1-8fbd-9cf02d6014d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9f5cf3-9d7f-4554-9602-d43de69e0b34",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2698c1dd-1662-4999-9d53-619b5d8ae61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ae43a6-dd72-4145-8acf-ebac4acfed53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12dd0b5d-60a0-4f88-bd3e-dc5c323b90d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3e2bd6-f9ba-4fb8-9dcd-61981db98a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3779638-22c9-4ff3-884b-b9e867accebe",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947e0b29-5830-4449-a212-acaf41f6f384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b082fbb3-aa29-4570-97df-8a8f9fa24b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0a6e01-0c15-402e-b0d7-f3f030cafe5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43019e5e-2996-48f1-9984-9bd92b3a869c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f237c8-8a06-4f74-b354-bd89450558bc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c30893-e69a-448f-8bbc-7abb1dda9d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba845c7-7dde-4e6d-a7fb-238436c173b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d65730d-d399-43f4-8318-ce24f22b5d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62addd48-6149-4269-ae31-565a8cc10a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18622fd6-1389-4d7c-a9e3-0dce099796df",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4994a94d-9f8a-41ab-9ded-a7b7e551a594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a69054-b651-4cde-bfef-582fcead2da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f29dde-be31-4d2a-afa4-fa0bd4370d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1555a1-d274-4796-a28d-8412a749a541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b602054-6d88-40de-aa0e-70ea774f9832",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139b910c-2379-4031-b2d8-9142c4a3a29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8410b2-fad1-47a6-9902-d665041e88d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c811e89-e91e-40a5-96f8-46f6c1714e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a783eae1-bda8-4de0-b052-20ca901f5544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cdaf7a-7b51-4b20-b5b6-c6d57db9995d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35aff93-0ea6-465f-94cf-f3451f8d6e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ba1eac-b9e8-4615-bd95-082855d8db47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28be2063-ef76-40ea-88d8-23d5521f6c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eac57789-134d-4d41-b287-ded5f8ce2ce5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1e12dce3-5ee7-440e-8157-67c0ad7494bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "018fbd5c-9204-4dea-8de0-27f66120c870",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286b39c7-1d22-47a3-8d11-39eaa727ac25",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2d08fe-59b9-40e5-8321-41fdd8b60e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "667a0bda-e55c-47d2-97df-cb7d8e22e660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18fa1e96-ad38-4789-9f7f-92f80fba8ad0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb2d2718-0d42-4810-aca1-b5778147c64c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c84361e2-7feb-4757-88dd-880fd134cb5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96f8dc59-75e7-48df-954c-52d1c43f26c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1a66bb8-2fba-4f0d-9917-e78517763345"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ec56cef-dbf2-463e-a981-0b8dbff8bd72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a4206358-7d5b-416b-9a44-ab75c713ca87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4736721-2a58-47a1-a062-317ca72947c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b112eefc-20f2-45a8-af1f-1f95a32ec151"
            }
          }
        ]
      },
      {
        "id": "b99987dc-2e52-4629-aaf3-363148fa58c0",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "107fbdfe-197f-4be7-9341-34bcd24aea0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e362cf2-2de8-4d29-8994-600f8de884e7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d04719f-0e0a-4ddf-af6a-68550439740a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85465eaa-f4d3-4a85-a25e-c91648d12224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c197b5c-b3a3-4e0b-b971-e4b7a6584e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046647b4-29a9-4492-acda-6319a3081456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "66753d60-c56e-48c2-bda3-6c6d518900f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b437f8ee-a53e-49e4-8679-a8937215f815",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c189844-5b94-4ba3-a7cb-22e49d9b5234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a06545-1f2e-4afb-92d6-91d4f1ac7473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dfb325-6666-4bc7-9eb6-fc9a65bba309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "173441b8-8f8b-40f3-ae15-76dfafe4ae24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb5bee7-21c4-4e3c-bc80-74a33ad0be87",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2bc8f3-ac84-40e6-b102-d2b2cd701dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18143528-e273-4edc-8639-f58cfe61dfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b514bcd-a32f-4c77-98ae-c639f67b20f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e6e460-203c-404a-a793-c30d5bbb8af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dc4c9c-8c00-4e3a-b45c-dc8264dd3e79",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969d0347-1c44-4077-8a6f-516b69a27169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af73f2d3-952d-4b85-bf6c-44091ffd22dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e4b5af-9ab5-4054-a4bd-545828a06ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0882cd07-371c-4d26-9c08-06e6c486f7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a28a47-1a70-4ee1-bb3c-7009d9d64c93",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47a9e8b-8440-4c5b-bd5c-68fb454dbd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc48979-3eb1-496c-8e8b-d1e8b77d07df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f423098d-afc8-4f7f-9a18-7d33dfa21d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "005b3087-0d89-4835-8abe-4e26991bd0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816bc2b9-4279-41f1-a6c6-87cdbf857c62",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d435d5-2fb4-446d-9157-de27f88477cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc2297c-4001-457a-9c57-dfd781cd5be1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919e9b3b-037d-4e35-bb20-8b1e6cc0f197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4edf9dfe-53c7-4847-8d96-ed7ab2057bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93137f44-220b-403b-bab1-5caae1edc7b5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7377b8-045b-4b68-9cf1-dfac8fb27c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49086bb-b924-420a-93d3-a412fd4c2a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8df9097-0dae-42ae-aee6-4b087861c60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0fc8b2-9851-4a89-857d-d7910a873522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d094646e-f982-4685-9def-25157f3bf8ad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c397f89-caa8-4438-b629-5679257d3cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b37ee9-aabd-42ac-811e-42140dbee4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1361d037-ff0a-46a8-8283-d660f772e0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05ad0e9d-afb8-4323-821c-c4e01e21d309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a20a33-b39c-42b1-a0c3-165be0bfca3b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a92d9bf-6ed0-47b5-9b75-82896fe32fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843fb86a-5e15-47b2-ade9-aa608765ff7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8f5fc1-dd49-4287-a5e0-277521b4a923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e0d2b7-3c85-4465-a77c-e7cf0937fce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c01241d-862a-49eb-a80e-dbd1ef16e817",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b914449-d41f-4c00-92d7-fd1175ef5628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c66277-f6b4-4356-928a-d6fe4bfb1836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9c7a9c-94aa-4f06-b7fd-eb14faf2ab2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6748bd92-54b1-44f6-bb22-a4487694f04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60767e08-8fa2-442b-9d2d-03c5c012e68d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8403fa-7c14-4b21-9c6f-06de557ec810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dadb860-90cb-4be0-8baf-2030bddaff0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96757709-8dda-426e-8b2f-f05d9de17442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a43ececa-5e0d-4d50-9af3-2092fa4a38f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8838950-808a-4204-97aa-3c094374a482",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c5ffa6-55e1-4287-bed0-b172a77c2cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c733c3de-4608-4410-915f-30ddaafff386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dc83c3-e99e-474d-ac1f-066388f359b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70cbbd11-9486-44e5-aa42-6967245c8edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0194c1-ac5d-42bc-a576-f0ea31a00208",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9babc94-40df-4229-9a6a-d99b2f790680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a22f815-e736-4771-ad73-62240af9d416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3aa5db-5b2c-4ffe-a4b2-db874e8ec6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b723f20-3b7d-490d-84a9-4e149309efab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5751b3-02a6-4475-a97c-9f632f7f9534",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957ef6cc-31b4-4dd1-86d1-7c397ccdd891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838deb3d-065e-4be5-90df-dbe26fb1671d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7342a8-80fc-4440-9a9e-65e2fa74ffc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfc0b05-5935-435b-a8b6-6a38d4a19220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eca546-5705-4b0b-af4a-6f665c2a5828",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0165c1ca-0e2b-4ae1-b9dd-1c7ed7a28d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d64bcca-a265-4268-9e50-ba296a566d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eceee40a-3738-4a6b-844c-9ae1f7988715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f56e54-a1f1-47c8-9ed7-668682bb1096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253502e7-2203-4fb8-9c89-a579c184071f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2826daf8-10a4-4a1b-8663-ec50ff5a0f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015becd5-55ac-4004-9bd0-c2d72e2431c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a53172-3e0a-4182-98e1-77e5480e085c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "498fa4a2-c0f7-4190-b335-a0c7e2c32a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1293ff-30d9-4bf1-89d9-d9e58deba2d0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49ea7ac-a923-4965-be16-6620d85b5b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3e9a1a-888e-4e4e-8f89-1d250dbfcac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5923e4c-82e4-4221-b19d-1121855a1807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f29190-120a-48da-89c1-a7f3ecd942b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620eccfe-b1ac-4131-ad4e-744743dfdb9f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f239f6a6-6250-4088-8bf1-389417af22a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca88a78a-ca4c-47ff-8432-d3e3e6002a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadd9295-a071-423a-9ef6-7258ecddc0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3800518-72d3-4c54-a2d6-23f0d585b4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b100995f-f9ae-4b7e-8867-3803be8d10ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea359fbe-2e96-4a4c-943d-7bd5ade15c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d68e20-7bba-4ef6-84c2-06092b76d90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f47044f-c87c-440b-97fa-c241daba2965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0d4c80-9bf6-4bd7-887c-8aee5bb72b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba8cda5-5bf2-49b1-b21f-53e5bf37ada1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3787a7-a310-4865-ad93-82fb61e0b091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55409d19-9637-44c4-b9ab-39eaf3734ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b706f2-5d57-4c21-8d6a-5df112511e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1df44032-1379-4c6e-aaea-6fb0f6abcc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ac5479-bb15-4617-a2bb-e63a55716b29",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b080b6d-eab3-457c-8b0f-08b6b80e927c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2257c0af-7157-4629-b0e7-7ddd7659f871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1697d3e-c1f8-4d13-8804-0f7fb03cd9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6021c21-09f7-4f89-aa42-3798ba6e884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2d892a-b0ec-4878-b4cb-01f6fe9f9839",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2063c4-828d-4e0d-895e-e493131e5da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877c1482-9516-420c-8277-ada5a0f2d2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c57a6f-672a-4f76-96f1-66fd2e34cd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c613a55-a4a7-43ed-b0ce-f6884d80a6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd586298-a718-430b-85d9-5d9be3c4cabe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e2e850-e13d-4548-818c-72ddd60d96f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94667d20-523c-4562-b9e6-010602e83441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e66b4e-191f-4bce-b4c7-3e191b6a9d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6f0aad-9bee-49e0-b625-5a59b163ace5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b3b3d5-4921-4573-9326-02e60c5fa8dd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a82770a-106e-4ab1-8a11-b0725c005375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2194b80c-c3e2-45f9-8dd8-db2ad7bc162f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d67e4d1-7b2a-4589-9031-f4cb609027fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a458b9-c234-433d-84b2-8881733bde7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea04c26e-c982-4556-ad9f-7a69a3c8a563",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5438b8-1e40-49ab-95c5-1e687b985ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2c2bfe-7503-4f9d-81bf-8b2121684c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9a7f12-aaf8-40d5-a8c6-f6f9a1ab4c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dadbc89b-1eee-4423-ad23-e0d7d4ad1847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e972c45f-5195-4776-bf8b-0fcc84a71d40",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7bc8ba-f259-4d91-ada0-6da0ba9b1ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86387a0d-bc10-4bd8-9b9d-cb2640e8c504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4a014f-817c-44ef-aeab-e02416c31944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47bfe3cb-2357-4160-bbc4-7a6960e8c5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc653369-9a72-4698-8042-31aba098859f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ae5632-d118-485f-aba1-43bfd66b950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185c02e6-783c-4f25-a313-b48e51118468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a537619-23f6-4575-b3a7-3a2a7ae1dde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecaf245d-2db1-4f26-9106-fd7014572e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625ed741-d64c-461d-92f5-85cce415a016",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32265597-c939-42bf-994a-eb4ec6b43500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1daae85-243c-4139-ab26-88578613323c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b64ab9-0489-451a-a720-3d2d46fe1c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae5de44-4615-43d1-923c-bc44f52ce0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2c17d3-c354-407f-947f-687146909408",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f61acb-42ae-4a5c-9f4a-fbc05f78e5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16754d28-4cb4-4e93-b3a2-1da17efae5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bcf027-b357-4d5a-949f-c20cdf3865e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0b5935-9514-4332-91e8-a14c9ceb9a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5bb21f-f892-4dce-835e-80eafe3d729b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7294afa3-05fe-4344-a028-0f35286bc18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d74dd16c-4502-441a-ac74-f9ea2d38a246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a22c84-4496-4149-8e16-c835b8c4d593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04942c8f-f7e5-4c3c-b349-14746241a9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022e51ee-d333-4b71-89f6-4a1c182e15e3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7b3ea4-d393-4d44-86c7-a528a0af5a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9db2ba-c9c9-4ac6-b616-767e08061f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0268221e-69cc-421f-8468-27bc588d0ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8209f5-e089-4961-befb-11315b5ff22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb59c343-329f-4300-ac37-93fa1b86fcc6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71ca750-61eb-4ff0-9684-e6a3eeebdb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35949327-ddf9-4d3e-8698-c0a8d2f57f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed2e537-41a1-4b94-8749-ee3b7dc1802f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53fc7bb8-a01d-42fb-9b12-390b60cd6410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498bb417-97a5-4797-8901-a21fa3b93cf6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9599ff2-d8f1-48a4-ac97-2d7387cbf55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc7065f-d802-4300-abbd-620aecde4f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a09bc-f459-4d98-a8e0-25f31c1e5403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "231896f1-1e7c-49d0-b6e2-b3419b8c80d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02383c9-8fe5-43b7-98a8-c0874ab5f092",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d15953a-f51c-4b91-bf0a-8e554be4b2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e443e02c-0973-490f-9d48-ebca36f20f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881dcac9-ec07-4f53-8361-09ddad173c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dceeecc-6204-48e7-963b-1f3c744e3f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993efb20-576c-4e60-baab-a5b28852ce42",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb860ace-f848-45ea-89d3-257e511c127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faedff3e-e637-43b1-b8ac-3e60370b9ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8181431-57ca-44bd-b875-a3974cc43409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c788ca2-6a15-4fb4-9f29-ab6e9e6b7cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc267528-9aee-4679-9e6f-607136001140",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19064fb8-e735-4e5e-8741-58a3e21e27fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa40423d-37c0-4758-9abe-fe0b3ff08ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3659a6-5fa2-4665-ac62-b770688d59cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd7eb74-6955-4f7b-8cd4-45fc5e32b394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e78aa3-56f7-4ed2-adc2-9385651dcb82",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13e061e-38dd-46ff-8778-58539cc76afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7c73de-780f-40c8-a084-dcdf45620793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d5e1b1-1f1e-4b4c-9b9f-7d75dd5b8e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08630df-3767-499f-9325-a2a4d8f82cdd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb989f54-b9aa-4449-a5ff-f5d2f42b0f6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22b6247e-1f12-42d5-ac4f-5e8b9e63c04d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40ae309-2988-41cf-b9fd-43be131b095a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7d23005a-096e-44de-a88b-261a25479cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735d2ca6-6954-4e70-a7a1-c213369b88dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c564530-8461-484c-9f7a-e706022582bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33d28ecd-301c-49c4-9f4b-03a5ccf2d86a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecf3b7c7-b5af-4ad4-bc3c-e0a8878c3072"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1998db7e-8c92-48c8-b780-1bae80c6549c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1be87f1b-96d6-4698-96cf-e359b2c3c0ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dacb7ae6-7e03-4c8b-95a9-c1687c5155c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e2b4f036-070b-4d19-8436-fb63c9a686ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "423f565a-670a-4bfd-88e5-1562a7478dbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9468e0c-868e-4acd-b2f3-4ede7fac604d"
            }
          }
        ]
      },
      {
        "id": "7da18e2c-14e0-46db-8660-c8864b934eb7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f467c5bb-8b7b-4b99-8c24-615c18efc6cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5ca1cc7-cc9e-4c5b-99de-d8ef0af8d2db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f773ae36-18eb-46c3-93a9-ca839e5e48e6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ebbb72-006e-446a-806e-2a7e10817b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0d3f3b-d635-48e8-8801-b6dac49ad4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d342c5-ac79-4888-a23e-a4e1666e7ac7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da356e24-7169-48a4-a435-84cacdc565db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504c50d9-1a18-4710-be9a-d1b93f2d0744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a1f7d6-7351-435e-abac-e9f7789daf36",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414885ff-0a8e-4064-a6a1-0fab724ac434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6cdd10-09e9-4cec-bb7e-9c9c4cd823b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81db5d16-493d-4a00-bc86-ac4cf36a4822",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b48a002-362b-4976-9cbd-ecc6b526dbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89758cb-6c92-4e4d-a13b-ffe0244fb001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c37b52-8e02-40eb-a5ad-b717f01d4f5a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18de8303-e889-41ff-a03f-1c7110413470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e3f0d9-e376-4238-b1a7-d602e512c91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5832b4-2dcb-43cc-b7f4-304b12fd4265",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb715cd-f42e-4db0-b95b-7a0c9f25063d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1a1966-ed6c-4747-9fd4-8a6c8d519eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd02a502-ee5a-4dcb-83c5-9235bf24cae2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d6d115-4e76-449b-a397-3eb9fc0db6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e09ab59a-6899-43cf-bb4a-34bb0f0b3ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9774cdcd-5368-4954-acf0-a3b136f67070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88625e62-ad03-419a-9780-7962b565950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabe20a9-d21c-4bc0-b269-a85125c9c566",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ca7149-a0a4-432e-9b5c-7915fb7cf599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c27a5149-30c1-484c-996d-da1fcc279e06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd50051-561c-44fc-bc2b-719f10aac8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e501e1-7daa-43d5-95ff-fad8d4ebab46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5329abc4-9a26-4854-beeb-e354f9231247",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4dd863-70d2-4049-b67f-958eb6d747ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fcc8caf-f0d5-4264-a394-bbd0e9a0ffae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21843ff-55cb-4357-b111-cf38a2fd070a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4297f574-6adc-4395-a023-bc054124f2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa433cd-db23-45fd-8e41-cc63df7a78bc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff19fe4-e354-42f6-81ff-eab12e0ec5a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c310211b-a047-4465-9b9e-89b8f36db908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c5aadb-c39c-4a12-9ac2-ca0599a993f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75623b19-a875-4547-b335-eaa819522287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0655d78-0e48-4d6b-84f2-27cd2b0001b9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be03d18-6199-4581-8eb0-608fa164e911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65bb4db-831d-4564-b017-5759d288d0b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d26d6e-9162-44bb-aeeb-fbe579a10e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95955da-c4ca-4deb-9088-c9ac242dab9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ae3492-7f08-45de-992e-3f47c9e81aa2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e784cc4b-683c-43ed-a2c9-2cb807e68ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0596cbea-c26f-458f-948c-8e8fae572eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873ca297-0bfc-4b20-bf68-149331fb232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aec343b-b127-43ad-88c3-40f1e1d6e4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef99635-e715-444c-a6bf-01944149811a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77299440-6738-4dbb-9be6-7c6cf310394f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dedb368-e040-498c-83ad-4621af13eb2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b2b302-b03b-4232-8744-e975e3be57ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bb22bd-1baa-41a4-912e-2f07efc0aec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381823e0-d7af-45ff-af90-a7d93a90110e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1172439d-5b66-44bc-880c-4c2b6bd70de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c3c9cf7-5d29-4397-8051-46af94205711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8f8a1c-74cd-4d0b-8d53-f21d20ea602a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2ffe11-bc0f-4060-9a75-b85886123929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cee10e2-abfb-4c20-ac63-5ddd6ce7893a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be59d151-7c68-479a-9c67-b45e1016bff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2915f02-4d35-4cec-98b6-a725810fbfce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa61eee-1205-4bfb-a6e9-0e3cf950c284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b984a70-f0ff-4435-954d-191b445ea89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8782346-f31d-42b7-968e-3f13cd8e9c9d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afe7b3e-e7ea-4e4b-9de3-1794e2cebf85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50dbfe47-d53e-4cb7-8e00-8c544231da29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34178efb-563c-4fa4-8684-7ddc898c40a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d6859c-1941-428a-8785-a980c58dbbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858c8ecd-6807-46f7-a935-a01753cad718",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b52d1e-220d-4e00-b8e7-82631c758e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abacd302-610f-415b-a5f6-a47ee618f438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79938efc-89fa-46a5-b556-9c6b7ff7da1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1851f3-7955-490e-9e7f-ad8bcd3ca773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b91a95b-69d3-4789-8831-8f47b6b43510",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acadad27-cd2f-4d13-8739-32679ca2ce7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693596bf-e864-4a48-85d4-d0696030ac6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4f2747-a452-4cb6-a80f-a3b0ee14cd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf18f2ba-6787-4daf-b51d-03d905dba0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2852294b-d1e8-47ad-a49b-491335982e44",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dab6629-da1b-42c5-9cba-82976eb82159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12681cf3-434a-428c-851b-aadd2dd86a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5b36b9-3c78-4f93-8fbc-58ef02f087df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "527ebcef-152a-4ea8-a335-3b603002e49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17712270-31dd-485a-9334-0badc050edbf",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6172ed9-1f54-45e9-8334-652139bad426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9de8f3f-7ac0-4d14-9a93-a2e7022abcb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d9749d-7893-484f-ae06-52aceed2d818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7166c23f-4458-442f-a474-c961b0c45ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e731c-1d1c-4625-9cd1-6df69fdc25ec",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab797d6-8173-41a6-8eca-2f08b5f031ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c99749a-a0ef-4bca-be64-683ea3ebcb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587cc9e1-7278-4a09-8256-a4e076f58d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3adc18c-a919-4cb8-b7ca-24d76fe1f1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a8ebbf-fc00-452d-a705-6c321b50051f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22477cd-c903-4239-88e6-d33ad924ce67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1aa8c16-34df-4e88-beb1-44b150830a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81325bbe-c6c9-42d2-8cd3-fb8ed441d12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "549568a5-af4e-4d5c-9dc8-a4326a39bfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af80bd5-fcaa-45f8-8098-8bf8ebe1af22",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d924e02a-34e9-4d65-9a3f-0120f601727f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84628de-2881-4a53-a9fa-78a41e29603c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95df209d-1e95-4c74-a42e-01b00b8ad4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41db836-afb0-4516-8065-5a19f8d4b8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd42314-de63-4b3b-8b2d-50bfbef330d9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e95bab4-ecea-45c1-aca2-6a5af1cfaa9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4566ad17-8df0-4d91-a911-efb749056fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c5d8f6-f5b1-4c39-af97-b18d4a273c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20847ac6-a74e-433a-bff7-54f5a4865f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1761cb-75ef-4511-91da-20f09b5ca00b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761cd006-71cc-4ae4-b710-16304ddd993b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8498b18c-5801-47ec-b76f-8fb26ff9a26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5135ca0-cbf1-42bb-aad0-6d207c98be3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36c1d32-1bed-4636-9ebd-f3c5a3f18420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d30e049-d50a-44cc-a2ab-6b5a262b2205",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1685aa10-5f60-4d5d-8f70-44484da75e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56a4bef-8299-4fe1-b825-6cea970a8a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9aa8e0-a960-449e-9619-c18b8b684989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39491242-1274-4964-88db-2cece33ade75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32483cd2-aa8b-467a-bb8f-1df7a3b7b32c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f310ecf9-0c32-431d-b012-22692604a96b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1085e7ae-fdb6-4cc8-83cf-d84d30c90e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f259cab-2cc4-480a-a1ff-eefc0652e887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd65469-0140-43ae-b5b6-fea29da538a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13901a04-f845-40d2-805a-8bfec2da1a3e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6529ef1-09c7-482c-8388-0757af82a241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad2da57-c2c9-4f0e-a074-84ebbfc95af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa291371-b7f2-4713-8c90-bfb674e1928e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01298d5-df02-49e9-ad79-60709c6f0434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01c701d-07a7-4127-a2c8-bb9fceb92ff9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba9c1e5-5d10-429b-8a15-bbf3240fb9a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca473853-2af2-4333-9561-684cd88ef2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab79ab71-8e43-408c-b9af-a50914e54e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba70590-9a14-4a06-8952-84d9505295d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc7c2aa-0150-4005-8d63-e19a6d4bdb21",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613d3765-d234-409e-b4ae-1900758f03b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "844228c0-a6b9-4827-8b63-d81d389e783f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43994c85-4c2a-44e3-8ef8-70fb83f83c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5ed292-83fc-4471-84d4-07123979b1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9f9d2a-7169-4ee2-ba7f-0518bb3a0fda",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a593d0cb-8cec-45de-ada4-5356478e5fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d43f6fbb-1ced-4253-856b-a0a5169b94d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34967c6-c43a-4d55-a67d-dea027ebc88a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8eda5c-a959-4e4e-ac48-8aa290899bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f667b5-3b7f-4ada-9635-9cd49a6c104a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c4a9d5-4266-42fc-982b-e8d27eef9174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7197ff20-6349-466d-b9cb-1c3b34f88e99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d5ec21-4cc8-4b0e-b292-0e686991530a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabd7624-4d38-4144-9c73-147d9d29682d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2329285a-090e-4c6f-8836-ed147eec80cb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2850836-210b-447b-9d89-2ada239efe98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314075d5-f478-4fab-a22e-8a44be71958f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff62e8f-8f16-434f-b490-5fb213fb1f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7e729a-5235-48f5-b963-238784666af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da82ea0-a3ba-4818-ab15-315990f18f9b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f17736-4b25-4017-b890-80692e8eca01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398661ed-79d3-4183-96d9-d73622f6f71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb01761-a288-4986-9435-604f98baeb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93539375-73c4-432f-9f1e-4c6a2e75c875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6826a0-021e-497d-89cc-8156b2d94ffe",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715730a8-83c2-4f7f-b216-372104f650f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb84632-ff14-438b-8ac9-301ab48c976b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c49cc30-7664-4b74-9ff2-fc2b53a0c7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b289a0-665f-4f9a-9cc1-e84db7e438ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1049b7c1-46e4-4f98-9b25-565fe3f05fae",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467fd65c-eb55-41c3-8588-097b82681e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e43b48-5ece-49b6-9c24-65dec0fc8d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9228f7e2-f029-4fad-9ca3-2600010e1507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9506b247-9bab-4558-9d1e-f272f5e1d206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3205b773-b61c-423e-b702-7178c29eeed9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d5824e-5446-4e2f-b1f5-7f353c90015f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9258d0df-a560-44da-8cc8-66f1ddc4d805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a80fe91-a528-4b10-96b4-d894566f73e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4076db00-6a3d-40f1-85b2-a16e4ce3ce21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546bb8ea-ada8-4ae8-855e-e5ea18c2a23a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97880b70-1a19-4ccf-9e0f-5922ffe023a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfc7cf9-3366-4cab-9ca4-1319dee6e777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efc92f0-eb8c-4209-896b-35d90415194e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e1b89e-b224-402e-95f2-8a1e6a36f34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc1cb04-9bfc-47e9-86b6-b72c31c1eb8c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16158cb7-d08f-43e2-87fe-34ec2c0c69ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed731f34-8a78-47e2-8321-4dda9fcbafb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb7c3be-6b99-48f6-865f-b268ac85c5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d474815-144a-49d3-a123-91f6a02d4c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a859538-4909-40de-a461-7c4a487b08d4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7706ed76-f5e5-4c89-a43e-5f116aeabeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529e4a39-a762-4a56-a80b-f0909d706cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e63775c-3827-43dc-a87a-bae7dbd71b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f520be2c-a441-4b72-a942-5bf2740a6db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb91ad49-67ba-4af4-b2bd-0f17abdc296c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75827caf-3f6c-421d-ae9e-3b2946addb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e6e201-025f-47e5-b305-db55fc42eead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cf82a0-23b7-476e-aae0-fcfac47a1f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24389237-fb0c-4235-ba4b-fcf05d69b4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9893f5eb-7f2c-4391-9739-3db157059ddc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b69b917-9b4c-406b-9369-1d1bd004919e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a110b2-a9b1-4bc2-83a1-bc979aefdb0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c6843e-a3f8-43b2-a86c-83f24ef046a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112d98a3-a503-40db-ba4e-02eacd5c035c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaedbc1-7a49-4318-9e7b-49dc3ee43d33",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9572d6-78ca-446b-a0a1-13e9edd7120c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aac43c9-b2ca-407e-a989-c7985a69e6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedff469-d649-404d-a3d8-ee8279ce5d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6641fb87-9c20-48af-ab06-60f7ca179904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079eac1d-1b7f-47d2-b2db-e3ff83a76188",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cd2dee-cb7e-4131-9d89-fe77fc8eb099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735ea050-28dc-4cc0-873a-c9a9631a15f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777d8619-3d05-4bf8-b309-46c002b97f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f120eb5-eca3-4cd4-a954-d2585308cb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35c6d02-a90d-4336-9515-fb7eab41923a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1e3990-2e53-48d3-b4df-0b8d282d6364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d240d8-4542-4da0-b3c3-b7f3194445c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2866459e-e33d-42fa-8c1e-2ec351f235f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98c53c6-9dce-43a9-95df-39d9ff544175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ed5417-63d4-46ff-8a0b-981bb84fe300",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f8f1e-cc27-4d70-a968-c11381cc9ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9720eae0-fa83-419f-8a0b-3b42aed0ecc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce24a84-5e09-4a96-8834-46afb2dfde6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fae23f6-202d-4907-a297-ba914ba1df9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc285b75-be59-435b-8859-98d45c39dfa2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1777546e-406c-4ef9-94b2-6be506de92ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df37eb9-9e53-46cc-8d49-fd3a0f284cdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dee7230-d4f7-4285-a02b-387bd2553c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73524d80-f53b-4e77-a5db-1c65cce22874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69748cf2-47b3-4a92-bdf1-326aa7ee5236",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adb6c9c-5ea1-483f-b48b-0b2ae47b3f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5faba94a-d5bc-4c6d-98b3-2772677ced17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb9c3c2-8bf2-4ca1-b4f6-204c54dd2cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88e67bb-4230-494a-962b-c6b6448168ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53ff6e7-8e84-42e7-8e58-3584d3237910",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eca17f6-f6be-4aa2-a38b-ee0703c31a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35acac23-30ba-49db-9858-8bdb8972d614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dfb774-1f49-461f-89c9-5f1cc906d982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22724ab1-702f-49fb-8d27-bed0039ba1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e06057-a601-4982-bb31-dd9d52df5b44",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace771e2-b595-4ee5-835b-01ad8366e917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb7a6c4-f7ab-45ef-8090-54cd930717b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6f3118-0496-4376-944c-c95d4cb1e5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ba90dc-b835-44a5-8eac-c03886b7af68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fe1eb5-d23a-4898-93ef-e7ce58ea23fc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab64245-7f41-4d97-98e3-e05ea0cf4a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fa7a56-ecdf-4bb3-8493-0cff1f8faa6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1af9fc-9fbe-4f88-8ca2-8f28230ae0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5c6f28-886e-423f-b0d5-4a72d9ecc085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9ccf3d-67d2-43e2-9c94-29c3862b1b9a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3859481e-fd8c-4188-a696-6872264c4c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24741e45-e936-4286-9ac7-1c6739168cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3610f67a-cf06-45b6-9cdc-95a39a9b4467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3239e4-d179-45eb-814b-154e2bf6941c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f12244-e4ac-41c1-8373-2f9fce5681c5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5c5996-863e-49de-9d37-c23e7306e80a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4b826d-8644-42cb-9895-0e336ac0797b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aab6a5-9ab5-47cc-8dff-69943cc56d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2097def7-bf18-450c-a4b0-023a7d1cabfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be2f16a-ae05-4f1d-9dcd-869be5c8e372",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134d8d0b-ac15-48b9-8bb8-04e9e940014e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd055f4-45fc-4910-978f-574f9f504fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9058460-32bb-479f-94ed-b06a437a6f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412aece9-3f51-469b-95df-4c5282233e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eefd13-a983-46e6-8fad-a88ec0d6cc27",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9f4dec-e090-446c-ad12-09034ead50fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31e6497-2a46-4cbe-ae81-5a40d92e994f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4335f52f-5ee9-434c-88d0-fc51a501c1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6949be54-3b14-4603-b2ae-7d52335a5254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd814cf2-5bbe-4433-aa2c-6d6ffebf743f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086cd9ab-e11f-492b-915e-221215beec58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fa29a8-c102-440c-afe8-c4c2092880da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3304007c-a28f-4549-b14f-761f59fd0a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e365e230-f20c-4185-9981-4e8b2189ad63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b295ed-bac8-4b8f-9f8c-43e85fa3de0b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be456e81-4ecb-4f59-913f-dafe0fa04afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6e466f-321c-4909-8705-2cffb94db5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65edafd3-adf6-4377-8556-39e687a8dbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9fe504-58d3-439d-be3d-1623e8d1cc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076c188b-7142-466d-84e0-4b14f1f7487a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c3c9ee-87eb-4649-a73d-7fcf39eb5fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b64128-20a2-46c0-ae85-3a8d63c2599a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6759746-91d8-4c0a-9f45-9c8744cd61ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fd1d3cd-02f4-4fff-8ee0-cd6da0c12efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c040e92d-70bd-4d57-92a4-00c52d9e3bef",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2a16ab-4ba0-49e0-8c15-577f12eb1279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec26e3e-cf68-4fd3-90c5-b3268dff88d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "910bd7d5-5da3-40cc-8a9e-24d49edf4777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e463f8-114e-4923-aaec-7b3e6c75f610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f2475d-7270-4410-af73-431208e735a6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a32ac1-77c5-4a91-a217-9f22db65d3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f226e7d-266d-4d1d-837f-730414cb4810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3103f4-77a3-4df6-8081-36a23c96797b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca712585-cbf1-4e78-bc1a-09dadf0247ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d73083-89a9-42de-9e40-17d1b92b988d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c3c568-e594-4694-9ac7-c3f9a4301808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bf28c27-3ec1-4a75-af45-a5936d527c30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb25dbf-add0-4708-a648-d8fd3763d83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a1365a-0eb2-4102-a492-693c06bf7c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62388043-8cdb-45e6-ae81-3decd689a44b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fcd8d2-0a05-47d3-81cd-6287de7d796f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3c75a4-4cb3-4a26-9e68-af1626039a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f581420d-761b-40a9-a38e-2f7c37541613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c7d9e9-dd5c-47dc-abf5-808fffa0ff2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94872d6f-1a46-4af7-be79-a53757274c6f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915929d4-8541-4cb6-af94-d8ae15cd9a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d0ce6d-4bb2-4f22-9c57-1222c54053e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e96106a-d9f5-4f10-92d0-60c3e786ae0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff9a513-7cd3-414b-a94d-9c6739143f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fbf16e-2a51-4a2f-935b-f4ccb6a624ff",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fdf8e9-3fc4-4f95-96b0-d741759631c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d8dcbb9-b401-4e51-9b0c-1b0b11f2e4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "425db349-6fb8-46bf-998f-0f39e9f1c7d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701d3393-81f4-438b-be27-7634290557b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77cc550-7329-4b44-bf6a-326e1c4abbae",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df77457-e909-49aa-b52f-eec7043bf826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec630f0-51b1-477d-ab76-cf051c8d604a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d60fc42-7f8b-48a8-bf39-43462efcbeeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1b8949-5d14-413f-bee2-d0f3e9f80328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e0babd-909f-4528-a8bb-285a9225a440",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081b8610-f100-4ee3-bd1e-c39d5b24780a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728b6c8a-c478-41af-b853-16774deb2673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286a4234-c734-4e14-a4b0-9c2d6eecddc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e178146c-f8a7-4e55-be31-5e0967130e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb943d0-686b-4a8b-a266-1fb3f7807d25",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d7c289-9592-47e3-aa37-10d5c8f781e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b71cf95-e704-46bb-89db-7186a3e8f6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70aa18bb-cf0f-4422-9733-2e205dceb405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6bf9b0-0dc5-425f-b31b-48fe7df8ca45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3d6f27-b0f8-45e7-b94b-1935dd2a1c41",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02b27d0-aa58-41f9-b4c8-57b73fa924ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "478de8de-71c2-4949-bec8-66ebfa18b161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa5abf5-558c-4b59-a2ed-539121ca0100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bfecc6-c06c-40a8-8ad8-bb10786170f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287ef22e-524a-4aa3-85ce-2e87eba79444",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e941311-05e9-45e6-a4b7-82c0bdfa932a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2a5fc0-6a45-4eb1-a71f-e5fabc953677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948ab533-c669-41f9-b11d-be9c71034688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0080a4cc-f9bd-4943-a808-7326e0c8da67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b48a013-8e0c-46bf-8a7d-3712fc6822bb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621139af-4170-4748-bd03-e1212f6980b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be0eac29-1823-4243-b576-f73d98d5dd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9173206-90ad-4847-9f8c-64c56b4f088c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afec978f-dea1-4a86-a54c-aeb48fb16976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b4aee4-3e4d-4e4f-a02d-4cb51003ccf5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef54fa12-1387-4d52-a8c9-94bde81c6df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cf30bb4-2da8-4e3b-a2f0-e4a76c3e147e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6b68d9-58d5-465d-8006-782dc81fd0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2d07f1-5233-4797-a3ec-ef7dbd718a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f034cbb6-089f-4424-b5c5-84c139306cc2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39f5f77-20ee-4bd4-bf1b-2ed2ef72730b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ebd6f6-2582-4188-a5d6-732bcc7d263b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cef8575-6573-4402-88fa-68f5b60538b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b65af8-48cc-443c-84d7-624367e80f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879a6cd3-316d-476c-bd70-cb38634d3681",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00150cc-c871-4f63-bc08-ec79430f6910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb83c294-23c5-480f-b4b7-f2c53bb57cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7270f921-f986-4972-9c22-62ee33c0fb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e66b06-9ab1-46fa-9b1b-c1c3834dde68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce041720-2204-419e-b090-77cff10aadb9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c695bb3f-15b7-4590-8a9b-15749a7d8840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73de189c-db60-43f3-ae3d-2198c5985fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe758fbe-98f9-4816-80cb-c912193a005d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fa7f65-4aa6-4f30-875d-270fd7ba0e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2711b19e-47af-4222-8d6f-1fcd1d15da29",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32ac9ba-9d66-47d8-9199-54b345396553",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08127c42-8fda-4981-9d84-3479efd6c8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75495198-503f-4ea6-9427-2be54a37d54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1189042a-af2d-4fa1-b0f4-d7001803214d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdf55fb-f6df-494b-8ddc-db22fac1d9fa",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28bb58e-90b7-46c3-a995-63edb1f3573b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b5d182d-9c8a-4082-a1cb-df01eceac5a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3245f7f8-e1dc-4395-b43a-1c8d1988a5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b98f72f-cc0a-4bfa-bf3b-2cac886c7619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408e1fdc-d16d-40dd-b055-6231b72d83d3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a175f542-a7b3-4d86-8105-b00bf29f9378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d328293-0bf7-4569-a9d3-ce78e42a0da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d4d16-778e-401a-af20-cec2ec9894e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31bb790-b80f-4782-8fa0-b4c5db1d86ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ab7efb-ac0e-4573-8555-0c875497fc0b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8264c52-adcc-4bbf-bebb-26b438cfd1a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f8ca92e-7c0a-42bc-be67-e458c8fb69c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93876568-a0a2-46ba-8f5f-c42c9d3e8857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755007a8-f236-420a-8109-371132c0cac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3be906-4ca5-4a77-b794-17193dc8c1fa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5e3a69-4677-410f-a445-cc6fc3a96432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7deae342-d1c8-453a-b2d3-ea8b38227910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1a922c-2de2-4127-a6f7-ada3a538aa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4ce3d8-23fb-425b-a789-3f84d5beeba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6878ca2-508e-41ba-9902-de0c40a9b010",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa93150f-4cd0-4307-97f7-8eb599d583d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11af291c-82ff-4e87-b1cd-8760336277f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9598fa20-7280-46b0-a1e3-aeda30b89d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e41ae3d-f834-4bed-b10d-30679a62444e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fb8dfc-b80a-46c4-a873-db6be9ef66d1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cb3a64-1161-4ffa-811d-fcace1c73f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548abf97-336c-4933-9ed8-28273ee9c93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d708eeeb-3415-4b21-bee6-07e0e0713e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d25245-800e-459a-bf2c-5bb19746f4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f304c946-5f48-493d-9563-85ce559a1ac8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3de260b-27d9-4343-b995-7e1c1fb36b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83e32ae9-ef61-4866-a361-1e2616c07594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70786acf-3fb6-4289-815c-db1168968cc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83fcfa5-ec72-4acc-b106-ae7769630c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e33dc33-d17b-44db-9819-4304a0f56379",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046fcaef-b885-43a4-9443-0dc986642277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6534d407-dd7a-4d52-9e4e-21828d2971e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39548d9-c255-41d4-a118-086a1fd20680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bfcd64-7f87-421f-8c35-466941bf0372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62feccef-515a-48cb-b57b-e1c829714a99",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de60ca3d-77cb-417b-9a8d-5eda81907f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eafac2d-b1b7-4da6-92e8-e842a2a46856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0e89b6-87b4-4830-8374-a13f6b73eb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e18cb7-3654-4e08-8232-7d7ca5080a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8bc606-0550-438f-a732-b9383025768f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035cf606-4d9b-4bd3-9a03-8f10a7cc6ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e4b7462-32b9-43b6-b850-75ba7182fdec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeebf640-6c40-4b9f-9e14-9400a36ba3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cbd7ad-a80e-4ed8-89ed-3348c1d6f82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e87579b-a484-42c3-bdea-54ce2e8e1be0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf7b1ed-aa1b-4cd7-bddc-b236a7e95979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77682f2e-43ed-4e5c-a604-cc8801a71f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd715d12-8d31-4c2d-ac3d-653d8c5a5a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b855faad-a7a8-48e5-aeb6-9785a97f884e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085c9e0c-df12-4e90-ade1-8e94daf9e5b5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b963a19a-2b26-4840-bed3-70d95d41e04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4398a07-b1b5-4d39-883d-f012c0ae51b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ab4f56-0d5c-46fb-8741-64117575323b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff40bd5-0f61-42a0-a7a6-602a0d2bd21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c49e72-dfd8-4371-b528-9a0a10463665",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77764a0e-d3f0-4953-af8b-c60f6a2b3d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46cbcc46-a724-4cc3-a889-21f5d4afb7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecff847-6b03-47ca-83b5-5b06448930d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add4c011-1eb0-4e9d-87a6-822659d9b7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ab5b5a-7743-423a-a667-8053010bacb7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb1ce3a-deef-445c-913d-e0c69d8e130e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3205ff34-29ac-496c-bec5-78e27cde8530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf7170d-af72-4a55-bbcb-aab41b94710e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae58b869-2bfb-419b-bff8-c1154b0b6e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48841fdb-a306-4cce-a724-38e3bd27b4f6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6d0d82-009d-4c1f-9806-885a53ffb587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edb82ba4-1ad5-4411-b6db-25e346432100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa79f5ff-9aa3-4621-a501-32e8b87564e6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5304350-4617-4dd4-ac77-37ab1c7c027a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0047b7c-1bef-4d2f-8d97-3dcfe4a42835",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcec144-7d8f-4a1a-9f98-dfbbcc02cd77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac0510b-57fd-41e3-a763-3ae72cea0e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5dbe31-1340-40ac-8da0-e17ae438945e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb3d210-ada4-4191-9cda-2e13a7276394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6a8ff2-8d27-4684-846e-a317488eab2c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad354a9-6278-4e0e-8013-c841e4ff7b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18348352-88af-4839-bd9f-8235f366ba10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab02e84a-18b6-4494-831a-fe8012199763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b3d426-15ab-432e-a812-b7afc6cd43db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64a9808-689e-46c2-b952-a5a0df5f4006",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e49ad72-9a22-4faa-a2d2-9610c4cdeedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecbfab34-f025-4d30-ada1-464ca1daef0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7987e5-6e29-415b-8f5e-beaf0760ac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7373d4-19c9-44d1-bcf0-d9202272df24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5948725b-6f71-4467-8d31-88d6239f6590",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a911eafb-c679-41fc-a3b1-cd2cb9c32905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb26b808-456c-48cf-9072-59ec1e5d9fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e18c12-a799-4c59-9dc4-591111bdc0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9fb6d5-297f-4a89-b8dd-23dbebcdb9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19338dae-c799-4a87-8dfb-3f9cc3135470",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45c6826-d381-436b-8a30-da6e19655697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742e67cc-ebe8-46b4-907e-40b06607da0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e617ed-18d9-4314-932d-2c03c2a8b322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8c2fc4-3dcd-48aa-aa00-9c3ef16772fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a1587f-004d-44a8-9fd6-65e700904e9b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2df9eff-32e3-4fbc-adbf-77183921f096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ca1e500-b244-475e-9254-c50ed43d0cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a001bd5-5b81-4665-bdcc-f63f129f81b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053c453e-322e-43d9-9e21-b640c6ee8259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2659af3e-533d-4b60-9644-75268c5e8434",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d32d0f9-7c23-4ec3-8d0d-02986852d252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6efe1110-5af7-450e-aaa0-5b7017d87c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636b6c17-885a-42f7-a509-d003a2615c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5169a00d-40d5-414f-9dbc-d0bfb7fe3b26"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb5dc106-5c76-40ae-8876-7c588dc3a26f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0946736-8cf4-417b-a9d5-0fb36673472c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28329e64-b009-46f5-8706-5cee9397efb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e376b042-35f9-4ddf-9101-cd7261baa500"
                    }
                  }
                ]
              },
              {
                "id": "0fe14529-7c19-414d-aa50-e438881d8b37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18c718ea-2965-4dda-adee-35edf8553b25",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23089d3-3492-4f29-94d6-c45670044877",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4dbd1499-1984-4675-8c73-b35b59af6cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfc0686-7833-4c43-b842-0801de558066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2974ada-327b-4175-a2da-aeb8a3e77e37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ca16a15-e523-4877-9431-739ad57501b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbb5dcac-9fe6-4004-9a6b-caf809c24780"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0310a97-c199-4de2-8ac2-4b484df917e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad715367-d11f-4159-b24e-9af4f09d774d"
                    }
                  }
                ]
              },
              {
                "id": "104f8f6e-287d-4978-8340-d0edf44f918f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4c9c052a-8b8e-4a1d-b4bd-8a5fd4533730",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ceffd0-16ca-4879-8005-51b0f83bc3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "052cd35a-ea48-49bf-8b49-2375835eb944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef3d107-d46c-48ac-afc2-1438c680466d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ce7690-f125-4c48-a7e9-b9ada3f0f296"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f99f5cfd-6430-4600-b348-475e8ce10b11",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d188a0b7-3158-49d4-941e-b001303b4619",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de8e34a1-1ce9-4b30-8a56-258fa0655a8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a670470-e2de-41f1-a1aa-a40457c33d06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b661e4c-4520-4d1d-8f98-6a507ab63ff2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76a909de-a03e-490e-a358-527ed02800d5"
                    }
                  }
                ]
              },
              {
                "id": "7e52fb1e-fe6e-4951-825f-ed49a77905e5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0767ff77-66cc-4004-8e96-1c910c330aff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5fe7c91a-2044-400b-a896-321ad59b340b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42445777-80a1-4f15-a8db-bcc8375e443a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b42da733-e07a-4bec-90c8-3f71eeab5644"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3351861c-4826-4fb7-b32d-5b67f41031fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2d9e89fe-e64b-407c-8ecb-5d97d81f53bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2854131f-cd54-4a37-a277-dfeafa21ed10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f84e62eb-4365-4f85-8b0c-b368399f6594"
            }
          }
        ]
      },
      {
        "id": "a61ae59c-4901-4528-bd47-834164363e99",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ff9a872e-9e30-474d-a510-f8ee2a881e0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f93f118-4c24-40a7-9ae5-e9810f752fe2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d48adf5-126d-47da-87fd-c190ce20309d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a2b8e0-7809-478a-9fb3-509558ce03b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "632dfe1f-b4c1-46b4-8244-bb912d44690b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0736759-06c4-427c-a309-e03c57be6074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "461b2300-df00-47fe-8264-dd2d38c75c28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7f0614e-68f9-47b5-8100-f57b5a2b9619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6539e7d2-d8e6-4c05-a467-143449ed15d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30979eb3-bf25-46fb-aac1-22280885c267",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47326495-755b-4012-a669-473502b9b7a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97845b7a-1656-4f95-b65a-f0e19e504bd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5b39f9b0-bf37-48c0-97a4-fc3aacbf4284"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9cb7611-4182-49b1-b6d1-260a24acc8c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39082783-b059-4951-948c-bc77742926fd"
            }
          }
        ]
      },
      {
        "id": "de17e77d-2d10-4137-8e4e-ce577f1ef8d9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c2363114-7d39-4d08-a616-a05fdc24c832",
            "name": "Negative Testing",
            "item": [
              {
                "id": "657e523f-a93b-46b6-85a6-bdade5da61ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87df2fcc-2905-4f88-94d4-07b72c7b9887",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50df0ddb-fa2e-4d63-95ac-cdee9e57ee2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "900c2268-41c2-430b-96a1-eb9468e1c14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0424a57e-55e0-42c1-8843-19bab9956c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63db861d-3658-4bb8-aa15-6f5141565607"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7e9d5a9-4459-461e-b951-0630ca7b8d57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73da6da1-d80d-4a1e-948b-aad790e72f2b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a31cb36-d2f8-4f8b-8f4a-2845f893edd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdc35f38-0a2b-48e8-b10b-db097ad9acce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ef78d23-b967-443e-b7c1-408cb14fdd44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db23e5f1-fdf5-4a7c-bae7-dee014260a87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c7a95ef-e618-4f15-9a61-b91e8499dcce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27e62fb4-0000-4796-92f4-f52c82a0aac0"
            }
          }
        ]
      },
      {
        "id": "8859ce10-fe49-4e3b-a9b0-13709ac46bcf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bdc71afd-f81d-42f3-afdb-19de2f6a874d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a30ff2f-fd1d-4f87-8504-3dbdd64fa8b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79c6b2b6-1f2f-4f34-932d-cd5f3ca58190",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d4155d-564e-4709-983c-9350131805d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c75971f8-324c-483a-9e18-d774f58b5f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5ed519-37a1-4d4e-9a97-c02055d2b905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f0007ac-fdd8-4369-9201-9ae2aef9099c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f177e5f9-585f-4419-a510-d9b7610bd4a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "886abc8f-ea6e-4075-a712-df116ed949bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b049260-368e-42ca-9e85-e595e405f4d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8392516-c0bf-4907-acea-915bda2297bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65599968-6ac3-4b02-af25-dde7ee97d99a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ff0c3e5-1c5e-4633-8a42-d464c1c948a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa237a23-5692-467f-af6a-431f98de0e29",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72aa9414-e6e6-49ad-823c-ba904d723518"
            }
          }
        ]
      },
      {
        "id": "a86e9b07-0f5b-4137-bbf0-da0c1431c3bb",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db510820-d840-4910-addd-d25fc02bd0d2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "366a1d37-64f4-4b1d-a595-713bf14c4c47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4dddef87-a861-4ec3-8935-fb040fcddd3d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c149bdb7-af9f-4317-932b-56cda6d08832",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df71f61a-18a9-4ffe-8527-47cb172681cb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 127.2253521126761,
      "responseMin": 13,
      "responseMax": 1801,
      "responseSd": 217.50769435527866,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690677721012,
      "completed": 1690677769718
    },
    "executions": [
      {
        "id": "a11daaa5-30c9-4c38-bef8-e5e135115300",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b01046f1-ddd9-44e5-b7ec-7ef7b13ed237",
          "httpRequestId": "1c535316-6d8f-4389-bd57-c542ac4e6ef4"
        },
        "item": {
          "id": "a11daaa5-30c9-4c38-bef8-e5e135115300",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bfcac5cb-7036-471b-99c8-a935a2e04b75",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 0
        }
      },
      {
        "id": "c7629bf8-0a83-463e-a8a2-4e6b45efadab",
        "cursor": {
          "ref": "55835387-88c1-418e-a9ba-8c47d295a5d1",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0863ee09-2afe-4712-b531-317248b06639"
        },
        "item": {
          "id": "c7629bf8-0a83-463e-a8a2-4e6b45efadab",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "04f7d480-3c86-43f8-a8b9-46bcc4ebc730",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "4fd0d4e3-b2cf-4016-8081-7a140ea7abd6",
        "cursor": {
          "ref": "a73081f5-1b34-49c4-9252-7dc9017129ed",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d0f2d955-d498-415a-ba32-32e782d8e148"
        },
        "item": {
          "id": "4fd0d4e3-b2cf-4016-8081-7a140ea7abd6",
          "name": "did_json"
        },
        "response": {
          "id": "9eac6fb4-77e3-4281-923a-58e5b551a457",
          "status": "OK",
          "code": 200,
          "responseTime": 755,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967dfa61-fb9a-4e61-a968-21eacad9c37a",
        "cursor": {
          "ref": "a050cfc4-8ca9-4849-b2b5-d384a968db20",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d0bf6f0-029d-4a74-8e96-eb8ca9bda19a"
        },
        "item": {
          "id": "967dfa61-fb9a-4e61-a968-21eacad9c37a",
          "name": "did:invalid"
        },
        "response": {
          "id": "7818d0f4-9295-4bcf-96b8-7fe06590c82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967dfa61-fb9a-4e61-a968-21eacad9c37a",
        "cursor": {
          "ref": "a050cfc4-8ca9-4849-b2b5-d384a968db20",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7d0bf6f0-029d-4a74-8e96-eb8ca9bda19a"
        },
        "item": {
          "id": "967dfa61-fb9a-4e61-a968-21eacad9c37a",
          "name": "did:invalid"
        },
        "response": {
          "id": "7818d0f4-9295-4bcf-96b8-7fe06590c82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5b7984-08d2-469f-b7e7-b794a0c6cb70",
        "cursor": {
          "ref": "3e192f5b-589d-4d30-8040-c9ab355184ba",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2d648876-6240-4bed-be8d-924a8b9928f6"
        },
        "item": {
          "id": "da5b7984-08d2-469f-b7e7-b794a0c6cb70",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "78653c38-2f10-45f2-bca5-bbcc18a1b341",
          "status": "Not Found",
          "code": 404,
          "responseTime": 115,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e01405a-c948-446b-b7ad-70c8873f02e1",
        "cursor": {
          "ref": "8709d0d6-c377-4e13-ae11-658e9e1c1235",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f196f4b9-53fc-41cb-b5b0-e6ebc8fbecde"
        },
        "item": {
          "id": "6e01405a-c948-446b-b7ad-70c8873f02e1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0f76a322-2225-4b64-a1f9-7ba4b7abdbe5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949481ce-69be-4296-b53e-6b8e5c18dd45",
        "cursor": {
          "ref": "7db0852e-61fc-4543-8726-11f5cc818178",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d066fbab-dcfc-462a-94fc-1d783d240e5a"
        },
        "item": {
          "id": "949481ce-69be-4296-b53e-6b8e5c18dd45",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "04ae9c3e-bb81-48b6-8e39-85abfd0129f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a4f222-b998-403e-94a2-6f4534e5eaa2",
        "cursor": {
          "ref": "70d42cd7-d7b8-446a-9838-c3a8fa892637",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3c6196c1-7426-4eba-b77e-f79463711e90"
        },
        "item": {
          "id": "02a4f222-b998-403e-94a2-6f4534e5eaa2",
          "name": "identifiers"
        },
        "response": {
          "id": "3e6dedbf-ab6f-4893-8e0f-50829bd7c4b8",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5903426-8fc9-4612-ba03-41c1ee502775",
        "cursor": {
          "ref": "a3a592ec-2884-4f76-9bab-bcc36b3dfa04",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c0e91544-1b80-470a-a359-673cd83a1197"
        },
        "item": {
          "id": "a5903426-8fc9-4612-ba03-41c1ee502775",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ab92307-570e-4abf-9a11-1893a9f963b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfd319f-47ed-4ec2-9c81-466f7d40947f",
        "cursor": {
          "ref": "825fa5d8-08e1-45e2-91d8-65b22f3a6b25",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a3f1ace0-33b7-4b2c-935e-9df226988223"
        },
        "item": {
          "id": "0dfd319f-47ed-4ec2-9c81-466f7d40947f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1b65e3ea-ed20-40b8-b646-4395affe1eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "700c946b-4736-49b9-9d29-2cd9b11136c0",
        "cursor": {
          "ref": "eaf471c1-115b-472e-abf3-83631903ae08",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "603f5837-36b7-4cc4-9c29-b05f1b903011"
        },
        "item": {
          "id": "700c946b-4736-49b9-9d29-2cd9b11136c0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a6ae64b-ca4b-4213-830a-d8f799c7b4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9912cb-b4e7-4394-8803-6a67d9e9d1cb",
        "cursor": {
          "ref": "20bce45d-3c8c-4487-835b-eab6044e00c4",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e70d1b3c-1e2c-4669-8954-3ec5df5c48a7"
        },
        "item": {
          "id": "1d9912cb-b4e7-4394-8803-6a67d9e9d1cb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "886f946a-52bd-4b56-95b3-fed9e9e4a483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9461f204-c341-4b01-9319-f9230a290637",
        "cursor": {
          "ref": "a2113d60-e35e-45cb-994f-55270010630c",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "77394d2b-d76d-4ccc-a620-95f50c0de4b4"
        },
        "item": {
          "id": "9461f204-c341-4b01-9319-f9230a290637",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5b78ef56-8f3a-4171-8099-3f7a9b7aabcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21fd5e4-361b-4309-aa05-938abb6201dc",
        "cursor": {
          "ref": "b15a4ac4-4234-4749-b07d-3e6d6837fbb9",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7442c53b-f1e7-45e3-8ce5-1c8284cf4aa1"
        },
        "item": {
          "id": "c21fd5e4-361b-4309-aa05-938abb6201dc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e224645c-88bf-48fc-b656-a0a821260051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ddb489-5478-4add-8dea-098da787d949",
        "cursor": {
          "ref": "117a0a3e-3a2e-4dba-b316-53dff65420d0",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1b6aa635-a7ec-4f5f-816c-e83cd8f2353f"
        },
        "item": {
          "id": "b8ddb489-5478-4add-8dea-098da787d949",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e0a59493-b64f-4860-a44a-bc6559f55a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd6184b-ff23-47a9-a5e9-a201fae9a601",
        "cursor": {
          "ref": "a3302a62-86b4-40a0-8fc7-86b572f6cd12",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "524d4712-4536-4e3a-a666-16350127bad6"
        },
        "item": {
          "id": "abd6184b-ff23-47a9-a5e9-a201fae9a601",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dc853114-3018-4794-8034-6af8f0e4f8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7acd66-d061-497c-be85-762beb3931a0",
        "cursor": {
          "ref": "91edd741-31e9-44c3-9f8c-5c218e0cb06d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "42cb8a7d-e3ac-4d13-b868-77e418ef4431"
        },
        "item": {
          "id": "cb7acd66-d061-497c-be85-762beb3931a0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "11a22517-c308-4c14-b688-b1edc350a8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f619e70-ded6-46f7-bbf1-e2ab08671d22",
        "cursor": {
          "ref": "dd7d06d7-6a07-4c57-88f3-a4b2860369c3",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3e772ff7-edd6-4566-a9e9-a7025aab2535"
        },
        "item": {
          "id": "9f619e70-ded6-46f7-bbf1-e2ab08671d22",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cf54611e-9072-4796-877e-e468bccdbee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13381f56-7c7d-4dbe-9363-117c2d1f1730",
        "cursor": {
          "ref": "74467408-0578-469d-b936-1e4e90b7e346",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ad7936f8-1bde-435b-a5bd-35daeae4db81"
        },
        "item": {
          "id": "13381f56-7c7d-4dbe-9363-117c2d1f1730",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5b9c77cd-cdad-4054-9f2f-afe2e1ea7131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16afd0f-9f95-4b8c-9f35-d67648d8f7a1",
        "cursor": {
          "ref": "a3bc1383-0e77-47b5-9f52-d1d540281a02",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5284d6a9-b14f-4795-881c-286f9dda30b6"
        },
        "item": {
          "id": "f16afd0f-9f95-4b8c-9f35-d67648d8f7a1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0e0f3ecf-32f6-4ac7-9712-12a038953391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbca1b4-3087-4049-a5cc-424bffccd572",
        "cursor": {
          "ref": "ba366769-df51-44cb-bb66-6358d907a84d",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "48ae9cd3-c186-42fd-a283-54b970addcd4"
        },
        "item": {
          "id": "bdbca1b4-3087-4049-a5cc-424bffccd572",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2d671af8-55ec-4bd3-9b82-c37c9029d810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0e931a-a133-4fcd-bd5a-1dff3688e517",
        "cursor": {
          "ref": "319288a5-bb2e-4aa5-8966-8b8ab05987ad",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4dce1923-6556-46e2-9238-82e056df3b0d"
        },
        "item": {
          "id": "8f0e931a-a133-4fcd-bd5a-1dff3688e517",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "78ddc46f-673a-45a0-a936-625d5eabba26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ed573b-8873-4eb7-a22c-a64d0286a3bb",
        "cursor": {
          "ref": "24dc1dc8-b8a4-412d-9eab-fcff1d5d9c80",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8c901223-b647-42ce-aae6-9b70911df91b"
        },
        "item": {
          "id": "00ed573b-8873-4eb7-a22c-a64d0286a3bb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d029d960-9f7d-4a82-9d5d-64f6c4e14078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a3920c-ae14-4b98-afcf-9e9e6dd52dff",
        "cursor": {
          "ref": "75fd3b39-14d3-4f6a-9868-477e9507cc79",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f51c3b24-adc7-40be-8f65-5149938724b5"
        },
        "item": {
          "id": "b8a3920c-ae14-4b98-afcf-9e9e6dd52dff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "58004d54-1e47-4d6b-99ba-930aff8b8df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d0104-49aa-47a5-a25a-377598cb3838",
        "cursor": {
          "ref": "0ac47253-fac6-4064-b70d-ef71c71ffefc",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "27c361ab-66c0-493d-bc7c-e5c701180d02"
        },
        "item": {
          "id": "855d0104-49aa-47a5-a25a-377598cb3838",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e0776097-50f5-4808-bc78-a84f36164741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb57646-3ea6-4bb4-9b04-6de01bdb3027",
        "cursor": {
          "ref": "f79ca127-d3e7-4d89-b0b0-b9cda02a59a4",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bedef7a2-5972-41a3-b917-4334ddebb68f"
        },
        "item": {
          "id": "2eb57646-3ea6-4bb4-9b04-6de01bdb3027",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "09df5cf7-b428-44f0-84e9-9139a26d2704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805ecae8-3740-4346-867f-086744e52dee",
        "cursor": {
          "ref": "77e3e803-a05c-4e78-a4cc-d7ae7bf712c6",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1473b783-d983-4911-88fe-c2440116c80d"
        },
        "item": {
          "id": "805ecae8-3740-4346-867f-086744e52dee",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7911c776-2d29-4ffb-996e-5ae4e3852a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac70252-bbd8-431e-a4b5-92013ace67a5",
        "cursor": {
          "ref": "d3b615bb-3af5-44c4-ba50-f9275dd3c510",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4a338c89-04b5-4434-be5b-8627ae964cf1"
        },
        "item": {
          "id": "5ac70252-bbd8-431e-a4b5-92013ace67a5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d4514b81-f032-49bf-a103-cd400c7b8109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f3e924-9ef6-4698-b278-b25de1c1c6ca",
        "cursor": {
          "ref": "24b568bb-4ae4-4552-a0aa-c8f3777a7101",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "afb8dc90-23b0-4c2c-b2ed-af6800de1345"
        },
        "item": {
          "id": "62f3e924-9ef6-4698-b278-b25de1c1c6ca",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5dcedda7-2553-4dbc-afad-5d3095fa0c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1e924c-1fc7-429b-9644-3555c3cc9a1f",
        "cursor": {
          "ref": "3ad69d23-ccb9-48ce-8131-252180f47da0",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1524a1da-1899-46a8-9fd0-0d7d9b738423"
        },
        "item": {
          "id": "bd1e924c-1fc7-429b-9644-3555c3cc9a1f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ebe279a-3093-42fa-aa3a-48538e1ac7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a05d26-5992-4d68-8d9d-a36f1f01ecec",
        "cursor": {
          "ref": "385ba155-b453-4bce-abc7-247d537a4df3",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a5f989f0-c86e-4cca-a4e2-684b80db0f49"
        },
        "item": {
          "id": "89a05d26-5992-4d68-8d9d-a36f1f01ecec",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7a2fab7e-1e4d-42cb-a404-d8527920db68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e92d5a1-7749-4dfc-9cda-17add6f3b887",
        "cursor": {
          "ref": "e7b0aa09-6c04-4158-b0fb-129d94fc7f64",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "002bf558-8702-4a92-a1fa-7a76cc3064d5"
        },
        "item": {
          "id": "0e92d5a1-7749-4dfc-9cda-17add6f3b887",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b4c7b787-1693-4b85-9f28-1c109e17e900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebedc0c-0093-4e26-b63a-b376354fc24f",
        "cursor": {
          "ref": "d00b4164-50d9-428e-b831-504da90cfb48",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "633e5226-47ac-4f9d-9a3a-671b30440aa0"
        },
        "item": {
          "id": "8ebedc0c-0093-4e26-b63a-b376354fc24f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fc46ea01-be13-4331-bd74-e0bd42c72e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7dbc32-b852-492b-b0b0-0e0ffe37b27e",
        "cursor": {
          "ref": "11cc45fd-6b43-48ad-8052-ee64ae5f0383",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6dfbf0f9-a3f1-4567-82ea-2e43f7805281"
        },
        "item": {
          "id": "be7dbc32-b852-492b-b0b0-0e0ffe37b27e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ea406cc3-811e-46fb-8ad3-de2863932ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7ad28c-a4d4-4831-8055-e0e885b9ae23",
        "cursor": {
          "ref": "87ab7db7-adae-4608-ae4d-48c6af4b4f8d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ec4ae5a8-9b8c-4df2-9690-0866fb0b6509"
        },
        "item": {
          "id": "0c7ad28c-a4d4-4831-8055-e0e885b9ae23",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b114781d-6981-4a5d-8249-ac36d4bbf2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619b85b6-8219-4270-b903-55fa9b338a2a",
        "cursor": {
          "ref": "c3014de5-fe91-4a06-8dc3-091db49e7c84",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "518c09d0-6153-404d-a277-9f76cdfb17fa"
        },
        "item": {
          "id": "619b85b6-8219-4270-b903-55fa9b338a2a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "43df11d6-0306-41c9-b845-923e6e84833d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8507d380-c305-4042-83dd-674db1ff527c",
        "cursor": {
          "ref": "537c9650-9cff-4586-8cfd-477fb6bd2b2f",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "08128c9a-4eb2-407a-b2d1-e7fae052a1fc"
        },
        "item": {
          "id": "8507d380-c305-4042-83dd-674db1ff527c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2a4aa824-0990-4ded-ab40-4654ba2006cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977151ff-f46f-4426-8ded-40ed992c5eb7",
        "cursor": {
          "ref": "9edc8f0f-15c9-47cd-abb0-644e32488e34",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d9518e66-f57d-4bb0-b0b7-501d889aee54"
        },
        "item": {
          "id": "977151ff-f46f-4426-8ded-40ed992c5eb7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "29452d54-06ec-4802-b6a1-ee62e9977f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932e86a7-a295-4b75-abdb-a33687519c70",
        "cursor": {
          "ref": "8091a86c-7177-4771-ae84-ee2050e21160",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c3d0af7f-2174-4b93-886e-7b8bfaabf7c5"
        },
        "item": {
          "id": "932e86a7-a295-4b75-abdb-a33687519c70",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "565a7725-f73e-4d2a-b3c6-6c4d4ae02d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4e4aa49a-7f59-4422-81ab-d47ecba31c47",
        "cursor": {
          "ref": "b44ed7bc-d030-4c8b-90f1-99b6028fe558",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "42e30223-666c-4cb1-8709-a518cf5f60fc"
        },
        "item": {
          "id": "4e4aa49a-7f59-4422-81ab-d47ecba31c47",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a56adc2f-8ee0-41f5-ac90-a692b571bddd",
          "status": "Created",
          "code": 201,
          "responseTime": 1801,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a51331ab-a2e3-426e-b884-363aa208354a",
        "cursor": {
          "ref": "1c65375a-d338-48c5-b325-f7fb15ec02b9",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f595dd17-eb67-4a30-9245-7e881f1ecbe6"
        },
        "item": {
          "id": "a51331ab-a2e3-426e-b884-363aa208354a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "82bd5966-828a-42d7-afd0-24412470647b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "544b6404-3a2a-4190-b4ce-7b3374626cef",
        "cursor": {
          "ref": "5534865f-1d47-46dc-89d9-3e57fcd022c3",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0850d13f-e113-4382-95cf-71fa53dc566f"
        },
        "item": {
          "id": "544b6404-3a2a-4190-b4ce-7b3374626cef",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6a028c53-ece2-4b4c-b67c-9c3ceb420960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8438df7b-8319-49c0-88a5-83a641cb98d8",
        "cursor": {
          "ref": "830f0e00-3762-4bf7-b5ff-b23cf6ab1289",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a50987f4-066f-42a5-ae6d-fa17fb08f33b"
        },
        "item": {
          "id": "8438df7b-8319-49c0-88a5-83a641cb98d8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33f36321-296c-4d3d-a5e5-d7d5c69a9b45",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b4b21f8a-9417-43ca-a61f-b457370bdf7e",
        "cursor": {
          "ref": "f7233a80-bd63-4957-9d41-a1dc30bf9a2d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "50c9865e-de65-41dc-bbbc-227c5b73e4f8"
        },
        "item": {
          "id": "b4b21f8a-9417-43ca-a61f-b457370bdf7e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0500442c-d1e4-4124-a696-1467e8464651",
          "status": "Created",
          "code": 201,
          "responseTime": 1103,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "21f57fa2-23e0-417b-9b36-63bb0b8a13d0",
        "cursor": {
          "ref": "c27a6ed3-f3e9-48ee-9019-ce07c7d6dfb7",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c65a6993-14ab-4dd2-b590-4d0283a046b2"
        },
        "item": {
          "id": "21f57fa2-23e0-417b-9b36-63bb0b8a13d0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4a388340-8f11-4a80-8b30-5bb1b1de4dc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a305f163-1798-4c42-890e-45dbba1c4cf9",
        "cursor": {
          "ref": "6ba18047-ab14-4f75-a369-f4f2121541bd",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d5698778-d8ee-4ae8-a197-74170802fcf3"
        },
        "item": {
          "id": "a305f163-1798-4c42-890e-45dbba1c4cf9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1a2e883b-223e-4c73-b1df-ed5e070f96fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 630,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "32d05fe7-8292-4c4c-86dc-677a29859e09",
        "cursor": {
          "ref": "ffc29823-6413-4b97-bddc-33b1797b16b5",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "04716d5c-c200-4c2f-b158-aefb35f35c05"
        },
        "item": {
          "id": "32d05fe7-8292-4c4c-86dc-677a29859e09",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "8047be3e-368d-4b49-97e6-ec41eed72385",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5b3a933d-a7da-47ea-b9d0-5dd21824df03",
        "cursor": {
          "ref": "f4575a5f-432c-4ecb-991c-26adb8b9ea84",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f0799770-1bc3-471a-a6bb-5d651c498269"
        },
        "item": {
          "id": "5b3a933d-a7da-47ea-b9d0-5dd21824df03",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f49943bc-5216-48b4-8211-9061c32394fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7909132e-0a0c-40d5-aa4b-8f8a0c3d17b1",
        "cursor": {
          "ref": "2ba5daff-0f51-45cf-9a83-566e1a18ac7c",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "835cbb35-b7c8-47be-b147-2412b79ae341"
        },
        "item": {
          "id": "7909132e-0a0c-40d5-aa4b-8f8a0c3d17b1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "720875c8-8902-4910-a152-7948bd0632a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "09885f6e-e646-404a-b7b9-a12299c5d2b5",
        "cursor": {
          "ref": "d051258a-2601-4d8f-9c0e-d6acb02c50a7",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0d19f9c7-7c1d-4ed0-945b-4ffaf7ef65ae"
        },
        "item": {
          "id": "09885f6e-e646-404a-b7b9-a12299c5d2b5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "383b7748-424a-4f98-a0ba-6c33523270ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "41d2a3b5-b620-4972-ab5f-d18b9553eb66",
        "cursor": {
          "ref": "57e834e7-7d79-46d6-8605-a8719525eea9",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "361e1403-cc27-4115-860a-31aa4daef845"
        },
        "item": {
          "id": "41d2a3b5-b620-4972-ab5f-d18b9553eb66",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e98aa246-1255-4cf8-ab64-67d1ecfaf5fc",
          "status": "Created",
          "code": 201,
          "responseTime": 789,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "972bd70b-0500-42dc-999f-d37718c8aaf1",
        "cursor": {
          "ref": "d78316fc-d271-4299-ae96-f688a4d6ed7c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b86fbb52-6024-4506-9704-f9e95148e5ce"
        },
        "item": {
          "id": "972bd70b-0500-42dc-999f-d37718c8aaf1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a8dc3165-baae-4599-b94f-8f9790210a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecee712b-5cdd-43e8-aedd-7f9aa46dd710",
        "cursor": {
          "ref": "b6bf6763-aad7-4ac5-976f-beead3e7d3bd",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f1c5ca4b-9b77-48aa-8481-787032e569c2"
        },
        "item": {
          "id": "ecee712b-5cdd-43e8-aedd-7f9aa46dd710",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "56ab4a34-cf04-4786-9b89-3b187f420751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0a780a-d391-420e-b013-92704450a192",
        "cursor": {
          "ref": "67d45189-9086-4c6b-94de-acbd64c17c41",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "64751b95-f803-4812-9544-cd5cd424724d"
        },
        "item": {
          "id": "ff0a780a-d391-420e-b013-92704450a192",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9fcc3183-f3a5-4735-a11e-001a849b09f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d2465f-0bb6-4eca-9314-00dd431d3eaf",
        "cursor": {
          "ref": "d13cc8f9-3c9e-4017-97e1-a247276d4447",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "89bdbfb1-af7c-426c-91e7-a3ccbc3b5f52"
        },
        "item": {
          "id": "c1d2465f-0bb6-4eca-9314-00dd431d3eaf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8a6eaacd-5d96-43e7-865e-e03336836f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ba8725-d7de-44a6-bd00-eaea35db3a30",
        "cursor": {
          "ref": "8182b87a-bd09-4c71-9de3-c5c7eed83dd1",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "51d45c0f-9964-4ad5-a5b3-a19ddd201380"
        },
        "item": {
          "id": "08ba8725-d7de-44a6-bd00-eaea35db3a30",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e884a6a6-c16c-441f-ab3b-5fb7996d3984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231a0519-ddb7-4598-a9b2-f959c50d7a05",
        "cursor": {
          "ref": "1c8a395e-7b07-4011-918e-2ea9fdd9995c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e5546b1b-e2d6-49b5-b24a-a566f6a52f7f"
        },
        "item": {
          "id": "231a0519-ddb7-4598-a9b2-f959c50d7a05",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "45bafbab-b66f-4ef4-acfe-96d0ac63afef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763cb9c8-1d85-4c96-93ea-2e8885a2bbb1",
        "cursor": {
          "ref": "71a8443d-3b8a-4ce4-a14d-85d4104bd8e0",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1cedf1d7-cb79-405a-89f0-6cc7e036d7be"
        },
        "item": {
          "id": "763cb9c8-1d85-4c96-93ea-2e8885a2bbb1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cccaaff9-ef51-4279-ad00-2448911fd948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023f2069-9160-41da-870b-88fc0ce7fde6",
        "cursor": {
          "ref": "d7db7d8f-8055-4ef2-ac99-63f4cb7a9cf8",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2ca1641e-c088-44de-9bc9-0a64595cb359"
        },
        "item": {
          "id": "023f2069-9160-41da-870b-88fc0ce7fde6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "88451db3-2a63-4dd0-9cd6-dbfa0139adc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a89b80-44e3-424b-ab1d-a0fc2a9428a6",
        "cursor": {
          "ref": "7aecd678-0984-4382-ab93-78a6df11728d",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "54b3dcfa-a1d3-42cd-9e85-cac6ee59d357"
        },
        "item": {
          "id": "f1a89b80-44e3-424b-ab1d-a0fc2a9428a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6a7c3758-98e3-459e-8f1c-e95ae56397b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac4aa7e-e159-4679-9e3e-8dba3b63e17f",
        "cursor": {
          "ref": "b4e92c22-7bf9-4c79-8abf-e30ce9329bfb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7ad521c2-e321-4606-882e-f726ee62b2ee"
        },
        "item": {
          "id": "5ac4aa7e-e159-4679-9e3e-8dba3b63e17f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "23f3c272-a203-4f2d-8ee3-d514900e4707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3397f64e-5729-431b-bf7c-29f40be8fcc1",
        "cursor": {
          "ref": "7ff626b1-55bf-4e3d-a614-beb406ea3877",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1563e535-0916-4309-8105-e9fc7d1a2adc"
        },
        "item": {
          "id": "3397f64e-5729-431b-bf7c-29f40be8fcc1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "14bd7658-3eb7-49ba-ba1d-719887483390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f73fd1-2977-4b45-8a8f-969828feaed4",
        "cursor": {
          "ref": "6ac7fc2a-69b4-4128-934f-0869cb7fe5a8",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "574cb25b-4931-48e9-b9e5-b98ca77c461e"
        },
        "item": {
          "id": "c9f73fd1-2977-4b45-8a8f-969828feaed4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e4456569-d04d-4248-9c68-60d55cbac506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4bf16a-13e2-48e2-bedf-01d49a5075af",
        "cursor": {
          "ref": "f06b6a69-0e97-4bdb-b7bc-ddab127c30ec",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b3dcdd13-749d-40b6-b69d-1b170926eb03"
        },
        "item": {
          "id": "bd4bf16a-13e2-48e2-bedf-01d49a5075af",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2687bafd-b77d-4315-9696-6dac041fdfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a47b80b-ac74-41a5-beed-786f36efad7f",
        "cursor": {
          "ref": "6b70864b-df20-4361-beba-a8081a4031b6",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4572e958-9686-49fa-90ca-207a6054c8e4"
        },
        "item": {
          "id": "0a47b80b-ac74-41a5-beed-786f36efad7f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6e476a4e-7e3e-4c2f-8dce-2a0cf1f90093",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 617,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "65e0a56a-2670-4a4f-819d-ee7200f17bbd",
        "cursor": {
          "ref": "2f9f1bc9-9e48-4afe-a888-f35497f0bcf2",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "35f23f6b-d5aa-4f16-a062-aa4339b9e844"
        },
        "item": {
          "id": "65e0a56a-2670-4a4f-819d-ee7200f17bbd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a40ad251-516c-4350-8279-7acb52a8e86f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 621,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "819e7783-8940-45a7-aa8c-b193c3dca78a",
        "cursor": {
          "ref": "cb51252f-74b8-4836-8518-65f1bb33584c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f8031aff-7ad0-47d7-8621-bfd136abaf84"
        },
        "item": {
          "id": "819e7783-8940-45a7-aa8c-b193c3dca78a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d19c3820-0d06-4942-a0b9-26d24f0d2d5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a750b896-dc97-45d5-94c9-ab15af268ced",
        "cursor": {
          "ref": "6da43c01-2981-4488-80fb-39fb705f12ba",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0d371a59-14c2-4dea-ab37-83a68b513b42"
        },
        "item": {
          "id": "a750b896-dc97-45d5-94c9-ab15af268ced",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6a64a863-ac4b-4191-a85a-d9954e45fb2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 634,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "548be4b3-cc8f-4d4d-976a-50097f32894d",
        "cursor": {
          "ref": "7c642be9-f46b-476c-b80f-69ec294914f5",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1e0c7a5d-5a41-4c19-838e-40819a3e4624"
        },
        "item": {
          "id": "548be4b3-cc8f-4d4d-976a-50097f32894d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "69beee59-c186-48ff-a2e8-b6c3e5f6921c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "00bd67b8-89da-418c-baed-7ece6910f0c6",
        "cursor": {
          "ref": "7805b147-70ab-4e63-b3a0-51c1ff0f31c4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0ee350fe-31b5-45a9-b317-408f8d54fd85"
        },
        "item": {
          "id": "00bd67b8-89da-418c-baed-7ece6910f0c6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0a6d9668-f844-47df-8193-1412d4afeb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8f1753-981d-4e63-85c6-71e2372d300e",
        "cursor": {
          "ref": "b39603ae-9d72-40e3-a598-154b984d4547",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9b4b31bd-de89-4bb8-8d30-4052a3231fb1"
        },
        "item": {
          "id": "5d8f1753-981d-4e63-85c6-71e2372d300e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fa7094cd-80f5-4be3-b5a3-796ffa509f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a483fc07-a769-4786-b15e-cfb9d0296ebd",
        "cursor": {
          "ref": "9afaf620-cabb-438e-8ee5-6b92179ae95b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7cf11098-7c35-4af5-8c79-57c15491d268"
        },
        "item": {
          "id": "a483fc07-a769-4786-b15e-cfb9d0296ebd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "23eb577c-323c-4ab5-b13a-5a5a80bc73c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4faa3a-c504-4432-89fc-c0ff796485f7",
        "cursor": {
          "ref": "04aa4b07-cf93-40b3-8cc1-910bf42d4c50",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8c4aac35-96de-44c9-af05-e3c48baff97b"
        },
        "item": {
          "id": "ad4faa3a-c504-4432-89fc-c0ff796485f7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e65b3ee6-35a4-4379-8bf4-a3ef74e846ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497e6559-6244-41a1-a6f9-0cd1fe2a4263",
        "cursor": {
          "ref": "5669609f-37b2-4d1f-969f-ba7327cac3e3",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "85af8422-99e3-43b9-8d13-26c9eae66dcb"
        },
        "item": {
          "id": "497e6559-6244-41a1-a6f9-0cd1fe2a4263",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d3f14adc-02df-4ac3-a50b-9a89c80c5ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a782ed7-e53a-4f63-a0ac-a2427cf94230",
        "cursor": {
          "ref": "4a649fb1-6b85-4a78-ae3a-8a0edccdb966",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "42ccddb3-2dfa-4a0c-b7ce-ac7e8c6db854"
        },
        "item": {
          "id": "4a782ed7-e53a-4f63-a0ac-a2427cf94230",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d32d95d1-3afb-41ca-b253-4ef00336535e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df45ae9-2328-4035-a2a6-dfb89f8a3fac",
        "cursor": {
          "ref": "69b1965c-28b4-479b-bc8a-baeabf08f596",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a0d6efda-8a95-4756-b680-fe12fbeb3263"
        },
        "item": {
          "id": "5df45ae9-2328-4035-a2a6-dfb89f8a3fac",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8670e3c9-3515-4542-9325-0bd8214ea6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03b9068-1d56-4b54-b8b2-a529592994e4",
        "cursor": {
          "ref": "3824761c-2c06-40a2-bc01-2a2213477a6b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6e033c7d-1612-4ff1-9a11-31d12a4b8aff"
        },
        "item": {
          "id": "f03b9068-1d56-4b54-b8b2-a529592994e4",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "81c202ec-1055-4c71-bc49-2b6180290306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcaa1b9-7204-4b59-bcd6-a75c0fdfc7ff",
        "cursor": {
          "ref": "9f0f83bb-5348-4b07-aa5f-12cbfd0ddba2",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "664ed489-e73a-4764-ac11-32004ad65739"
        },
        "item": {
          "id": "6dcaa1b9-7204-4b59-bcd6-a75c0fdfc7ff",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a95ce769-9fe2-4918-94ef-bdebc2afb163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad12048b-3345-4035-aa96-b3b3a4531eea",
        "cursor": {
          "ref": "a05132f2-1f55-4f24-b2b8-3055237fe43b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cf1ec26d-6362-4a6a-afd8-6c83a8cd38e0"
        },
        "item": {
          "id": "ad12048b-3345-4035-aa96-b3b3a4531eea",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2739e3a8-cfca-4f60-82c1-eada737d9f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3819a4-5716-4f38-b0d1-ff1437c397fc",
        "cursor": {
          "ref": "2662d9f4-16d0-425e-9110-bae7a5bd5b9b",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fb2a1b94-07b4-4352-b198-319354457ca1"
        },
        "item": {
          "id": "4f3819a4-5716-4f38-b0d1-ff1437c397fc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b82566fb-415a-4ef8-94c2-2b5ecc8d2f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9416f2ca-6b9d-451f-a3b6-b9204b703f98",
        "cursor": {
          "ref": "73a69efd-004a-4c60-bb03-10bbe9466870",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "53a9eed9-211e-49ca-bf70-15c57ef58fc4"
        },
        "item": {
          "id": "9416f2ca-6b9d-451f-a3b6-b9204b703f98",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3c344948-ce24-4783-9571-3fb0b59106f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9ef885-c3f5-41bc-9ef7-fbc6e0a14f5f",
        "cursor": {
          "ref": "0759c046-eedf-4e19-81ed-fca004801e44",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2f645162-e3b9-4134-b788-61f159923eaf"
        },
        "item": {
          "id": "4f9ef885-c3f5-41bc-9ef7-fbc6e0a14f5f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9475f8c8-c550-4319-bcd8-051ada09d984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93281c73-65fd-4137-b5fa-dd703437995e",
        "cursor": {
          "ref": "edaa7645-ec22-49b8-becf-7550c48a11cc",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bb668d64-bd04-45f9-be16-36bb2b1fad4b"
        },
        "item": {
          "id": "93281c73-65fd-4137-b5fa-dd703437995e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9c374687-79e8-4963-b424-ed1cf66db45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b66eda-1c13-4169-81d2-f5c1c1d64344",
        "cursor": {
          "ref": "944aed60-dc8f-4c9a-86f6-30d41e5a3e2e",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b393e060-3ee7-4a6c-b2d3-d53b3b14a652"
        },
        "item": {
          "id": "72b66eda-1c13-4169-81d2-f5c1c1d64344",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "52ea2c7d-5ff8-4e36-a874-a3f654147bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a28861b-918c-4b80-98cc-6998306b685e",
        "cursor": {
          "ref": "b356de8e-d2c8-4a2a-9c98-cec9fe2c19c7",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "20d3e419-ad91-4fa1-a23e-7c1d6052b980"
        },
        "item": {
          "id": "5a28861b-918c-4b80-98cc-6998306b685e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "82634df2-5596-440a-bc70-1f657f3eec74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d69ee2-e229-4ea1-be76-79fc4c2c3d10",
        "cursor": {
          "ref": "db3057d0-0143-4244-8655-90202bf0a54d",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6d4ca4f7-2310-4be5-9d49-fc579636916e"
        },
        "item": {
          "id": "c4d69ee2-e229-4ea1-be76-79fc4c2c3d10",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "93587fae-a6f9-422e-9012-0d8dd9dfd4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8466f8-2c00-4567-832c-cd5d5e9437b8",
        "cursor": {
          "ref": "e6fb1731-0235-4f11-bfa9-4840859b807f",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "99dd732c-79db-4f93-998d-8a7a16dbc6e8"
        },
        "item": {
          "id": "7d8466f8-2c00-4567-832c-cd5d5e9437b8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "964331f9-bb53-4b39-8cf2-0e62aa87dd8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c0d430-7c43-4a2f-8f9f-d465e6f12c05",
        "cursor": {
          "ref": "b73b87ec-2bc0-4ede-9ece-1285938b089b",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8a1f2dbf-00b4-40a4-baa3-50272054420b"
        },
        "item": {
          "id": "c0c0d430-7c43-4a2f-8f9f-d465e6f12c05",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9254215c-426e-427b-a5f2-be77c4b57795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f97eb7-1a8c-41f6-bd9c-666ce8428fa4",
        "cursor": {
          "ref": "a00926f5-ca11-4367-809e-eb8299513984",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f9d71fe5-b997-4484-a974-17e0f19271c9"
        },
        "item": {
          "id": "a8f97eb7-1a8c-41f6-bd9c-666ce8428fa4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "86fed0df-4cb0-46e1-873d-ece6eef20f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c732d4c3-2819-4bf4-a7b8-dd71f99b21f2",
        "cursor": {
          "ref": "e0150a8e-1333-484a-a4ec-fad9333fcf5e",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b682cec8-f4ef-4761-8ea4-a20c8bbbe885"
        },
        "item": {
          "id": "c732d4c3-2819-4bf4-a7b8-dd71f99b21f2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f8960564-80d2-485b-8071-715a6cc7b0af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b78fea-06aa-4dfb-9ee5-8da551a16d2f",
        "cursor": {
          "ref": "ef6c943b-e796-4cd0-b13f-621053cc9633",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c1004da2-f71e-4127-849e-7fa1e7496271"
        },
        "item": {
          "id": "d5b78fea-06aa-4dfb-9ee5-8da551a16d2f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ce3e3050-a7d3-43e2-b2ee-6e6dd7db64b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b0618f-72eb-447e-9ca3-155ff2aa5fbc",
        "cursor": {
          "ref": "6a700e99-c587-4304-8926-5219437041ea",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "10774ce4-6f73-4d63-921a-12be5b60f8b3"
        },
        "item": {
          "id": "25b0618f-72eb-447e-9ca3-155ff2aa5fbc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2d615f7-e82b-4f42-bc11-cb9214e06c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664f3b18-414d-4bfa-847d-e58ff67c5eed",
        "cursor": {
          "ref": "449fdeec-302b-417d-8c55-6c27eb0517b0",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "979988dd-f90d-4ef1-8f44-0d75d5ba108e"
        },
        "item": {
          "id": "664f3b18-414d-4bfa-847d-e58ff67c5eed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f6e7e020-1ede-407b-920c-2c9a694973d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7898d84b-c100-4eb5-b262-f3d80b597437",
        "cursor": {
          "ref": "bdfec4d1-159c-4acc-8eb7-ff1a1fcdd03e",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8d34aab5-84eb-46cd-bc2b-ce1938ce5fc4"
        },
        "item": {
          "id": "7898d84b-c100-4eb5-b262-f3d80b597437",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "61a6f599-6c8f-4c35-8298-989e755be97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef00185-bb7c-4017-be6b-dd6a333922ff",
        "cursor": {
          "ref": "d0902cac-932a-4b02-92f1-c4d82f1707af",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ca19fd31-1b4b-4ed9-affa-a854eb4d012d"
        },
        "item": {
          "id": "8ef00185-bb7c-4017-be6b-dd6a333922ff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5e999229-2c8a-4d46-9b69-9b42599ab012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10bb9d1-7ac1-40e1-bc65-d7926d09858a",
        "cursor": {
          "ref": "fe5a22dd-e86f-4301-be33-50f645738ae9",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8e955fa8-7b03-4cb2-9e06-993106ef804e"
        },
        "item": {
          "id": "d10bb9d1-7ac1-40e1-bc65-d7926d09858a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "38ba6eec-e727-4769-9144-1c101a400201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d82226f-b6c6-4578-bcbc-6a47349147cf",
        "cursor": {
          "ref": "1a7c1a24-eb10-4de0-b8ed-a2b91627b100",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4d7fbb46-6cd2-457d-89c4-4093ea35d14f"
        },
        "item": {
          "id": "8d82226f-b6c6-4578-bcbc-6a47349147cf",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bc05ed02-cfca-4a68-a5b4-38263cb3a616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1275ed-4770-4f17-a053-118f98eed056",
        "cursor": {
          "ref": "4dd68871-5530-41da-b2d3-a50100efec8b",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "108ee1a9-5afd-4dea-8c29-829bad7542a1"
        },
        "item": {
          "id": "be1275ed-4770-4f17-a053-118f98eed056",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b7329af5-9f9a-4947-a0d1-08500013f84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaad157-3928-4087-bd08-a739b13aadd3",
        "cursor": {
          "ref": "caf89956-de4e-4c5d-8abd-9c6f0b4c3802",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d5d4a4a0-31ca-42b0-be36-670daedfa0f3"
        },
        "item": {
          "id": "dbaad157-3928-4087-bd08-a739b13aadd3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7f2c1a11-2c7c-4dcc-bae7-ad27d215095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e703d4-209e-4f6a-a374-4486ba99274d",
        "cursor": {
          "ref": "7afe5b70-f347-4669-8ead-d9f16f153a0a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "15fc92d4-bf9f-49ba-8011-20b8f2966dce"
        },
        "item": {
          "id": "15e703d4-209e-4f6a-a374-4486ba99274d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "b6fe876a-26b3-4c41-a0b7-4e74a029246e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff35ec2-2ca5-414f-8139-4f8a344625df",
        "cursor": {
          "ref": "18f4c9e2-ae55-4ee6-b008-90ef85a628eb",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8374925e-a1e3-4eaf-9d1c-e25969ea42a3"
        },
        "item": {
          "id": "eff35ec2-2ca5-414f-8139-4f8a344625df",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "08c91681-bfe3-4876-be39-043550370466",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebc0c62-cc51-474e-bcc6-8b5fd6368cf9",
        "cursor": {
          "ref": "da37595d-a8de-4c73-9815-c410548415c6",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "341df1c7-71d5-47f0-bf18-29f72fbae56b"
        },
        "item": {
          "id": "bebc0c62-cc51-474e-bcc6-8b5fd6368cf9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5b4d83a3-ccd7-4631-acbb-7aae307ba083",
          "status": "Created",
          "code": 201,
          "responseTime": 852,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "750859fa-8b64-4526-adda-14309bd53085",
        "cursor": {
          "ref": "0936dd6a-aafc-4a7f-a138-e75991a95503",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2249e2f7-e541-44b2-9f0f-61a695504949"
        },
        "item": {
          "id": "750859fa-8b64-4526-adda-14309bd53085",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "89d6938c-de7e-463d-bbaf-b76612fb41e4",
          "status": "Created",
          "code": 201,
          "responseTime": 940,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "455b7fb6-a703-4ed6-9108-c9b1967acd9d",
        "cursor": {
          "ref": "0cff3d8d-9ffa-4e32-9af7-4458f5b39b34",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "52cb2f2b-d869-40ff-847f-0e570b7b7fa2"
        },
        "item": {
          "id": "455b7fb6-a703-4ed6-9108-c9b1967acd9d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "974b304f-8975-4866-93f7-c2086068b6c1",
          "status": "Created",
          "code": 201,
          "responseTime": 756,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7c5c88-19c6-44e6-913f-3277e7d545ec",
        "cursor": {
          "ref": "8281ce62-f159-4625-9971-461766471170",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "81fa7f62-aeef-498d-a626-385bf9dafee2"
        },
        "item": {
          "id": "6e7c5c88-19c6-44e6-913f-3277e7d545ec",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0bad2ebb-155b-4145-969b-b47ba0c61452",
          "status": "Created",
          "code": 201,
          "responseTime": 773,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26f0f35-5219-4a21-8a27-e9bfb6efcc59",
        "cursor": {
          "ref": "a29d939a-3c0b-4d69-a245-102618d4e4a2",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5f8377cc-a31b-486f-b8e2-0cd879b1ab7b"
        },
        "item": {
          "id": "f26f0f35-5219-4a21-8a27-e9bfb6efcc59",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "83ba463b-0ab2-4989-889d-57abdc899c5a",
          "status": "Created",
          "code": 201,
          "responseTime": 779,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be6797c-89c5-4e46-982b-cfbfdfe1e7d2",
        "cursor": {
          "ref": "2f2ddc63-1085-48ec-b18b-61429e7a93b0",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d55824fe-017a-4b3d-a4f1-78bbba86d8b1"
        },
        "item": {
          "id": "6be6797c-89c5-4e46-982b-cfbfdfe1e7d2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "14fe7558-d554-49a7-a6b0-533efebc25a7",
          "status": "Created",
          "code": 201,
          "responseTime": 925,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a38a7a8-8707-40fc-b7cb-2c42e1b2f2fe",
        "cursor": {
          "ref": "39933258-bbd1-4e49-a1d0-b5ceff0d57f4",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "08527425-a5b6-40db-9c37-6d6d2c81dd0e"
        },
        "item": {
          "id": "4a38a7a8-8707-40fc-b7cb-2c42e1b2f2fe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c47a7e20-5a13-4f51-bf46-f78a5c5238fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108bd24e-132b-49aa-a672-1948ff38033f",
        "cursor": {
          "ref": "05f25d1d-d8a2-46d3-9c41-52aae15897ae",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "436e3bb7-d8b0-4d90-9d92-5ff21d841b7d"
        },
        "item": {
          "id": "108bd24e-132b-49aa-a672-1948ff38033f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c0bfc23c-c8cd-4869-9358-e222bfd6a247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9c7d8c-c45f-4e23-ad6c-e40910500a47",
        "cursor": {
          "ref": "7b51ffe0-b1e8-481e-b13f-68368a6f8635",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "81100822-ec42-423b-aca3-7ddfe762d80f"
        },
        "item": {
          "id": "fe9c7d8c-c45f-4e23-ad6c-e40910500a47",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "bd7aa72e-a75d-445a-aef4-4bb1f54ce31c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3b1288-0495-475a-988d-477ba390341e",
        "cursor": {
          "ref": "ab5c1885-06fd-4d04-97db-6bd761f1ca79",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "25842f70-19a3-41bf-8557-fbbd5421d54f"
        },
        "item": {
          "id": "0a3b1288-0495-475a-988d-477ba390341e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "06de63bb-ffdc-413c-a42f-76100fb155cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee22b13-a5fd-4e4f-a7a4-c993e348f08f",
        "cursor": {
          "ref": "424faab6-c4ec-4d68-98bf-c921c6ec07b2",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a08a18f5-6abe-4067-bdc2-7f65025eaa0b"
        },
        "item": {
          "id": "9ee22b13-a5fd-4e4f-a7a4-c993e348f08f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c562d521-a362-4371-8d5a-a9c05d7423c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e448671-8d90-4be9-964b-b52edf297fda",
        "cursor": {
          "ref": "e4f7aaf0-241f-479c-86f9-b5fec5286010",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5f56a2a5-b102-49da-a336-1c2e07475aa9"
        },
        "item": {
          "id": "8e448671-8d90-4be9-964b-b52edf297fda",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "86558b2c-5006-4e86-92e7-b31ce9a59faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44f7ec7-34ec-429f-9d92-925a918f3a7b",
        "cursor": {
          "ref": "20c99aa3-ac68-4d3b-8e05-79f1ab032fc1",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b6798322-f7c4-4f74-b437-db6ee6bbbf48"
        },
        "item": {
          "id": "d44f7ec7-34ec-429f-9d92-925a918f3a7b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "633209f3-8acc-4d78-b9f4-1732344088d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be6fa5b-616b-496d-845a-011a9d9862d6",
        "cursor": {
          "ref": "3e4d3359-0d01-4416-a268-5e6967579c6c",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c16df029-1a4d-43b6-8b44-9b3526ddab37"
        },
        "item": {
          "id": "3be6fa5b-616b-496d-845a-011a9d9862d6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "97ea8e77-c1ba-4fae-bf09-29463eb3d8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51d6b7f-8dc7-4e2c-ad0f-3bac5735cfa0",
        "cursor": {
          "ref": "0a27b4cd-d204-4509-b980-5fe9f285d970",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "75c1b970-835b-4609-ba5a-ec77c6ebbb62"
        },
        "item": {
          "id": "c51d6b7f-8dc7-4e2c-ad0f-3bac5735cfa0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0afe5cfc-d576-4692-a4b1-296eb6ffd23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fd2817-366e-4f14-925e-187746a972f0",
        "cursor": {
          "ref": "3485f8ce-a783-4aa2-9bae-08ce439d764f",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "06e801bb-c6ee-4302-ab5f-b190f6040b18"
        },
        "item": {
          "id": "f3fd2817-366e-4f14-925e-187746a972f0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "881f0300-a11d-4e8f-801f-2cf10f357b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b0d93f-29f3-4ffa-85b3-95c7fd96c9f1",
        "cursor": {
          "ref": "6bd4703c-0f07-41d2-b87a-958bf25d2889",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "81521fa3-c8bd-4422-a7bd-977b373ea123"
        },
        "item": {
          "id": "59b0d93f-29f3-4ffa-85b3-95c7fd96c9f1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9c332dab-5f53-447e-98ed-d73d1bffe3c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5cb0e0-4c1e-4d84-96d9-0f6008669a38",
        "cursor": {
          "ref": "90e785c7-555b-400f-a409-765544f6363a",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ca2fe4ac-269c-4b87-939c-e1300ed5a93c"
        },
        "item": {
          "id": "be5cb0e0-4c1e-4d84-96d9-0f6008669a38",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b1cd7960-2e36-405a-951a-eb2c2c49bf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce0798a-0510-4c44-b819-0629d0f0c321",
        "cursor": {
          "ref": "d320a2b9-fbaf-4cf4-aeb1-6719fcb7ab15",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f849ed8-8302-4f19-9fca-d70666921998"
        },
        "item": {
          "id": "8ce0798a-0510-4c44-b819-0629d0f0c321",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e231cb61-3fc0-4546-a3ca-83a5d73bb883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa9c696-7cd0-4831-b3b8-4fafb282281b",
        "cursor": {
          "ref": "5f638059-cc7b-473e-b51e-ee38db796f08",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "505524ec-6152-48c5-94d4-25e30f8a6d45"
        },
        "item": {
          "id": "1aa9c696-7cd0-4831-b3b8-4fafb282281b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8e60c9c4-46fb-48fc-86ba-49689379c030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f89234e-cd92-442a-bb15-21b023f1053c",
        "cursor": {
          "ref": "115bbcec-2120-41cd-9993-d9ded0f801e3",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3fc76579-364c-4dec-b97c-2c605bf9d24f"
        },
        "item": {
          "id": "4f89234e-cd92-442a-bb15-21b023f1053c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0b589f7f-5d5d-42af-9def-8d5a7aa4dd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e0f058-2ae8-4c17-938c-a6281b124754",
        "cursor": {
          "ref": "79e11715-b005-4cab-aece-1e7d2b79caa9",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c4a9a536-ccc5-4762-a101-2c700a266c3d"
        },
        "item": {
          "id": "d2e0f058-2ae8-4c17-938c-a6281b124754",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5ae723d1-72a3-402e-ab3e-9329fa5c3a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14e60db-d026-4270-b0c1-311c09aec8f9",
        "cursor": {
          "ref": "1f5c9704-0907-4110-a00d-fd9cf10f82c9",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "adce9a59-0d11-4f9d-b4de-b43e9c4ac2e5"
        },
        "item": {
          "id": "d14e60db-d026-4270-b0c1-311c09aec8f9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f477968b-a0fd-42bc-9f11-464d97d38fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49e2d5a-1cc0-435e-826c-7f4152e18f1c",
        "cursor": {
          "ref": "8438ad28-7b7b-4e84-8706-0c7588d11b15",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dd657f54-9477-4086-8a8f-d16dc02abd30"
        },
        "item": {
          "id": "a49e2d5a-1cc0-435e-826c-7f4152e18f1c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "458341ff-21a6-41b4-96f6-fc01401ecdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc460f4f-6756-42f7-b5ce-458976f0d022",
        "cursor": {
          "ref": "ad62d0d3-401a-4791-a513-bea25bc29eda",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0f53cf3a-1b65-40bf-9e22-7dff0960d377"
        },
        "item": {
          "id": "cc460f4f-6756-42f7-b5ce-458976f0d022",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bdffae67-c21d-4bb4-b655-8a6be9dadef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4d41f2-b536-46ff-8ac2-9dd41fec3257",
        "cursor": {
          "ref": "2ea8ecdd-79f6-455d-a1a5-bcd03d4ba8fc",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "22baf7f2-996c-4851-9d21-b93c0b68b517"
        },
        "item": {
          "id": "4b4d41f2-b536-46ff-8ac2-9dd41fec3257",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "62b6abda-b29c-40a6-8690-e3e6dbcb700d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d935ed-120f-443b-b956-4c4275805adb",
        "cursor": {
          "ref": "d0233c03-8e12-4a8c-9498-d19f14b5d037",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1262212f-a22a-4c5b-bdf3-69e49399c601"
        },
        "item": {
          "id": "c7d935ed-120f-443b-b956-4c4275805adb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb1cd087-2e18-45fb-b08e-c1cea8c82b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd90f950-00eb-412c-b17b-f47327606f34",
        "cursor": {
          "ref": "c9070186-8985-4fce-8687-9df17f936a4b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b2a4c1a6-b4f4-470d-bada-ce4fa628f614"
        },
        "item": {
          "id": "bd90f950-00eb-412c-b17b-f47327606f34",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d99c5e33-fabd-491e-b2c3-6dc1fc211db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bf354a-d714-44e6-9bc4-09d31f2e5b1a",
        "cursor": {
          "ref": "b81fb727-a1f5-430f-b0ad-9c8dbe5dd6d3",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "29bc0dd7-1dd3-4c32-8139-765e1ffccc62"
        },
        "item": {
          "id": "51bf354a-d714-44e6-9bc4-09d31f2e5b1a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bf0ff5a8-aee5-408d-854c-13b542b829e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def1ce7a-9ca6-4199-8356-53830cc3fc61",
        "cursor": {
          "ref": "80839e08-8d8c-4cec-a3cc-347dace7ff23",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a230ee1e-08f4-4d61-925e-361213a21adb"
        },
        "item": {
          "id": "def1ce7a-9ca6-4199-8356-53830cc3fc61",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "66176303-94c9-4cc7-90a6-fe32997469ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c13ea4d-5e0b-45e0-b1eb-0623e6e2af94",
        "cursor": {
          "ref": "123ad246-ba3d-43bd-884f-669efb0a835f",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a55a20a3-20d8-43ca-b2e7-ad3d40a988dd"
        },
        "item": {
          "id": "3c13ea4d-5e0b-45e0-b1eb-0623e6e2af94",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ee0933ca-09e9-42ca-ab73-1641834f6402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b5f381-3be4-4943-ac04-8601d3e0dcc7",
        "cursor": {
          "ref": "9d915086-7e47-4548-a9e4-d662da2c9349",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b857662b-da29-47d7-8279-0f2108a2c5cf"
        },
        "item": {
          "id": "90b5f381-3be4-4943-ac04-8601d3e0dcc7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3edac140-dfa7-4f1f-9a10-7bceffce5929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9f5cf3-9d7f-4554-9602-d43de69e0b34",
        "cursor": {
          "ref": "58660dc4-3c69-44c6-bce1-fc5862e29b45",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ac640335-11e6-4c78-9fd4-b691d6985229"
        },
        "item": {
          "id": "3a9f5cf3-9d7f-4554-9602-d43de69e0b34",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7c841c82-a856-4700-837d-4b40d2c93fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3779638-22c9-4ff3-884b-b9e867accebe",
        "cursor": {
          "ref": "fb947861-f0b4-421d-9bf3-8e51911ce756",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bb264472-125a-490e-80f2-7107a3f8773d"
        },
        "item": {
          "id": "c3779638-22c9-4ff3-884b-b9e867accebe",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b826b4fb-f0d9-4bf3-abcf-e7c08ab00083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f237c8-8a06-4f74-b354-bd89450558bc",
        "cursor": {
          "ref": "8f8e338e-df64-4bb5-8f1b-9bfa582dc6b6",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0fc24c14-a3aa-478d-894f-43b82ac263ad"
        },
        "item": {
          "id": "45f237c8-8a06-4f74-b354-bd89450558bc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4ec5b07e-32b4-481e-83a6-3e9180bcd16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18622fd6-1389-4d7c-a9e3-0dce099796df",
        "cursor": {
          "ref": "17b11570-7576-479a-90ee-1dbc25b237f8",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b5674cbf-f9f7-49ff-8fb7-dff19d13eda2"
        },
        "item": {
          "id": "18622fd6-1389-4d7c-a9e3-0dce099796df",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "95fd5bf1-9b92-4707-8bc5-190742f26d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b602054-6d88-40de-aa0e-70ea774f9832",
        "cursor": {
          "ref": "c84e606d-8ae0-45b1-a5ed-d3c7133abf23",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ce5ed184-22c8-4f37-8bd1-47b5c64c95ef"
        },
        "item": {
          "id": "0b602054-6d88-40de-aa0e-70ea774f9832",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "02108003-1948-4b52-8b7a-87ebaa656810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cdaf7a-7b51-4b20-b5b6-c6d57db9995d",
        "cursor": {
          "ref": "fcdd2ca5-38bc-4fec-af5d-5633ed3c4af0",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a88f1ad6-a448-48be-9475-846cbc8e71a9"
        },
        "item": {
          "id": "e4cdaf7a-7b51-4b20-b5b6-c6d57db9995d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "36b33249-bd1b-4615-80a7-b46948807a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018fbd5c-9204-4dea-8de0-27f66120c870",
        "cursor": {
          "ref": "0b7a2595-6979-4c70-96ae-602d681881fe",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "29c3e4c5-5754-478a-b124-27192319a6b4"
        },
        "item": {
          "id": "018fbd5c-9204-4dea-8de0-27f66120c870",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "63c6c8bf-a501-4b11-9137-b1d47e8c7073",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d04719f-0e0a-4ddf-af6a-68550439740a",
        "cursor": {
          "ref": "9beaff63-f2ff-4034-9999-dae912d128d3",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4c1d2887-4385-4d60-913e-399837718bc4"
        },
        "item": {
          "id": "0d04719f-0e0a-4ddf-af6a-68550439740a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3357a658-b6a7-4b82-8cba-541a7da68e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b437f8ee-a53e-49e4-8679-a8937215f815",
        "cursor": {
          "ref": "64808ed5-b086-4c83-84d4-d4553d01dccd",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f2d1ca4f-038e-415a-8263-56748871cfd5"
        },
        "item": {
          "id": "b437f8ee-a53e-49e4-8679-a8937215f815",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "37555b3b-548a-4ab5-8bdd-b376461e9242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb5bee7-21c4-4e3c-bc80-74a33ad0be87",
        "cursor": {
          "ref": "c3619ce2-177a-4722-ab3d-560f0ec4c57c",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "18eff2a5-aed2-470a-b490-0fb26a530663"
        },
        "item": {
          "id": "deb5bee7-21c4-4e3c-bc80-74a33ad0be87",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2cd04c55-ea12-46f3-bd88-e8cdefb8b56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dc4c9c-8c00-4e3a-b45c-dc8264dd3e79",
        "cursor": {
          "ref": "278e9ece-15ab-4607-9b8e-3c5c536aed05",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2979dc6c-9bb9-4b56-8dd7-2921e28dc116"
        },
        "item": {
          "id": "f1dc4c9c-8c00-4e3a-b45c-dc8264dd3e79",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8341fd68-fa57-4b72-88c1-7ff853d004e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a28a47-1a70-4ee1-bb3c-7009d9d64c93",
        "cursor": {
          "ref": "ddabb704-f94c-477b-a62e-e3125cffa66a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d6f1b8fd-1963-4a44-9fe9-35f62baa4a6d"
        },
        "item": {
          "id": "01a28a47-1a70-4ee1-bb3c-7009d9d64c93",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b7ade3ab-9e1f-4d8f-8ea2-e39faa3d809e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816bc2b9-4279-41f1-a6c6-87cdbf857c62",
        "cursor": {
          "ref": "c5039d0e-b660-4b8e-b91a-73df266235e6",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "21ad19c0-1252-40b4-bfff-d32f0956a5b1"
        },
        "item": {
          "id": "816bc2b9-4279-41f1-a6c6-87cdbf857c62",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7acf6aa6-4dc1-40f8-9d7a-28fbdd621a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93137f44-220b-403b-bab1-5caae1edc7b5",
        "cursor": {
          "ref": "3e25c1d2-0100-4516-94f7-0cf7a646c1c2",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6be9dd79-582c-4281-afdc-1fc2942f5f16"
        },
        "item": {
          "id": "93137f44-220b-403b-bab1-5caae1edc7b5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "244aa116-3160-4897-987e-466474e70a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d094646e-f982-4685-9def-25157f3bf8ad",
        "cursor": {
          "ref": "3b07f314-3e3c-4bca-bb1f-b37a53017136",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "865c1065-0002-4d68-a462-41e834d6d863"
        },
        "item": {
          "id": "d094646e-f982-4685-9def-25157f3bf8ad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3ff933a6-d82f-48d1-931c-d93801b48ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a20a33-b39c-42b1-a0c3-165be0bfca3b",
        "cursor": {
          "ref": "6f154374-b933-4af0-aa8f-086f64dd34c5",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f9196226-2913-484b-9c62-44cd7e7ef400"
        },
        "item": {
          "id": "e6a20a33-b39c-42b1-a0c3-165be0bfca3b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db7702d3-0e77-41db-ad2d-443752e3b907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c01241d-862a-49eb-a80e-dbd1ef16e817",
        "cursor": {
          "ref": "f96bb1f5-14d3-48b3-907c-15124aa4174c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "578a76b5-dbd7-40b0-98e6-5b5867cc31d0"
        },
        "item": {
          "id": "2c01241d-862a-49eb-a80e-dbd1ef16e817",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac48b989-3193-4f8c-82dc-541d61577985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60767e08-8fa2-442b-9d2d-03c5c012e68d",
        "cursor": {
          "ref": "7281593d-009b-4532-8531-50618437824c",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c6db184a-bfd7-4eca-9717-e30acc2e1754"
        },
        "item": {
          "id": "60767e08-8fa2-442b-9d2d-03c5c012e68d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a12060d6-ee4a-4c9a-921c-c5c1c346d62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8838950-808a-4204-97aa-3c094374a482",
        "cursor": {
          "ref": "0cd66059-b7eb-439a-bccf-e6e96b9f6dca",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9a11839a-65b9-4eb2-88d3-3c5bde7c8a19"
        },
        "item": {
          "id": "b8838950-808a-4204-97aa-3c094374a482",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d0f05010-c165-4e1e-abbb-d6e231c76cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0194c1-ac5d-42bc-a576-f0ea31a00208",
        "cursor": {
          "ref": "651038e9-960c-4b7f-bf6c-d4edd6a007f0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f0bd85c5-c84c-461d-b853-c4abb37bb405"
        },
        "item": {
          "id": "3d0194c1-ac5d-42bc-a576-f0ea31a00208",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b8898617-d4c3-4670-8c8e-c4764b995951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5751b3-02a6-4475-a97c-9f632f7f9534",
        "cursor": {
          "ref": "405a64a2-86ff-4e4f-a8ef-dcd44fb29f31",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6da0e47b-9d8b-407d-9585-c6ce8118ff77"
        },
        "item": {
          "id": "1a5751b3-02a6-4475-a97c-9f632f7f9534",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dd9bd988-4d0f-4290-a76a-13db347c000f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eca546-5705-4b0b-af4a-6f665c2a5828",
        "cursor": {
          "ref": "cba66570-b927-46bf-976d-2a2bd4ea7590",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "64f0358b-37b9-4d72-ac16-18c12a5afa4d"
        },
        "item": {
          "id": "e0eca546-5705-4b0b-af4a-6f665c2a5828",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "74652f88-6df3-4e62-b94b-f7cc4439aff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253502e7-2203-4fb8-9c89-a579c184071f",
        "cursor": {
          "ref": "92cb4536-3982-4066-b413-21fccff8938d",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f6fdbe1d-bb0e-4079-aaec-520d722a8c1c"
        },
        "item": {
          "id": "253502e7-2203-4fb8-9c89-a579c184071f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b057500b-54cf-4e3c-a64c-2e76c75098a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1293ff-30d9-4bf1-89d9-d9e58deba2d0",
        "cursor": {
          "ref": "04a6be20-bf37-465c-9a67-9d62019e1dc0",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a46ced58-6dff-41d6-812c-d9a9403c1ff4"
        },
        "item": {
          "id": "ca1293ff-30d9-4bf1-89d9-d9e58deba2d0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0332b6ef-6f25-4239-b5f3-015ba7f0d4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620eccfe-b1ac-4131-ad4e-744743dfdb9f",
        "cursor": {
          "ref": "cf52582b-09e6-4e17-bc14-01429bbf34ca",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7bb30fdf-b15e-4432-800c-87286dc4fdef"
        },
        "item": {
          "id": "620eccfe-b1ac-4131-ad4e-744743dfdb9f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2bb9f2bb-49d3-4bec-9360-00774d9308de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b100995f-f9ae-4b7e-8867-3803be8d10ba",
        "cursor": {
          "ref": "159a2060-1e3b-4ebc-958e-6f7942da4516",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d4515b57-db3f-4a6a-a102-a10b08924290"
        },
        "item": {
          "id": "b100995f-f9ae-4b7e-8867-3803be8d10ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "162d1088-1891-49b5-bd1e-26463a3e6cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba8cda5-5bf2-49b1-b21f-53e5bf37ada1",
        "cursor": {
          "ref": "9cc61e31-070a-4e79-bd43-f8fea562a874",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "473bea55-64ca-4105-87f2-08579f84cfb9"
        },
        "item": {
          "id": "1ba8cda5-5bf2-49b1-b21f-53e5bf37ada1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "375dcd9b-952f-4a11-9c5a-49d4020223a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ac5479-bb15-4617-a2bb-e63a55716b29",
        "cursor": {
          "ref": "d44fedff-7faa-4258-886a-042cac1d0c3d",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a764a8bf-af89-43fe-adcd-82560aea7887"
        },
        "item": {
          "id": "a4ac5479-bb15-4617-a2bb-e63a55716b29",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4cbd4239-6b1a-4eac-93b1-a181c6f1ed3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2d892a-b0ec-4878-b4cb-01f6fe9f9839",
        "cursor": {
          "ref": "1a01561f-f226-4949-abc6-37e621dd1063",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0faeabef-85d9-4d7d-9f75-b08d3077a385"
        },
        "item": {
          "id": "5f2d892a-b0ec-4878-b4cb-01f6fe9f9839",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "160d81c3-39f9-421d-96fd-87a711f76aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd586298-a718-430b-85d9-5d9be3c4cabe",
        "cursor": {
          "ref": "aa76896a-e1f6-44d3-be6e-1f019b1a7475",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "94a57469-cb18-47e5-9873-1b5e702a5e52"
        },
        "item": {
          "id": "bd586298-a718-430b-85d9-5d9be3c4cabe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f5126aa1-c840-44ae-a69c-05952976c06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b3b3d5-4921-4573-9326-02e60c5fa8dd",
        "cursor": {
          "ref": "a15039ef-48c7-4832-ae31-efef63233115",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f9e4f01e-73b2-4b26-997c-7bac8b29a2b9"
        },
        "item": {
          "id": "41b3b3d5-4921-4573-9326-02e60c5fa8dd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "41cc4493-8c3e-4aa3-87b0-60259694d729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea04c26e-c982-4556-ad9f-7a69a3c8a563",
        "cursor": {
          "ref": "71e8d0cb-f531-4a70-888f-1e5fe048a3b6",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7af2f89e-e898-453b-b3fd-376bb364f6fb"
        },
        "item": {
          "id": "ea04c26e-c982-4556-ad9f-7a69a3c8a563",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0242100b-b3ce-46bd-a4f7-d7d5965a69c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e972c45f-5195-4776-bf8b-0fcc84a71d40",
        "cursor": {
          "ref": "5d41a83b-7c4e-4bd2-b252-88ca645f2248",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c30a1a86-2e70-4f5e-8f3a-e2fa83c0cef9"
        },
        "item": {
          "id": "e972c45f-5195-4776-bf8b-0fcc84a71d40",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6ec76dbf-2552-4e40-9447-44e6477d78bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc653369-9a72-4698-8042-31aba098859f",
        "cursor": {
          "ref": "df654d75-5214-4770-812b-79e5a900a883",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "89e4b659-1387-460e-9cef-8d865acc4167"
        },
        "item": {
          "id": "dc653369-9a72-4698-8042-31aba098859f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d6325e71-41c9-49c7-9931-a3fc1717a1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625ed741-d64c-461d-92f5-85cce415a016",
        "cursor": {
          "ref": "ed206682-dac2-4c96-a533-a6751763bcc6",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c2292788-381c-4835-96a8-29cc8e29665f"
        },
        "item": {
          "id": "625ed741-d64c-461d-92f5-85cce415a016",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6841cb41-1007-483b-8489-776fdbfef941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2c17d3-c354-407f-947f-687146909408",
        "cursor": {
          "ref": "96f8030d-5b28-4f03-af6c-011e71d10897",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "deac8cf0-4f4e-410f-8cc8-77c24e327bb9"
        },
        "item": {
          "id": "8b2c17d3-c354-407f-947f-687146909408",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0717a10d-e59a-48a4-bbc1-435e20d9b1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5bb21f-f892-4dce-835e-80eafe3d729b",
        "cursor": {
          "ref": "9d07dece-e771-4115-b985-a00512e556ec",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d0b0cc59-3b1a-4604-a964-3f6d5e27451d"
        },
        "item": {
          "id": "da5bb21f-f892-4dce-835e-80eafe3d729b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "749cbc93-efa3-4ee4-af62-efd31454e842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022e51ee-d333-4b71-89f6-4a1c182e15e3",
        "cursor": {
          "ref": "6dc4bddf-b675-482c-a6c4-bf5aa6232442",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0db96933-40be-4368-92ee-31b07c4ac69b"
        },
        "item": {
          "id": "022e51ee-d333-4b71-89f6-4a1c182e15e3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "85a9ed62-6e5a-4b5b-8f35-64ae22650e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb59c343-329f-4300-ac37-93fa1b86fcc6",
        "cursor": {
          "ref": "d46698d7-6c96-4b8e-8669-438d2d842a7d",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f3ab783b-f02c-473e-bcda-356d77cbbe52"
        },
        "item": {
          "id": "eb59c343-329f-4300-ac37-93fa1b86fcc6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e4128a4c-345d-47f7-83e3-c29f9b0ba524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498bb417-97a5-4797-8901-a21fa3b93cf6",
        "cursor": {
          "ref": "356cf450-b482-4c73-a887-7f0944f61833",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2a822d2f-8111-4cf9-9661-d2a8799de06c"
        },
        "item": {
          "id": "498bb417-97a5-4797-8901-a21fa3b93cf6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "df7f359b-dda5-4da3-877a-ba44cd81b2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02383c9-8fe5-43b7-98a8-c0874ab5f092",
        "cursor": {
          "ref": "c9ac8646-8f9d-420a-b6c5-02441aaa0532",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d7d4689d-0dd7-424b-9452-0ffb5e700873"
        },
        "item": {
          "id": "d02383c9-8fe5-43b7-98a8-c0874ab5f092",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0480633f-4ff4-4624-a410-e1cf07541c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993efb20-576c-4e60-baab-a5b28852ce42",
        "cursor": {
          "ref": "6338d633-41e2-47cd-8c4d-5e1f703d3ef3",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "800c66f7-0a12-4d9c-b369-2423e30a6b1b"
        },
        "item": {
          "id": "993efb20-576c-4e60-baab-a5b28852ce42",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e8b0c069-d4b3-4b2e-b562-d6d59256c77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc267528-9aee-4679-9e6f-607136001140",
        "cursor": {
          "ref": "773bb372-3a9a-4c62-aa7e-cd3e16708b98",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c4d34bfc-2107-40d0-8a23-31597c34da56"
        },
        "item": {
          "id": "fc267528-9aee-4679-9e6f-607136001140",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c98eb0ce-2b77-4cb2-a1b2-0c6240f6f393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e78aa3-56f7-4ed2-adc2-9385651dcb82",
        "cursor": {
          "ref": "d3ce3544-bf13-427f-8658-3c089ee58451",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f9e9fd86-54bc-4b6c-9093-94bab8bf051d"
        },
        "item": {
          "id": "78e78aa3-56f7-4ed2-adc2-9385651dcb82",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0cb91d58-7892-408b-a34d-47abfdc2b7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b6247e-1f12-42d5-ac4f-5e8b9e63c04d",
        "cursor": {
          "ref": "647507fd-9b09-4e73-8770-5261230ca819",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bf911683-6479-4fce-8a4a-fb66462a7e22"
        },
        "item": {
          "id": "22b6247e-1f12-42d5-ac4f-5e8b9e63c04d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3352ddeb-d0d4-4290-b559-a7a5d9928ced",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f773ae36-18eb-46c3-93a9-ca839e5e48e6",
        "cursor": {
          "ref": "5ee9b58f-085e-498e-b468-a7409dde4a8c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0cfd9f80-125b-4051-8636-05c36f844c2d"
        },
        "item": {
          "id": "f773ae36-18eb-46c3-93a9-ca839e5e48e6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b2611eae-6224-4ed5-8bcf-a2948557df3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d342c5-ac79-4888-a23e-a4e1666e7ac7",
        "cursor": {
          "ref": "0e84a86b-eacf-44b6-8252-ccb2cb0d77d9",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "607a5159-1708-4599-915c-c25d3fd8b922"
        },
        "item": {
          "id": "58d342c5-ac79-4888-a23e-a4e1666e7ac7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cef29518-1bed-444a-b926-626e0c61e821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a1f7d6-7351-435e-abac-e9f7789daf36",
        "cursor": {
          "ref": "7b0c832b-bbcf-4ef0-9313-e2a03dffd313",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "46eda661-7ac2-4e6c-94b0-1a6a1c44805e"
        },
        "item": {
          "id": "94a1f7d6-7351-435e-abac-e9f7789daf36",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "11506487-804e-4984-9fca-f228d8552a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81db5d16-493d-4a00-bc86-ac4cf36a4822",
        "cursor": {
          "ref": "ca7da5c8-96d8-408b-8bfe-339925edf73f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c7e7da0b-f313-4a4f-85ef-7228982e631d"
        },
        "item": {
          "id": "81db5d16-493d-4a00-bc86-ac4cf36a4822",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fa99c353-ee1c-4851-90f2-028ec79c4520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c37b52-8e02-40eb-a5ad-b717f01d4f5a",
        "cursor": {
          "ref": "3f5060df-e78c-4b5e-9b5c-0e48a1606dac",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "245ee392-781a-4d63-b061-26be798df50d"
        },
        "item": {
          "id": "a2c37b52-8e02-40eb-a5ad-b717f01d4f5a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "44cb88cd-94a5-4542-9260-d2b5a75c09ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5832b4-2dcb-43cc-b7f4-304b12fd4265",
        "cursor": {
          "ref": "b3288047-4772-4d0e-9a16-dd5412facefe",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2172d3d2-5e18-4494-87cd-f71a85d04e60"
        },
        "item": {
          "id": "6e5832b4-2dcb-43cc-b7f4-304b12fd4265",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5b0c7cf8-458d-49ba-ac55-2555fcba1b57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dd02a502-ee5a-4dcb-83c5-9235bf24cae2",
        "cursor": {
          "ref": "e4ee94d3-0b8b-4d32-a6f0-52c72a3777ba",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fbcda163-bbce-42e5-b976-cba3b772b1c6"
        },
        "item": {
          "id": "dd02a502-ee5a-4dcb-83c5-9235bf24cae2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "76b347dd-2a61-4f13-b0e8-f3360a3bc371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabe20a9-d21c-4bc0-b269-a85125c9c566",
        "cursor": {
          "ref": "3001a4f1-8cb8-49ef-a111-50ea9b54726b",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "810bf3d3-4bb6-4de2-a338-05062eeed213"
        },
        "item": {
          "id": "fabe20a9-d21c-4bc0-b269-a85125c9c566",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dd4c746b-282d-4d0d-98d3-d93d42dd69a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5329abc4-9a26-4854-beeb-e354f9231247",
        "cursor": {
          "ref": "e1de43c1-7323-426f-8327-5eed96d4378c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "35e07aa3-c634-41e7-bfb6-69f1dc59254f"
        },
        "item": {
          "id": "5329abc4-9a26-4854-beeb-e354f9231247",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47703b2b-3f33-4334-a616-aef112a61cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa433cd-db23-45fd-8e41-cc63df7a78bc",
        "cursor": {
          "ref": "8ce97475-d4d4-4542-b203-592aa219eb78",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "441e428f-63e0-43e8-99c3-0538961c0b19"
        },
        "item": {
          "id": "caa433cd-db23-45fd-8e41-cc63df7a78bc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6e2eb285-7f78-4779-b576-458bbbe1dd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0655d78-0e48-4d6b-84f2-27cd2b0001b9",
        "cursor": {
          "ref": "afd487c7-4287-4baf-84fc-88c5463cb563",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "119d86ea-7504-44b5-a173-72e6ffeeb87f"
        },
        "item": {
          "id": "e0655d78-0e48-4d6b-84f2-27cd2b0001b9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4abf7bda-19c1-4488-9a24-2c630fc3922f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5ae3492-7f08-45de-992e-3f47c9e81aa2",
        "cursor": {
          "ref": "bf63ea87-50f9-4fdd-85e5-0aab8a844f20",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4966fa52-4ee7-4abe-b8cc-80797e1cf110"
        },
        "item": {
          "id": "a5ae3492-7f08-45de-992e-3f47c9e81aa2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f597c9ef-4b93-44be-9b65-ef316a4cb6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef99635-e715-444c-a6bf-01944149811a",
        "cursor": {
          "ref": "7a5aa17b-d6a4-4050-ae43-abd8e64aa456",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "354359cd-e880-489a-853c-31b7eb4197e8"
        },
        "item": {
          "id": "2ef99635-e715-444c-a6bf-01944149811a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "887c4f8b-ba30-4e6d-ad11-c3192e043211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381823e0-d7af-45ff-af90-a7d93a90110e",
        "cursor": {
          "ref": "aafd5074-4b2e-44a4-9af8-a7606d74d643",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "44539f41-ad17-46c1-98fa-d0d22ac38f20"
        },
        "item": {
          "id": "381823e0-d7af-45ff-af90-a7d93a90110e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fb62fa97-7076-429b-aebd-97d58d4ef3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cee10e2-abfb-4c20-ac63-5ddd6ce7893a",
        "cursor": {
          "ref": "6d2d45b3-d004-4f41-91a7-190c9d4cb222",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "09297171-dc28-492d-ab0b-2b109189c5c9"
        },
        "item": {
          "id": "5cee10e2-abfb-4c20-ac63-5ddd6ce7893a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ae054c82-7442-477f-92aa-39812370c35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8782346-f31d-42b7-968e-3f13cd8e9c9d",
        "cursor": {
          "ref": "fdc950b8-acc6-47f4-837c-1d59728a0170",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "55e9d7d4-57b0-40ab-b54a-2bfb6a6e8c20"
        },
        "item": {
          "id": "b8782346-f31d-42b7-968e-3f13cd8e9c9d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "78ed3342-3394-470a-bfed-5c4928813f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858c8ecd-6807-46f7-a935-a01753cad718",
        "cursor": {
          "ref": "46228773-14a7-477c-a07e-e7241bada32a",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9f39d5d0-d47d-4859-baac-b64ad58c00ce"
        },
        "item": {
          "id": "858c8ecd-6807-46f7-a935-a01753cad718",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "327c6bb7-c56e-4849-aba2-e798da856dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b91a95b-69d3-4789-8831-8f47b6b43510",
        "cursor": {
          "ref": "80b7f7c0-9ab0-448f-ac46-7a247f3981f6",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9638edd0-3af7-4d12-83c2-59e4ff8d04a1"
        },
        "item": {
          "id": "1b91a95b-69d3-4789-8831-8f47b6b43510",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38c0905d-6dc7-49ad-9654-f54ea7d8c6d0",
          "status": "OK",
          "code": 200,
          "responseTime": 620,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "2852294b-d1e8-47ad-a49b-491335982e44",
        "cursor": {
          "ref": "8b7627ff-53c5-4c32-a591-40b9fd116130",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c6204c60-f53c-4089-b3c7-3d6acdb05ea8"
        },
        "item": {
          "id": "2852294b-d1e8-47ad-a49b-491335982e44",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "47288198-a2d6-4647-8dbd-24159e2d234d",
          "status": "OK",
          "code": 200,
          "responseTime": 642,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "17712270-31dd-485a-9334-0badc050edbf",
        "cursor": {
          "ref": "c2b84a3b-c870-4e20-983d-d6da21e94b93",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9f0b9425-b282-4383-a6c5-703e2be8c87b"
        },
        "item": {
          "id": "17712270-31dd-485a-9334-0badc050edbf",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "38aa62b3-0b5a-4374-ac02-e5c485ac6965",
          "status": "OK",
          "code": 200,
          "responseTime": 968,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "843e731c-1d1c-4625-9cd1-6df69fdc25ec",
        "cursor": {
          "ref": "909c3765-a96d-4010-91fc-15461a65cf93",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "11cc7f30-8272-4a3e-a798-59af4dbbdfaa"
        },
        "item": {
          "id": "843e731c-1d1c-4625-9cd1-6df69fdc25ec",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "52a324ce-1dfc-47ae-94c9-15defc3ab7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a8ebbf-fc00-452d-a705-6c321b50051f",
        "cursor": {
          "ref": "cd6de84b-3d3f-4fc0-914c-e66064ecfa64",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "92e4e204-4607-45c3-865e-5a40c81b27e0"
        },
        "item": {
          "id": "99a8ebbf-fc00-452d-a705-6c321b50051f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "58f7ca30-0a76-4e65-8a6d-4ee6c1d2030f",
          "status": "OK",
          "code": 200,
          "responseTime": 615,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "5af80bd5-fcaa-45f8-8098-8bf8ebe1af22",
        "cursor": {
          "ref": "7c6212c5-719e-4bb8-9218-4f1412f9a54c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "13aa06a2-54b9-4266-93fc-7a6dbd414882"
        },
        "item": {
          "id": "5af80bd5-fcaa-45f8-8098-8bf8ebe1af22",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c9911c34-8eb4-430c-b41b-bf6c3cb42932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd42314-de63-4b3b-8b2d-50bfbef330d9",
        "cursor": {
          "ref": "f482ebd2-0868-4484-91eb-508493015783",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d85a6bb4-397b-48f1-9542-9d9746e8c409"
        },
        "item": {
          "id": "4fd42314-de63-4b3b-8b2d-50bfbef330d9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "39d2f873-bc8f-44ed-bc56-5022d0df35a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1761cb-75ef-4511-91da-20f09b5ca00b",
        "cursor": {
          "ref": "52049e17-ec87-467f-b142-7be8171e3dd9",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7333cd63-67fd-49e5-b3de-2ed2cde94fd6"
        },
        "item": {
          "id": "fb1761cb-75ef-4511-91da-20f09b5ca00b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "08830c93-1cfe-430b-b23a-d95bf2b1c77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d30e049-d50a-44cc-a2ab-6b5a262b2205",
        "cursor": {
          "ref": "a215a06b-982c-4a0b-ae0d-d2a8bd6f6308",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "71d156af-b1eb-4db8-82c0-56cde1ef5d85"
        },
        "item": {
          "id": "6d30e049-d50a-44cc-a2ab-6b5a262b2205",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9627f9a6-6b21-4d1a-8962-ff427155e90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32483cd2-aa8b-467a-bb8f-1df7a3b7b32c",
        "cursor": {
          "ref": "2063ec88-0f63-4d56-818d-bd64b7320a9b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "105769ea-f7aa-4d21-a54d-5eec034963c2"
        },
        "item": {
          "id": "32483cd2-aa8b-467a-bb8f-1df7a3b7b32c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a6537896-3cc9-487e-819d-b617feb9a977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13901a04-f845-40d2-805a-8bfec2da1a3e",
        "cursor": {
          "ref": "303f8b64-44fc-4b30-974c-8cffa3a7848e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c4887538-5d8b-4974-8286-21fe6d8014c0"
        },
        "item": {
          "id": "13901a04-f845-40d2-805a-8bfec2da1a3e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8dac02d8-2da3-47e0-a94b-110c2befc808",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "d01c701d-07a7-4127-a2c8-bb9fceb92ff9",
        "cursor": {
          "ref": "3e744eea-31bc-4048-9c40-e41b931a087a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "112d6251-d056-4dc4-bd01-b321f04be867"
        },
        "item": {
          "id": "d01c701d-07a7-4127-a2c8-bb9fceb92ff9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d041ab46-b3bd-4594-9ac9-765cb95dee98",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ebc7c2aa-0150-4005-8d63-e19a6d4bdb21",
        "cursor": {
          "ref": "ae42b91b-15f8-4fc0-b2dd-c26f38eb9129",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b0bc1e01-0eaf-4a7d-af24-accc98a74343"
        },
        "item": {
          "id": "ebc7c2aa-0150-4005-8d63-e19a6d4bdb21",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ce59e787-16ac-461a-ac73-4a1ac2dd541f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9f9d2a-7169-4ee2-ba7f-0518bb3a0fda",
        "cursor": {
          "ref": "3e253669-8fe6-4105-9466-cd0b034977f3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "916e14fd-b6cd-4725-b67d-d8d078ddc8a5"
        },
        "item": {
          "id": "9f9f9d2a-7169-4ee2-ba7f-0518bb3a0fda",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f0e7c7e2-2ee1-48c0-a7d9-704df99a3781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f667b5-3b7f-4ada-9635-9cd49a6c104a",
        "cursor": {
          "ref": "311f66cd-b1be-4eab-98b5-efd47e63aa38",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d54019fd-cf86-4539-b048-9ec5e0561a91"
        },
        "item": {
          "id": "d6f667b5-3b7f-4ada-9635-9cd49a6c104a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e9af32b7-2202-4e53-a128-97e05563189e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2329285a-090e-4c6f-8836-ed147eec80cb",
        "cursor": {
          "ref": "85525802-06d3-44f0-82e3-f56fd6785cd6",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7004d6e8-40a3-403d-b8fe-1c8563708b34"
        },
        "item": {
          "id": "2329285a-090e-4c6f-8836-ed147eec80cb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "76aba6df-0703-489e-b8f1-77d41de8501a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da82ea0-a3ba-4818-ab15-315990f18f9b",
        "cursor": {
          "ref": "4103db52-9254-4892-abc1-19a5e3e53ed0",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "927fac99-d5dd-426e-862f-e70dcf4ba00d"
        },
        "item": {
          "id": "5da82ea0-a3ba-4818-ab15-315990f18f9b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f9b190e8-8a93-40fc-8955-e8e7c0232368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6826a0-021e-497d-89cc-8156b2d94ffe",
        "cursor": {
          "ref": "e836e95f-0e1e-4a6c-9d3e-9eca64f3e675",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f2007f0b-69e2-48a3-8948-a257023eb9cc"
        },
        "item": {
          "id": "2e6826a0-021e-497d-89cc-8156b2d94ffe",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d373cf60-5772-4e46-b445-8b5b31a573b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1049b7c1-46e4-4f98-9b25-565fe3f05fae",
        "cursor": {
          "ref": "b6b7612b-d7a8-4b4c-94ae-fcc0400e6acb",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "93383a61-1e14-4681-a4e6-1362f0649fbd"
        },
        "item": {
          "id": "1049b7c1-46e4-4f98-9b25-565fe3f05fae",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "fe95a94d-e118-4e52-9150-ee3ee7cfe574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3205b773-b61c-423e-b702-7178c29eeed9",
        "cursor": {
          "ref": "43778986-2881-4e99-8f30-3c905f587312",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "340a635a-2552-483f-a1ef-58313b9078d0"
        },
        "item": {
          "id": "3205b773-b61c-423e-b702-7178c29eeed9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "061eda2b-718e-4fec-8144-4e2c69a1aed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546bb8ea-ada8-4ae8-855e-e5ea18c2a23a",
        "cursor": {
          "ref": "75863509-b347-4386-8f66-92aab594e0eb",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a3109842-87db-495f-82ea-94f43938c027"
        },
        "item": {
          "id": "546bb8ea-ada8-4ae8-855e-e5ea18c2a23a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e8902683-ce23-4b85-a699-e5a5c4fcb94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1cb04-9bfc-47e9-86b6-b72c31c1eb8c",
        "cursor": {
          "ref": "390b2a92-5769-42e2-9623-739d8f96ad28",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ca9b34a6-7972-4761-b33f-74eca8c2298e"
        },
        "item": {
          "id": "0fc1cb04-9bfc-47e9-86b6-b72c31c1eb8c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7263752e-c45f-4259-a62a-cdbb7e3d41ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a859538-4909-40de-a461-7c4a487b08d4",
        "cursor": {
          "ref": "fd34026b-453f-406f-b1a9-78a0a85579f0",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "30ebc526-bb2c-4b3d-807d-1550f1476220"
        },
        "item": {
          "id": "7a859538-4909-40de-a461-7c4a487b08d4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "824e29ef-b66d-4080-a251-9b7cfec6fb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb91ad49-67ba-4af4-b2bd-0f17abdc296c",
        "cursor": {
          "ref": "b65da719-86ad-465e-81c1-6ea544e39be9",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bff19aad-0a1b-452a-98b9-39b7651faca5"
        },
        "item": {
          "id": "cb91ad49-67ba-4af4-b2bd-0f17abdc296c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "422e00fd-c10a-4f56-9d8d-ae817b66067b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893f5eb-7f2c-4391-9739-3db157059ddc",
        "cursor": {
          "ref": "df2f8087-9d43-4c86-9318-2cc3e878ee70",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7fc3a913-c48a-415e-a6d4-02d6fc117129"
        },
        "item": {
          "id": "9893f5eb-7f2c-4391-9739-3db157059ddc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8cb8df73-6f61-41fd-a495-a2e50c1a661f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaedbc1-7a49-4318-9e7b-49dc3ee43d33",
        "cursor": {
          "ref": "0ab53293-4085-4885-8358-3706a8a94949",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b5fe7118-a1ac-47ff-914b-dc1d75a2cbee"
        },
        "item": {
          "id": "5eaedbc1-7a49-4318-9e7b-49dc3ee43d33",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c535b38b-19ac-4e0b-8e99-60f6236327c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079eac1d-1b7f-47d2-b2db-e3ff83a76188",
        "cursor": {
          "ref": "98acc389-8f02-4348-b7ab-3330e53e898a",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2adc3b5b-a0a4-47e5-9296-c679a56af19c"
        },
        "item": {
          "id": "079eac1d-1b7f-47d2-b2db-e3ff83a76188",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6c9fb10f-7ec2-4b8f-9d51-8672d78dc7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35c6d02-a90d-4336-9515-fb7eab41923a",
        "cursor": {
          "ref": "82423723-4a7b-45ca-8c30-8d3cc0e13d46",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e2fee6e9-a360-4682-b84b-c39bab1d82ad"
        },
        "item": {
          "id": "e35c6d02-a90d-4336-9515-fb7eab41923a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b02c6fe2-dcc3-4a01-9789-4a43d7c2eb8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ed5417-63d4-46ff-8a0b-981bb84fe300",
        "cursor": {
          "ref": "800134ce-271d-4afa-823b-6e5b844330c7",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "24762b5b-540f-473b-ab62-b24415a3872e"
        },
        "item": {
          "id": "c9ed5417-63d4-46ff-8a0b-981bb84fe300",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9365a0fb-c94a-4c3d-a5eb-5d254cd77b7b",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fc285b75-be59-435b-8859-98d45c39dfa2",
        "cursor": {
          "ref": "82321068-24e1-4afb-8e69-a84c0f0b94a0",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1d4dd22d-0475-4ec5-a65e-b9b7b88c76e9"
        },
        "item": {
          "id": "fc285b75-be59-435b-8859-98d45c39dfa2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1f6bd1ca-7e91-43b3-8484-a2e73aca4af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69748cf2-47b3-4a92-bdf1-326aa7ee5236",
        "cursor": {
          "ref": "820b82ed-e26f-4c27-9ee2-ad3771bc3a2f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9f19e44a-c51a-48f1-a47b-c55410a4f3d1"
        },
        "item": {
          "id": "69748cf2-47b3-4a92-bdf1-326aa7ee5236",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7b7561c-a8aa-4b50-8e92-585ecee5ace7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53ff6e7-8e84-42e7-8e58-3584d3237910",
        "cursor": {
          "ref": "68b4fd39-3c78-4adb-a694-4a9a19608667",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9af4397e-22cb-4ab8-9b9c-0f34d194f61f"
        },
        "item": {
          "id": "d53ff6e7-8e84-42e7-8e58-3584d3237910",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fe7dfd67-24e2-43bd-a93c-31466870a63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e06057-a601-4982-bb31-dd9d52df5b44",
        "cursor": {
          "ref": "38041841-6b12-440d-9c88-826cb154c352",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5a5ad423-76ca-479b-bfc7-2218a4402827"
        },
        "item": {
          "id": "c4e06057-a601-4982-bb31-dd9d52df5b44",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d78dda51-811c-4f4a-a0c2-5a3150aa1ab7",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "a5fe1eb5-d23a-4898-93ef-e7ce58ea23fc",
        "cursor": {
          "ref": "0b33a197-0c83-4e13-9031-84f65741e58c",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3c7f2cfd-5854-42e2-bd6d-9a82fb797af6"
        },
        "item": {
          "id": "a5fe1eb5-d23a-4898-93ef-e7ce58ea23fc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f2e0cbba-35b3-4979-a38c-92a3ca4d0663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9ccf3d-67d2-43e2-9c94-29c3862b1b9a",
        "cursor": {
          "ref": "74f20d0f-ef6c-4237-bdfb-c45cd4546d33",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "022586e9-7061-4c01-ad4a-b4aaad819a74"
        },
        "item": {
          "id": "cd9ccf3d-67d2-43e2-9c94-29c3862b1b9a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef4fe731-06fb-4c03-b3cf-df2bee40a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f12244-e4ac-41c1-8373-2f9fce5681c5",
        "cursor": {
          "ref": "c14f12aa-b131-47f5-a3f7-410bfc33b875",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "525ee2a1-384c-4c12-8dda-95fd4adca1d2"
        },
        "item": {
          "id": "26f12244-e4ac-41c1-8373-2f9fce5681c5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5201adf3-6d49-4a8d-a4d3-3a9a8714d2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be2f16a-ae05-4f1d-9dcd-869be5c8e372",
        "cursor": {
          "ref": "4082aed4-667d-4972-8b0e-d5a96912eb36",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "54580941-fdeb-404c-8b85-c6aac15f6f11"
        },
        "item": {
          "id": "4be2f16a-ae05-4f1d-9dcd-869be5c8e372",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "70945ead-3044-4e0d-b80b-1a39728317a1",
          "status": "OK",
          "code": 200,
          "responseTime": 609,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f1eefd13-a983-46e6-8fad-a88ec0d6cc27",
        "cursor": {
          "ref": "17b7e37d-4374-4cee-bef9-290f50d07b17",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fb0c98bb-33c9-4bed-aae8-34672751fc13"
        },
        "item": {
          "id": "f1eefd13-a983-46e6-8fad-a88ec0d6cc27",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2af33c13-6e2d-4356-9e77-2ad3b128061d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "dd814cf2-5bbe-4433-aa2c-6d6ffebf743f",
        "cursor": {
          "ref": "5e54c073-39ed-477d-a435-d95a3e55c509",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b75ed9fa-335e-4d18-b97b-ab97570ac15d"
        },
        "item": {
          "id": "dd814cf2-5bbe-4433-aa2c-6d6ffebf743f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c141310d-5943-43f1-b67c-5d346e5375c5",
          "status": "OK",
          "code": 200,
          "responseTime": 580,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "51b295ed-bac8-4b8f-9f8c-43e85fa3de0b",
        "cursor": {
          "ref": "b3d3e4c7-9456-4a31-92d4-f5c4646adf20",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4dca613c-ac29-47b3-90ca-979a74726196"
        },
        "item": {
          "id": "51b295ed-bac8-4b8f-9f8c-43e85fa3de0b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9f65384f-3759-40bf-95c8-4f622d3a77a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076c188b-7142-466d-84e0-4b14f1f7487a",
        "cursor": {
          "ref": "6e77ee87-f253-40e0-85db-8d551f3f7619",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b3cdaec3-4319-4a33-8f21-413b443280f8"
        },
        "item": {
          "id": "076c188b-7142-466d-84e0-4b14f1f7487a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c7818d16-8e21-49ab-ab56-463ff317359e",
          "status": "OK",
          "code": 200,
          "responseTime": 614,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "c040e92d-70bd-4d57-92a4-00c52d9e3bef",
        "cursor": {
          "ref": "4c1806e1-9180-4798-a33f-f29a6ad8e59e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "06c0976a-121e-4893-8a9c-31ec752ca4ec"
        },
        "item": {
          "id": "c040e92d-70bd-4d57-92a4-00c52d9e3bef",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "90c86191-6559-4573-b077-f8631267e5a7",
          "status": "OK",
          "code": 200,
          "responseTime": 903,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a1f2475d-7270-4410-af73-431208e735a6",
        "cursor": {
          "ref": "b30d5907-7ab2-4cfd-9205-fe963e56b006",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "71849593-c7a7-402b-8ec8-82bf4c82f6f6"
        },
        "item": {
          "id": "a1f2475d-7270-4410-af73-431208e735a6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f55cbe47-f233-4770-9f2f-6673f697d958",
          "status": "OK",
          "code": 200,
          "responseTime": 618,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "53d73083-89a9-42de-9e40-17d1b92b988d",
        "cursor": {
          "ref": "fb8b8009-2ce8-4361-ba65-33af71c3eb80",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b50cf664-4557-4057-973d-ecb5e689eb2a"
        },
        "item": {
          "id": "53d73083-89a9-42de-9e40-17d1b92b988d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "07eacab6-9081-4b2b-a818-64e772fd6f54",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "62388043-8cdb-45e6-ae81-3decd689a44b",
        "cursor": {
          "ref": "f17d6fcd-ef76-4c0a-b017-7279c79ed68c",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a3dcc571-f8c5-4056-b68f-02277cba974f"
        },
        "item": {
          "id": "62388043-8cdb-45e6-ae81-3decd689a44b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5f1a8247-27bb-4d25-b168-8f8e46f05190",
          "status": "OK",
          "code": 200,
          "responseTime": 630,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "94872d6f-1a46-4af7-be79-a53757274c6f",
        "cursor": {
          "ref": "da4a8ea7-8c22-4851-9bab-14dcb7634f07",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2fb8651a-e4fe-44ba-bec7-bf1620997c6c"
        },
        "item": {
          "id": "94872d6f-1a46-4af7-be79-a53757274c6f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "044f6e23-b894-48ac-a434-21d9de7b4557",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "02fbf16e-2a51-4a2f-935b-f4ccb6a624ff",
        "cursor": {
          "ref": "c3225fea-f29f-4888-94d5-6e30d5568367",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74cdc728-aa06-4f38-8452-3af8099d1898"
        },
        "item": {
          "id": "02fbf16e-2a51-4a2f-935b-f4ccb6a624ff",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0bbc82cd-d536-4cf5-bc16-e290d72d6f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77cc550-7329-4b44-bf6a-326e1c4abbae",
        "cursor": {
          "ref": "35c5d4b9-accb-4e65-afe0-06413d9dab5d",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d2713af0-2273-4040-8080-fa188bc4e335"
        },
        "item": {
          "id": "b77cc550-7329-4b44-bf6a-326e1c4abbae",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a88e7738-19b1-43f1-bde4-af960264f70b",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "79e0babd-909f-4528-a8bb-285a9225a440",
        "cursor": {
          "ref": "49311c30-8f6b-448f-b70e-1f60c8dfb673",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0b615abd-6303-4789-b54e-fbab01d355f1"
        },
        "item": {
          "id": "79e0babd-909f-4528-a8bb-285a9225a440",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "991337f5-c2b4-4adc-8ff6-e02fde91f493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb943d0-686b-4a8b-a266-1fb3f7807d25",
        "cursor": {
          "ref": "edbe7df2-732c-4224-a5bb-fcc7d7a3a315",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0409584f-9a25-45e0-bd29-8f3b0867e764"
        },
        "item": {
          "id": "7eb943d0-686b-4a8b-a266-1fb3f7807d25",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8dd3f709-686f-4714-96f7-240d7144b3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3d6f27-b0f8-45e7-b94b-1935dd2a1c41",
        "cursor": {
          "ref": "5dd13f74-8a9a-429b-b2cc-88bf28696720",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9350f103-14dd-45fd-a969-7e8b0109a966"
        },
        "item": {
          "id": "5f3d6f27-b0f8-45e7-b94b-1935dd2a1c41",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9d6fb14d-58a5-4a54-b282-2c4526f18be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287ef22e-524a-4aa3-85ce-2e87eba79444",
        "cursor": {
          "ref": "30a2648f-7b17-42a3-a754-34a78f309d88",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fc6dd1b1-662a-4a13-9f60-6b7c24adc39a"
        },
        "item": {
          "id": "287ef22e-524a-4aa3-85ce-2e87eba79444",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ea888d3b-31e8-41e0-ad19-e7393343426b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b48a013-8e0c-46bf-8a7d-3712fc6822bb",
        "cursor": {
          "ref": "642639d3-3123-49d4-8187-b83afac9ca0c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "258c3ded-8f20-4c4c-895e-a25a80aae5e2"
        },
        "item": {
          "id": "3b48a013-8e0c-46bf-8a7d-3712fc6822bb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "693fd912-f269-4f4b-9479-470b017e2026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b4aee4-3e4d-4e4f-a02d-4cb51003ccf5",
        "cursor": {
          "ref": "f966b575-a267-40e8-a4f2-f7acf96e2729",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1ac34af9-2cec-47d3-86fa-5b9e8304b098"
        },
        "item": {
          "id": "a9b4aee4-3e4d-4e4f-a02d-4cb51003ccf5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ee3e943d-2473-4967-9be6-b1b7359937bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f034cbb6-089f-4424-b5c5-84c139306cc2",
        "cursor": {
          "ref": "aaa53713-8083-4f03-8eb2-a00a86eeb0a8",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5d76665d-9a0e-42e9-a100-e10348e6c7a7"
        },
        "item": {
          "id": "f034cbb6-089f-4424-b5c5-84c139306cc2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "83fcf592-32b9-4430-bfa3-f6a17d747dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879a6cd3-316d-476c-bd70-cb38634d3681",
        "cursor": {
          "ref": "9a3ec6bd-ff7f-4311-a984-354073a69474",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "534b0152-04e1-4842-8276-149d32e2640e"
        },
        "item": {
          "id": "879a6cd3-316d-476c-bd70-cb38634d3681",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9ae9bae8-aaa4-4cee-95d3-0e014217fe05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce041720-2204-419e-b090-77cff10aadb9",
        "cursor": {
          "ref": "f57e5a87-72f8-4fe1-b634-d3e085fe2124",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "98e96cf6-3daa-4f49-af10-3459e0f34a29"
        },
        "item": {
          "id": "ce041720-2204-419e-b090-77cff10aadb9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e7c60d1e-cc46-4a1e-bee6-9d70877f5841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2711b19e-47af-4222-8d6f-1fcd1d15da29",
        "cursor": {
          "ref": "ea032956-86a4-4ac9-a892-f61c86b9b540",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2ba7db20-41d2-4241-92e0-f246cec7c8a7"
        },
        "item": {
          "id": "2711b19e-47af-4222-8d6f-1fcd1d15da29",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7d745907-56a6-4d9e-86a8-02f095f2495f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fdf55fb-f6df-494b-8ddc-db22fac1d9fa",
        "cursor": {
          "ref": "22eb20f8-7157-41cc-b505-a040e60bded0",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9ab39a18-5656-45d3-a1d0-54b8ac1f0ceb"
        },
        "item": {
          "id": "6fdf55fb-f6df-494b-8ddc-db22fac1d9fa",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7f8f26b6-812f-451d-be93-5b071581a392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408e1fdc-d16d-40dd-b055-6231b72d83d3",
        "cursor": {
          "ref": "f73037d9-e05d-47b4-b57b-388ba044462a",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "bd39e0cd-9f47-40ec-8afe-38c72ca9a46a"
        },
        "item": {
          "id": "408e1fdc-d16d-40dd-b055-6231b72d83d3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ca387e8c-1e2b-4a11-aa0d-6ec9872cdbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ab7efb-ac0e-4573-8555-0c875497fc0b",
        "cursor": {
          "ref": "0d47e17f-a610-4c51-8997-2ffcb6d0f7be",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "92dd82be-e2d2-4a05-a1bb-66b0335d7c12"
        },
        "item": {
          "id": "58ab7efb-ac0e-4573-8555-0c875497fc0b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d03865a8-ba28-4536-8890-104a5fbac947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3be906-4ca5-4a77-b794-17193dc8c1fa",
        "cursor": {
          "ref": "9419e8d0-eae6-4195-b506-01eae0e06885",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d6062f24-c750-406f-9017-aa1179478b80"
        },
        "item": {
          "id": "3b3be906-4ca5-4a77-b794-17193dc8c1fa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ee84a587-05e9-4ff7-844a-5f88f4b98371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6878ca2-508e-41ba-9902-de0c40a9b010",
        "cursor": {
          "ref": "f3e5743e-187e-4a35-b2b9-c010843b1c92",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "73846578-8604-4423-8b2e-4116742b1c7f"
        },
        "item": {
          "id": "a6878ca2-508e-41ba-9902-de0c40a9b010",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "aef862df-2d2e-4e84-b296-b6de28e7fba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fb8dfc-b80a-46c4-a873-db6be9ef66d1",
        "cursor": {
          "ref": "0ac38fad-9b0a-4361-a8ce-571b72d92788",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "36a200bb-65fb-465d-a30c-9d98def2dbe6"
        },
        "item": {
          "id": "59fb8dfc-b80a-46c4-a873-db6be9ef66d1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d285c5ab-c705-495b-b546-c693721f85cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f304c946-5f48-493d-9563-85ce559a1ac8",
        "cursor": {
          "ref": "cd48f7a1-ce05-41a4-94da-3a3944019c98",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5d81f266-ed4f-40ae-9243-2b86602b75e2"
        },
        "item": {
          "id": "f304c946-5f48-493d-9563-85ce559a1ac8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d81704e-c49b-405d-99e4-406c8e6bdfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e33dc33-d17b-44db-9819-4304a0f56379",
        "cursor": {
          "ref": "328fb7cc-4956-4da8-8378-6c108d3fe796",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "34ebd881-8cf1-4bc3-9e1d-fa0ac2d59955"
        },
        "item": {
          "id": "0e33dc33-d17b-44db-9819-4304a0f56379",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c86e57f2-b658-4dd0-9369-383d7fa9b2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62feccef-515a-48cb-b57b-e1c829714a99",
        "cursor": {
          "ref": "369ef7c9-2a60-4a85-a4d0-49e88c6b4d0a",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b60391ba-952a-4daa-bbbd-1ffc80d246a3"
        },
        "item": {
          "id": "62feccef-515a-48cb-b57b-e1c829714a99",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0c2ee1d9-7539-4861-a8d6-0f0538adae68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8bc606-0550-438f-a732-b9383025768f",
        "cursor": {
          "ref": "f7702146-18dc-44ed-ab01-84a80fb45682",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2b350f9e-edfd-40c8-98c1-0a66ca45e696"
        },
        "item": {
          "id": "7f8bc606-0550-438f-a732-b9383025768f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d224b766-f8a2-41ca-ae6a-fbf7ad2b0dbf",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "0e87579b-a484-42c3-bdea-54ce2e8e1be0",
        "cursor": {
          "ref": "5d992cbc-d6f1-41fe-997f-5e7e5f409e1c",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "822c46f4-dacf-413d-aa35-80aa9b2fc544"
        },
        "item": {
          "id": "0e87579b-a484-42c3-bdea-54ce2e8e1be0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cf6dbf97-f2e2-4693-ae0b-8eb46c55cfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085c9e0c-df12-4e90-ade1-8e94daf9e5b5",
        "cursor": {
          "ref": "79fdfaa3-3614-4487-989c-3fb45f42e68e",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "706ec8ab-f343-4bb4-8cee-9bf53ef6a5b2"
        },
        "item": {
          "id": "085c9e0c-df12-4e90-ade1-8e94daf9e5b5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "24c26444-7821-497c-a862-a3fe2dac0403",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "f6c49e72-dfd8-4371-b528-9a0a10463665",
        "cursor": {
          "ref": "61e27829-28ed-4e48-82d1-b4e0e976d445",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a731672f-9f72-4810-ad9a-77e935be34d2"
        },
        "item": {
          "id": "f6c49e72-dfd8-4371-b528-9a0a10463665",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3ee3e1b9-a24a-42eb-abbf-b95f7e5d38e8",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "05ab5b5a-7743-423a-a667-8053010bacb7",
        "cursor": {
          "ref": "50e088a7-89ab-4268-bfb9-6c41fc7c59d3",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "1ed46e0b-2be9-4af4-be45-351649db273f"
        },
        "item": {
          "id": "05ab5b5a-7743-423a-a667-8053010bacb7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "74e6a4bd-9bcf-47fd-aa99-a4d546804a55",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "48841fdb-a306-4cce-a724-38e3bd27b4f6",
        "cursor": {
          "ref": "04c01888-4b57-457e-a5c4-439860a341a7",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "fe3eefc9-c9d1-45b4-9d88-bed70b44911f"
        },
        "item": {
          "id": "48841fdb-a306-4cce-a724-38e3bd27b4f6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3a9017e6-c19e-4bdc-82ea-a2f3bc4c18a1",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "d0047b7c-1bef-4d2f-8d97-3dcfe4a42835",
        "cursor": {
          "ref": "1200f1eb-af75-478b-be1c-bbc5367eadf9",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "52a0fc21-e1eb-495e-87b8-f4d37243b2db"
        },
        "item": {
          "id": "d0047b7c-1bef-4d2f-8d97-3dcfe4a42835",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "76d0673c-e536-4dc5-baf7-147feadb94b6",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "0e6a8ff2-8d27-4684-846e-a317488eab2c",
        "cursor": {
          "ref": "c176fc57-276f-45da-8345-224a943bdbbe",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4e17f054-ec57-448b-9381-97148ac3b94b"
        },
        "item": {
          "id": "0e6a8ff2-8d27-4684-846e-a317488eab2c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d45c8ff1-08b8-4ae5-b2ce-77369a1f5a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64a9808-689e-46c2-b952-a5a0df5f4006",
        "cursor": {
          "ref": "4755cbbc-d040-4119-9db4-eafeec34229f",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "9fad034d-04c3-4c15-bdce-1a1b7f3ec1dd"
        },
        "item": {
          "id": "b64a9808-689e-46c2-b952-a5a0df5f4006",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7e52bd58-8cff-40cf-b742-79c3236370fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5948725b-6f71-4467-8d31-88d6239f6590",
        "cursor": {
          "ref": "493db71d-db29-4d26-82c0-d8d88ad6dc24",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d0aebe9d-4310-4d0d-afc9-1ac4cd4a21ab"
        },
        "item": {
          "id": "5948725b-6f71-4467-8d31-88d6239f6590",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3e1657d0-2a2d-4871-879f-97398f2b43fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19338dae-c799-4a87-8dfb-3f9cc3135470",
        "cursor": {
          "ref": "309d7a0a-b31d-4bc0-94fa-1f608e3ed53b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ba18aaeb-b6ba-4809-bec6-ab191bde89f2"
        },
        "item": {
          "id": "19338dae-c799-4a87-8dfb-3f9cc3135470",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0fe1e269-29bc-4735-ada4-a05f0e45e8b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a1587f-004d-44a8-9fd6-65e700904e9b",
        "cursor": {
          "ref": "92da18ae-355c-42cc-9963-648a3e226b07",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2a683714-9c64-47df-a9d6-ca7dacd20171"
        },
        "item": {
          "id": "42a1587f-004d-44a8-9fd6-65e700904e9b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c3652cd7-9cea-4792-befa-ffe0a2b3b8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2659af3e-533d-4b60-9644-75268c5e8434",
        "cursor": {
          "ref": "294b1084-84a9-4cc1-a61d-d3b84e923177",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "5148fcbd-0b53-4c73-91c4-67d38114a056"
        },
        "item": {
          "id": "2659af3e-533d-4b60-9644-75268c5e8434",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6da5abd4-b97e-445a-bc27-0c6d1dcafab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c718ea-2965-4dda-adee-35edf8553b25",
        "cursor": {
          "ref": "a4104491-3d05-47e1-8acf-4c4b57b7609e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "45e57849-244d-4ff3-98c9-ec2a5445d25a"
        },
        "item": {
          "id": "18c718ea-2965-4dda-adee-35edf8553b25",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c795270a-fe1f-4561-b178-b66aefd3c2fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c9c052a-8b8e-4a1d-b4bd-8a5fd4533730",
        "cursor": {
          "ref": "9a8157d5-1746-4765-846f-14c7b3b56dd8",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2333613b-1ced-4a72-be5e-b7a7f33d32a0"
        },
        "item": {
          "id": "4c9c052a-8b8e-4a1d-b4bd-8a5fd4533730",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a599cd9e-d8b4-4f10-beff-1f3957d1e475",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d188a0b7-3158-49d4-941e-b001303b4619",
        "cursor": {
          "ref": "5c4dbed3-a7b1-4a92-aa45-e1dcec94792f",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "00161bb7-d470-4fa6-baa7-01e0b6d56758"
        },
        "item": {
          "id": "d188a0b7-3158-49d4-941e-b001303b4619",
          "name": "credentials_verify"
        },
        "response": {
          "id": "df671d70-87bc-47f0-8eb6-28a4debdd890",
          "status": "OK",
          "code": 200,
          "responseTime": 573,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e52fb1e-fe6e-4951-825f-ed49a77905e5",
        "cursor": {
          "ref": "32719aa7-dbd8-44a6-a1ed-f58f120d726a",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4782cd2d-c232-4576-b997-b9adeec1c9db"
        },
        "item": {
          "id": "7e52fb1e-fe6e-4951-825f-ed49a77905e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "41480467-2c1c-4863-b909-30bdc642c2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3d48adf5-126d-47da-87fd-c190ce20309d",
        "cursor": {
          "ref": "127f005c-3842-4f7a-9919-e43cf2b04aad",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a93fbc7d-98ce-4246-9af0-fe48d436fd5a"
        },
        "item": {
          "id": "3d48adf5-126d-47da-87fd-c190ce20309d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "054cb9e1-2a86-4264-8148-6b3ad4281e8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d48adf5-126d-47da-87fd-c190ce20309d",
        "cursor": {
          "ref": "127f005c-3842-4f7a-9919-e43cf2b04aad",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a93fbc7d-98ce-4246-9af0-fe48d436fd5a"
        },
        "item": {
          "id": "3d48adf5-126d-47da-87fd-c190ce20309d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "054cb9e1-2a86-4264-8148-6b3ad4281e8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87df2fcc-2905-4f88-94d4-07b72c7b9887",
        "cursor": {
          "ref": "9b75fe1c-f396-4c01-83c1-eab852e659ef",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39b6b256-ec25-4120-8a19-429ed7f5c4bd"
        },
        "item": {
          "id": "87df2fcc-2905-4f88-94d4-07b72c7b9887",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "893bafc3-bc82-447a-b9ae-71e97814df10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c6b2b6-1f2f-4f34-932d-cd5f3ca58190",
        "cursor": {
          "ref": "feb0226f-cb43-4430-9f8b-ec1d436e367e",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0f066cea-ac2b-4919-97bf-e804dd6c0723"
        },
        "item": {
          "id": "79c6b2b6-1f2f-4f34-932d-cd5f3ca58190",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8239e7e7-052e-4911-b242-2e986dd55a12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}