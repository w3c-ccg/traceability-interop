{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "581f6387-7e17-4610-8ed5-969e850f5cec",
        "name": "Clear Cache",
        "item": [
          {
            "id": "16bf9da9-5073-493f-b9d7-8c122106bd66",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b2eb76f-0146-4c69-8593-fafa4cf5fac9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3d49eb4c-98a3-46c7-9f8d-cd334c7af089"
                }
              }
            ]
          },
          {
            "id": "9f57ba0e-699a-43d5-b02a-693e98514d41",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65de62a7-0690-4920-83ce-20ba639f8c99",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ea5d7735-6912-489c-8dfa-152a0574aa22"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "13bd5989-5e32-416b-97eb-6b3e26a9c835",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4a039ee1-c38a-4643-97b7-d4e2063e8333",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5dfa0df-37c2-4c99-ae3f-ae24415033ab",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd387942-aa2a-4f12-8e3c-40c3c3ddd95b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52696565-49a7-4a84-9309-b88c49a82ce5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5416c652-9e85-46fb-b66f-504317e00305",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d5e178a-43d8-4413-8164-b101449b87e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1169e105-8f24-4c54-854a-b12c98e0e5c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31ca0f75-10e5-464a-9149-046e470a3957"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff6e40b9-6243-4b95-8bb0-11002c04e2ba",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e05cb476-80fe-44e5-a555-5a202e837f3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8f7f228-95c7-4aae-98d2-706bce16b823",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66936949-202f-49ea-bc80-1019a83963c3"
            }
          }
        ]
      },
      {
        "id": "a5dd3743-699b-4ad4-9895-5612055c6f70",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e03b249b-89d8-4298-ae83-8bd657e4ebe1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb97d108-e373-4122-a03d-e244e0d32361",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fed9ff93-adbf-407b-adb9-025cde6ed9ed",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3805c9c-decd-4c5b-8063-1d6689164462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e266572-d011-4440-a5b1-623ba2affa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917cba6a-67b8-4290-94db-6390d730edfc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4e6a39-d4dc-49d1-be3b-bc75db353c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42dd903c-63d7-4eff-87c3-0539fb1d8d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c086d-4d8d-486a-8fc8-a074ab5948f1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4c8b5c-49e7-4b8d-bb1e-4fa24c082303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08f22e2b-e4b1-4959-b978-143c41feb6c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e33cc8c1-0bae-459c-96d9-72f3673c5035",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a88de451-3852-4a4a-937c-b604f45fa8d7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13b6701-135c-422c-bd6f-312802f131a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3aca2445-187a-4aaa-b68b-80c6b55762c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8f73c1-57b7-4145-9fba-72b0694399cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31b23b7-2555-410b-b1eb-0a8ee450e336"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "981affc2-66c8-45a8-9290-475e581cc8ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7e391b5-f075-4332-9974-49a0aaac4b47",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "744272be-a7c3-4775-80a8-c56739a2ffc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2351d40d-f13d-4446-b6dd-22a1edaeaf2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b17bc914-5437-4394-9aff-f703b73d97d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "055019a4-3bd4-4f7e-98dc-0e0e5b3ae6be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc64bedb-d4a9-439d-a395-085536a21643",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a25b1b1-12a3-44ae-97ae-f702766a90e7"
            }
          }
        ]
      },
      {
        "id": "60025bc4-22b1-4e93-a08e-8c261a9a4c7b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0d37027d-8445-42c1-8690-c15e438e9d64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19929e76-fdf3-462b-99d9-ae38a814f65c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3ade1dc4-6c49-4277-8aa1-e74fb2b5f36c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c194ae-2bde-4b61-a18f-967345918533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ac4026-835c-4c55-a067-73559c4f0c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063b717e-94c1-4312-867a-8a9641123a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd93a7ba-b2e3-473d-aaa7-40437ad2ee45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5578f559-2f96-4684-8cf2-3ac1594e247d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948ff4f5-b486-4599-85ea-0e7887f7c495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb59f62-ddc9-4ae8-bf33-d3d02e15b90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff620d3-290a-4317-89b8-6082f8aa6378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef6f2c61-b0c3-45e5-b10a-a8240e0f0a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643744f6-f50b-45c0-ba0f-c1ca1ca67de5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5480e4-f6ac-4482-bdc1-5aa5b330fa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7eb0ef-bc38-4a89-bb14-7caf0ce0271c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7beefe20-778b-4df9-bfcf-8da0b68eafdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa8bfbcd-6c4c-4199-800f-42fa23a44050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89f4121-06bf-460f-bbbc-2825a6ffeaa9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829810dc-d9f4-4ebd-a7ee-a5c966cf3f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "197837ca-1889-4dbb-afe8-c03a0ba96d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640e2fac-1733-40f7-9681-3b24bc3d8d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b413c32-99c6-4810-a8d4-55b8d6f44105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ba6f0e-2fdf-4f87-9e4b-d7625c3077ec",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4337ff2-a35d-4510-bad3-c1a92ab93c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5a3cf9-a3f6-4747-8b11-ec48211b6ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51356783-beb9-4e4d-b7b3-1b5125ec17f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be85ddcf-b434-45f3-914a-c0a1d40f2ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5424a61a-4b86-474c-9a98-2395a1d3cddb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1836efb8-455b-41e2-96f2-7e75b0bfd5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ade562-d354-46f9-8ef5-3349d392f087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf64a2a-a546-48dd-8b09-f45450c0abc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11d2c219-2123-4d44-88d0-fd1461ba0d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08573c85-5013-4329-b99f-c14f9a89de2a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee67b75-052f-421b-8edb-7650ce14b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33981654-02f5-443b-b997-cce85d870503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86885944-9499-4e75-b57e-922e09fc1c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b933b04-8ee6-4b72-b355-63db8a793a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a5017f-cbde-4aaf-9892-9b8f3fc7ba50",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b1611e-e524-44f1-95e8-14c11695fa2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058aceb7-3368-442d-af51-57cc6d29a195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32f6137-8c85-4833-8b05-5ed14d547ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16fe09d8-1b7b-4688-a06f-39ef53a0cb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad0a969-02bc-4add-93f7-c38cd1fc82c9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d6952e-f103-453d-b115-4f967e7d4635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50a91e3-76bf-4a9e-b2db-050a8a7a23cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b19e73-33fe-47e3-9473-ef847195d81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5a3cc50-d152-440f-8817-0a705c29f09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b687dd-82af-445b-bafa-5ec6f6f0d47d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d59a04-3ff0-4da5-bf8b-e084d272f905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa66bb4b-93ea-49b6-8f12-b17de305c374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c8acc8-ac71-45d6-a49f-232ed31e73b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ce2bf67-4d9a-416e-b0d2-39d5f82a1ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e7104a-91fc-4f7a-836d-c1d227373232",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be6a229-0bfa-4104-956d-a9d03b8d6fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d6ff79-2c1a-4d63-a56f-ffdfceb149b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f2f79e-927d-47bd-a85a-6abfd85cbcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dc6bb02-f847-4462-ba96-db470c9c3fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0f11e5-0511-4e77-83ee-7deba24e68fc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd839b0c-1fac-4e69-b97b-891192947d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147b0cca-53a5-4aef-9eb9-663ca4c57bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ef805-49f6-42a2-996f-36de4570898d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a394681-ad4b-4a02-99e6-053ac406f93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191a326f-996b-4c29-933d-7ff2e6c13ba1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578ade2d-34a6-49c8-b4f3-9c9bb0506f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e813e3fb-9309-4d5a-bfae-3bd755f9c7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f76df2-2b2c-4bca-8e70-eb32c7cd0eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcefd630-3a61-4397-ae8b-18fa42ecac3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a670bf8-36a2-4eed-a332-db18b9e7d118",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35c11e1-3f21-40e6-b5de-82b20b0b3e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455dce93-bff7-46f3-b82e-75b0e9d2d05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b35af7-17e1-47fe-8ee2-f1ea5ed89e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c91916e-2dab-47e6-8ad6-bd178035d4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c1ad21-b3eb-4630-9549-654ffbc54970",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58b200e-d9aa-4dc6-bc48-7c4244bdfcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae05c52-5f0a-42c6-ad3f-ae1a09677aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafd7100-2fb9-4600-adfc-a63ee55da2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "259e4a98-43eb-4d2f-8011-a63f4853fc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d92a1df-ef26-491a-bd39-ad8db4eb0cb1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3aa4bb-eccf-4b69-8037-f6d95c7ded74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b266342-fb02-453a-9b11-dc477d7b24ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650b67fb-cf45-498c-9e09-f377d41acdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c64af77-ee17-4883-bfba-c27ea71ac248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3997fd8-c817-433f-98a6-1ba66ee7b413",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817c1899-a782-42d7-a18d-614016b7faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c856aa75-f2c5-46f3-a6c0-cce97057ee67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a14ed5a-6bff-4424-8dab-23bd0ad72895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "251bd3b6-7cd1-452f-a757-89d2e42ed329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4e362a-fdc1-4b1c-bf77-8466c243e523",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd6702c-c428-4350-ad38-7fb9e8a70e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc882fc-65b6-43cc-b552-7317daacccb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472fbde1-2f04-4e33-8eec-758e254b425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3518a8f0-c0d1-4f16-a952-fe18df20d589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788f241e-cee1-489d-ab98-6c97ba9ce890",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b10860a-a2fd-44e5-8165-4278ece52cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33446a17-55a2-47d3-b5e8-2b8c86d31392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "392bb09d-939c-4b10-add6-f9442cd7a429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f1dc89-b922-4bd4-a210-acb3075a96d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c77df4-7f4f-4689-8fb0-dbeec5be578e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c1a2bf-9989-461d-9da6-8ea33d482535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0694c469-226d-451f-adb1-12f456afedbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd9be71-ce00-4d0a-a34c-5f7f41473c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b2cb42-74e9-4085-9c54-2381fd691d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b4f80f-2c07-412a-947f-4b2b720c5684",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65503aee-0e88-425d-8569-ab6c00ada74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2591a3-c0fb-450a-b1bd-c25629ba9dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e439acf-42ae-40c7-9051-f9504ef87d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c5d65a-7305-4a0d-a942-dda42d16d010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3737ef-b2ea-453d-a5fb-1d459c095836",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad5f5c5-1356-4cff-a3ce-40d81bbaa1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19e8f82-e3c9-4693-87e6-83c6759fb2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768042c5-d1ee-4f95-bdb8-31b588a98712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99ff84b6-81bc-491a-acee-b6050cc5fa27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8e1e3f-282b-424e-966a-2c6ff0580367",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7c2f54-b477-4759-acff-8339311acd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0794254f-7515-4f29-a697-a10a6505156d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d90848-7b48-4afd-97ec-1dfe1a1fd7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4a0b87-fa26-4d7c-b442-3bdc9650e244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23354834-ef32-4227-a82b-23a34a204acc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c821fd2b-8a7c-4ad2-ad30-40943b15805f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6659f595-c9c1-42a2-b16d-17af61e1a1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c824fd-1757-46a3-9168-61b61f6b0524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d629e1-da42-4667-800d-dfbfbf9a3e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5bc72f-bf5c-4f63-9315-96d397400d61",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16a9de9-8c4f-47a2-8500-b165d9b4198e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087e3124-1bb8-4d21-907e-5d8ce1916ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b04378-2141-4a67-85d7-95eeb5a5764c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bf0426-6d37-4537-9a05-50a5ab2ba663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37db3625-7830-4799-afe9-fd5f9c1b5d8c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb49ed43-3df7-4768-b4f2-481d61983213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1e89ad-fb04-4f70-a69b-0d22ce0909bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddeb75b-b6d3-435f-ab2a-67dfba6909c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf0654e-f227-4f3e-8a46-60f7e82d004b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facba086-a670-43d7-96ad-6539412f356c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3496eb49-7a24-4cd3-b9c8-bb0b62d0e045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30285fe1-a1f4-4cc7-972d-347638082b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f20ca2a-16c4-4bc6-93f0-5c2578c307ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd014b3-11ef-45e4-89a3-345db065992a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2768849a-a4fa-4593-b6bc-4c5c2ea9f212",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550db9a8-0fc4-426f-a52a-ea9388ae0fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00e906b-e2bc-4938-b06a-d063fe8b4a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd9d003-4a6a-4f02-9bbd-4da4a96c9a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "569544ba-b91e-4f32-bc00-48d306b4e4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb295813-c87f-495a-ae4b-c07c30d4622f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad9470e-6bc1-4ccd-a46a-68e908053364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c3fe07-1206-451b-969c-2b7bc49e3062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471c2cff-8ef6-46e8-b4c5-6dcc2d0662ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75c1b90c-2513-4d85-ae5f-7ca0f3114ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a2a819-abcc-4ae8-9de1-6a5dd7aca5be",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b32d9c-759f-468b-907e-01c38613b77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d163e9-df87-47ff-9ada-f3e33bfb576f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ed3d54-dd1c-43e5-8833-cdfc64477fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f203ac7d-5e30-48cc-bcf1-d12dbdec6cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9acac6-3211-4f96-a43f-6773ea46203c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d85a67f-9b84-4e30-980d-487400633bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2bdc61-6e7c-4574-a2cf-f717d882e2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cf53ee-06cd-4218-a626-0f1a5f225374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c576656a-c925-4249-a7cf-cf9a146f299a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b7a0ba-87cc-4ba5-bf44-a335b0c31799",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00068cb9-13f2-41d3-a9be-136af0c665b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65c6314-a3ce-4994-9667-55d16b97ae1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a41a03d-ea75-4cb7-bc0f-a78e13adced1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba18e5c-76c1-49c3-8ab1-aad99d6c50b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efa0503-6e21-4c9a-ab24-3f8fefa99e22",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5888cc-919b-4036-89ef-d22739e3be63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ea3359-2037-45ec-9731-1b2a78b9fd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2458794f-c8b6-4bb1-b541-00e1dc23777a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8cfa9a7-6b5e-4c4c-8ee6-f3b12b030935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3093c168-9b00-4d68-9c55-1bf39bd1ceb4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcfe184-a40f-45be-9a97-b85c2f09283d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1e03a9-391e-44cf-865c-54692518006e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8155cc92-e797-412b-8df2-4317c5a32868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef19130-bee9-45d9-b897-4167dd2b2407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a2b174-5531-4193-94f1-363edbfa56f9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b7ad15-144b-49b8-8f1b-d49969cc06e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dfd9bb-321b-409d-9284-979b3185a4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acad091-0193-4c63-9ffb-6fb2ccd21ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6a52824e-5e0c-49bb-a750-7f0059972e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c92f1a-19ef-44b5-86cf-632f083a8d6c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe83c423-73e2-46a2-bfce-e806020121f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8bc5d03-0c7d-4a41-803f-1d8bb2a9765e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618333fe-371b-471c-a7dd-e960092bc89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cfd6739-2f9b-4f47-8c0d-5c1e3418a5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c698252-b877-4dd9-ac27-6a430566025b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630f01db-612f-42d8-b2a6-55d76ef77eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271a3766-5060-4d12-9f99-b5d1d6ae8851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9fdc7c-4156-417c-a237-6283bd7a663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2019071a-beda-4d8b-ae85-660a274757fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d5a77d-3cc5-4349-9845-a8f93b3e6e54",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "798adbe5-4068-493c-8b43-71e1553349c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e8a880-9210-43ba-a733-4e9d561d29e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356d074c-0890-43a2-a7c9-9b6e7373537a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "225cb40a-1a2a-413f-bf1b-a7bd8d66a95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a70e396-c748-4ca6-b5e4-ecf2fbf15276",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de1cd6b-630a-4fb0-8134-df3b715f71d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201f4ead-47dc-485e-87bf-12c3b78abd45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba365a37-58ce-4951-b4c7-1d7534024dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "73816b38-f49e-4ffa-a03c-5a47fe1c1148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a08cd3-eaf9-4e67-ac0b-2254823da217",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e7142e-cea4-4a1e-802a-4cd9601500d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e442c5-0d2b-46d2-b7e8-152b95c87e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d0c99c-139f-45c9-8b71-832279b849d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cef728a-5c27-4136-821b-4fb78dce0caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055b36a2-56bf-40f0-8040-3bd67ba1d4bc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01ff203-7f33-49c5-9740-db02a78eeebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5493d845-1dbe-497c-8e0a-2c3529f05540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e9d8e6-7b8a-4917-9dc7-328a61aec0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4bca26-b8b8-41fe-92a6-c942f2eb0c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972c1b25-2105-4de2-ac23-243207cfcd3d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673d056e-8bde-4c68-a2cb-c9a3a9fd5d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ff9e6c-7348-4a37-bbf5-8902ac006a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f84cf9-252a-4b38-895a-c2a5a6e12322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bc90be68-4605-4def-ac44-90a6cc8dd902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650d5681-64e5-42ff-a18d-a94c5c2b9b4b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cdb7261-cd3b-42a4-aeb7-affe1557bea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e768f52-e75b-4244-839f-0528f7889695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fac2de8-4666-4755-ae0b-b10dbf853131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea926fa9-6b31-47dc-9113-d35978468fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a935fc9e-9914-41a5-9417-0a60dabc5b93",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5e8ecc-634c-4f03-94ff-d963cdc4ff95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681e3594-5af6-4b31-946e-2152ba305fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5d555a-8ff4-44ac-b446-df90f292a395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d2a7d6-a34b-49ca-a7e0-6845f3cdc93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0215735-fcc1-48fe-9cbf-d3ff02989ddf",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547c6e2e-fbce-425a-b60b-7dfcf4bdad00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c91aa73-d33f-408f-8e0b-617270294dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7586de42-c2cf-4cf8-9013-b0085701f5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68bdd599-5d19-4979-8acd-2d8bef1ea532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88cf84c-743d-49c7-ac1c-47fade7d9ef2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18156d8c-775c-4cdc-9ebf-322c8a6ea116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70225ea4-6d93-401b-8f4d-f7b2dd90c122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9160951d-3b45-4b03-8f4d-846934f5110e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa3f08c1-c308-498a-96fe-19c6766053a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59098932-3d80-4a3c-b0c9-a105eedff5fd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97a9137-a12c-4fbb-b9af-c5e3402e2186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52bb368-0cb8-4855-81cf-ba5b4248a761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8b259d-4476-49ee-bee1-078eab5e4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79fee4a6-85c7-499e-b546-7069e4224bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915a7384-d386-4e5b-af03-31764f4f90fc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d32e942-10f8-4cf3-8e20-5676760d6173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c64852-d51f-41f7-8580-a93700dc3ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3e1b2a-dba5-4db7-9de8-7ba7c7619acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50f48bc4-c89b-4da2-9315-bc10da185a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7270fc50-8557-41ce-806f-6f3a7e386140",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcadbaa4-2c5f-4592-a691-a395fbced493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27076ce1-0a57-4852-9a98-7ac5062d8e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b80360e-f63d-4526-a378-37eb4a1322c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7ddb26-d91b-4152-a2c2-da57ea547879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0950114-9e56-46ed-9362-1deeec623865",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574313e6-a23f-4f1e-ae7c-d0fe7ac63be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abfeb7f-f3a3-4225-b254-47c400de2204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2bccae-55e3-44a7-ac7e-ea5ab1c2565b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "022604d5-daeb-4e2c-b1a1-37342eb09ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa9cb90-54f0-4041-be34-db7ef7a87479",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b0dfca-8cdf-4fd4-8437-8ffce136c727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc34ace0-f7d7-4b3e-9700-4123d7afc33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5c797c-5035-401a-8921-9d9787d0e7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1db99929-8757-434a-9496-f0765c1257e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5db196a-a407-4d0c-98e5-0fbe35bbb707",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f4f7c4-79ce-418b-9e46-2070168c75c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0eaef5-e657-409d-b5ff-918ee18d7a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc1af4a-9e41-4943-ba6d-4c6b8a52e0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a13dc07-5e2e-434b-a5c1-4252db0f681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bd557e-d795-44a5-8f4c-78b20d2d23d5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7be65c-d201-41cf-ab77-0d6bfc586ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c8f97a-49db-41ee-a839-1511c7375b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07506c55-9989-4273-a2e4-99b6f8aa2985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c31703f4-a76e-4a9a-abfc-46a12d8fcf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edd7699-915a-45d3-b02c-e905c1e5c8bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822b699c-2691-4112-8840-48d10a6b7b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e07f95c-cca2-4c86-9c12-f4dbe93897c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eac67a8-99d6-4f43-b4a2-46ee18e6c701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b30f8be-47b3-4ede-9258-866973260f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8888ff-1170-47f4-865b-79f8db84b15d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e5d7b4-f290-484d-a455-0ebbf29789be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0a05fb-f779-4944-88b3-43498e35dd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2699d609-e4e0-4f89-83f4-c66d63e0969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "064bc1ed-2481-43a3-9bf8-80d253c2b576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32a8469-43cd-4d36-80b3-211610f36744",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "097ebfbb-7856-459c-9625-b5a8e788c8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfe2b08-d030-4152-96d0-9c112d1845c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ba9c28-8757-4ea9-87fd-97ffb2e10c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "9e132989-66c3-4061-bc06-40c8a62e17ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c514ccf-676e-4fb6-a985-21ee7976d703",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab05b736-2356-4c5f-8418-a350ca1549d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71363dd1-ba30-44b6-8b6b-0f0d2bcdaae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da77fbb0-fad9-4ceb-b1b1-bfb66b3a3e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d958612c-9282-4877-87b5-4742cbc0d818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd62d094-bdc8-4966-a683-01868e5646a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9efefdd-63d8-4968-a555-50943139d4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76712ad0-4195-4192-8062-1b754fec0b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cef99b9-a2d5-4ca1-88bb-9bbbdc600c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b749030-a5e6-43ad-98a8-975117bd2ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb78bc0-54c6-42c0-ba01-7b9759a21042",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7707febb-5844-4af4-9cb5-faa049ac797a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26daa0a1-fd21-4945-9b3e-032fb8d94965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d646fc7-ac59-4e9f-9c46-05cf182d246a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3bf14f-b80d-4392-aa62-c3e15df833c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219d3060-e522-4df1-8d80-1fd9084ca3e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50922ec-dbb2-4198-ade9-53914d122539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923e1757-1cc1-4fe4-abb6-295fdfa712a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7568aaaa-103b-4e0c-8d4e-e5e88b41eabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f11e070d-0386-400c-9231-56a39309e3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c0fa96-77a0-4b9f-919d-2a6d891736b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083960aa-bf55-4206-bf7e-78df299fac23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a8d6a1-2abd-426a-a7eb-72cd0d70a340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b2fdd3-95f3-4a1a-bddc-0e3ad895e092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1b8986-fb4d-47e0-a6a0-b67efeadfbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f3b996-a97f-41b1-bbc9-30df867120c1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049032e2-b1f2-417d-8130-b13625b6ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2e64b9-30e9-4881-b5e0-6b9eabecea93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0cc852-c399-4403-b3a2-c7c1eb60ef03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b64fb886-93c7-4344-aac8-b2a9d6c44603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed5dab9-09ac-4dd1-9f57-64b9428c51fa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68dfed68-7df8-423a-b2b1-2f227bce058a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096ddeee-b772-48a3-854d-fced84b92005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3124e070-703b-40b3-9ef5-5f5f0d109bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "070fd93e-9866-4575-abb1-25f33ee3ef2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d2cec-07ca-49cd-b529-164b5cc687ec",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1780b7-0f19-4a06-97cd-ab12ac405520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b9e9f3-eeb9-447a-9a30-458f2a311f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cd330c-4b66-4d99-92d5-8273d6c63dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae74596b-3309-496b-8f77-862a4207624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ee92d5-ddf8-44fd-b274-c49573c2f264",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bbc91f-1614-4d78-bd84-3ee072edb602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbda7ca5-923c-4c8b-b81d-8249dd6d1b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098babbb-b1e2-4103-b8d1-4a0143554499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "811fdeff-453f-4f7d-94f6-0a4e7496e3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb5e09f-9f77-456a-bfaa-fa783d423d33",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d322dc05-1510-4cab-8e09-cb9f2dc24659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68cb21f-6764-466a-9fd4-751456d68a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d5c7d8-295e-415d-b1fe-3a6d0967fe38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "613fe037-d2ff-4cad-bd91-c961c5e1fa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7400d1cc-4fc4-4adc-95d7-b77c7abfd5c3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0162cb8f-9b8f-41b3-adc9-7e22b00ae5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f75460-c6bd-4638-adff-3a530de33200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974caa84-6741-4f8a-bb8f-aa09b1c4e411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8091433-049a-4298-a8ab-d8153d78a76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f7a506-8bba-4519-9cff-f3ac9cb97066",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67d5d20-b015-4ebe-978c-cb31e4999d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdd74c7-310d-4170-93e5-cce37262f890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b332ee-e341-422d-8a1c-b717b79cf12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb1e2dd-e32e-4594-8bd1-638681c21ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49769e9-04ec-45f4-a5c3-5b5d9ba76063",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faae758-b63e-408e-8985-66a900a44b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e810bd1f-5135-4d11-9ba1-189b5524d9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96f5e53-4b98-4245-908e-db4ba723edf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1cbc4e-9121-42f5-9a3f-d1c3d45a52bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a87358-93bd-4b86-b7cb-6e103dde2449",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fd7ef0-2930-4db2-9232-ef64ca31f436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c48b4b-ec98-4c28-8bcb-62b828a459ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78934d6d-6e20-49d1-b628-dfbb82936f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c333c0-163f-451a-897c-27b072d09116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a7e153-baba-4951-972c-461043a8b18d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93db580-7f5f-4306-af8e-72e13bcc54be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77966d28-4277-48b5-8595-814ad1a5f11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c8f54a5-30ae-47aa-a3d7-1d02841a3876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad77be4-798e-4689-8b01-3dc325d06e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd05a30b-5cc6-4478-a20b-a4a9c4c9eabd",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b86c9d9-32a0-4ad6-a2c1-8029db5ecc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d71eb31b-41a5-49a1-99d3-bee83104581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3942544f-2b36-444f-82a6-e1ab26be03f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9316b17-b065-4ccf-b827-1a4aec319cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49248eee-a5ed-4afe-ad2d-4d0407d34bf5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d6c298-2e01-4720-b72a-bd0bc1110f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd44c27-3593-4c29-aa87-17c3fa919a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f89925f-7881-4b1c-9655-b96bd95e702d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "664331b8-66d9-4b45-af9d-57e45259033b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc827335-e261-45b4-8ef0-fbdbae90d70f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b836a745-3b90-4f6f-9ce7-aa2a5ae7b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c83a744-3f74-4199-9c41-3e4df87cd23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bfa7f9-21d5-4bf0-94cc-909ea80c1ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc829e77-6551-4ab0-b149-92bff2588383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a7f874-badb-4925-82e3-32d51b85f311",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7bf0bd-4738-465f-9c04-d29892a23940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ba486c-01e6-402b-a8a9-790e8c395c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6b8e3b-4681-42f4-9c83-1ead21f6b74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "230b5f8f-27d0-461a-8467-27fdb5a3265d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3244a6c5-f548-457b-83ac-2ccc89745e4c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6dcd42-2b03-4dc6-97cf-e2c079c98e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f28312-3b7e-4064-a1ef-e00e082880c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1db79b-c0db-4e7b-ba43-5d62eb4eab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd80163f-4e5c-45cd-8c4d-f3a4747c8eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356250f8-63e3-49ea-a6f3-806cd7734df2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1de1136-5ac7-411d-8fd1-86f308418517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e5411d-4a28-48a7-bac7-f7fc578e8bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fec599-5436-489e-9685-b0f8bcfb4328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba07c8fb-9207-49eb-948f-f592313108b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87abdf64-6813-4396-9a16-a3ad5faf1363",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579769d6-5a88-4707-97c2-9f03b397c415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c259ddca-49a3-4c67-a81b-fe946e401f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f48a6a-22d8-482d-b614-161c107398be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c741e4d1-278e-47f8-a1ae-39a5c54d34fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ac960d-e7c9-4a86-8ed3-8f83a05792d0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fca4a4-9e08-431a-90b0-e4f132118315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e63d18-0010-4c56-9252-316e1180bbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570c8891-9d5f-443d-bc06-6881d23b2002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ad147d-d776-4859-8ac3-f7de05acde0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1427fc3a-0856-458b-bef6-1a2cce98492e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8a51e4-5e2a-493e-b60e-af3689afddf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab92afc-7b01-4147-959b-dbb8931bbaba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5e68bc-ea5f-4941-956f-1a1e2ea2b53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2421bcf2-f656-47ba-9688-0eceef4abb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27542d2e-c7ea-48d3-8a53-02b00a4052d4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc4d336-f031-4c7f-b9af-8ccec797f7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31fbb0e-71b0-4d99-9034-0ca133e664cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3597b76-5796-452d-88cd-4bd025ce93f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c168c7e-cb83-493d-b389-c107da0d676e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dd3ffd-a5d5-4c0d-8d60-94803d8c86fb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04782651-3f1f-48ed-9a21-1e51530e63d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99facbf-ed5b-411c-9262-9206af0ace83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6681cfa-b1c2-4085-b410-683100b769e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea404b99-c1f6-47d0-9681-10c9cb37d5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cae0a8-2029-4a92-a5e0-2127b817d038",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d592362-eaf8-449e-9132-304b8d15915a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c34071-6bb7-42d8-a71c-f708911b7e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d402219c-d139-431c-a0e5-de15e6e8c925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18092e4d-9720-47ec-b314-19a6a5814982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c989d0f-22db-45af-b460-ae548d252a80",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66a101d-43cc-42a1-9efa-2c8da7ae675f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d9f2a3-7aad-4deb-bc27-c8420483cf60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71c3323-74b3-4168-9e1a-ac9034cb187f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8239db1d-1907-45b8-827b-d636563c18e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a13a85d-0889-449f-bd49-422c7e2e56ed",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee912bb7-6df0-481e-8ccb-1697a35a5112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cade244-f15e-4ec2-bf68-4d2ebfaa256c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4714d2b-6fb1-4605-990b-42ec0864b81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9221cf-75db-4efe-9c6f-8e57f769a844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1eb87e-1b30-4784-b014-834c3d27e35e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de530ab8-b70b-44ad-976f-c45de297c981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c35a2c-1945-4023-8356-ab800791d40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2753f68f-628a-4260-9d13-4288c1fc7472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dadb02e6-2e7e-455a-9add-1809201adfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eddea2-3696-42fe-bf67-8ae248c6e665",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b2ce9e-9639-4f97-a586-4326af35fe31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84452ab-0398-4a1c-bcf8-5daf8c412648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012804a5-926c-44b7-b09b-68bd4fde58c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77ac3266-b085-4f81-906c-cd8458357b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bc06a4-67ac-4a14-a0c1-efaa5ea0c94c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e851eb2c-7ff3-4b9b-b5be-8b3ae1b95b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4435b34e-2c23-4722-bf43-84b1c8e6de29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab43b74-6756-4ceb-8727-9d4fb6418cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c09cc5-b9e0-4d3a-8615-29568d4a9675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487518ab-6427-4a1c-8a50-a4b28fe6c902",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eaa635-314d-40f2-a25d-c38637b7c7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f224f181-c8f1-42dd-a29a-33fc55087c8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47686fd-46e4-44b9-a56d-1ada3820765e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fb8162-8c69-4c51-8b85-9fa67cae156e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4defde-d92d-45f0-83c6-802983a3fc31",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b708b38d-911a-4054-b17d-373f2a830e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3279263c-d207-4400-8cf4-26f36a4f3aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257f78dd-8257-4fea-b8ae-51061255a740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ed063d-30ce-4575-a863-b075df59f5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e1ae4a-f878-4f9f-8dd9-b4343d07ecaa",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf9124f-56bd-4385-9c27-3c5d169d95b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6f0017-a9ca-470c-8f61-0e77c02c4c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad57ec0-9025-4d06-9464-535e5f217b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "04c80144-9bf3-40ba-bc44-fede81de6505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d69354-3fef-4851-87e5-465c53ab1259",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cad000-7a50-4c66-802c-33d7e9fa04bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "14e9accd-41e9-4fa1-821f-a4f4c54da45a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c56abf4-23a9-4d72-b472-5703255fc5df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fbf186-c472-4b22-a61e-3992b34edb3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e9bfba16-1332-4249-93aa-bcb81f42fae0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3b88b6a-0ffc-4ad8-8aad-f2615b41026a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e85aa14-31bb-4050-892d-8ab10ad11123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a789ae0-b1fc-454a-b22a-a36cb563f66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6516479-a9f6-49a3-bf4f-4d51f6b7d20d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac69272e-2be2-488f-8446-9327c139a7a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fdd33a6-88f4-4a18-905e-7088dbf08b28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1103bbcf-e4ab-4bd9-a71a-1ff46fe61c9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0ea53a3-b188-4505-afe8-40aa6c8860d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "892693cf-69fb-4615-82c5-b6e6451903cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0dd741d1-a528-42d6-a6a2-fc72e603da13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46f9ecc8-9215-43be-9fe6-33e4e45aa992"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "27ce6740-a2c7-4093-bfbe-9439bd7b33e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4045011e-f9ef-4ef6-b791-03f706430bf0"
                }
              }
            ]
          },
          {
            "id": "4f712be5-19ba-4eb4-9933-d5e43dfcf49e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "835a1c33-6df2-45b8-a5e1-5aac40b18ab7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f058d419-aff8-40c1-97d4-f737790d4fea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d390207b-40a0-471a-a192-c6948049c6dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb7e3bc6-3d72-422f-bc50-3941f1099615",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0d2fdee9-19d0-4533-b0a9-519ac1ecca40"
                    }
                  }
                ]
              },
              {
                "id": "64868e62-abb1-4804-b607-9706ffc0a7d5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccce2743-4c5f-4efa-9658-992632657218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8a661a8-be2a-4621-8694-7ec730693daf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2885830f-7ddf-4beb-8b84-73ff910d5ad0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6370f8bd-ffa0-4554-81c7-a8f2231105fe"
                    }
                  }
                ]
              },
              {
                "id": "ce472156-684e-4bdc-8b7a-e38a8521d5d9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53837a98-979c-4b30-a067-19ea762e23a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac94ceb5-27e7-4979-8c82-fb3e984fc359"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dee3465-0247-4b6f-af3b-492411fb8a6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "547cb868-1a69-4ec7-9c4c-30e905f4ee46"
                    }
                  }
                ]
              },
              {
                "id": "500cd655-f2cc-420a-b391-8228752ba9de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe6120e6-c380-4b64-bec3-659b134b589e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f35ff835-28f4-4fcd-b119-a5690b79a436"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5f92221-819f-4733-982c-681d1b7b423f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2936a322-5d13-4b9d-bcdb-89e42224537d"
                    }
                  }
                ]
              },
              {
                "id": "1789000d-653c-4a8f-8900-009d932a6aea",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5561ce5-2264-44d1-b8c9-5ef8d4e098a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65da660f-8c83-4c7c-a9c7-f7205ab5b947"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "011c5aff-164c-42f0-819a-f23d84f85d3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0bc612d1-6f11-47e0-b10a-2be3d64fe4be"
                    }
                  }
                ]
              },
              {
                "id": "d7b46034-7807-4ee4-bd3c-902212ceca64",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3490ceed-e708-4bf0-8375-c1c8b32c0052",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "616e0c4d-b8df-4ae9-88a5-81d24a42fbae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1faaf7b6-9c5d-442f-82f4-1430a7a759f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de684261-2d80-4539-b13f-4c261d5c9ac6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ae00c6c-95cb-4a0f-bc03-4bc1cca6ae5d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fc94484-e5da-4252-b172-cf1fcab58bc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a1f54223-388f-4e16-b13a-a9e61e59d127",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2edee8f5-b4c0-4c30-ab8b-e3904f230f29"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1b0eeae2-c011-4f46-9c3c-d2a978bb7b38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "fa2a5052-1e05-43ff-aa9c-d1db60ec08bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90f289b1-f14f-4ea8-9c9f-fed1dc9f9761",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e8581ef3-7bca-40cc-bd7f-7a5ce89da5ac"
            }
          }
        ]
      },
      {
        "id": "7b62e09f-e77e-4c12-89f8-b9b3763c5fb3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2acec72a-54db-474a-82f4-8acf32ff9bb3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd0d0830-e763-4f25-b7dd-9dc28282bd49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0eb06cf5-0b05-44ef-8576-fc5253a6d349",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42358ba-39c9-4f10-bfc5-9727277da379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9100e5c-33c4-43ea-b19b-1d00b526646e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71353795-e444-464a-b893-7a562c223f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a88a18-8ad5-4c0c-a567-3a19b05c6eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fbbf19-ef9c-48e5-afd6-a7d58c8dd7d5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d482510c-c23f-4b36-9a98-3d654db8458b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f815b3fa-c10e-477d-939b-c078309334fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff0944b-4e78-4512-a156-e20c92188e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2d223a-581f-4532-88a9-069f165e2047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44aa2a2-5e3e-4dd8-83d6-93a2fb68a974",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068c76c7-3408-4761-93ec-7c6728d52f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2f225d-8902-4bb4-bc11-15e3123bb219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33feb41-8604-49be-8467-11f749aff13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f13c2dd-53af-4564-8f29-c2487630a84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b82ae2-f747-4400-a5be-59570d83c2c4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a0f038-5fcf-4990-a977-821f5b5bcee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be321daf-5b7d-4e1b-869a-ae2127cc492b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfedcae5-6a5d-4823-b136-da8adf3c061b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d32c5b38-e8be-454a-9e5c-5171f7e8049e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e68655-b78f-4bbe-a653-e5b4645c44b3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c10fd44-f95b-4da8-b16d-f51d779ee868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1023e38-14b0-4d70-905d-d8fd50e5485b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef133a7-4d2a-4ee2-b12f-370a2f1bf8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1c60c7-08c3-47b6-96ae-65f9da6663ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393f92b1-9ae8-4092-8d64-a010062e42ca",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5571ac-e5af-41eb-a64f-33b2a1054105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e3a146-8948-4ac4-8b03-59b5dbcab141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ffb0a97-c9cb-4975-9423-4245cb44d891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd415330-7c6b-4381-b7dd-4239c2c689d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ee8d0a-914f-4063-b62e-4ad11205664d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3a4b70-e91c-43ab-9b0c-891531a06da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0025b0a0-084d-48da-9745-266193882e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d321edd-4695-4c72-bc5f-87bb2214fb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9420a65-3ea4-48ea-8ea3-d489f2b103d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd26c5ce-8f07-4a56-af5a-6c450825f00f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05eb61b-8333-4970-8ea9-5d9fa967d10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd965091-a8fa-448d-abd4-320ba4bb14a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58caacf-86a4-4916-bc10-84fca90587ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2578088b-8d6c-4534-a0bb-f127c647e3ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e4b51d-6e1f-4448-8ddd-9b9d6d571510",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863546c5-5b26-4b54-a2a7-60de87ac96b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64aeb70-0229-440c-87d5-42b6af183673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb54d684-89ea-4b9d-965d-acae8da119cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00de6f74-2f5f-4bf7-bc4c-b3a2e9954683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924fb19a-9cd3-4900-a04a-856c01e1f673",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6529dcc-0022-47c8-b312-e90ef94735c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed19328-d3dc-436c-a0da-d04f4771434a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7825bd-1d34-4ee5-84e7-376f207801ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "805de8de-08a9-4ace-aafc-07da20338067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff3ff96-a32f-4d78-b497-91f886c49d07",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e302517-5cc7-4ee0-af22-4144bf29b609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c4d26f-e27b-4325-9c83-586437f9d129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db26652-aa6f-4619-8c4c-925656383249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6393c802-65cc-49db-a3ca-69d81b763e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dffc520-d8d8-44de-86a2-7189c2f399d5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3e0b34-fa7d-4cd2-bbe6-6e8a688ade98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75f42e1-da9d-4dd6-a464-794f2e883f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5612b7c-6237-457e-918b-facd11de4ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0efd2911-4319-433d-a72e-722c61f41c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6d09fe-3239-4b3a-93f6-12afeb42f41b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826659aa-0c74-4ce8-a21e-cc1f762bc406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba57fb61-cb93-4c1b-9045-d9ef761a2982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c515595-029b-4e1c-b4eb-1e7024f01217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07faf1f-2318-4bc4-b34f-30d14d1d5419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0810b1-4a38-41e0-8810-16b8c44a11d5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4d0614-f8fe-405f-9fd5-f5f89ffd7d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3751ed8-d328-45ec-b28a-8b6e89bb7c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78ddc4d-b564-4197-8ab1-a5a0b4871f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdebcfa-b9d5-4a50-abe6-a3782cf5ae72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f791040f-0a3a-45a1-8a7f-83771aae748b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2089c5-d585-4956-9a31-dd57e0df3696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f208fb4-1efb-4c40-a303-9713f36e2b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5334e6ff-f42b-48e1-8520-6d08d641390b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e53922f9-cec7-4660-9fb6-0fb28313c7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176358a2-09be-4623-8ff7-7eacb0be2541",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea50d10f-a172-4e0a-b08f-27fc650a5205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c84893e-3903-4860-8ce7-b171eca21629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4263fd43-2b8e-4056-8cfc-1896c79ef3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "29d5aaf9-2f5c-4208-b6e2-70c0d035766f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6981a030-e3c4-4c63-b40a-a497e6763baa",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c2c043-0c94-4e53-8b47-1b5aa8493e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e9d6bd-1e3e-4286-b1f6-a2627d1719d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85fef07-4a95-447d-962c-5493a4de3bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c9c06e-d584-4439-aa32-2a6b7b353021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4f5cf6-771e-49cf-9302-8c7ec28e5c19",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ce4bb2-bacb-4d36-88d0-b9d955f96792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9ad5bc-1e81-4dfb-9287-ecf108129994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf00603-4fff-40fe-a96f-b0e72ac0aef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf8e8ef-5f66-4193-ab49-f8d739b08c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ddd898-c345-4a26-8169-f941e8dabcca",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba4d614-bfdb-426e-b66b-ba8d88ffbc08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48a88c1-6769-4248-bef9-91c1ec68bd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aac207-9273-4882-b07e-103f72c8570e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace0b45f-fef0-4fc2-ae3b-b1af3b726d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e407c30-9005-4edc-b3a7-03ea9b2ff421",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98e8a28-15a9-4125-9968-47db292e2c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307d21e5-d65b-4f32-b227-93d66af57323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939e8985-0723-4852-bd47-1560e9102cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcbcd1e-9d31-4e43-a98b-eceb54d6df10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48827a4-91e9-4618-9d30-e7caf224e03b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ff3e18-0d94-4c44-beeb-49eee8cce231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8725bd9d-3c1d-47b1-9071-eb4976032aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9ba674-3452-4cb4-8069-1144f4038068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a55da26-3564-46f6-ab63-7ba6891c8c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b2ab79-a1f3-4c5d-b8ef-1eecee755119",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e08a701-efa5-4ff3-8c30-77eba56c93e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6d5107-f0a0-44d2-8ab4-0fc4be7f5bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2b8e42-e542-4ffd-bd70-010c955fd657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "065750f8-f036-4186-b5f1-9b605b451935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1527a2-ef76-4ce8-8f32-3593f6311cee",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18650701-d5a7-4c5e-82f1-553cfd42e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6685da3f-488f-4c3c-912a-bef7d81290cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670590fc-4b26-49a6-ac11-4a077d2d0137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f3447b-8d36-470b-82c0-0005b7f0ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc199c8-35be-41c4-bdf9-bf249c185bbd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af26a9-aa98-427c-911c-c03d22261e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b67f1df-9368-4918-9660-4d34111f53f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ab6680-7e0f-49e8-8e08-797499f8f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f1d9e6-8132-499d-a980-ca6c2b3c3392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0d851c-2f6f-460c-9b0c-d5c5ae0076d1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1efd47-d1d1-4156-a143-514444627445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e7523f9-f84a-4016-a1c1-a22bb8044868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fb2c2f-5efd-4160-954a-b2df1891248c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a0399c-a090-446b-9250-83a3b34edb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06a9474-6379-49ef-8c13-c5508bb81dec",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c34290-94a7-495c-a213-2b0b0bd5a16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9878488c-eb8c-432f-93f2-e97a96e9b621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9156fdb-36e9-4249-bd37-273befdf744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf039ea2-7247-4278-ae0b-698c801fc609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0995eda8-194a-48e5-97b1-acd9a00b0098",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9ddd1e-b5af-4c97-be0c-61271a6de7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a49a2ef-0b47-4e8f-91cb-c1a23fb65721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259717ec-ecf1-4c88-b52a-abba43b061e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc4f402-eba2-49e6-b1bf-81c0ca624779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41da34f-8b83-48c7-914d-5eb87dcc2eee",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313f53a2-379f-4f3b-88f4-8c988a36bc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5227d8-4cb2-4e11-863c-115abe3e8cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4ac1db-e563-4001-9109-243514b00354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38a3bf46-9ae8-4f31-b534-23badce939a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a01ef4b-0fdb-481f-bfec-9a4fe15bfa0e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e4463d-7b3e-420d-a895-b09c74fd72df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eca3911-68d3-4f05-a8c7-7994b79e201e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6d233d-c907-4a9c-8c43-a308e43ddbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ec68ae-bc37-4520-afc0-14887944c56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5bf011-be57-4215-a6a7-237edf89db99",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c174a5-6b80-44ed-8588-4a683b27dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187ab98e-3e94-4104-b74b-a92fb2ba788e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b9bf10-d3a2-4140-b2d3-0fa4dc1b7faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c34385-33e2-4e67-99e5-ed79427a6f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eaa003-8a1f-4efe-bec1-4c43bb057a59",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141293d1-770b-4a29-a4c6-a9192cfe772b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37602d35-5f7f-4992-9828-d2d9667ff718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456aeaca-3f62-4a15-8409-9885ac57a50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605883d0-e61e-4cde-9a9c-d2b4f6f7a22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67cf7fc-417b-46bb-9d65-77f75bdb1605",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f55cd82-a90c-491f-9469-4df1b5831d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e334046-e704-43e8-afaa-24918a3f48dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc9376f-1e9a-4803-ae9e-af09d775d2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b63076e0-9ae2-43bd-b261-45e73b7e5eee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bbe79485-53e9-4d61-bd38-d6fe34d0eeb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6bd7a7f-fa0f-4ce0-af40-b180d758e346",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d338523f-e393-4083-ad6c-ff09d5563497",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "94275c4e-65d9-48d8-89e0-2a016da9334e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef417b7-0d42-4076-b733-0000061da778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e488ea5-3992-4772-927c-0fda06f6e9b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e98ace2-1f96-47e8-881f-2a7c20229b85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "578c7395-6da5-428e-a7d1-d616bec3439e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52649df3-7bb2-4853-92c0-e5bcdaff8dc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc1d1e5-eb88-4b2f-9fb1-962b91c0ec62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42875f91-bd8c-4607-856f-4a964aef994e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "107d7c2f-fa01-4d33-bb0a-d83d2d83615c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38e4479c-107a-4741-b6ab-b3dfb2fae1b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee5875cd-2133-4634-a35a-0087813dec35"
            }
          }
        ]
      },
      {
        "id": "ede54381-9994-4980-8c3d-f0023f2c6d81",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "51b15267-4144-4c34-b7d8-deccf413d574",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d464dd8-2bdc-43a4-9063-985be2e133f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "215d197b-6b17-4497-8ac0-4fb6e33afcf6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5eb063-09f1-44d3-8854-a372d0a80e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fce6258-fb06-4439-9c5f-f3d1dcbc91bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df35fdb-f0bd-4904-b2a6-5056fbcc54ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bcb476-5901-428f-9a8d-3d63aaf871f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7580159b-ad0b-4a7b-acdf-13d60e0f9c0d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa75638d-e944-4825-9a10-cc9491ed7ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33530bb-9bf1-4c3b-acb9-10403530e007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bb9dfd-7ce2-4cee-94bb-ac1750b82629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27185f04-efdd-482c-b003-0b7abda4c660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97846675-ea88-4be9-bb3f-c695b616d4b5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f86a488-b03f-4370-aaee-63611c5278df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f36d66-986f-49aa-9424-a090d1404c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe35cf76-f61a-4c0d-b0ff-a5b120b0d3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a77d9af9-2c5d-471d-8cca-6126da1378df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439a92bc-7daf-4d31-a1c6-b601672dc4b7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deecf600-8b2f-4bcf-959b-226b9e9438f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0469024c-42fe-4281-87c1-2e1442d0fe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdabf7ba-d65f-4ce5-b051-20685cf01b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb275a19-b482-449f-ab4f-f8c3550ae995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96f0dcd-2644-47d3-8aa8-bee4d8bf6c98",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3eb23c-2d4d-4926-aa46-6a9088773003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8193ea5d-204e-4353-b49c-b0156ae4691f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e979a501-178d-4bbe-bf7a-9a1dfa9d68b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4bd8ae4-afee-4757-aad1-2d030073f186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95edb839-1905-4c94-adb0-de1ceca878da",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ddeeaf-afca-4107-8b20-07ee814c153f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9abb4e5-5813-4239-92f6-284a99a9d022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300df969-f897-4c3d-8e71-9b4d0875cd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c2254a-a672-4ec6-ad70-1db68f7afbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c49d0dd-5544-4d65-80b3-c4dd6bb1c9e2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cfd875-9d2a-48c8-9222-0faa088dcf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9045a30b-4d40-480a-906b-62281d379a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9352feaa-8fb7-4c67-accd-c9590fc610a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3424b2c-32e1-44f9-97a4-0472d6541363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69b08b4-3a77-41a6-81ca-d385bc5640ac",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d43146-e7a4-4a80-bd41-e0f86aeaf7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d7749f-300b-4c17-997f-20af657a3a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b356e383-4ad0-4898-a74b-52e3dd1d768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5222d624-343a-4965-863f-5320ccf0d7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5752146-1472-43fb-8fec-e02a8bdea761",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edbdf95-c369-4516-ab23-3ecf3ddd75b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f03198b-84a9-4810-9405-5e296249165a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bef97f5-0a3b-4aa8-b4f8-e986e34b72a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcef8bf8-5584-43b7-b28b-d9914a68a333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbe0edf-cd7e-4073-9f2e-01daffaa324d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac6be30-6613-4750-a2e9-bb05d729a067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2de1cdb-3db7-426f-b375-3328c7507ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd71293e-1d30-4930-ab29-79e863483486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbe1316-ddd4-49e8-b065-566614b94271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeee2e8c-04bb-47d6-a0a3-397e7edaa19f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c4e72c-7b03-4a7f-9801-6d33326ada22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c695fe-f2ca-4fa3-91cf-bd1875f8f95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fc1fb7-a484-452b-b4a6-901908372b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "230bad66-66b8-4fdb-80b7-fd0c4b8ccaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fea2cfc-d64f-4c7d-adce-bd2fd2dc7e29",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638453ce-e9fb-4e40-990c-65aff26ceef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57746154-3cfa-4263-85ff-098d0f97d842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da47c7f-28e8-4c07-973d-bcdfe1107100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd13bb1e-6795-45f3-b08c-c188de7c7eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a60f55-1283-4d21-bd20-642f8e2b3f7c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad9a346-872c-4788-8db9-9efcc47079ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644dc800-cc47-4e6f-abfb-9998ac7baa4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a71912f-6105-4ac9-a97d-57911d46fef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2325aeca-c33a-4ae1-b44b-99df9a2255a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedc5696-9c58-423d-8946-bf24fe40a4e2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b37495-adb1-4449-bbf5-51fe3ed04f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349bab4a-4533-4106-868a-7064cc155cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb91ce41-1a90-492a-b5b6-bfc3ad8243cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc623ce4-c843-41e9-aa1f-0e3b6b75ab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf157d5b-f8a6-4497-9730-6a25b9725f57",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d17e8bd-119c-49be-b7e8-7a2101619018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8843c6-7def-4f3c-a612-998368adef41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18654530-89e3-49c5-9b07-2fe7b4c37cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1444f675-fcc7-4d4b-aa80-2dbe6cda50cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18675c9e-cb3f-4d34-b536-9f3e08005de5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87c6c41-9604-4c72-9ea3-dd9e88d56074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943766c8-ffa4-4cd6-852f-84f37b36887c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7c59b4-1379-43bd-bc4a-30da2d7a9069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1009332a-5bc2-4568-9b2e-e8b4460d35cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253a4620-469e-4312-a426-3f4030d413fe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72986900-d452-4c2e-ad79-77587e033cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b522a81-f967-4944-8dbf-2b9f7d1fcc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03f6774-0762-4624-bfd3-b1a148a2ac81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d915f4-77eb-4a4e-b408-96df33128a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144e84a2-0686-41a6-8abd-a1f5ececc4dd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda89ea8-3584-487a-a1c7-c2eddc9f744e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b67e409-270a-4d62-a0d0-5d09bc5518a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ec5a90-2378-4df0-84ee-c9611c7774ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ae4228-3f2f-45e3-9eac-2cbd3a7a1dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f771df-e95b-43d3-b9d2-a0a47251c91e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1936c745-8b20-47ad-8647-41d50073c8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ad05af-5879-48b8-8619-d807988ad212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0df135f-e3c7-4c0a-bc11-29cf6b18b400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13fd9056-857f-4691-a03f-335e4bff1ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b4c5af-4ce7-4e83-bfef-4a3e0742635e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127bb669-3113-4d18-b815-357e4701d289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb35cc9e-faba-46a4-8c73-735a43ecc35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeb9a4c-aaac-44f1-97c6-3682e11b8edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "246a675a-1c05-4369-b8da-c12924102b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13d72f0-7e16-4bd4-b22d-acfec2f63359",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44512970-c996-474f-9ab3-e4369fd302f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274dadb2-160e-4801-864a-ff15dc991198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f241fab0-c0a4-441e-8224-2f310b61cad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c404b552-e945-4719-aa5f-d52243b04e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93910a7b-b552-4645-8371-54c9a16d5ef6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dec2dd6-26df-423f-a5b9-a1b9ccd27e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d03a9c-594d-49c9-bc05-101aec82cd22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04450c5-0013-4ebe-b70f-be371a593943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a08019-1013-41f6-9abb-8341e1790361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5578fc6-2f71-4f69-865e-ef579cd62786",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1924388-28d5-442b-a3d6-432300b5d242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ceb53d3-b454-42d8-9b5e-46d85ec63b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970467b5-dbdb-48e5-b830-515cf79bfe3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c8267d-6c9f-4648-a204-a96ece7eacbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49151373-5c76-42cb-9477-47b347b4ac53",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d77ea0-7c88-4dcc-89f2-a1b27441ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7eed92f-06f6-4020-8cb2-4165ef9c16b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1a03e3-0ebb-42ba-b48c-7ffdf0758948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f86e2966-e876-4790-bd38-7d3899eaf41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcefc3e-f228-4050-826c-daf53cb1bc3c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291de7ce-5257-42af-a1ed-6b424eb75932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa688b97-c690-4d91-bc70-35e94740f139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70194096-c86b-45ef-b855-4646fe28c27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e89e64-f71f-40ec-8c6a-fae28f0d6900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f2891f-ed85-466f-a047-5e141227abba",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe0b6086-dc26-4d50-aace-31732ae49a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a5c275-d21e-4e34-91fe-206133834fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d97b51-7bf0-4277-8bea-c4ef3df8c704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bea86ca-753f-45ea-b0b2-97c874580392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16db3e2-b2e0-4a2c-b545-8855915fb707",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960ad637-c853-4d34-9179-5d7595add0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb73fe6-c1f9-4307-93de-9abbb67a3b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf971ac-a596-4579-827d-e99724d1e883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15784f55-ade8-4e69-82a5-a9609b0faf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9864d4b8-238e-48e6-b406-8fa43732f1a0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c8ab97-2407-4cdd-8fe9-9ef1ec548758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50075021-ae46-4dc4-b204-9bdff84ab7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734f8a97-82ac-42b5-aebe-805f7b64de2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4004bd-a081-49d1-84c6-5cf65dd8e04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf37a325-5d32-4cdb-8ab4-79a9c3856f22",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c5fa5a-30b2-4e9f-8227-c8186b65f565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ec5c57-e086-4f30-8cc8-ef59415caee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feef160b-3d3e-4e47-ac69-c14ac97a2e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39ee880-04c9-4e1a-930c-b7fe6bb8cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cba3378-339f-4629-98c0-4e1260a4e30e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e15277-d7fc-43ea-a553-2296150e9e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff982b5-c221-4344-bbc2-003e7d94fd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec7b16a-0649-496d-ae37-984a663e7d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046e115c-e9ad-4e21-b189-6868cf964e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386f39b0-3bd3-463f-85ee-73fcbd9e97e0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caccb6c-8074-48f7-969f-ce7d722fe2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9cdf26-8f39-43ab-9a7a-698a929ae319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f07c22-b855-4054-a4a0-d07ee7d6d18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3930d33-1df4-4fcb-b3b3-30972dd0a1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bbe3f7-dec3-484e-8815-5cee5f72ed7f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e147d1-144c-4f89-9180-d8f85a06c42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c21d8009-780f-4ec7-9e0a-f9dcd18ebf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdba2a73-f81c-41c7-ae08-a77e8cb7b2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54ff01d3-3f94-4326-90d8-567d81a9886b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a447dcf9-40b6-4852-a4ff-838fdc06e109",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c57bc9-415f-4731-a425-afdc59ca4ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fbfcfe-f2b8-4f18-a52b-6c663926efe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d8578f-2cda-4e8e-86ba-a6327b0d87ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "086ed152-2972-4c30-824d-f170a2cfd7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb82111-e859-424c-b61e-47bf5d9d6c57",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a17bd3-7ce8-44ba-85da-c5657d4890db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575c3c3b-6d1d-451b-84b7-ac54e892fe04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b248bf-dd44-4dc3-aa41-6ee9f75ee4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6db2409-dc74-4f37-9f08-7a0727419f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2146cc9-227d-46ba-82d6-a574d68a7135",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9337c6d4-e898-4206-89d4-173caefe0800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4df31a21-aa51-4b44-bec2-02329392627b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e07c95-b953-4d54-8d2c-0566dacf3254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "029557dd-36d7-4d69-b6f4-7ca5148da020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11865671-4289-4e71-8983-e16ab3f591c5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12078225-d575-4eb9-8a3d-bd6fc7e81214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62705780-d4c0-4aa6-8296-c5f5d7b99ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c283b631-bd36-4007-816e-1103e12abdb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c514afb0-737d-461d-bbe3-0ae61bd4bf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8de58e1-49b7-4b73-844c-ba909a3157b7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c514f9-a8d8-4831-aada-0dac1ea8bdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b748bb2-dfb5-478f-91f0-10b161f2546c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f9b367-e38a-41aa-ac66-382737d1c10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b43de8bc-a0a3-411f-ab67-2cababbb6c82"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1694898-8821-4d66-b722-9f97738093de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47c93e1c-7fae-484a-9ec6-9edd185a4472",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2e6ec8-bd4a-4850-9c33-35e181f3c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d50508-9d1e-4dd3-8354-d943fdb77c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6503ba17-18e9-4b5e-898d-03ae55b2b52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7db5c3a4-d58e-4a51-b75f-9a3cd2ebd173"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4f2fdb1-ef69-460a-a069-06a434aef6a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2768697e-816c-4ef2-a769-3293b81cf00f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95b75cf9-2b66-4fb2-afe9-a1b60a0e3cee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbe38ab2-2c70-4621-870e-85e221865aab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9d49952-425d-498f-aec8-e5e024212274",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0a4586c6-4fa0-4b4f-9db8-86256d42911a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57e6b551-58e1-4e26-971f-973104594fc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "736fa070-735b-448c-b6be-26fbc31996e4"
            }
          }
        ]
      },
      {
        "id": "bd74a62f-3c5f-4e03-9c7c-d025bd1bbbd1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "40987ecd-116c-4812-b557-18d7d433c562",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc98786c-bb9c-4d0d-96a8-5ef32e387f80",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "063bb8ad-8b92-4918-b599-9bc781239842",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb92ac0-bc0d-4756-b711-eb9f7ddfc8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85566bf8-bf46-4a87-aef5-602a42a8df06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a44933c-5c2f-4977-92af-0418a682f7bf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdca3be-0c00-470f-81ec-76d96b3c58df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "616806c5-6298-4c08-91a3-5f58d9449896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd0eea2-befc-4dad-adc9-959fa31202a7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7b67ab-4c87-4463-8985-6bb415b5df06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ddac44-c558-42c7-a020-df37231e08ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b45188e-a0d8-49a2-be82-97822debc54a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddc4fd4-94b1-4ea0-a6a3-4aca12415262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4311b58-7371-4d17-97a0-b95e3b1df65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f098b8b2-8230-470e-8cce-7833a3f12d69",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34abfc7c-ab54-4d2c-8c56-08dbed6f4075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3bd004-f32c-40cf-893e-cc66c8f5b086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d843da-1aec-4368-8b23-6a312549aa3b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b38e092-afb7-4dea-ac3e-cc5c4acf1924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3597b6b4-1f37-4079-8b69-3443ce5db6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5ee465-71c6-4803-acb8-81ba192a087f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9272b2c6-69a0-49ec-970b-9e51ec6867bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a0dcec-747a-489e-b553-6d164cbf6472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107347a9-f05e-4584-8ca7-2fd36af58ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fca156-4a7e-4aef-9830-d12c814ff8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7166eeff-aa6d-453d-8cca-ea3a1a36b45b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ca35e0-6f82-4e06-8fc5-5f2a073c63af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc586d9-cbc7-4001-9755-87b27a0ad20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dde48f-30e5-40b2-8218-029a9b03d2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04e7915-970c-48b4-9dfc-070378962284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5608b9d-05d9-4941-8d59-986527d403b4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a05ea4-7494-4037-8266-3186b67a2378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ccc369-3c71-483b-9a74-3bd3b7e4e664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5b0f55-0f3a-48f7-8223-58f0eb49a555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aee41f2-4a70-4424-8910-4d5c16ca9f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3b1776-c7b8-45b4-800e-2b5b06e12942",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd9c148-fe76-443e-9af0-e5262623aa71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a7e0b1e-f3a1-46bb-9213-11f4ab27dc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7b9883-2b80-421a-bd10-78629072218c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b111be1f-f740-4e40-9fe8-c7069a82875f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2939ae-6290-4549-8a95-46f41e2aafbc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb8d534-61f3-483e-b673-ff89b1548d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3920c4b7-2722-42c7-b287-e61de0e0b26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfbd946-ad60-4931-97e9-cba5f20a6a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe73b24-c481-4ec7-aa40-2042cf977bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7752c80d-cf62-4fbc-8cc0-663a2e4434a8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b035853-1969-454a-a052-d0487a9c5fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6f3795-5f5c-4a53-89ce-a44ec6ec4639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0771c09f-3a48-4784-b1a1-46d8471ef700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43904ac1-350c-4492-9d9c-31f73ab90d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e4e21d-ddfe-4235-9877-c00cf123861f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3560144f-9707-465d-92a4-5873ac3e4dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b507258c-9bce-4ddb-b150-095cca9cd208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dad74db-d2c4-4e7b-bed6-4154fbc03227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bc2aad-6357-4a1b-ae2c-73d1c36a845e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b986cab-6b08-469d-9c80-7659c9b4b947",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c66eaf-67d9-4f61-9934-519572cb2591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c14aa91-7741-4a70-99a8-ca329ef3adc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020a0e46-4007-47b9-bed2-344db43a1368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a4ee796-4f0d-4e61-8439-072ad6ccbea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf04dac-22d1-4c42-8683-ffe45322e143",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c47541-2bb0-40fe-99d5-627693be2db5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4371a524-f242-4b7d-82bf-58d4ba8f4a4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718fa202-ae2f-413f-9f27-d860196aaabe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8ce743-4c09-41d8-ba8d-3c33ab54bc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6132cd61-3da7-459a-8cef-a4fa8c082659",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af1e2cf-91ce-4f3c-8b6a-ed2fec4fd91b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab1ef09-b8dc-4f35-a783-2668bafd1f48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93d27d-3fc1-4552-93d5-85febc5feaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244e7573-3a01-43f9-9c80-13f27c0d5c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201c1dc1-8371-4aa3-94ee-135c085c30ae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d73bb80-5ac9-4a17-a57f-82655759096c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d095df90-cadb-4fd5-8ee1-6bb2b9c58922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea6aa7c-448b-44bf-87a6-9fe3113e7e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6c5bc06-14d8-459f-87b7-f7e2606ab271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28031e8-8a44-4519-a2c1-f92f19e320af",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed91659-f1c5-451f-a468-f0a9b2ad70af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be883eb7-1ae4-41e1-b18d-bfb1c2e71afe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eddf194-161b-4a04-a6d4-145517df8ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95e64ec-d8e5-48da-9bf6-050d5808f266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46fba76-4713-4038-84b2-d4275914797e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c1c18c-0b0f-4923-a8b5-25f05c1ca633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf33999-119a-4b53-b2a3-aaf77f5e8c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e39a79-468b-480e-bb2f-28f665857010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676c1290-30f0-4587-9c0d-50080677ba87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0862c7-7da9-47ff-abd8-62d8ed86daba",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86732632-6117-4153-9d31-04e3ad1d2fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4013be8-9029-4a25-bfda-8c3c07be6cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6a1327-7253-435e-b854-1d96dec724d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a899df7-660b-44ef-9adc-3ce5020ffa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618677df-d583-49b9-9f80-706b4243f71a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebbbb59-2a75-4a0a-aff1-c4bacb22881e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774f48b0-0d81-412c-82c1-4ca6ddf38d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c128e6-0b83-4f49-b09b-6d832de6dd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec6a338-10a2-44b6-8e9d-1551db1f50e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f8d18a-6ca8-4380-8299-d3ca01cdb341",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61203d1-3f76-4db3-b029-967de5f78c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a962f3-04a7-41d2-a840-1362fb9734e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8268e4-708b-4198-b754-055eae0a9183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac1f74c-85e9-4791-aa22-392e27b7b097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e8176f-cc65-4c54-a758-1bd6b37c780d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a681e48-d692-4078-bffd-a7a4176f40ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271ede0c-0abd-4852-a069-a4eff2259429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5d2a03-4bbd-478c-9500-9c5dbbe61c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6539c2c1-c18b-4a9e-ba5e-419fb9aa935f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7731e0-f295-4b63-8719-88223ea0b585",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7540f96-236a-4813-8862-5e10a78f74ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd918516-fb6b-40a3-9cef-31046096aaac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe031e9-f157-49c6-9057-8dd51b65e4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2dacea-99ce-4866-b23a-9659d4039fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f51d5b-6eea-4bbf-84b9-2d1ac446fa5c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f4bf21-e714-4108-afab-f1a0eb290cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06135302-f41e-41a9-bbad-c36c5bafd2b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13a0712-2937-4718-a892-2780a1153601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b486f0-c15a-4d70-b6f8-6b2a546807c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2135ee8f-a003-4a15-8231-7a519e1b4a9a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b0363c-98ab-4a07-882b-60ebdbc5e303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b67d5f-2206-405e-9534-61fdc3bbdb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c710fb-e3a7-4d5a-b0a4-cc6bc01e653a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a577d8-42aa-4fef-b1b7-4d1c46a22b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f545bf-c6ee-4fc8-985a-5c43414ee726",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ec3b48-6ab3-4962-8f6e-3d2ce4f31260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5873fc6c-bcc2-4fed-b37a-9c5bdd522669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d955ff-2ceb-4e6c-89a6-421a0825960d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52286fa-9bf2-4206-8cff-1bd88b53cd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b893e9a-468c-4b9b-9530-68ded3fe3a6b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c49a6cc-d5c8-411e-b8ea-80361ce6af3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba7a867-c36a-48f4-bec2-eb4177e5a7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2500fcde-7ff3-48c4-ba0b-89084bad249b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ce4ad7-dc9b-4beb-b94f-cb559b3984c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac018e1-d541-4415-8818-27bd7d2eb737",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9e0525-bd26-42dd-b622-93497509a6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2763e411-24cc-4fda-826d-8009c330a0d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a795dbaf-5b66-46ad-9314-eb5c5690c16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07a7a32-cadb-44f1-9724-a8726ebdb353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb9e5f4-dbc8-4eab-82dd-775936c1f208",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3295413c-12c7-4222-a0ef-d1f168b735ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccae7066-cab7-464c-8f58-bbbc4f295c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734d8e2d-888a-4659-bbe6-f750b5558dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80967fd-6613-4e95-9dde-695a395eb093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af91c72-1095-436a-841c-7e8f3d52b3b7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b88bc2d-e4bc-41bc-9834-1258e6f434c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b043250d-17f0-45d3-96b3-bd312bf8fabf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a341ce0-0bd0-4cc1-bea3-70d7d72236d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0229100c-480e-4315-9e53-1e1a2821445b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e491f-c8f2-4b81-826d-9cf46679d9b8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3837622b-4ae8-44ec-b408-946a0188356f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172f9e45-157f-4f63-950a-95b55f788ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97142253-676e-45ac-bcba-3d731c041379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e17f6df-c3f8-4c24-9a97-c00bdc8c54b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1be74f5-2cf1-4544-8aeb-4055c3de3815",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da465f8-4d8e-4b64-ab3b-6d9c8af32093",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cde8eab-45b4-43ac-a51d-384f46ee1602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc01d1d-e7f0-431c-afc2-99311ae28985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7378b3ae-c877-4ab2-85c2-fa25703444d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55366b3-b603-4baa-a43b-fce26136f461",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3985df-eda3-4550-84ad-2adf6c114b15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3754be-4512-42c7-a0ed-a5adeaba4888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bd6754-2c0a-4a6d-93a1-754c05a028a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc24a365-cf02-44ea-878e-bcd4547cbf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d18ac6f-6493-4f84-b51c-d1a9ae933be5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5903bf81-7f95-44a4-bd3c-a06e080f240d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec7a9c3-cdf5-4c8d-833b-f238e5e594fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b31675-1314-4775-8ec3-c9c27d5f2e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c927e8c-af51-4853-935e-8f07e15aab62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d5fab6-f987-4923-ba1f-741766561e01",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942ac23e-68e8-4f8c-b294-8f7f0b71a0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9639fa-fda4-407f-8feb-8ddd89e78382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "137e2d76-8298-4d36-8d90-214678f98e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec72bfa1-67d7-4a62-87b5-c1f8d27bd757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11539b7f-7eec-430e-8c78-6284141d2c84",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa12316-10a9-4d80-b8c3-485c69fd2c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c4535c-5e86-4799-8526-279fa9df2ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5fa5468-eae3-409d-904e-ed22c6f6cf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e19530-79ef-4f37-ac91-879e6435c986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141a3589-b0ae-4f95-b875-8acc4e2cff0b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fd57a6-a6ec-42a0-8c2e-54278f6e7116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff209b6-2229-4bff-a78f-f5d5257eb16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdee4960-55a9-4f80-ad2b-2c527d699f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8425f140-92f4-451e-9bc9-18136d63e9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114c2ee3-841a-4850-abae-59731e6aba55",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f729e639-270d-4ec0-ab4b-f6ad8f4db461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f30a76-ebd8-4aa8-82bc-6a856c3abdfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a60b71-002c-4dc4-9934-5298da496ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a87a5a5-9076-42fc-b011-0c282e01b7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc961c9-c8a5-47e7-b07d-2fd7e9ee7a08",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5f0b7e-e9fb-4930-b108-784248d1d535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dae54d8-8b6f-4eaa-92a8-731fc1f7b1f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39021877-c178-48c4-ab56-bf59fb41a4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0eca5a7-4a21-426c-9791-7ac4fb1f20ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58704689-7226-496f-9fe2-37c38d88d6bf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4058655c-dff2-41aa-98df-6e23c9d22bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5666102b-4a8c-4114-8339-69bdc5b0c787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30ccfa8-ce4c-47a9-b4ca-c1680ec1c1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba919ba2-94d6-412c-b0b5-d0ef2b45da71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e9f1ee-6ce9-47f8-ad3d-15ec50110ec1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d9aa08-92ff-4929-a5b0-59915533e66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094363d8-48b7-4a1d-8c8a-b3dda49c0475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535c2b30-a275-416b-97e2-45f1d9b94e60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355dcb07-f322-4748-b32c-2bd666118dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448fdbb0-451e-436a-9321-b6454ec69a76",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15db6bd9-cb47-4411-ad00-fa51e05390f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc4bbeb-dfbf-4335-b9df-a398690f22ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3b6063-2c18-4546-8444-e7807ebe7f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82457926-0257-4d87-b69b-d7dbe52ad258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190150e4-f221-49a8-890f-41fbbce2cd24",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea3ef81-864f-4f6e-8bf1-aaa02942ad40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5a3b4d-288e-4677-bd36-4e94b7f7aa49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5a2961-ecbc-46e4-b0be-61df7fe1597d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15755506-4cce-4cf0-94fd-efca0c73aaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55df519-298f-4af4-a8b3-4386bc005483",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92aef6e-a0df-4e30-aa86-8415f0d01ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf89ce0-cd62-4767-8df8-3ab7ceaa8166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb064ec0-e30e-40b0-bb22-aaafb390c9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b0228b-e180-4069-bcad-eb741b16dd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b9a56a-5b98-4f28-99cd-15c03cfe58f8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85fd74d5-3d07-4d7b-8521-6deaf579e445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896ddbe2-2f7e-4db7-a055-6dbde94375a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f83208-b64e-49ac-80b6-14b604a51147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac209a81-9708-4f70-9f76-d1f6e3081f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d318c6-668e-4518-8c34-5a59647a794d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c88b82-f43b-46d1-95b9-ee5a66ee3480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8538ab27-b384-44d5-976c-9fc72ddd933c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1adb9e-cbaf-4951-bf10-01cd5ffa7121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e0a371-c2bc-4ad3-9692-9d1baaca84a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811ead74-ce20-467f-8ed0-d1e1648d4795",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48afbfda-a1ee-4684-8aa0-f25114890052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4b8461-2ef2-4bb0-8fac-74aba80ada67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11980c60-548e-4500-bae7-a75146c3a387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e31c9832-3a5e-45c7-8d99-7c8d7661f760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad38474-3953-4f9c-9bb3-699aa148aa8a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de974d3-7c84-49ef-8bd7-95e7cc4a1817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24507ad6-067b-41a5-975a-e08ee1f07619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb424e44-ba30-4c80-9c20-430dd91e0b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bac3381-20db-437b-b295-bcb6b4865d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6f4845-3a03-49f1-b66a-661baccab697",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20647b7-2641-4ec9-8c08-0b01351e9a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca8765e-c7b2-4e37-9c3c-ed31c6aaae75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345a598c-7ea7-4273-9434-fa0ac7a080a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198dd04e-517c-44ca-8ce1-2eebd48d4ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc408d02-c347-4ed0-8d60-56a3282abcbb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cced3b46-76a3-45d3-b29b-13602f07940c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30cb4c2-6d04-433f-acf0-da32e242c953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109ec96a-4191-4c4c-89f8-1311d7082a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5038dfb-7055-47cd-b06c-b4e06cb81a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af1c5d6-d679-4b78-a833-d5f52fa99921",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455c88df-f17b-44c8-8ec0-c00cd12bcc4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6d721c-fd0b-4dc6-a330-b91fe8227aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce27214-cf00-4bf5-b4d5-c0e3911aabb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f9d290-a685-4b5a-aa8f-0c4920af7362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45026700-d5ee-4206-9800-13a5efb34247",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749c4eb0-7d35-4cc1-b063-7dbe536dc235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d2e9db-c96b-4639-8b89-9508e2e8e3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea89d29e-d462-4ae9-860e-2ebba2ccbdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d3794e-1796-4630-bd10-3e1c3424fd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd75e73-3279-44cd-acef-fb5261fd9d2d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b72502-31a0-4795-a588-c5dfbbb4da9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae35f24f-b0fd-42cc-8a58-bacc33efa5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c586d62-84a0-4c02-93c3-59e96479fe15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48175e5-ddd3-4aa9-ac46-2e85d1784329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ed0c2c-814d-4528-879a-c127430b5b0a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a801e19-81a7-47af-94ea-cb6733e6acf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2007d414-8969-4d6c-8695-6624ce40d144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412ba739-3aa5-4202-b9ad-c8a25ff38735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5cf325-e290-4b68-b4e8-8ff76c607ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23bd6651-a931-4af5-b667-9933a3bc4e04",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8706699-66f5-4ceb-91c3-4125b54dcffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068a5e11-059f-4388-933c-52c4c4cf4f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93481e44-11d3-442e-9028-5fb5f8bf13bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f40da9e-c93c-4985-9087-015e5136336e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc1e53a-8b54-4de9-8906-b2cc229ae9fc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d31a28-15d0-44c2-8d5b-dadaacf2b796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e59f661-8583-4e78-ba6f-b57a5aa1826a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3116400c-fd12-4fbe-8b78-80a65fe31ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d097ee-84e6-4b3d-9b20-262ad92bcc10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b7fbab-6dc9-44da-beec-2bcc91c27b49",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d0809b-5b1e-4e49-b0c2-3ef12d8569c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541675b4-9771-4e1c-8506-842f1799420a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d3d8fb-ff49-4e74-94f8-c85c6f5b1715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50985bca-1a88-4715-8f8e-f4168bc7b21c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0d4531-9568-4b64-8b14-04b60a68bb09",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b5fe88-0f78-4200-a34a-90a698593fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3af24f-645a-4193-af50-bdae16e0ae36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a342f7e-1d97-4072-9263-c496e5ead77f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27871108-0683-48be-9109-2f785a67043f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a56c130-0e93-4e3a-ba15-ce07ed6c5942",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f5fa42-f46f-4ac5-86af-adb28db0f9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cedbfdb2-a16f-4e6a-86e8-5e54840568a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91f43c3-eadf-43b1-978d-ec2d630b92e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a307e13c-bdcd-4266-b799-aa17fd229214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9999356-01ce-46bf-a1c0-37fe03292839",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4232b4e2-9b0c-4b07-9fbb-fc6e4817b8c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00822aa4-9c9c-4287-92e3-350924a6b820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb81bee-c16d-4663-ad3c-3852d1b641ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6e0983-c754-41e9-9451-6c3a661d0353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bb1401-1d6d-4a2f-8450-6f79479e0851",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a36b88-9835-40b6-bcd2-d2d75df357b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c0b44a-bcb4-4368-9743-79c3d8a20f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c8a074-f5aa-4b79-ba62-07303c7de1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0310d06f-94d6-4656-bb0a-c5cf521f5fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18715789-49a9-45df-8570-027521d0969b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef11539-41ea-4c14-8b8f-933f77998fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e0c1b0-37a0-447e-8511-a9219bcc2235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e18278-b9c1-4152-a20d-dbecd661bfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7acc66-9a70-448a-af32-830ee92b5929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50628878-1754-44a6-943c-12a58005925e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b133414-cb79-455e-9885-62a997fb38db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70bf6711-890e-4e3f-86bd-93c464e824f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183731e2-e1ce-4aa7-9b43-6ded7056a410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f9e119-4c6b-4d23-b0a0-a322ca779e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ff1581-c26c-4fb6-94f8-fb0abb98dfda",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d5de39-a3d2-48c1-93e8-68bdbacdbe38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9f3bf06-baca-484a-8ee4-8793d33ecbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0271564d-6ff9-4713-8cb1-19e81d674bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a4cf26-4d73-4f7e-a1a2-4e1ab73a291a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3930c4a-8646-469c-934f-374f55e817b3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb85aa6-6ebd-4388-a2c3-c8444b3ab28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153b4dbd-ef09-4678-8f1e-72c32ccef307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbc6aa8-8470-4739-93d0-b31e84741892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb90766c-46cd-4292-beda-a61f4712d263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a38300-736c-48a0-82f9-4cfc2768e0a8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbb0386-dc3a-44b1-a00b-c3a1c994e30c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9cd7451-0ae5-4b05-9d4a-482863cdc0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced835d-0ea5-4f63-93c8-d4db805203fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4df72a-1873-4da6-8db2-05fb57d6e960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9dcdfc-1536-4a37-8538-c69d11ea5adb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5a4a27-0f1b-4299-9208-69c7ee8c08fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da192e1c-9959-4034-968e-14968f77f354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6950d49f-f814-4412-a3f2-4f0721ae26a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c23fa566-c539-4a1c-b1a8-697d7443fccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eab1df3-3da3-4c0b-96ae-1f0a3cfb3e4d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff57620-f7ec-48be-aefd-c8aa1cca40ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65625fbc-e42a-4076-8f59-5209ab6fbe06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2ea5e6-4881-4460-9d6d-79c4ce543ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea694fcb-0b1b-497a-95b5-b6c6dbfb175c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dab666-3d43-4ebd-8b86-b8a5fa36108d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f60c1d6-6481-4cef-b014-0d148d11d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08967357-3b50-4c94-907a-1e6c70c24a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda8b3c8-4cbe-42be-a24b-d973c33c1793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a460ed-7cb4-4a27-b18b-9c4308e38f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0f4d72-ebcf-4d2c-bcd4-fe9f56828bef",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2c9acb-95a1-46a8-8659-731cb6892bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec7b1fbc-e5bf-449b-b369-9693fcd6b232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee18a853-61c3-4e3a-ad5d-edd8dd636dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985aa038-9cbe-436e-93eb-bc0a9dbb1f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7321a69c-0003-4122-98e6-07fbb9fa427d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73763692-cdb9-4980-b8e8-76919bae0bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b252bac-5039-4638-a55b-f68c68bf159a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aac19ac-7240-4a59-b176-ec448205107b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db67876e-74c1-4964-8846-4bf738e69eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252b6857-92e0-410f-a21a-f86c999da5bb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b05a601-27f5-4fc5-a46f-81fa1ba40aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27263d50-cb74-48a8-a7fe-4fdc59199cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cdab54-d3c9-4456-89d0-a75c23a91e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce303e1-0539-4dbe-a42a-301770bf1299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a269fd22-2e37-4a9b-9cf6-82ca9cdcaa26",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc08985-99fa-48bd-ac0f-823102c949e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88c8e89-521d-442e-8389-bee4615925b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0df2f25-65d4-4855-8832-f1cb57329c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9caa38ba-8ee0-4575-97f3-f1bcf45eabbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1002093-d75f-4942-b552-7a5d50f1fcc4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf2a030-ba6b-49e0-9aa8-e043a0890222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f080be-32f8-48d0-b384-9c101c6ecd34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cd234f-e368-4bb4-b12d-9c714aba7cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687c66d9-a0eb-4c88-9d47-49a83be6fd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e3aba7-3a33-4d5c-9a3c-76281c096eb7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503762f4-ad05-4388-afbd-a251e7985ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95695c6d-7c57-4fda-9cba-4155f75c7710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c926eb-df34-479a-90d4-61cee9c52f9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5521879-3907-4344-9c23-f732f0e138f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afc5fd6-ff53-4399-a698-e291bdba8bbd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2449194-736c-4c28-b644-123fa661a4f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbcc57c-f6c9-4a0e-8723-306a290a3219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bc42fc-f05e-4dc0-86a3-31e325a7b31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b4a356-db69-4d2e-8534-59c7ce60e371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46017374-13e0-4a67-907b-d16c52dc2379",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949399a1-763f-4f8a-b8d9-48b1772b22ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5838c5e-ce5c-4362-99c0-c1e38efde957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267f547e-8e2f-4285-a49e-9cbb42a37461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fec6799-542b-43d9-8fe7-b60100280758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6d9f8d-07c4-4668-92a8-9080d3c1518f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb5dda0-3748-4664-a94a-868957e207fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8885023d-a715-4299-b9c4-3af7a5afab41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01986308-1fb8-4f99-91ea-c235358b44b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f027510f-69b8-4664-b818-bec20a21250d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f78025b2-090c-4537-8300-6a7d3ef4534f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1913b0-ecd0-4826-85ac-a7064210d896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9ff093c-dca1-44e9-a5e7-e3feaf053567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386214b1-8e39-47c7-aa15-e866b19b95ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fb8507-868d-4e78-b7df-6aa4f4bbed24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22de9b72-fbaf-4d5b-a10f-a69127bfe525",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab1b75e-4ee0-4a88-8eba-2e581f64dcfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a1bea5-4f7d-4e46-8e37-82758f511e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43859ce1-ab44-4e48-b79f-173d5f1f8269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3845759-d6b3-4558-b871-5f2cafe976d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6513dc-cb3d-4cbb-8ee9-d7a13e0febc7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02191985-2892-483f-818f-f62b55e4d8ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a34d99a-0ad4-4088-a3f9-d8ccac3004e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06840b97-1c6f-44ef-a49f-896819206c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6c029a-f029-4112-9900-dd40d8c5cc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202692fa-6ba5-48e6-9f57-7a8f6fde8d94",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f493afa-5edd-47e2-b2ef-316aaac61166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b824c4-8e0b-41f5-a6f1-b714615d1f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a689577-d6c5-4ff5-baa7-1d5fa0fa3e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99a5a5e1-8eb6-4667-8b89-8e3337b1a061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8100dac-2357-4bb6-b25d-e66eb6661100",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f610fba4-36cf-478e-a414-d1d60b989e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "078317dc-87c1-4b98-9089-edae4dcf234f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e014ed-88e9-4cd2-8066-1b582e586b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe97c40-9681-4ec1-959d-66360235ae0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8416c6-a86e-494c-8dcb-d6e80209dd4e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fc457d-c2c5-436a-88fb-89c4b3c019c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59dd41e1-fa4f-4cd9-afae-0ffce3dfe1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d100df0-83dc-42c2-ad09-a0a154c1b71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7bffe3-b114-4db8-9465-dbe18becafbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256176b6-7edc-4aac-b7cf-813da04861bf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29b3d44-db02-4e10-b50c-9d03689a8789",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d47d32b-ef48-4034-a0b0-13cee78686cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2348f8ae-7b4f-43da-8a30-edc4641c8804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d66184-86db-4022-ba23-aa3b7a5d46bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7ef45d-7a3f-40a7-b95c-5710af633925",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cce3293-2f9e-48e5-9085-9ed370b9632e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76aa1b61-0913-4fec-864b-72d1c4b4a789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3486d078-dafc-4b8c-b37a-d4030db4491e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051cea9c-902f-4176-af46-0a1078e8ae0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc759a86-cf23-4cd8-971c-2164d46388ee",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bd0a85-5a4f-40f8-82b0-41ec3df17909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea41523f-f685-401b-8104-90a9b21b33d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088272bc-7055-4f77-b00a-9e953377663d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6b613a-b07b-4279-9e0b-c5719a2f7020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8738ae8-865c-4d5a-b6a7-e968af87daa7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c49a65-ecd7-475f-87e7-9a5106ccd299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5d6b8cd-9735-4f15-a10c-59b3158bed52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3d6810-00c3-4839-920a-4ebaefe0e56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a41e99-40a7-4971-b5a8-8b61f64e1855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cd148f-5ef5-4175-9c4c-24a13ff1c3eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65058a7-076e-4744-8a93-47173f0883e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2366acfe-e788-45f6-a7b5-d0737d540cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28184802-2e1b-43fe-b804-116c546d7743",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c150860-5967-494a-a055-c20aca7a0eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175c5a2e-a103-4424-9685-0100e1ea6804",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c0bee5-1280-4733-95be-4febf5d07219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "025421ac-eb2b-4feb-91ab-d5b445e3e9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd276e3-31f1-40e0-b2ea-7f74fbafccca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce4a7e0-29d1-47a0-8a45-4ddc6d55c127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377dd9c3-3d14-4009-a867-c5086d31460e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99695f7d-223e-4db4-93f5-29c2b5e33faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e14670f5-55b7-4da0-831f-dc0f7f6f8f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc66c65a-9e7b-4103-9d64-65399aa3b6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a255af7e-0772-4c00-bf23-50e2a9159948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16bdba5-77d9-46ff-93a7-e904119ceff7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0afbc4-220f-415a-b11d-e23324fe5371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85fa5e07-b20b-4491-a667-ccbecd84f28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe1a73e-ce67-40df-99c9-27c050899d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9e64cc-e8fa-415b-b803-83124d318341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcc0b00-32e5-43b1-9add-1680c780deea",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c99ae4-3d15-4a31-a5ec-801459e5b931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77a3d3a1-f54f-4aaf-939c-a4d5d6e6e287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30a08c2-9ef2-47cf-92a6-937703c51090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0972a017-5e57-46c3-b8f7-1df4eb274772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cb7cfc-e0a7-48ba-bd7a-d20e5dcd0e5a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d07108-2f60-490d-98d6-238ec411dd65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b179b7-9dfa-4bbe-9f83-2cca74e118b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee685c30-310d-4420-ba14-8aead371168b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65309077-c46b-49f0-8058-5055eda46aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1839d09-dc69-4572-bf3b-85dc28d67697",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b1434f-c8fb-4c2b-9bfd-365769d93709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e64273f-0360-4a53-b46d-00cdaa4788f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42442f97-c2b0-41a5-a31e-8634519d01b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4e61e5-7043-45ac-ae36-b230ee93f680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a804a3-abf3-42db-a2b7-bf10a15e23c3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d28acf-fc36-423b-ad41-65feda9cd37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2974272d-9f5d-4bf6-82ab-fcbaad42f211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8e1b74-4334-4cbd-a01c-f3a7efef6ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7922ca4-6a6a-40cd-9137-ddff1cb3b621"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "986a1082-df46-4545-be26-58947223c7fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f3c72a0-3856-401b-a0fd-471e10aa3403"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51c61687-c1a1-40fb-85f0-6dc16b3c05c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d49fa9f-3ceb-45d6-b90f-c35558962f2a"
                    }
                  }
                ]
              },
              {
                "id": "8c327033-15c0-48ae-b670-f65d9913d5c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69ec30e1-09ba-4456-a5a6-9c8d8f4089bd",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5537bd7d-69fa-489d-81ed-4301089ab66b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "045a189d-55e9-4b03-ae2c-729a4d2a3396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4b5cb2-7fd9-4e21-9e14-4e267d100f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bbfd46c-3ba0-4bc6-a49c-ff6c6db7b4a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44da48bf-d5f4-4e60-821e-1ad47d3fa976",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db7b3d7a-9ba5-4360-8172-8b938f0b17f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4004b17c-c416-42e6-b127-c70860edc66a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "febb094d-e14e-40c6-b9f6-b1876025dccb"
                    }
                  }
                ]
              },
              {
                "id": "efa339ad-bcae-45db-a54e-9c7ae14df606",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8b7d216e-a9cd-4421-b774-e28cc48222ff",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c38ac7-f75b-4bfa-9313-c2b9c8f62be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "74b4080c-7d01-4037-9f5b-d5c0c5b73235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3904ff9-12ad-491b-8e85-519b57afb84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0e8dcf-cfba-44ae-9345-98add6ee75a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1b4953cf-90de-4391-bb72-67a59ecf2741",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8474569-0475-4c54-b9aa-d41a4e4c0dc4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e7e441-e4d0-4b0c-b018-0953725d2b9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8bb0a212-b387-4841-a9a4-7d7e19fc22fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2e5c58c-cc60-437f-9152-847cb2ec206e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da55e04e-90d0-424e-aa0e-aeeebeeb7f5c"
                    }
                  }
                ]
              },
              {
                "id": "b3245dfa-ee12-45a9-b156-3c02ffae5dd4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53a8c47c-e9a8-4111-920c-ec069a403cd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eca652b0-2bc8-42fe-9f95-f1a690ec6ddb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5a9d540-155c-44cc-aaa1-858043338996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42d08a87-d69c-4867-801b-f460bbbad360"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9661e1a3-0dc5-4947-b4d5-84ab47020cf3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2f9fddf6-c4e5-4b3e-a19a-1a84294d023d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7eba8b3d-fad1-4bf9-a60a-b3d2418a6e5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e046ff4-b49e-4ecd-bcbf-a11dc7e00739"
            }
          }
        ]
      },
      {
        "id": "93307892-48f4-412f-93d2-c13b98486d98",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2c77dc10-5671-4208-9506-13bf6d39301e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fce1c9e-26ec-4a59-99b0-2632011fa8ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "387b8da0-a302-466e-a18d-e0cf906c15b4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9a2975-55c6-4345-afca-f2ccba9f0c9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "14e53416-3a50-4f73-be90-72621984342a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a720874-baf8-4272-a966-35dcbadb3453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4efc102b-b69b-4a61-a72c-2995f43c91f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7a7463e-af41-4bde-a1ea-b70afbe868a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "520be032-c6bd-4a58-ae2c-90de69cc7a6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acef04fb-e0c5-4252-b4fd-048b451a4a57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87b16404-8753-4a71-99c4-f818156b188b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ae9e479-d1eb-43b9-bdad-c4d0618c5410",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cb2d019e-1d40-4618-ad2c-4ec2730a3db0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d1ccb1a-0898-4276-ac3c-073a9ab928fb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "107b449e-8717-49a3-8cdb-ebebb4363a9b"
            }
          }
        ]
      },
      {
        "id": "6a819d4f-3f6e-405d-8d91-37b7ad23f8bd",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "73ba6889-2b68-4d8b-b4cb-c3b4a07a297b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be0af64f-2a4e-4042-b5ef-d20488f4146b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0fdf435-3ebb-4511-89b7-52e5b70d636e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbabaa2-2906-478e-ab5a-727b025a4de0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "285023a9-e753-4451-a39b-24e6b993d3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccabbfa5-c544-4d82-81f4-b4abcd6296c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65c6b799-d2a5-4b05-a06d-fa6e7e4c1a42"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ef9fa99-5aa4-4a65-9ff1-3a98aea27280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99c14183-80b8-48b1-ba74-f327cadbbdeb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f1f6894-c5c9-4ead-942d-660a51e0a2f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8228fb50-6dee-49ba-be4c-743e17165b4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "502e2084-9d28-4fad-b4d3-124866e3f19e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a3add54-d81b-4d53-b8e6-92ee42d783d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af7bf41a-632d-454b-954b-5b4a78350da6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "071c3192-22c0-4d6d-989d-fcc265e2f640"
            }
          }
        ]
      },
      {
        "id": "c5fc386f-7df7-4479-9797-4646bcc84369",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bb074426-441b-41b5-9d4b-beb89ce1a1bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e055ac8-42c6-468c-87ed-27d69e601f43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cdb8e396-593b-4ebf-84da-46393617df13",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73363e75-17aa-4f10-bb69-8beac5bfce66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5275efd3-1e62-4823-8eea-05e7e6108896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355be14c-8d49-43c9-970d-63aaee9274bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cb1e0c3-4303-4734-99b1-c12c4a272eb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47e16ce8-6df6-4b3b-ad64-ee92f191da0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29d7142a-dbac-4af2-96aa-2773cbabeb94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "07650a3f-e024-4bfb-b67f-284e8b031c42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe49a2c3-a81f-430c-bc58-8a0a1ad20519"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97303f55-0ed7-4c77-aeb4-0a783f702c5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0270f4a7-f5a1-4e05-9391-5ffcd230c0cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7e88428-1d2b-4ab4-a21a-3f71fff57be5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01531174-f9f6-41da-aa02-c4bc467db9ff"
            }
          }
        ]
      },
      {
        "id": "c05c3d83-ec26-468b-aefd-7aab06cd9079",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5705f4be-57f3-4ddf-869d-481350f541ce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24501288-105f-460f-b923-8d164d9b349a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b3ab1893-4ce3-4afd-ab2e-942fbddcf235",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cf02af8-81fc-4ac7-90e0-06c0686eb2c1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75524d80-1cac-4f1d-a897-14361568c014",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.76760563380282,
      "responseMin": 14,
      "responseMax": 1981,
      "responseSd": 226.89942133313025,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695515732717,
      "completed": 1695515781412
    },
    "executions": [
      {
        "id": "16bf9da9-5073-493f-b9d7-8c122106bd66",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "628e179a-7024-4c10-be00-1da282e54b34",
          "httpRequestId": "74dc81d2-efe5-4ff0-b257-b1ca733f6451"
        },
        "item": {
          "id": "16bf9da9-5073-493f-b9d7-8c122106bd66",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "42c0b3cc-aca4-41ce-90de-f5d2aaed9a78",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 0
        }
      },
      {
        "id": "9f57ba0e-699a-43d5-b02a-693e98514d41",
        "cursor": {
          "ref": "7c6c020b-f13c-4f9d-8fda-1c61c163fa11",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ecfb7ff2-49a2-4fef-806f-f9ebc12921c6"
        },
        "item": {
          "id": "9f57ba0e-699a-43d5-b02a-693e98514d41",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0dc7c8a-8340-4988-bc42-9607b3a8b8f5",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "b5dfa0df-37c2-4c99-ae3f-ae24415033ab",
        "cursor": {
          "ref": "51a72fe8-fdef-4ae4-84a2-3a6238e1edf2",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "05000da7-5d95-456e-8f36-3fa3975e3b33"
        },
        "item": {
          "id": "b5dfa0df-37c2-4c99-ae3f-ae24415033ab",
          "name": "did_json"
        },
        "response": {
          "id": "c5f6bd6f-99f3-429c-a6a1-b7ba08512d4a",
          "status": "OK",
          "code": 200,
          "responseTime": 305,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9ff93-adbf-407b-adb9-025cde6ed9ed",
        "cursor": {
          "ref": "ec24898e-3a5e-4382-921a-fabc42d2ab6d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d06022ec-067f-42fc-85b4-ecca629569d4"
        },
        "item": {
          "id": "fed9ff93-adbf-407b-adb9-025cde6ed9ed",
          "name": "did:invalid"
        },
        "response": {
          "id": "c98cca88-3c23-4776-b1cf-35dbc1dcebd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9ff93-adbf-407b-adb9-025cde6ed9ed",
        "cursor": {
          "ref": "ec24898e-3a5e-4382-921a-fabc42d2ab6d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d06022ec-067f-42fc-85b4-ecca629569d4"
        },
        "item": {
          "id": "fed9ff93-adbf-407b-adb9-025cde6ed9ed",
          "name": "did:invalid"
        },
        "response": {
          "id": "c98cca88-3c23-4776-b1cf-35dbc1dcebd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917cba6a-67b8-4290-94db-6390d730edfc",
        "cursor": {
          "ref": "1399dac1-cfc8-42b2-968a-034fef154c80",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2475ee3b-e07e-4213-972b-5755c27c3998"
        },
        "item": {
          "id": "917cba6a-67b8-4290-94db-6390d730edfc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f9e801ad-eb4b-4c73-8388-eee50bfb332b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 121,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c086d-4d8d-486a-8fc8-a074ab5948f1",
        "cursor": {
          "ref": "ad9ad496-7063-43eb-9b93-5a0d609a2829",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d75b7831-e533-47d2-aa25-2f071efbd8c7"
        },
        "item": {
          "id": "9c9c086d-4d8d-486a-8fc8-a074ab5948f1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c9b62c20-a9ee-46e8-8e70-4d3c5dae4ffb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88de451-3852-4a4a-937c-b604f45fa8d7",
        "cursor": {
          "ref": "a0c74727-410d-401d-8a45-4411683ba01a",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "28aa3829-8320-403b-8b21-8a1b7518159c"
        },
        "item": {
          "id": "a88de451-3852-4a4a-937c-b604f45fa8d7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8b02746c-6567-42ee-a818-2b4b5ab91bf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e391b5-f075-4332-9974-49a0aaac4b47",
        "cursor": {
          "ref": "da6ffb27-81fc-4503-bbb6-33ac73a2706e",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e17e783b-16e1-4016-b7d7-fd2743c54998"
        },
        "item": {
          "id": "a7e391b5-f075-4332-9974-49a0aaac4b47",
          "name": "identifiers"
        },
        "response": {
          "id": "07850d25-4fae-4595-8992-3b9d6c703c72",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ade1dc4-6c49-4277-8aa1-e74fb2b5f36c",
        "cursor": {
          "ref": "2836c2d4-5d8e-41a1-af31-17a5cb7b063b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "90573cee-eb50-4f7f-b63a-ce02c3738deb"
        },
        "item": {
          "id": "3ade1dc4-6c49-4277-8aa1-e74fb2b5f36c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b8ad9a9c-2c18-42d9-9a00-d3f035167ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5578f559-2f96-4684-8cf2-3ac1594e247d",
        "cursor": {
          "ref": "17c221e4-69a5-47b4-aaea-c45fb7c48e15",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "40045588-9209-4445-9b0a-a4791399540f"
        },
        "item": {
          "id": "5578f559-2f96-4684-8cf2-3ac1594e247d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fa0e2ab5-d760-4d55-9767-96bce7ba3ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643744f6-f50b-45c0-ba0f-c1ca1ca67de5",
        "cursor": {
          "ref": "5e0137e2-9d26-4d90-8a23-62292e476285",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd56ad1f-eb8f-4629-8171-cb7f1f26dab6"
        },
        "item": {
          "id": "643744f6-f50b-45c0-ba0f-c1ca1ca67de5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3ba080f6-7ddd-4930-96d3-5f5c5ce8c700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89f4121-06bf-460f-bbbc-2825a6ffeaa9",
        "cursor": {
          "ref": "a43e5898-a07f-4a9a-8695-ee2e9739a506",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0830c6d6-672c-48f1-818b-e0c0e8edb7c8"
        },
        "item": {
          "id": "d89f4121-06bf-460f-bbbc-2825a6ffeaa9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8fd59b13-a757-49b6-9132-9e1a93f84d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ba6f0e-2fdf-4f87-9e4b-d7625c3077ec",
        "cursor": {
          "ref": "d0245389-3ac8-4037-bfdd-4fb46a3554cd",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7067c7d3-eae6-4484-8e01-5cf4638ba03a"
        },
        "item": {
          "id": "88ba6f0e-2fdf-4f87-9e4b-d7625c3077ec",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a2c3d1f6-a659-4fcc-b68f-c6d9e66c08d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5424a61a-4b86-474c-9a98-2395a1d3cddb",
        "cursor": {
          "ref": "273237e6-990c-4831-a922-d67cbd58c770",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e2fa0d7d-61be-41fa-9513-ea0b39f0af01"
        },
        "item": {
          "id": "5424a61a-4b86-474c-9a98-2395a1d3cddb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "52c37fdd-cecf-4631-b3df-fee06f696860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08573c85-5013-4329-b99f-c14f9a89de2a",
        "cursor": {
          "ref": "3542c2f8-3712-470f-8648-2e5e015d9a25",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cd7ffb70-ea73-4de3-9c6f-398cf83a2a48"
        },
        "item": {
          "id": "08573c85-5013-4329-b99f-c14f9a89de2a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4a5b9439-401b-4a2b-9640-70437ac72fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a5017f-cbde-4aaf-9892-9b8f3fc7ba50",
        "cursor": {
          "ref": "ab172df9-11da-4549-84c4-3c24e14ea6ac",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d22cb99f-96d2-4527-9a3c-0ba2d6569909"
        },
        "item": {
          "id": "41a5017f-cbde-4aaf-9892-9b8f3fc7ba50",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "44b70188-6727-4d8f-8049-31bb9abef343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad0a969-02bc-4add-93f7-c38cd1fc82c9",
        "cursor": {
          "ref": "103c536a-1af9-40be-9ffe-adfed05bd5b6",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e7bc6717-f5ef-4561-a2d6-d19afb2622e6"
        },
        "item": {
          "id": "7ad0a969-02bc-4add-93f7-c38cd1fc82c9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2543cde5-fcc6-4731-8e00-456e8015957e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b687dd-82af-445b-bafa-5ec6f6f0d47d",
        "cursor": {
          "ref": "401e4a94-0f42-49f9-8bfe-0735b9fcef8d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "de6d0017-625b-4dfb-b834-7d93cf6cf4f4"
        },
        "item": {
          "id": "72b687dd-82af-445b-bafa-5ec6f6f0d47d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "807cc9e3-a7b6-43fe-83d6-f802428d3b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e7104a-91fc-4f7a-836d-c1d227373232",
        "cursor": {
          "ref": "64396c5e-8414-4b1a-99a2-64533bef1da8",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1df909ee-a51b-4f25-992f-30c49ebae7e5"
        },
        "item": {
          "id": "c1e7104a-91fc-4f7a-836d-c1d227373232",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0a875350-5259-4f9a-b9b4-ef639b534f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0f11e5-0511-4e77-83ee-7deba24e68fc",
        "cursor": {
          "ref": "c1458103-0443-4422-9c18-c8071b4348ee",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6d714bf4-e76b-4b44-9be4-a28bd0ec1a5b"
        },
        "item": {
          "id": "2a0f11e5-0511-4e77-83ee-7deba24e68fc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "51f33a0f-751a-49eb-8352-ba61e8f2adf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191a326f-996b-4c29-933d-7ff2e6c13ba1",
        "cursor": {
          "ref": "f756439d-cd5d-4323-a3d1-becb8e45b1ec",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d455f8cc-1d04-4989-8307-53f38b5eed21"
        },
        "item": {
          "id": "191a326f-996b-4c29-933d-7ff2e6c13ba1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4bfb60cb-f8b0-49e5-90e3-88837ca5b7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a670bf8-36a2-4eed-a332-db18b9e7d118",
        "cursor": {
          "ref": "fd7b3b40-adab-4c02-ad5a-604ffc50c3e4",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "192156cf-e827-40bf-ac15-2032983a6b7c"
        },
        "item": {
          "id": "9a670bf8-36a2-4eed-a332-db18b9e7d118",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c9324cb-99d1-46fd-99e4-c541f6e0c7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c1ad21-b3eb-4630-9549-654ffbc54970",
        "cursor": {
          "ref": "b2527599-c3e7-4b99-82a9-585708f591eb",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0735db88-ea51-4360-b4c3-e9dc21da9f0c"
        },
        "item": {
          "id": "b5c1ad21-b3eb-4630-9549-654ffbc54970",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2b8a2698-9b16-46ce-aacc-b9d03210b3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d92a1df-ef26-491a-bd39-ad8db4eb0cb1",
        "cursor": {
          "ref": "c6afe3d0-7d71-4b49-9d0f-78e7ee93ae60",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c6a988c6-4a3d-418b-836d-9292e388a064"
        },
        "item": {
          "id": "4d92a1df-ef26-491a-bd39-ad8db4eb0cb1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "71bba860-3110-46b4-b5f8-0002abf5379b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3997fd8-c817-433f-98a6-1ba66ee7b413",
        "cursor": {
          "ref": "695e5480-0f71-4d86-851a-f072f82ef6ef",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1103f0b4-16bf-4f8c-95d3-9c12ce3cf99a"
        },
        "item": {
          "id": "a3997fd8-c817-433f-98a6-1ba66ee7b413",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "938f0571-f5a1-4526-8446-8c76715a83a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4e362a-fdc1-4b1c-bf77-8466c243e523",
        "cursor": {
          "ref": "44e2ebbe-6dfc-4430-8a97-971c83da082a",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a914769-e386-47c5-8fa3-cfe876524f5d"
        },
        "item": {
          "id": "ca4e362a-fdc1-4b1c-bf77-8466c243e523",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "603c7698-73fd-4489-ba5e-f5150fd9fb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788f241e-cee1-489d-ab98-6c97ba9ce890",
        "cursor": {
          "ref": "1c3a835d-6797-43da-ba0d-7f4f2a54256b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "70a1c601-30af-462a-9cd0-f25d25d0a11e"
        },
        "item": {
          "id": "788f241e-cee1-489d-ab98-6c97ba9ce890",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e65fadd3-b3da-478e-9e19-cbce84c78fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c77df4-7f4f-4689-8fb0-dbeec5be578e",
        "cursor": {
          "ref": "6b68ee6a-80c6-413c-99c7-0b55b7b9bea0",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "57eeec8b-7f40-4272-8fd9-e2f632eb615d"
        },
        "item": {
          "id": "44c77df4-7f4f-4689-8fb0-dbeec5be578e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "880babfb-1ccd-4958-b279-f73293e7fd6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b4f80f-2c07-412a-947f-4b2b720c5684",
        "cursor": {
          "ref": "1a8d6d7b-88f1-4b38-a4dc-03cd76a50efd",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c67eb43c-4574-4a18-b42d-66eb944aaadb"
        },
        "item": {
          "id": "e4b4f80f-2c07-412a-947f-4b2b720c5684",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7b55f768-3364-40ea-9881-571b0157c007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3737ef-b2ea-453d-a5fb-1d459c095836",
        "cursor": {
          "ref": "ae5ed01b-c388-423b-aa88-499e5022bc87",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2a7fe4c0-e4b3-420f-a3c8-a54c9e8e55b8"
        },
        "item": {
          "id": "7a3737ef-b2ea-453d-a5fb-1d459c095836",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bd99637d-90eb-4719-8b31-95f4dd100e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8e1e3f-282b-424e-966a-2c6ff0580367",
        "cursor": {
          "ref": "1abffe94-d5c5-46f2-9279-9317e76cabcd",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "884a91de-660e-4165-892e-7b8711debbf5"
        },
        "item": {
          "id": "dd8e1e3f-282b-424e-966a-2c6ff0580367",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e572fc9d-02be-4117-abbe-d8ab2f352a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23354834-ef32-4227-a82b-23a34a204acc",
        "cursor": {
          "ref": "fc8bc348-996e-4503-bcc2-2ce689756087",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4d35f654-cc2b-43f1-824e-0eaf5162587e"
        },
        "item": {
          "id": "23354834-ef32-4227-a82b-23a34a204acc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4edab79-5d93-49f7-9ba8-9eee91b037a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5bc72f-bf5c-4f63-9315-96d397400d61",
        "cursor": {
          "ref": "87cbd688-d9d1-48c2-9801-b704c741abf9",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1f1ac933-5b53-4e16-9e84-ca6cca6ab9f7"
        },
        "item": {
          "id": "ff5bc72f-bf5c-4f63-9315-96d397400d61",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f4dbb464-75bf-4aaf-9539-59b7357da60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37db3625-7830-4799-afe9-fd5f9c1b5d8c",
        "cursor": {
          "ref": "c27f3150-403e-458e-ad47-7e1fb50e44da",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fdf89f6a-3d83-4f4b-8c77-7eaa7a231ea3"
        },
        "item": {
          "id": "37db3625-7830-4799-afe9-fd5f9c1b5d8c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "50b55daf-e4f3-4f7c-9dba-9879dbf6993b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facba086-a670-43d7-96ad-6539412f356c",
        "cursor": {
          "ref": "31bf567c-ad63-48dd-9f37-83ebd54bfc1a",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16c3890b-6d6b-49eb-afdd-1ee16a50c50b"
        },
        "item": {
          "id": "facba086-a670-43d7-96ad-6539412f356c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "66229ae1-3ac1-42ba-84fd-52a38379df6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2768849a-a4fa-4593-b6bc-4c5c2ea9f212",
        "cursor": {
          "ref": "a2cec5d6-907e-47eb-b9f1-dd849190f0ad",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ea96f27-4743-4d8d-9bf3-87df053c166e"
        },
        "item": {
          "id": "2768849a-a4fa-4593-b6bc-4c5c2ea9f212",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1b118e31-0fcd-43ec-8cc1-a81baea2eedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb295813-c87f-495a-ae4b-c07c30d4622f",
        "cursor": {
          "ref": "5c1373e4-12ee-4d21-b611-1104cbddb7b3",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1a800537-1ad8-4c92-b993-d9be086660c5"
        },
        "item": {
          "id": "cb295813-c87f-495a-ae4b-c07c30d4622f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e718fcf8-5ece-4922-8b08-9a04aab18060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a2a819-abcc-4ae8-9de1-6a5dd7aca5be",
        "cursor": {
          "ref": "ba00ec59-f660-4b8b-b3d5-cb2731e214af",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "03653671-e902-409a-b816-97e35c9a369f"
        },
        "item": {
          "id": "79a2a819-abcc-4ae8-9de1-6a5dd7aca5be",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9a166de8-aed0-4cca-87d9-88da95823550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9acac6-3211-4f96-a43f-6773ea46203c",
        "cursor": {
          "ref": "3d0abcf4-a29a-4c7e-86e3-3848cd7d10bf",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9b5829ac-1eb9-4dec-be61-d8689136d39a"
        },
        "item": {
          "id": "8c9acac6-3211-4f96-a43f-6773ea46203c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "111deb99-1194-497f-b078-e5912bec0eb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "80b7a0ba-87cc-4ba5-bf44-a335b0c31799",
        "cursor": {
          "ref": "ae23daf2-9f1e-481c-afa8-05d76c72165e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e8d235c2-8421-4ed8-b7a1-f9fc96a62232"
        },
        "item": {
          "id": "80b7a0ba-87cc-4ba5-bf44-a335b0c31799",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8357f9c2-b788-420d-95c6-fff085b8d6a4",
          "status": "Created",
          "code": 201,
          "responseTime": 1981,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7efa0503-6e21-4c9a-ab24-3f8fefa99e22",
        "cursor": {
          "ref": "bd6a3e03-0b47-43a4-be1a-78fad389ad7b",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f94b6fc-9f3f-4e9b-95f4-648a8d9114c7"
        },
        "item": {
          "id": "7efa0503-6e21-4c9a-ab24-3f8fefa99e22",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "09002e89-9cfa-4f9a-8914-c320e167a1af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3093c168-9b00-4d68-9c55-1bf39bd1ceb4",
        "cursor": {
          "ref": "88fbaaac-e98d-4ff8-9b15-594b6c744ab0",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5ca1a986-7b84-44f2-b22c-bdcdc21c9a03"
        },
        "item": {
          "id": "3093c168-9b00-4d68-9c55-1bf39bd1ceb4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e715b203-dc63-4e26-b104-48882b49e15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a2b174-5531-4193-94f1-363edbfa56f9",
        "cursor": {
          "ref": "7e916110-9d6f-4800-811e-5b0c0c5b7fcf",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7f53177d-8c3a-448e-907f-9a7c8c732844"
        },
        "item": {
          "id": "41a2b174-5531-4193-94f1-363edbfa56f9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6fcfe39f-04ac-446e-bfe7-23a8206d2385",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "88c92f1a-19ef-44b5-86cf-632f083a8d6c",
        "cursor": {
          "ref": "42162843-6f48-4c88-9676-a6058cc0975b",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "29294751-8064-4850-8137-09444375b242"
        },
        "item": {
          "id": "88c92f1a-19ef-44b5-86cf-632f083a8d6c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a336855e-c50f-4caf-8325-c8fe4f1014a6",
          "status": "Created",
          "code": 201,
          "responseTime": 1001,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "3c698252-b877-4dd9-ac27-6a430566025b",
        "cursor": {
          "ref": "5d562f4c-6ac2-478b-819b-41202dc7b744",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8115d520-eb52-4494-9af8-49abc2411fdd"
        },
        "item": {
          "id": "3c698252-b877-4dd9-ac27-6a430566025b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d8a95b53-9c44-4370-ab35-b4dcb2c26606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "82d5a77d-3cc5-4349-9845-a8f93b3e6e54",
        "cursor": {
          "ref": "15e02e5a-50cf-43c0-9339-7a12e7a11289",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fc36f3d2-31d5-4d84-a9b9-e000608adfea"
        },
        "item": {
          "id": "82d5a77d-3cc5-4349-9845-a8f93b3e6e54",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ceb75ff2-62ac-4921-a9ea-0e7284e21207",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 682,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1a70e396-c748-4ca6-b5e4-ecf2fbf15276",
        "cursor": {
          "ref": "d219a3e5-810d-4f26-9bdf-eb11b8f30e96",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fe7aedcd-a741-4d1b-bd29-8e75dbd9d86f"
        },
        "item": {
          "id": "1a70e396-c748-4ca6-b5e4-ecf2fbf15276",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7f03c0ec-f0a2-442e-a840-ab0487c286d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "36a08cd3-eaf9-4e67-ac0b-2254823da217",
        "cursor": {
          "ref": "9fc09f07-1d96-4863-b3c0-8a0ea00bbc23",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8ad25706-1fc5-4aff-9782-0d6039fb2928"
        },
        "item": {
          "id": "36a08cd3-eaf9-4e67-ac0b-2254823da217",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "568fa392-7c5e-410c-9eef-e19a74d8cf46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "055b36a2-56bf-40f0-8040-3bd67ba1d4bc",
        "cursor": {
          "ref": "d3850316-7b0f-4f39-9871-e0b5d9d330ca",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9e2a9380-f299-4da1-8f0e-c3c210596271"
        },
        "item": {
          "id": "055b36a2-56bf-40f0-8040-3bd67ba1d4bc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "87c7debc-cd73-4bb5-ad75-ff35f3f416a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "972c1b25-2105-4de2-ac23-243207cfcd3d",
        "cursor": {
          "ref": "29c474ba-4a71-4e3e-b4ce-4f9bf1a02d77",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3bb11d49-6d33-4d8e-96e4-227f6d07c63e"
        },
        "item": {
          "id": "972c1b25-2105-4de2-ac23-243207cfcd3d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b97d21c5-3cef-4706-bc8b-5839bb495b9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "650d5681-64e5-42ff-a18d-a94c5c2b9b4b",
        "cursor": {
          "ref": "ef5e70d1-d716-4d88-bffe-0263338ecc60",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "53001c6b-f240-4f72-af5a-680da1842255"
        },
        "item": {
          "id": "650d5681-64e5-42ff-a18d-a94c5c2b9b4b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3f194af2-8ccf-42da-97ec-737f6eea5985",
          "status": "Created",
          "code": 201,
          "responseTime": 937,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a935fc9e-9914-41a5-9417-0a60dabc5b93",
        "cursor": {
          "ref": "cf914a5e-ca9c-4048-9cbe-5775bb0bbac5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "333ddc8d-7d04-442b-a5f9-f73042fefc2e"
        },
        "item": {
          "id": "a935fc9e-9914-41a5-9417-0a60dabc5b93",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "33728def-e3e0-44aa-8098-33aac996adc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0215735-fcc1-48fe-9cbf-d3ff02989ddf",
        "cursor": {
          "ref": "67e60921-873a-49d8-9860-6dc2399ad2b1",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "54fe93cd-fd26-40bd-a2f8-67d3bbda1a82"
        },
        "item": {
          "id": "e0215735-fcc1-48fe-9cbf-d3ff02989ddf",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e6e2cd4b-6005-40ab-b747-be83e89f1a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88cf84c-743d-49c7-ac1c-47fade7d9ef2",
        "cursor": {
          "ref": "0defdc23-56fb-4fba-8399-c609d0ce1c9e",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "364775fc-7a42-41d6-9f4f-2b92c66357f5"
        },
        "item": {
          "id": "e88cf84c-743d-49c7-ac1c-47fade7d9ef2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6ad1c5d6-1342-43ce-bbd1-1aaf4b479c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59098932-3d80-4a3c-b0c9-a105eedff5fd",
        "cursor": {
          "ref": "890766ff-77c9-4bae-850b-7b1e7849eebf",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a31a1297-44fd-4662-bead-ac15840c28ac"
        },
        "item": {
          "id": "59098932-3d80-4a3c-b0c9-a105eedff5fd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e46ff942-3cd6-4fb6-9226-f608d71a272d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915a7384-d386-4e5b-af03-31764f4f90fc",
        "cursor": {
          "ref": "6d519f94-f14c-4586-845c-071cc53c4378",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cc8460ee-47e4-4954-bcae-85e4a446213a"
        },
        "item": {
          "id": "915a7384-d386-4e5b-af03-31764f4f90fc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5f46e227-7be5-401f-9e99-2d59fa608cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7270fc50-8557-41ce-806f-6f3a7e386140",
        "cursor": {
          "ref": "10e9805b-f8ce-4228-a86b-a9f8d340d7e3",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7ca2a07a-9627-4921-b3ea-b3e98f6802ac"
        },
        "item": {
          "id": "7270fc50-8557-41ce-806f-6f3a7e386140",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3bfb6138-a57d-4509-8121-2bfe36e627b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0950114-9e56-46ed-9362-1deeec623865",
        "cursor": {
          "ref": "f7a6ce72-dd83-42d0-bb45-d67935b5d6c6",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b1375844-9177-46fe-86b4-f19b85e39f38"
        },
        "item": {
          "id": "b0950114-9e56-46ed-9362-1deeec623865",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "88fd97c7-bf65-4c4f-b7ba-3ce9672bb63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa9cb90-54f0-4041-be34-db7ef7a87479",
        "cursor": {
          "ref": "81e538dc-edcc-4b6e-9ac3-7614bfd60a85",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0f549f78-c4c3-46c6-a7ab-9c5b61e020dc"
        },
        "item": {
          "id": "5aa9cb90-54f0-4041-be34-db7ef7a87479",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8acfa478-4ab1-4391-b6d1-a80e82d8d70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5db196a-a407-4d0c-98e5-0fbe35bbb707",
        "cursor": {
          "ref": "ea91fb50-f391-4721-b69f-89180f6f21a5",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c7467dfd-f1fa-410c-a024-1a9917acf41a"
        },
        "item": {
          "id": "c5db196a-a407-4d0c-98e5-0fbe35bbb707",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ed88f250-26ae-4471-91a2-2ee87a8247f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bd557e-d795-44a5-8f4c-78b20d2d23d5",
        "cursor": {
          "ref": "5c69c637-b620-4304-b040-325498fc28eb",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "144f5489-34de-4fd1-a1f0-f99d745931fe"
        },
        "item": {
          "id": "d7bd557e-d795-44a5-8f4c-78b20d2d23d5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6f1b0cce-4e1b-4bcd-aebd-08b7293260f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edd7699-915a-45d3-b02c-e905c1e5c8bd",
        "cursor": {
          "ref": "386f5c2b-1a24-4e7c-b8bc-09f77ea52399",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "863c5589-e9a0-4cc4-96bf-033ef6273ec3"
        },
        "item": {
          "id": "9edd7699-915a-45d3-b02c-e905c1e5c8bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b377c683-11d7-42df-819f-dcb9c917534e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8888ff-1170-47f4-865b-79f8db84b15d",
        "cursor": {
          "ref": "76e63d5e-7b0f-4db2-8e9c-dc6a2fa33730",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "584542b8-19de-4d4e-ad86-e47c8b54735e"
        },
        "item": {
          "id": "2a8888ff-1170-47f4-865b-79f8db84b15d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "43eb62ce-e156-4835-9b4c-fdca4b0eab1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32a8469-43cd-4d36-80b3-211610f36744",
        "cursor": {
          "ref": "4509e737-5e7f-4f9a-bd99-0401032d79d1",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7eeec95b-92c9-4b22-85e2-0a40a5c70cb3"
        },
        "item": {
          "id": "b32a8469-43cd-4d36-80b3-211610f36744",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "81c29d3b-e9eb-48eb-8084-c01f254f6b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c514ccf-676e-4fb6-a985-21ee7976d703",
        "cursor": {
          "ref": "54d0a268-a23b-410f-aef2-8281e29161f5",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bebe533d-193b-43cd-bce5-2228c7e9f79a"
        },
        "item": {
          "id": "6c514ccf-676e-4fb6-a985-21ee7976d703",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bf4605ab-2c36-4d49-b6d5-69d85b4c3a0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 666,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "dd62d094-bdc8-4966-a683-01868e5646a8",
        "cursor": {
          "ref": "0445f365-0119-416d-bc7a-c3a1703e9f75",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "749ca5a2-0dea-4156-a40c-8ae2dec581f4"
        },
        "item": {
          "id": "dd62d094-bdc8-4966-a683-01868e5646a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "baa782d2-ff7b-4ab5-bf3f-0710733cb33b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 660,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7bb78bc0-54c6-42c0-ba01-7b9759a21042",
        "cursor": {
          "ref": "0b12866b-da7f-41cc-b61c-9f05df5f1e96",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "94045c68-10b4-4406-92b4-33a8d3201d3a"
        },
        "item": {
          "id": "7bb78bc0-54c6-42c0-ba01-7b9759a21042",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f187322f-15f6-49fc-b0ad-edd91314148d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "219d3060-e522-4df1-8d80-1fd9084ca3e5",
        "cursor": {
          "ref": "3224705f-0913-4bb3-9c1b-15845ea142af",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "91d700cc-3a94-4dfb-8e41-ac301afa90ac"
        },
        "item": {
          "id": "219d3060-e522-4df1-8d80-1fd9084ca3e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ff51b11d-67b3-4f3b-bb59-2104d95efeba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1222,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b5c0fa96-77a0-4b9f-919d-2a6d891736b8",
        "cursor": {
          "ref": "653ea3c7-d836-46f3-aebd-c6c3d36f6121",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a649bd51-176e-4e7d-8995-6593ed0c431a"
        },
        "item": {
          "id": "b5c0fa96-77a0-4b9f-919d-2a6d891736b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "20c2f76f-6a00-45ca-8a8c-886654199cd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "87f3b996-a97f-41b1-bbc9-30df867120c1",
        "cursor": {
          "ref": "aba3463d-f0a0-478d-9b8c-b6a06ee614f5",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "02eb4dc9-abd8-4407-a3eb-47e3e10d5256"
        },
        "item": {
          "id": "87f3b996-a97f-41b1-bbc9-30df867120c1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f5609601-3031-4a0b-8d4f-a2fc8ad650cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed5dab9-09ac-4dd1-9f57-64b9428c51fa",
        "cursor": {
          "ref": "1250bd8f-cc06-4971-8928-2507d1f29d98",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "50569b06-4a17-4119-8fcd-3dbd87f1920d"
        },
        "item": {
          "id": "aed5dab9-09ac-4dd1-9f57-64b9428c51fa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3cf504a2-4f1b-4c15-b72a-b15a24d1d9df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5d2cec-07ca-49cd-b529-164b5cc687ec",
        "cursor": {
          "ref": "7ad302cf-d423-4d73-ab47-30486ed59ba2",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "87ce5187-f454-43ff-ad6f-4f4868439730"
        },
        "item": {
          "id": "9b5d2cec-07ca-49cd-b529-164b5cc687ec",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "96c34641-f2d8-46aa-a858-cdc6070e59da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ee92d5-ddf8-44fd-b274-c49573c2f264",
        "cursor": {
          "ref": "003e6674-4920-42d3-9ea7-f65891a68ccf",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2a008ed2-5f33-4b33-870e-53d67e41127a"
        },
        "item": {
          "id": "05ee92d5-ddf8-44fd-b274-c49573c2f264",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a0e4cfb7-3e2e-434e-9865-99f82db9291b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb5e09f-9f77-456a-bfaa-fa783d423d33",
        "cursor": {
          "ref": "0e12e4b4-da6a-4209-b267-01fad5d05f8a",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "da47444d-c93c-4a82-8fb0-574a764e35bf"
        },
        "item": {
          "id": "4eb5e09f-9f77-456a-bfaa-fa783d423d33",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "57103103-7afc-49c2-b867-248aeb481281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7400d1cc-4fc4-4adc-95d7-b77c7abfd5c3",
        "cursor": {
          "ref": "ed4086b9-aaee-4f4b-af57-b01c3e1da783",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e578572c-dc53-4fed-b2ca-ab5ae54113e2"
        },
        "item": {
          "id": "7400d1cc-4fc4-4adc-95d7-b77c7abfd5c3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d4cc411b-9a05-4e31-bdea-1a267a0891ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f7a506-8bba-4519-9cff-f3ac9cb97066",
        "cursor": {
          "ref": "adfc95f1-4901-4fd5-9411-54199d1849ac",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6c49e966-7598-45e7-9d61-167f31ecfe0e"
        },
        "item": {
          "id": "92f7a506-8bba-4519-9cff-f3ac9cb97066",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "aed3d13d-6d35-461a-9cdd-f2377f1c6f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49769e9-04ec-45f4-a5c3-5b5d9ba76063",
        "cursor": {
          "ref": "c018e794-5deb-4e2a-99a8-24063f4b5cb4",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dc62a4da-56f6-4c5b-bc30-0db3355665ea"
        },
        "item": {
          "id": "f49769e9-04ec-45f4-a5c3-5b5d9ba76063",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4b38a2ef-c162-46ad-8117-aa8960c881b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a87358-93bd-4b86-b7cb-6e103dde2449",
        "cursor": {
          "ref": "93b63930-3cdb-4eef-be99-9d9f949be659",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1208eb35-a946-4a91-b370-7ff073651a59"
        },
        "item": {
          "id": "b6a87358-93bd-4b86-b7cb-6e103dde2449",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7592fb8b-3e05-409f-ba6d-a8c018f59d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a7e153-baba-4951-972c-461043a8b18d",
        "cursor": {
          "ref": "bd73209b-cdef-48c0-91ab-08f1f4bbfdb5",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e99612b8-62f5-4fb9-bd8d-11cd05087c53"
        },
        "item": {
          "id": "72a7e153-baba-4951-972c-461043a8b18d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e740260b-fcf4-497d-916d-c5639e72ce9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd05a30b-5cc6-4478-a20b-a4a9c4c9eabd",
        "cursor": {
          "ref": "4ae691d3-7e67-44ea-a394-2f5d47748e05",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4953d710-da5a-4186-8374-d84642240492"
        },
        "item": {
          "id": "bd05a30b-5cc6-4478-a20b-a4a9c4c9eabd",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "80ed87c2-e2be-4ae4-814e-c71c5970c7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49248eee-a5ed-4afe-ad2d-4d0407d34bf5",
        "cursor": {
          "ref": "dce09de5-bdce-45cf-abbb-f414b94816ea",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c34e4db9-f555-4bd4-a1de-6c2929596c9c"
        },
        "item": {
          "id": "49248eee-a5ed-4afe-ad2d-4d0407d34bf5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8eec8e3b-61e1-498a-915c-bc3ea569cd8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc827335-e261-45b4-8ef0-fbdbae90d70f",
        "cursor": {
          "ref": "63996515-ca54-44a0-aeef-b4977b7fc39b",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9ad26db5-103a-41ad-bf0e-9f0a981c6aeb"
        },
        "item": {
          "id": "bc827335-e261-45b4-8ef0-fbdbae90d70f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "36276721-b813-4b7e-bb68-115ae4c460a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a7f874-badb-4925-82e3-32d51b85f311",
        "cursor": {
          "ref": "870cbf42-02a8-4c7b-b5b9-1e50dd0da490",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2c25333e-016c-4209-b5f4-8082658143bc"
        },
        "item": {
          "id": "b8a7f874-badb-4925-82e3-32d51b85f311",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "945bd70f-2fd9-4c39-b535-871d2fc60d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3244a6c5-f548-457b-83ac-2ccc89745e4c",
        "cursor": {
          "ref": "f3f513d2-79a7-411d-a655-5f11b953b93d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5200962-c1e7-4a13-be1a-d35b84536f43"
        },
        "item": {
          "id": "3244a6c5-f548-457b-83ac-2ccc89745e4c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ae7a9920-3ab9-48bd-8c3e-758fc9688ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356250f8-63e3-49ea-a6f3-806cd7734df2",
        "cursor": {
          "ref": "1dd0e275-b185-4893-ae42-08d9cbaa4ed6",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fa15765b-0931-4c6f-b099-ab0f76dab39d"
        },
        "item": {
          "id": "356250f8-63e3-49ea-a6f3-806cd7734df2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "17f532b3-8090-4bf1-aff4-169ea6eaa7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87abdf64-6813-4396-9a16-a3ad5faf1363",
        "cursor": {
          "ref": "84cbb4cb-bf74-41ef-a500-47d26a88aaff",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "388f80b8-f5bf-4bff-a404-1384227a028a"
        },
        "item": {
          "id": "87abdf64-6813-4396-9a16-a3ad5faf1363",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "51e95461-ce57-4ce7-87ca-e34e8e462d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ac960d-e7c9-4a86-8ed3-8f83a05792d0",
        "cursor": {
          "ref": "89b65d34-0cfb-4b11-959f-4d6f728b0f00",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fd063d53-3fb7-4b36-9760-7deb417c6053"
        },
        "item": {
          "id": "08ac960d-e7c9-4a86-8ed3-8f83a05792d0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b00f43d2-d00c-4a58-932c-998ff666bc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1427fc3a-0856-458b-bef6-1a2cce98492e",
        "cursor": {
          "ref": "5f0443ec-fbae-4ec5-bfa8-2ef4d64cf151",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2f0fbe2b-b5b3-49c8-ac5a-c32075232f4c"
        },
        "item": {
          "id": "1427fc3a-0856-458b-bef6-1a2cce98492e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "98d4508b-7f82-4228-a9ff-3c0bb9e964ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27542d2e-c7ea-48d3-8a53-02b00a4052d4",
        "cursor": {
          "ref": "1baf0001-3716-4ff9-a6d3-905bd1cd4f92",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0c13102b-723b-4c99-9d8e-e10b2918e5e7"
        },
        "item": {
          "id": "27542d2e-c7ea-48d3-8a53-02b00a4052d4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3fee5104-190a-4160-aaef-c76d4172009a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8dd3ffd-a5d5-4c0d-8d60-94803d8c86fb",
        "cursor": {
          "ref": "7a76a270-9b17-4b6f-a963-7d9ff8dd1008",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6e9fbaae-953b-4f79-93c4-c76f98e7edfd"
        },
        "item": {
          "id": "c8dd3ffd-a5d5-4c0d-8d60-94803d8c86fb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "02f91d54-1c26-4c42-9efb-279874ea0fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cae0a8-2029-4a92-a5e0-2127b817d038",
        "cursor": {
          "ref": "cdc32f00-c979-4577-82a9-2a45c841b493",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a158e33d-3ce4-464c-801c-d2f11bb95bc7"
        },
        "item": {
          "id": "38cae0a8-2029-4a92-a5e0-2127b817d038",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a32c488d-4255-4c13-8eaf-87888e4672c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c989d0f-22db-45af-b460-ae548d252a80",
        "cursor": {
          "ref": "2e60d53e-1db7-40e6-8647-9ecea8df7be3",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "341c7df8-443f-4e93-8bdb-27eb94cc2009"
        },
        "item": {
          "id": "3c989d0f-22db-45af-b460-ae548d252a80",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9e3d392b-e92a-4888-b8c4-66cda0126b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a13a85d-0889-449f-bd49-422c7e2e56ed",
        "cursor": {
          "ref": "6685aed2-4950-4f62-89d9-8692e8eae11b",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c0df697c-c179-4a38-9452-ef4fb4c91b55"
        },
        "item": {
          "id": "2a13a85d-0889-449f-bd49-422c7e2e56ed",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bf729467-3785-4e3a-875a-438925cde01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1eb87e-1b30-4784-b014-834c3d27e35e",
        "cursor": {
          "ref": "86f0520e-f793-4a50-81f9-5f8e17a7b983",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d17211a8-445c-4374-8939-2907267c0ead"
        },
        "item": {
          "id": "6d1eb87e-1b30-4784-b014-834c3d27e35e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cc64fd12-916e-4d42-b648-fb60651867e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eddea2-3696-42fe-bf67-8ae248c6e665",
        "cursor": {
          "ref": "bb0898fa-32ab-4e87-ba02-206f26f7fdb2",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "648ba9ea-1f1b-4a38-ad24-e442dfe5250e"
        },
        "item": {
          "id": "b3eddea2-3696-42fe-bf67-8ae248c6e665",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dd313d2e-9930-41fd-bf75-984786373f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bc06a4-67ac-4a14-a0c1-efaa5ea0c94c",
        "cursor": {
          "ref": "6aefeae2-20a1-48c0-9a8e-e170068b29a3",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b2f975cc-57cf-4dcd-9c93-b1cefd297d95"
        },
        "item": {
          "id": "e3bc06a4-67ac-4a14-a0c1-efaa5ea0c94c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9b63ff17-fc4f-48dc-af97-214a06d592ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487518ab-6427-4a1c-8a50-a4b28fe6c902",
        "cursor": {
          "ref": "f24a8099-da17-4080-a140-9ea7a967ebb9",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8117e0c9-73f5-4591-a9d6-100cc2f14e63"
        },
        "item": {
          "id": "487518ab-6427-4a1c-8a50-a4b28fe6c902",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4e376c2b-4824-4b67-b136-a6c76863f626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4defde-d92d-45f0-83c6-802983a3fc31",
        "cursor": {
          "ref": "d4db4c04-a82d-4fdd-81aa-12b92cb7ca5d",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "043fa210-4642-48b5-b6cf-04b568f89e3e"
        },
        "item": {
          "id": "ed4defde-d92d-45f0-83c6-802983a3fc31",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "387cd7b3-2917-4590-9b60-c33240bb27cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e1ae4a-f878-4f9f-8dd9-b4343d07ecaa",
        "cursor": {
          "ref": "4a7831a2-aacc-4567-a2b0-7b6ace9b9628",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7b49f74f-e48e-42de-b261-2250864e88a6"
        },
        "item": {
          "id": "34e1ae4a-f878-4f9f-8dd9-b4343d07ecaa",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3d8be742-9918-4331-bcef-37ae0536fcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d69354-3fef-4851-87e5-465c53ab1259",
        "cursor": {
          "ref": "e49d2767-0e4f-44aa-a30b-79c4261c9324",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1eba62f5-5d39-46d4-bdb7-62270612590f"
        },
        "item": {
          "id": "24d69354-3fef-4851-87e5-465c53ab1259",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "818132ae-9a54-44d8-a07b-97e24c7b5a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b88b6a-0ffc-4ad8-8aad-f2615b41026a",
        "cursor": {
          "ref": "37033e57-e571-43fb-8444-e9fea3e0a5a5",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5bcce308-26f9-495b-9119-d15fc062ac3e"
        },
        "item": {
          "id": "b3b88b6a-0ffc-4ad8-8aad-f2615b41026a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0cb6c539-e355-4e86-90ea-82b3ad0a215a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a1c33-6df2-45b8-a5e1-5aac40b18ab7",
        "cursor": {
          "ref": "3fa27972-91d8-4ecd-9968-b66cb0d0d94f",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "97c6b406-e8a6-43d5-be2b-4349c3442e7f"
        },
        "item": {
          "id": "835a1c33-6df2-45b8-a5e1-5aac40b18ab7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b23e7720-2504-4b78-ab04-de006aa25fea",
          "status": "Created",
          "code": 201,
          "responseTime": 969,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "64868e62-abb1-4804-b607-9706ffc0a7d5",
        "cursor": {
          "ref": "b45444bd-605c-4d51-81ae-fedd1eb17bbf",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bfa65a12-1fc6-4619-9196-8b9de8b5fe29"
        },
        "item": {
          "id": "64868e62-abb1-4804-b607-9706ffc0a7d5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6c62798a-1c2a-4870-8022-2cf28c12f9a1",
          "status": "Created",
          "code": 201,
          "responseTime": 939,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce472156-684e-4bdc-8b7a-e38a8521d5d9",
        "cursor": {
          "ref": "d3cb9b21-95eb-4d6f-b5a5-ee12f9ec4a47",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "27658a27-5cb3-48b4-8097-a50c9e2cdd6f"
        },
        "item": {
          "id": "ce472156-684e-4bdc-8b7a-e38a8521d5d9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b0d0065d-cc75-4890-9116-0c9db7e75b9c",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "500cd655-f2cc-420a-b391-8228752ba9de",
        "cursor": {
          "ref": "d26f10a8-da34-4e41-a422-7d9e5a6fa7ae",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d180edab-fc28-432f-8d38-a150edcf21e6"
        },
        "item": {
          "id": "500cd655-f2cc-420a-b391-8228752ba9de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7d318371-04c2-4607-9c9c-fd4b6e4c0c0b",
          "status": "Created",
          "code": 201,
          "responseTime": 915,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1789000d-653c-4a8f-8900-009d932a6aea",
        "cursor": {
          "ref": "4079e8db-874b-47a3-9957-58d40d8d099b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "69a50a62-6833-4685-99ee-fc2651cd154d"
        },
        "item": {
          "id": "1789000d-653c-4a8f-8900-009d932a6aea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "00372878-fa6c-4fae-ac65-28fc02d50ac6",
          "status": "Created",
          "code": 201,
          "responseTime": 919,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b46034-7807-4ee4-bd3c-902212ceca64",
        "cursor": {
          "ref": "205fdc10-0ef7-423a-a7b3-04bc54f3df60",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9a4838b8-4d3e-461e-aa86-df2724daba77"
        },
        "item": {
          "id": "d7b46034-7807-4ee4-bd3c-902212ceca64",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c71da0c8-89c5-4183-b613-089fe85888af",
          "status": "Created",
          "code": 201,
          "responseTime": 941,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb06cf5-0b05-44ef-8576-fc5253a6d349",
        "cursor": {
          "ref": "10b57e00-d39c-4e47-9e03-cceff01a565f",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e50fb11d-bc1c-45ac-b259-1039ecda4cb9"
        },
        "item": {
          "id": "0eb06cf5-0b05-44ef-8576-fc5253a6d349",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3bffc20e-ef24-4dca-b26e-1b79fe6d81ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fbbf19-ef9c-48e5-afd6-a7d58c8dd7d5",
        "cursor": {
          "ref": "106686ce-2c4f-49ab-ae8f-f50277c5adfe",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "df3222b2-eaaa-4cfb-8c26-4469bd777b9a"
        },
        "item": {
          "id": "66fbbf19-ef9c-48e5-afd6-a7d58c8dd7d5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "80c41707-3ad7-4246-8168-b1519c3b4426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44aa2a2-5e3e-4dd8-83d6-93a2fb68a974",
        "cursor": {
          "ref": "c57e8487-552f-4ca7-ae48-301409fa3c01",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "55e62003-7e89-44fe-a7c1-2a52fbf2957d"
        },
        "item": {
          "id": "c44aa2a2-5e3e-4dd8-83d6-93a2fb68a974",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "19483e79-6666-4936-a088-9807956c69d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b82ae2-f747-4400-a5be-59570d83c2c4",
        "cursor": {
          "ref": "ffab5d34-39fc-45e5-8081-6e1251a5fec1",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ae5104a2-9b55-4604-a098-a3b6e86445b3"
        },
        "item": {
          "id": "f0b82ae2-f747-4400-a5be-59570d83c2c4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dd619f43-8dca-4dd2-a6a5-f1fd28126f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e68655-b78f-4bbe-a653-e5b4645c44b3",
        "cursor": {
          "ref": "2df9d067-4f3c-46cb-9ae6-af81343c6353",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2924cc1b-5027-4973-aad3-f97679e4d030"
        },
        "item": {
          "id": "c2e68655-b78f-4bbe-a653-e5b4645c44b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7c4192db-59d8-4f51-b287-04f0219e3b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393f92b1-9ae8-4092-8d64-a010062e42ca",
        "cursor": {
          "ref": "b9c68d3d-a5c9-4f15-b80b-2bb5c288b815",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a1ff4b9c-202e-46b1-900a-ba3f12b890d2"
        },
        "item": {
          "id": "393f92b1-9ae8-4092-8d64-a010062e42ca",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "94c3a8b6-00df-4efc-b6b3-e7d50400c45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ee8d0a-914f-4063-b62e-4ad11205664d",
        "cursor": {
          "ref": "9699bacb-ca09-4e16-9257-4b9b50e63b1f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "918816cb-665b-4434-8c3e-1bfdb61e3677"
        },
        "item": {
          "id": "c4ee8d0a-914f-4063-b62e-4ad11205664d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b1b56fb4-0a52-4c87-bd88-494638d9c194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd26c5ce-8f07-4a56-af5a-6c450825f00f",
        "cursor": {
          "ref": "61db9206-1200-48fc-801b-e072c04abcf1",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "23a78a84-f2f6-4db5-bc6f-3c1561933484"
        },
        "item": {
          "id": "cd26c5ce-8f07-4a56-af5a-6c450825f00f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1bbb1431-5074-41fa-9701-160861dd7765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e4b51d-6e1f-4448-8ddd-9b9d6d571510",
        "cursor": {
          "ref": "a2d97f7a-81cf-46d3-9f60-ba7cfd400d86",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3735f123-2303-4960-b81b-5ce3bb90d3cf"
        },
        "item": {
          "id": "c6e4b51d-6e1f-4448-8ddd-9b9d6d571510",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b718d410-40e9-44e0-9991-00580a7983bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924fb19a-9cd3-4900-a04a-856c01e1f673",
        "cursor": {
          "ref": "3206c115-fd87-493f-a36e-613b996d03e8",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e475c31c-a550-4e7d-930c-cdc991ad9ea1"
        },
        "item": {
          "id": "924fb19a-9cd3-4900-a04a-856c01e1f673",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "186581b2-3bec-4bc4-920c-dbb08bff4cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff3ff96-a32f-4d78-b497-91f886c49d07",
        "cursor": {
          "ref": "6b87c4dc-7d4a-4801-bf6d-e80ea8dbedda",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bb686536-3a4d-43d7-b535-fb2be547f2b7"
        },
        "item": {
          "id": "6ff3ff96-a32f-4d78-b497-91f886c49d07",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4f4e4d06-6b9d-4757-bf2c-a75400237b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dffc520-d8d8-44de-86a2-7189c2f399d5",
        "cursor": {
          "ref": "4b219a0a-7ad4-4368-a978-a57bcb9b48c1",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f43aac76-cf87-44f4-b35a-f6848b77603e"
        },
        "item": {
          "id": "5dffc520-d8d8-44de-86a2-7189c2f399d5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90c23709-278f-4c6c-b116-0b5a3fa7f047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6d09fe-3239-4b3a-93f6-12afeb42f41b",
        "cursor": {
          "ref": "4807c527-1b6c-4c3a-8e16-4e102286e129",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c0f12b9e-11df-46d0-b12c-9d3447617195"
        },
        "item": {
          "id": "cd6d09fe-3239-4b3a-93f6-12afeb42f41b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8ff909f7-f846-431a-a905-a53cd3ef1db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0810b1-4a38-41e0-8810-16b8c44a11d5",
        "cursor": {
          "ref": "b71927e1-5251-4fee-97af-fe1c7617afa6",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "050600ae-0e63-4217-b005-1fe8580211fb"
        },
        "item": {
          "id": "bf0810b1-4a38-41e0-8810-16b8c44a11d5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dd9d0f97-ddfc-4e72-8d5a-298b6aded657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f791040f-0a3a-45a1-8a7f-83771aae748b",
        "cursor": {
          "ref": "14e6153a-d9f3-4d82-9724-44f343ec9bc1",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "38beec50-a982-4e35-b57b-93678eb31944"
        },
        "item": {
          "id": "f791040f-0a3a-45a1-8a7f-83771aae748b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6e9d997e-5a9b-4b97-8c7c-46a2a9a2651d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176358a2-09be-4623-8ff7-7eacb0be2541",
        "cursor": {
          "ref": "9e958624-966e-4033-8763-632873847970",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "db0375c3-cf34-4c45-a09c-7e295128335b"
        },
        "item": {
          "id": "176358a2-09be-4623-8ff7-7eacb0be2541",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "75fcf8e0-628a-47ff-a3ed-5ec9640bca21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6981a030-e3c4-4c63-b40a-a497e6763baa",
        "cursor": {
          "ref": "41f8ca8c-1168-4ac5-9abb-9cfda370359f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8d29c0f8-e8f3-44a5-835e-d172e8cf9a8c"
        },
        "item": {
          "id": "6981a030-e3c4-4c63-b40a-a497e6763baa",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ec55e675-67e8-4b46-932d-beafdf9adc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4f5cf6-771e-49cf-9302-8c7ec28e5c19",
        "cursor": {
          "ref": "0c2617c6-a89d-42c8-a4b2-0ccccc5211c1",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1a9c1f77-ecd3-4510-9fa9-0f6cf4aea7ef"
        },
        "item": {
          "id": "1b4f5cf6-771e-49cf-9302-8c7ec28e5c19",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "80ef9453-5add-46ca-9d5f-276bd3500c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ddd898-c345-4a26-8169-f941e8dabcca",
        "cursor": {
          "ref": "26b06e91-5183-4320-8b4e-1c991842ae73",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e4f1c6f5-9b1d-417b-883f-173a5c6311f0"
        },
        "item": {
          "id": "f8ddd898-c345-4a26-8169-f941e8dabcca",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ebfff45e-7002-49e5-9dd1-58e8a0a0b9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e407c30-9005-4edc-b3a7-03ea9b2ff421",
        "cursor": {
          "ref": "bef42bb3-d207-4fec-bb31-ed1c0ab724ac",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c30f598d-ad39-4e5b-9726-1509cf3ce6af"
        },
        "item": {
          "id": "9e407c30-9005-4edc-b3a7-03ea9b2ff421",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b1c5b43f-babd-4f5c-b52b-cfbbcc54d816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48827a4-91e9-4618-9d30-e7caf224e03b",
        "cursor": {
          "ref": "8208849c-a325-4b03-9ed8-7789a7bce652",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d4379075-9904-4803-8793-8ce95e424001"
        },
        "item": {
          "id": "d48827a4-91e9-4618-9d30-e7caf224e03b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e56b6321-bcbd-48cf-a14c-46768a5c0075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b2ab79-a1f3-4c5d-b8ef-1eecee755119",
        "cursor": {
          "ref": "ab3db6f5-3c9c-42eb-88ad-307feab15440",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4be0e797-5091-4f36-a8e2-ea1ddd0ce308"
        },
        "item": {
          "id": "86b2ab79-a1f3-4c5d-b8ef-1eecee755119",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7c36d9ca-fa89-4c23-bc39-6d039092e686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1527a2-ef76-4ce8-8f32-3593f6311cee",
        "cursor": {
          "ref": "1fe48912-37ad-4c5c-acad-f316fb02f0e4",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2e4381fe-a84d-4b01-8039-cc5edb785638"
        },
        "item": {
          "id": "5f1527a2-ef76-4ce8-8f32-3593f6311cee",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a51497eb-3d72-4344-9308-88fec4ab65b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc199c8-35be-41c4-bdf9-bf249c185bbd",
        "cursor": {
          "ref": "1c04a3f4-3ee3-464d-baae-2a44e1a2af91",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3c3a16a1-6ed2-4681-87ad-dafa310549cc"
        },
        "item": {
          "id": "3cc199c8-35be-41c4-bdf9-bf249c185bbd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dabf5e1e-cb58-4583-88c5-abff71c6192e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0d851c-2f6f-460c-9b0c-d5c5ae0076d1",
        "cursor": {
          "ref": "c45a616f-af10-4d86-8344-00e0592a4c87",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ef062fcd-3f8f-4bb7-8287-72b2ed2a167f"
        },
        "item": {
          "id": "df0d851c-2f6f-460c-9b0c-d5c5ae0076d1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "84f696f7-5991-4be0-b292-98a8adea898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06a9474-6379-49ef-8c13-c5508bb81dec",
        "cursor": {
          "ref": "700f6653-deb5-4722-989c-ff3b49b816f4",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0dabea01-baca-437c-b4a0-dde93ee98c1f"
        },
        "item": {
          "id": "f06a9474-6379-49ef-8c13-c5508bb81dec",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "97448211-2662-4376-9026-a8025182b585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0995eda8-194a-48e5-97b1-acd9a00b0098",
        "cursor": {
          "ref": "d848930a-98a5-4ed1-ab63-eab747b89c44",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3a1cfa49-f49b-4d05-870e-284aa36a0344"
        },
        "item": {
          "id": "0995eda8-194a-48e5-97b1-acd9a00b0098",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "83c2af14-a5c4-45a9-a682-4076df6566e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41da34f-8b83-48c7-914d-5eb87dcc2eee",
        "cursor": {
          "ref": "0e206eae-40cd-45a7-a6df-3b88c4a72d01",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "53266502-1b57-48c4-b0db-7081aed27112"
        },
        "item": {
          "id": "f41da34f-8b83-48c7-914d-5eb87dcc2eee",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d1066aef-831a-4268-bb55-39df0ac85069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a01ef4b-0fdb-481f-bfec-9a4fe15bfa0e",
        "cursor": {
          "ref": "844e6617-beb0-4be8-af94-af1283c65dd7",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fb291c42-073a-4613-851f-30d385dfe384"
        },
        "item": {
          "id": "5a01ef4b-0fdb-481f-bfec-9a4fe15bfa0e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d2f2c33d-09bf-4989-a46c-115aad116c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5bf011-be57-4215-a6a7-237edf89db99",
        "cursor": {
          "ref": "50979c2b-27ab-426d-b379-693b23f3e7a9",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6bef6017-c7b2-4cc6-b6c3-a0125cdb047e"
        },
        "item": {
          "id": "7f5bf011-be57-4215-a6a7-237edf89db99",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a852cea-b8c5-4d36-b1b6-427e28380cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93eaa003-8a1f-4efe-bec1-4c43bb057a59",
        "cursor": {
          "ref": "d3494b1d-dc4e-481f-89a5-11a083777b3f",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e0176209-d973-4daf-863d-792a35592d6e"
        },
        "item": {
          "id": "93eaa003-8a1f-4efe-bec1-4c43bb057a59",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7f13177c-3656-49b0-b7d8-162369899d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67cf7fc-417b-46bb-9d65-77f75bdb1605",
        "cursor": {
          "ref": "9fb4bc39-96ba-4704-9330-38cca5e546a3",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "10cca724-81bf-4262-b1b0-54137aca6225"
        },
        "item": {
          "id": "c67cf7fc-417b-46bb-9d65-77f75bdb1605",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5ffda5e2-9130-4681-84ca-3aba186be8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bd7a7f-fa0f-4ce0-af40-b180d758e346",
        "cursor": {
          "ref": "35bfc095-0497-4e45-8be0-e566f518a7b5",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d94220c4-8118-424d-85c3-346c9908acac"
        },
        "item": {
          "id": "c6bd7a7f-fa0f-4ce0-af40-b180d758e346",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a5a21018-05bc-4f61-b892-d8829d80ce36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "215d197b-6b17-4497-8ac0-4fb6e33afcf6",
        "cursor": {
          "ref": "54da2a2b-4c51-4ba4-88d7-d6a68d6292c1",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "382cffaa-d001-471f-a5c2-006d91e8e5ca"
        },
        "item": {
          "id": "215d197b-6b17-4497-8ac0-4fb6e33afcf6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d7c58066-7b34-4194-9b88-39a4b7e9215f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7580159b-ad0b-4a7b-acdf-13d60e0f9c0d",
        "cursor": {
          "ref": "436d5347-4049-4cff-91bc-4ca7f6407912",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "34e08281-6772-4d5e-aeb1-d13d41c03833"
        },
        "item": {
          "id": "7580159b-ad0b-4a7b-acdf-13d60e0f9c0d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf2c5f13-46f6-4770-a4e9-10050b177c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97846675-ea88-4be9-bb3f-c695b616d4b5",
        "cursor": {
          "ref": "d3bb80f3-d10a-41ed-922d-f40529b1d71d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a83feaa1-44fd-4740-bbd3-9b5b27292f72"
        },
        "item": {
          "id": "97846675-ea88-4be9-bb3f-c695b616d4b5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1b805c4f-d699-4660-8e3f-97f1e449a733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439a92bc-7daf-4d31-a1c6-b601672dc4b7",
        "cursor": {
          "ref": "e2c19308-721b-46d4-861c-3ec0d288bab7",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ae9bcd9f-b22d-4ffc-a5c1-f54b268dbc4d"
        },
        "item": {
          "id": "439a92bc-7daf-4d31-a1c6-b601672dc4b7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13298df0-616a-4d42-8753-9c53de50a1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96f0dcd-2644-47d3-8aa8-bee4d8bf6c98",
        "cursor": {
          "ref": "7a62d838-ca47-4272-8202-beb236baa9ed",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "72c42b72-6752-4f7f-add5-4f60bd343ce4"
        },
        "item": {
          "id": "d96f0dcd-2644-47d3-8aa8-bee4d8bf6c98",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "edc67929-f567-47c7-bb74-7c26a1b68b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95edb839-1905-4c94-adb0-de1ceca878da",
        "cursor": {
          "ref": "b607ee92-4ad5-474e-bf85-3479d1db7995",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "42d5477a-9fb7-4a7a-a692-e670bf1c6cc0"
        },
        "item": {
          "id": "95edb839-1905-4c94-adb0-de1ceca878da",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6bb0ea18-6aab-4015-af6d-b9f0e3b8c183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c49d0dd-5544-4d65-80b3-c4dd6bb1c9e2",
        "cursor": {
          "ref": "b2dab175-6234-4dec-9889-09b92c4070ff",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4fd4212c-a3ce-4032-9487-7aa587abf35b"
        },
        "item": {
          "id": "2c49d0dd-5544-4d65-80b3-c4dd6bb1c9e2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "29d06384-d8ea-4fbc-8026-c615a706b7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69b08b4-3a77-41a6-81ca-d385bc5640ac",
        "cursor": {
          "ref": "1c362b37-2cec-40cf-81e6-0ab0a2d3ec7d",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "06adafa8-0fc9-4e71-927a-c8858b0da252"
        },
        "item": {
          "id": "b69b08b4-3a77-41a6-81ca-d385bc5640ac",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8b7b61ff-9185-4941-b1c7-9b8aa6f81fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5752146-1472-43fb-8fec-e02a8bdea761",
        "cursor": {
          "ref": "b8f7e19c-34f7-4f60-aa90-aa9e6cd5a2f2",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9e7f64f8-e377-4432-9d28-5ae22a7a8593"
        },
        "item": {
          "id": "d5752146-1472-43fb-8fec-e02a8bdea761",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "68ca43fc-26ea-416b-9640-f94aa63a46d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fbe0edf-cd7e-4073-9f2e-01daffaa324d",
        "cursor": {
          "ref": "4d4b06bd-d4e4-4a1f-8d8a-e1e8356f41b6",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d60bb457-42b0-4f3c-9ddb-c005d115cc13"
        },
        "item": {
          "id": "5fbe0edf-cd7e-4073-9f2e-01daffaa324d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "99475cc2-e9b3-44b2-a801-6ece99c2c2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeee2e8c-04bb-47d6-a0a3-397e7edaa19f",
        "cursor": {
          "ref": "76566aab-4e5c-4777-a709-cecdbe6f4c75",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8004d171-d02a-4e39-b120-28c2c5725e6a"
        },
        "item": {
          "id": "aeee2e8c-04bb-47d6-a0a3-397e7edaa19f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4e96f039-6783-4462-b778-2c9b2d90dad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fea2cfc-d64f-4c7d-adce-bd2fd2dc7e29",
        "cursor": {
          "ref": "a0e4637f-c7b0-46e4-9b97-a065cad0981d",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "eba92739-e0c7-43f5-8965-ac7e01d471db"
        },
        "item": {
          "id": "1fea2cfc-d64f-4c7d-adce-bd2fd2dc7e29",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b197ec63-8072-4522-b565-f950243c5cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a60f55-1283-4d21-bd20-642f8e2b3f7c",
        "cursor": {
          "ref": "3090b481-2854-45b7-a5e6-d02b1c74e9f0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "dc5e2cd3-8ea7-42d4-93d5-9f615a45b52a"
        },
        "item": {
          "id": "75a60f55-1283-4d21-bd20-642f8e2b3f7c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4139856f-aca4-4c6f-94e3-94cab3f602f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedc5696-9c58-423d-8946-bf24fe40a4e2",
        "cursor": {
          "ref": "91dc0955-92e0-4ebe-a649-987af8ca5c4b",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2fd829b6-4a71-4496-ac1c-376c35d50309"
        },
        "item": {
          "id": "cedc5696-9c58-423d-8946-bf24fe40a4e2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f8a26cac-d8ed-48f4-bae8-8a0321f98e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf157d5b-f8a6-4497-9730-6a25b9725f57",
        "cursor": {
          "ref": "aebe1dbc-10e0-4dea-90f6-6bbc60365401",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f033ae6b-9943-493e-b85a-7faf62aed831"
        },
        "item": {
          "id": "cf157d5b-f8a6-4497-9730-6a25b9725f57",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c00f81da-04dd-439c-aa85-a03fcb88f78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18675c9e-cb3f-4d34-b536-9f3e08005de5",
        "cursor": {
          "ref": "784dc80c-2cf9-4397-8d20-a7adb3795fa8",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0ffbe1c1-605d-432c-82f6-75357ac49846"
        },
        "item": {
          "id": "18675c9e-cb3f-4d34-b536-9f3e08005de5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9b27fdf6-6e8f-4ddc-afa7-074349f6456b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253a4620-469e-4312-a426-3f4030d413fe",
        "cursor": {
          "ref": "a1620b7e-15a7-4969-ba11-62abd518591f",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cc09aa8d-b1dd-47e1-848a-3b932eabe086"
        },
        "item": {
          "id": "253a4620-469e-4312-a426-3f4030d413fe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6642b708-0033-4329-aa57-229a1b0f745f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144e84a2-0686-41a6-8abd-a1f5ececc4dd",
        "cursor": {
          "ref": "9a2b9371-5f98-4fff-8c1f-f809661dc963",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "25cdab55-2d63-4f06-8d97-bbf4aebc318a"
        },
        "item": {
          "id": "144e84a2-0686-41a6-8abd-a1f5ececc4dd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f15268c4-2820-4533-ad0d-4343b431cb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f771df-e95b-43d3-b9d2-a0a47251c91e",
        "cursor": {
          "ref": "420476ec-9ec9-49c3-95ad-c9e7f81bb671",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7867a938-9b0d-47fd-a4f0-b78655471202"
        },
        "item": {
          "id": "00f771df-e95b-43d3-b9d2-a0a47251c91e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e24f9fa1-b00e-49a0-b7f0-82780ee3440d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b4c5af-4ce7-4e83-bfef-4a3e0742635e",
        "cursor": {
          "ref": "7898cacb-271b-41ae-985e-8e27ee96d318",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "db70e213-e6e1-4999-b9b6-2df5f3ebb8e4"
        },
        "item": {
          "id": "61b4c5af-4ce7-4e83-bfef-4a3e0742635e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "416ac0b0-509c-4cbf-8e6d-cd959324b63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13d72f0-7e16-4bd4-b22d-acfec2f63359",
        "cursor": {
          "ref": "3503e3f5-d21a-4a3f-a487-adc01193c727",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "121ad859-2ed8-4555-bbc8-37a9c909e013"
        },
        "item": {
          "id": "f13d72f0-7e16-4bd4-b22d-acfec2f63359",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5c8be351-36fb-4ce5-a440-d903c8144185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93910a7b-b552-4645-8371-54c9a16d5ef6",
        "cursor": {
          "ref": "61550137-f6a4-4844-bbc5-3532256b5d2c",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3238051a-cf4f-4a6a-ade2-887522427b17"
        },
        "item": {
          "id": "93910a7b-b552-4645-8371-54c9a16d5ef6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "447d202a-0503-4a9d-b564-be04da87508e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5578fc6-2f71-4f69-865e-ef579cd62786",
        "cursor": {
          "ref": "44e6c45c-6101-4769-b596-015453fdac4a",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fd2caaf4-3b62-4ce9-a90f-b72572da2f3d"
        },
        "item": {
          "id": "c5578fc6-2f71-4f69-865e-ef579cd62786",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d0046efc-cc87-418d-8995-b016a88c26b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49151373-5c76-42cb-9477-47b347b4ac53",
        "cursor": {
          "ref": "c0b40c8e-4759-4818-ba1c-a29be0fa0b0a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c93a4624-52b4-448c-bf0d-ac9e200b0dd1"
        },
        "item": {
          "id": "49151373-5c76-42cb-9477-47b347b4ac53",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "16e35bbf-f013-4327-9d81-df2343bc7e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcefc3e-f228-4050-826c-daf53cb1bc3c",
        "cursor": {
          "ref": "8db2d32b-9862-462c-be98-6f8e6a84358f",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a8bc2e5e-fc9c-42e9-85e7-e18ce2e9d626"
        },
        "item": {
          "id": "5fcefc3e-f228-4050-826c-daf53cb1bc3c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce8deaa8-a7c3-48f6-9539-20e003dc388d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f2891f-ed85-466f-a047-5e141227abba",
        "cursor": {
          "ref": "11d25b95-78a3-4f92-913c-d274d580756a",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "18bc493f-d180-4547-9aa7-93e32e151a2d"
        },
        "item": {
          "id": "22f2891f-ed85-466f-a047-5e141227abba",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7ae7f896-45c0-4d2f-a9ba-6d7fddc352f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16db3e2-b2e0-4a2c-b545-8855915fb707",
        "cursor": {
          "ref": "eb62474c-a100-4a08-9510-499c560ae59e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c89981b2-5d53-4492-b2e5-5e68f75e43f8"
        },
        "item": {
          "id": "c16db3e2-b2e0-4a2c-b545-8855915fb707",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "da9555bb-1151-48d0-81f7-c6061037d11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9864d4b8-238e-48e6-b406-8fa43732f1a0",
        "cursor": {
          "ref": "a509281c-ab84-411c-ba74-1d7ec8670165",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "59b2ab57-eea9-4556-8839-487bd332c28f"
        },
        "item": {
          "id": "9864d4b8-238e-48e6-b406-8fa43732f1a0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b141378-1f49-4c73-b55a-a06946208286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf37a325-5d32-4cdb-8ab4-79a9c3856f22",
        "cursor": {
          "ref": "4066541b-e319-4b57-9efc-b093eddcfc98",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d844a526-9696-4085-af50-ae85e6c94ef7"
        },
        "item": {
          "id": "bf37a325-5d32-4cdb-8ab4-79a9c3856f22",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "03d90ee9-5486-4aa6-b079-6bec84873ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cba3378-339f-4629-98c0-4e1260a4e30e",
        "cursor": {
          "ref": "add3b83a-30c9-4953-a49f-466df46bfd0a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8870a159-429a-463e-a798-0f861db85b2a"
        },
        "item": {
          "id": "5cba3378-339f-4629-98c0-4e1260a4e30e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8b372cc4-3aab-4716-9235-f20ad67944e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386f39b0-3bd3-463f-85ee-73fcbd9e97e0",
        "cursor": {
          "ref": "6ab6ce55-69e6-4ad2-ba69-601515b2ccc9",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6a345f8a-f6be-4da5-92a4-e8e825b171b1"
        },
        "item": {
          "id": "386f39b0-3bd3-463f-85ee-73fcbd9e97e0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "837960b7-ce9f-4d42-a186-064f28e2ce7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bbe3f7-dec3-484e-8815-5cee5f72ed7f",
        "cursor": {
          "ref": "762be528-08e4-4921-ae87-f321fda8c379",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d205a803-50d0-42ce-9808-adfd30915aab"
        },
        "item": {
          "id": "90bbe3f7-dec3-484e-8815-5cee5f72ed7f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f32ad91d-69c8-4172-846e-44ed1bf20726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a447dcf9-40b6-4852-a4ff-838fdc06e109",
        "cursor": {
          "ref": "10027309-635c-4dee-a5a3-30f96608370a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aa6281ed-5697-49ed-adfc-2b781c9eab24"
        },
        "item": {
          "id": "a447dcf9-40b6-4852-a4ff-838fdc06e109",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "922f6ac2-b8da-465a-b7a2-0da20ae7a398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb82111-e859-424c-b61e-47bf5d9d6c57",
        "cursor": {
          "ref": "10f461c2-520d-4db2-9fc0-9fa008d1beaa",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5d1318e9-c794-4358-a2e5-9fa1657b5552"
        },
        "item": {
          "id": "aeb82111-e859-424c-b61e-47bf5d9d6c57",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "fabe0e21-b124-4a62-b0d7-c70ca36c3ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2146cc9-227d-46ba-82d6-a574d68a7135",
        "cursor": {
          "ref": "ab12ac2f-9927-40f9-835e-f11b560ee5bc",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "db592df7-9c5c-43c9-8f6c-cc03c120bf27"
        },
        "item": {
          "id": "a2146cc9-227d-46ba-82d6-a574d68a7135",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f899f036-cdc7-474c-9ccc-2318812feb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11865671-4289-4e71-8983-e16ab3f591c5",
        "cursor": {
          "ref": "f0eec046-603e-4ac0-a647-16eccc6f8985",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4fe54fdb-1e16-4e7a-9c18-923270153a96"
        },
        "item": {
          "id": "11865671-4289-4e71-8983-e16ab3f591c5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "842becc6-02b2-4943-a4ba-37f5291e9013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8de58e1-49b7-4b73-844c-ba909a3157b7",
        "cursor": {
          "ref": "5bb86b14-0f8c-4d40-9977-d6680ccde967",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "40ef5081-1224-4efc-add6-2ad019a8e9c9"
        },
        "item": {
          "id": "c8de58e1-49b7-4b73-844c-ba909a3157b7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5e9bd781-7205-42bf-834d-49b0fb2a2bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c93e1c-7fae-484a-9ec6-9edd185a4472",
        "cursor": {
          "ref": "d2042af5-f1fe-46e0-9814-0f96c7dfacf3",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "327a2629-8445-4a11-9771-86db3cdc51f8"
        },
        "item": {
          "id": "47c93e1c-7fae-484a-9ec6-9edd185a4472",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "87cbb360-6bff-4037-a87d-6e8be07fad92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063bb8ad-8b92-4918-b599-9bc781239842",
        "cursor": {
          "ref": "147d6c06-27ea-4d6f-a658-aba1d273863b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bd7960d1-e651-46ef-a1ce-1a5a6a62797b"
        },
        "item": {
          "id": "063bb8ad-8b92-4918-b599-9bc781239842",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3336b7dd-c2f1-47f3-a04c-b7561a6fa85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a44933c-5c2f-4977-92af-0418a682f7bf",
        "cursor": {
          "ref": "85c83197-894b-477d-8b4b-c074e5b9bc62",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3001968e-bd8f-41da-98c7-e6d58f00adfb"
        },
        "item": {
          "id": "6a44933c-5c2f-4977-92af-0418a682f7bf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "73248226-3c19-43fc-8eb1-04370248c574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd0eea2-befc-4dad-adc9-959fa31202a7",
        "cursor": {
          "ref": "182fb143-58a5-4cf7-a755-58439e12590c",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "14b9298d-ca33-43f9-b443-b0861b43796d"
        },
        "item": {
          "id": "fcd0eea2-befc-4dad-adc9-959fa31202a7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ddc43837-31dc-4d7b-982e-36a6017979cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b45188e-a0d8-49a2-be82-97822debc54a",
        "cursor": {
          "ref": "c052ef86-9697-489b-aaf6-b13e7b64503b",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ea319d4b-8425-4686-9f03-0e2e71d6ecc1"
        },
        "item": {
          "id": "2b45188e-a0d8-49a2-be82-97822debc54a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "01677d3a-7282-4a51-b77f-962c5e3c60db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f098b8b2-8230-470e-8cce-7833a3f12d69",
        "cursor": {
          "ref": "306ae321-0420-4576-bdb3-22a19aa722b4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3d07cc92-9326-4146-acc3-fc6168e7349f"
        },
        "item": {
          "id": "f098b8b2-8230-470e-8cce-7833a3f12d69",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9341978f-a7f9-4595-ae08-67e770170e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d843da-1aec-4368-8b23-6a312549aa3b",
        "cursor": {
          "ref": "d9d371b8-ae1e-4f40-9242-a07200aa8e3c",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2f901db4-2435-480f-a26c-ac60d651b02e"
        },
        "item": {
          "id": "f7d843da-1aec-4368-8b23-6a312549aa3b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "414540a7-c8c3-46c0-a77d-20b021c4d64c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cf5ee465-71c6-4803-acb8-81ba192a087f",
        "cursor": {
          "ref": "531b25ca-d3f6-49ee-b7b9-8f268b836b52",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "677e1e4e-3825-4dc7-8e0f-bdefa75295d3"
        },
        "item": {
          "id": "cf5ee465-71c6-4803-acb8-81ba192a087f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b8685ed7-c085-426f-8412-c87fd415d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7166eeff-aa6d-453d-8cca-ea3a1a36b45b",
        "cursor": {
          "ref": "432bbb45-483b-4c7c-9407-351eab033860",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ec10611d-afb7-4593-ba79-88207f02b4a6"
        },
        "item": {
          "id": "7166eeff-aa6d-453d-8cca-ea3a1a36b45b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "27f27f4f-fac6-413b-a3a0-090944e8934e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5608b9d-05d9-4941-8d59-986527d403b4",
        "cursor": {
          "ref": "990845e3-dc6c-4da5-9b9d-6b01235da7f0",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "798823ee-8b37-48f3-872c-3fb4f8cae76c"
        },
        "item": {
          "id": "f5608b9d-05d9-4941-8d59-986527d403b4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cbb9db8c-62f9-4bff-8d0c-92f19f2e124c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b1776-c7b8-45b4-800e-2b5b06e12942",
        "cursor": {
          "ref": "c1797e78-598e-4d32-9d9f-4e62f5ecfee7",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e7568408-1296-4feb-9bd1-d856a0f2424c"
        },
        "item": {
          "id": "dc3b1776-c7b8-45b4-800e-2b5b06e12942",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9477ee3f-b77e-4595-9090-fdfb4b5724bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2939ae-6290-4549-8a95-46f41e2aafbc",
        "cursor": {
          "ref": "21f6ceb4-0614-4c3f-b8e3-83ca183e8793",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2c79876a-e2f4-4386-9356-92dcf85d129e"
        },
        "item": {
          "id": "cc2939ae-6290-4549-8a95-46f41e2aafbc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "617bb627-252b-4d37-a848-5fe6cf0280ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7752c80d-cf62-4fbc-8cc0-663a2e4434a8",
        "cursor": {
          "ref": "77e630c9-6dd7-41f3-9b27-2157de75b2e1",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "eee8c247-2772-407a-8f44-6692eac184c8"
        },
        "item": {
          "id": "7752c80d-cf62-4fbc-8cc0-663a2e4434a8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9436ac3c-53ab-4e77-9147-bc5c567469e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e4e21d-ddfe-4235-9877-c00cf123861f",
        "cursor": {
          "ref": "d49406a6-716e-48a8-91ef-41d1d8a6cbe0",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "846ec7b8-a1e3-41d3-a730-852f07c11f9a"
        },
        "item": {
          "id": "b7e4e21d-ddfe-4235-9877-c00cf123861f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2d52997c-f38c-425d-bb1d-75190b2774a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b986cab-6b08-469d-9c80-7659c9b4b947",
        "cursor": {
          "ref": "feee00f0-1d68-4f35-931e-4c44aadae423",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e3c85155-7afe-4343-b1c2-d16ef77ade07"
        },
        "item": {
          "id": "5b986cab-6b08-469d-9c80-7659c9b4b947",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b697b7db-45e2-4332-8d21-7e407e13f53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf04dac-22d1-4c42-8683-ffe45322e143",
        "cursor": {
          "ref": "78da7dbd-bdbe-4f63-a714-08884abf3d90",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6057ce6e-d6e1-4224-90c6-b3e202e0d618"
        },
        "item": {
          "id": "7bf04dac-22d1-4c42-8683-ffe45322e143",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "06966220-7ae6-4e62-a992-7aa93330e07f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6132cd61-3da7-459a-8cef-a4fa8c082659",
        "cursor": {
          "ref": "fa71d1e8-5805-4784-acfb-48bbb401e28a",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "214d5d2d-9d08-4c85-8e11-80ea6ad85d82"
        },
        "item": {
          "id": "6132cd61-3da7-459a-8cef-a4fa8c082659",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bb82b8c2-9daf-43bd-8dc8-837b107459d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201c1dc1-8371-4aa3-94ee-135c085c30ae",
        "cursor": {
          "ref": "faac7657-cbda-4e6f-85e4-e4ac9605cf40",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "36b672b9-068f-4499-ade1-79db2e8a3c99"
        },
        "item": {
          "id": "201c1dc1-8371-4aa3-94ee-135c085c30ae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2e96a45e-3128-4df8-aeed-4001dac48447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28031e8-8a44-4519-a2c1-f92f19e320af",
        "cursor": {
          "ref": "1531958e-e35c-42d1-8c70-39c6993f62e1",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9c454c53-97ea-471b-8957-817b5a237fae"
        },
        "item": {
          "id": "a28031e8-8a44-4519-a2c1-f92f19e320af",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1654b0a9-f314-4e6a-985b-ad10d9150696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46fba76-4713-4038-84b2-d4275914797e",
        "cursor": {
          "ref": "3e604bb7-7d5b-4880-870d-2050aacce750",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6be11cc1-d889-4c74-8cf9-f53e9dbd029f"
        },
        "item": {
          "id": "b46fba76-4713-4038-84b2-d4275914797e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2f6a4394-29f4-4bd4-9166-bd0250cb6bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0862c7-7da9-47ff-abd8-62d8ed86daba",
        "cursor": {
          "ref": "e94c2dd0-a5c3-4576-9f2e-43117e75e2df",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4824d002-0d43-41b7-99a9-5640fe13c7a9"
        },
        "item": {
          "id": "cf0862c7-7da9-47ff-abd8-62d8ed86daba",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1a38db5e-52b3-4f3c-99d9-882c22730652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618677df-d583-49b9-9f80-706b4243f71a",
        "cursor": {
          "ref": "79f29514-49ac-4bd2-92b0-d31708972243",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "50444e98-c39a-4b1a-a067-c21b76c8af34"
        },
        "item": {
          "id": "618677df-d583-49b9-9f80-706b4243f71a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6237b45b-259e-421f-9c43-3b031baf1a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f8d18a-6ca8-4380-8299-d3ca01cdb341",
        "cursor": {
          "ref": "b3d5aa78-92b6-4b11-b2a0-a79b2469892f",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0b7af2b0-7e95-4048-8d01-14d386a3023e"
        },
        "item": {
          "id": "b8f8d18a-6ca8-4380-8299-d3ca01cdb341",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bf66bdfe-bdeb-4705-9388-97c2bfe48356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e8176f-cc65-4c54-a758-1bd6b37c780d",
        "cursor": {
          "ref": "89bf8a3c-080b-4fba-9c9c-ebc15ac8a398",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f96953cf-3d8c-469a-9a17-d36ac46810f3"
        },
        "item": {
          "id": "c4e8176f-cc65-4c54-a758-1bd6b37c780d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0e399f68-35ab-4280-9acf-f51ebab986fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7731e0-f295-4b63-8719-88223ea0b585",
        "cursor": {
          "ref": "dec2e850-f307-432c-925a-913382dd4d1b",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d6a81646-78d5-4900-8834-c75a4c18b680"
        },
        "item": {
          "id": "2a7731e0-f295-4b63-8719-88223ea0b585",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "46896b9f-0dd0-47f0-8061-896f01b6f66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f51d5b-6eea-4bbf-84b9-2d1ac446fa5c",
        "cursor": {
          "ref": "f6cefa16-08d2-47ed-8e29-ccb42615dd4c",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7831be0a-5f1a-43b5-87f6-400228518700"
        },
        "item": {
          "id": "19f51d5b-6eea-4bbf-84b9-2d1ac446fa5c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2b145fcb-449d-4cb1-946a-f23cb3d839ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2135ee8f-a003-4a15-8231-7a519e1b4a9a",
        "cursor": {
          "ref": "f32a7fb9-dff2-4af2-af21-78dfe6d2dfa4",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ab996bbf-8cba-4e66-9742-0998637838bb"
        },
        "item": {
          "id": "2135ee8f-a003-4a15-8231-7a519e1b4a9a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "24b57b40-bc43-4d0e-a6e4-b06a244b2bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f545bf-c6ee-4fc8-985a-5c43414ee726",
        "cursor": {
          "ref": "c3daae4f-6f6b-4a4b-9971-1627a0107d87",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b91c6f27-0e7a-46da-9b6e-81882009a50e"
        },
        "item": {
          "id": "47f545bf-c6ee-4fc8-985a-5c43414ee726",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "095f8b07-b17b-437e-a043-ed7d8299ec05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b893e9a-468c-4b9b-9530-68ded3fe3a6b",
        "cursor": {
          "ref": "5a620972-8288-48dd-b753-67b42f8be8d4",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "23ecf706-e431-4e17-980a-ecdc0a786de5"
        },
        "item": {
          "id": "9b893e9a-468c-4b9b-9530-68ded3fe3a6b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b8656ad5-fbd7-47df-8ac8-f0e882e4434d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac018e1-d541-4415-8818-27bd7d2eb737",
        "cursor": {
          "ref": "e46117ba-f299-489b-9ed2-3d965960b1d5",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2e9ce29f-703a-4235-9729-42d366371dcd"
        },
        "item": {
          "id": "2ac018e1-d541-4415-8818-27bd7d2eb737",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0935f501-7aa5-4e99-b167-95ec56dcd9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb9e5f4-dbc8-4eab-82dd-775936c1f208",
        "cursor": {
          "ref": "d533aba4-a423-4463-8871-213498e2c9ba",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8cf39cc1-a822-4f93-9a62-1b8bbea77626"
        },
        "item": {
          "id": "cbb9e5f4-dbc8-4eab-82dd-775936c1f208",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b587a9e9-804c-4101-9ca2-b582e2abdd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af91c72-1095-436a-841c-7e8f3d52b3b7",
        "cursor": {
          "ref": "e9f3d20d-94a1-4da6-866c-27fa979312a1",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "66408529-3eca-488c-b3cd-a2cb67859a91"
        },
        "item": {
          "id": "1af91c72-1095-436a-841c-7e8f3d52b3b7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "172e4160-dd0f-4259-a4ca-09527e861d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e491f-c8f2-4b81-826d-9cf46679d9b8",
        "cursor": {
          "ref": "93eea37a-4a1b-4c8b-ac2b-a1432aee811c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4e5e6378-c0ad-4cf6-87e3-2e339297b560"
        },
        "item": {
          "id": "f66e491f-c8f2-4b81-826d-9cf46679d9b8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e9bdddeb-00d8-476b-87a7-3e983944d944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1be74f5-2cf1-4544-8aeb-4055c3de3815",
        "cursor": {
          "ref": "1fcbd4ba-a386-4692-b78e-67937d41de1b",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3ca5e1db-cb7f-41c6-8ff2-f9c02080ea5b"
        },
        "item": {
          "id": "e1be74f5-2cf1-4544-8aeb-4055c3de3815",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "69ea98d1-aec2-461c-8670-02c50b37873d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55366b3-b603-4baa-a43b-fce26136f461",
        "cursor": {
          "ref": "0516524e-270c-48f0-8d6c-a65a891ec9e9",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3b320906-1c4a-43af-9375-cccff275cd53"
        },
        "item": {
          "id": "c55366b3-b603-4baa-a43b-fce26136f461",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b8ca4a05-0b29-42e8-aa02-94caa6bff9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d18ac6f-6493-4f84-b51c-d1a9ae933be5",
        "cursor": {
          "ref": "a2974791-e971-473d-839e-574d58870d23",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6ba7ae4d-3693-4109-94a9-8d1a9bf60b13"
        },
        "item": {
          "id": "3d18ac6f-6493-4f84-b51c-d1a9ae933be5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a85288d0-93af-42a2-bbbd-1bd8bb0c4dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d5fab6-f987-4923-ba1f-741766561e01",
        "cursor": {
          "ref": "f4eb0141-4a08-4a73-a837-3ca55148d38d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66a31de4-1400-4c57-aaca-fb2d52d0016d"
        },
        "item": {
          "id": "27d5fab6-f987-4923-ba1f-741766561e01",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0ba665d0-8d03-45c9-859d-1efa29e45f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "11539b7f-7eec-430e-8c78-6284141d2c84",
        "cursor": {
          "ref": "63a1769f-ba35-4490-8972-bb95a4a2792d",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ee6e1f20-9d1a-46d9-a3b0-d88eedb14abd"
        },
        "item": {
          "id": "11539b7f-7eec-430e-8c78-6284141d2c84",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "507a903d-02a5-43ce-a52e-77ee8f2a18db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "141a3589-b0ae-4f95-b875-8acc4e2cff0b",
        "cursor": {
          "ref": "3e609da9-1fb7-421a-9a43-f10ff2e6691d",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "88497236-0beb-4535-8706-31b6fde3645a"
        },
        "item": {
          "id": "141a3589-b0ae-4f95-b875-8acc4e2cff0b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4028bb56-56d3-474a-9a35-3df9dfdf263e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "114c2ee3-841a-4850-abae-59731e6aba55",
        "cursor": {
          "ref": "4ff6d5dd-94ca-4a35-a4b4-d8397033addc",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3404e08b-d88c-4180-8b12-7c06d8ac2fd0"
        },
        "item": {
          "id": "114c2ee3-841a-4850-abae-59731e6aba55",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "991364d5-4d9c-4094-b769-b5aaf9ff229b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc961c9-c8a5-47e7-b07d-2fd7e9ee7a08",
        "cursor": {
          "ref": "a91bc149-aa7e-4841-91a1-5278c2421891",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "af43d972-f827-4d95-9b38-a338f0bf0a2f"
        },
        "item": {
          "id": "fdc961c9-c8a5-47e7-b07d-2fd7e9ee7a08",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cb26591e-3983-4f45-8384-8edb2f1e9937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "58704689-7226-496f-9fe2-37c38d88d6bf",
        "cursor": {
          "ref": "a762ca35-6f64-4462-b21d-24dbf45f207e",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "39a8e7b4-bfde-4628-a8b2-4914758f2f68"
        },
        "item": {
          "id": "58704689-7226-496f-9fe2-37c38d88d6bf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "886cc175-110c-40aa-b1ae-e093e611179b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 747,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b9e9f1ee-6ce9-47f8-ad3d-15ec50110ec1",
        "cursor": {
          "ref": "b8bc3e41-9f1c-40bf-bd23-9f468420f404",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9a60bd2f-6afb-4115-9009-ce2b8ecd49be"
        },
        "item": {
          "id": "b9e9f1ee-6ce9-47f8-ad3d-15ec50110ec1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0feb178a-4cd6-4702-aab6-51a226931fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "448fdbb0-451e-436a-9321-b6454ec69a76",
        "cursor": {
          "ref": "677e4b4b-4444-4e01-8038-3ec8c27d45b5",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "b9b8b26e-a874-47b6-b7f4-3b321d2d3c1a"
        },
        "item": {
          "id": "448fdbb0-451e-436a-9321-b6454ec69a76",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5e2f68a2-e170-4b33-9b99-73fedc6460f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "190150e4-f221-49a8-890f-41fbbce2cd24",
        "cursor": {
          "ref": "8eff8208-b84b-4a35-a445-616f443bf211",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ebf69907-46b5-4434-a950-40f75f7566d6"
        },
        "item": {
          "id": "190150e4-f221-49a8-890f-41fbbce2cd24",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "201ab08c-08d2-4cf6-81b3-c5e6d64234af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b55df519-298f-4af4-a8b3-4386bc005483",
        "cursor": {
          "ref": "85fa0b41-44ea-4f54-b135-b1e510da2db1",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "51d4be15-d3ce-438e-9abc-f4315b1ea265"
        },
        "item": {
          "id": "b55df519-298f-4af4-a8b3-4386bc005483",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7d56220b-dfc5-4a4b-b1ed-9ee292e8301f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d0b9a56a-5b98-4f28-99cd-15c03cfe58f8",
        "cursor": {
          "ref": "39386734-94a6-4287-a634-635d4000009e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ceffffa-10a4-4dc3-9472-f719b7928f9e"
        },
        "item": {
          "id": "d0b9a56a-5b98-4f28-99cd-15c03cfe58f8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fb3f080f-cfa7-45b6-9091-9443567ed61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27d318c6-668e-4518-8c34-5a59647a794d",
        "cursor": {
          "ref": "5c7f4d45-753b-4f8c-b60c-8a68edee19e7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6a50683e-0286-4094-985b-b624d336ecbd"
        },
        "item": {
          "id": "27d318c6-668e-4518-8c34-5a59647a794d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "52be3eb6-158b-4c42-a25b-853c8496340f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811ead74-ce20-467f-8ed0-d1e1648d4795",
        "cursor": {
          "ref": "760c1b76-d42b-49e4-9fac-d62c565731a0",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "726f93d8-8416-4c9a-b2bb-6062cea8d8e4"
        },
        "item": {
          "id": "811ead74-ce20-467f-8ed0-d1e1648d4795",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "08eecc90-75cb-4aae-9904-fa66540c168f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad38474-3953-4f9c-9bb3-699aa148aa8a",
        "cursor": {
          "ref": "61a729aa-b690-4ed3-bf10-16172b2b1ffc",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5d582b7f-08a8-42f8-ba35-cd80bd2c4bcb"
        },
        "item": {
          "id": "7ad38474-3953-4f9c-9bb3-699aa148aa8a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1b71925b-0e93-4088-9476-e63203d17fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6f4845-3a03-49f1-b66a-661baccab697",
        "cursor": {
          "ref": "714d7c5a-655f-4a05-92d1-e58abf585413",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8df16493-8bea-48f3-bef8-bd9cb95f0358"
        },
        "item": {
          "id": "0f6f4845-3a03-49f1-b66a-661baccab697",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9bbb611f-18e6-458e-a808-7b0ebcef7ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc408d02-c347-4ed0-8d60-56a3282abcbb",
        "cursor": {
          "ref": "17fee4ac-22a4-4209-8d1e-0cd206a719b8",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e6fabb7e-9ada-411b-911b-c48e0b9c018e"
        },
        "item": {
          "id": "cc408d02-c347-4ed0-8d60-56a3282abcbb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1256c72a-0bb3-44af-8ae1-94bcc16048c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af1c5d6-d679-4b78-a833-d5f52fa99921",
        "cursor": {
          "ref": "25b6916f-b3a0-4df4-8499-e3e425465bd0",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "109f07f1-d7c5-4805-9a13-229c331a2a2c"
        },
        "item": {
          "id": "2af1c5d6-d679-4b78-a833-d5f52fa99921",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ba700728-d69c-458a-919b-b8f58397c7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45026700-d5ee-4206-9800-13a5efb34247",
        "cursor": {
          "ref": "b0db755b-a644-44cb-8bbd-8fffff7fcbcb",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "87d65b77-d3b6-433c-a575-3a5f1d362121"
        },
        "item": {
          "id": "45026700-d5ee-4206-9800-13a5efb34247",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e7cebc19-45ff-4e92-b8ea-f97cc6aa05f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd75e73-3279-44cd-acef-fb5261fd9d2d",
        "cursor": {
          "ref": "fd9599bd-6e6e-421f-9c05-a0ed34f35240",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "880dddf9-e082-4d4a-b75f-6dfd47fe33b2"
        },
        "item": {
          "id": "afd75e73-3279-44cd-acef-fb5261fd9d2d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "60f2d091-4c36-4b3d-b2a3-17d5c8d49bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ed0c2c-814d-4528-879a-c127430b5b0a",
        "cursor": {
          "ref": "382153f9-9071-4769-b65e-f3975ed661d5",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5829e164-9f67-4b30-8b66-06168e78401e"
        },
        "item": {
          "id": "f7ed0c2c-814d-4528-879a-c127430b5b0a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6f317635-d06f-4cca-bdb7-a2b536d05df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23bd6651-a931-4af5-b667-9933a3bc4e04",
        "cursor": {
          "ref": "268f25e4-c746-49d6-9050-f05440f97601",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "292fa0c3-f10a-4e14-bd4b-64f4b98ff29f"
        },
        "item": {
          "id": "23bd6651-a931-4af5-b667-9933a3bc4e04",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6e6a6985-c10a-4292-80b4-6491964ac7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc1e53a-8b54-4de9-8906-b2cc229ae9fc",
        "cursor": {
          "ref": "6df45596-3ab8-478b-aa04-80df0712d0bf",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4ab8bd73-3ea8-4306-9500-3e9d118f5de2"
        },
        "item": {
          "id": "9bc1e53a-8b54-4de9-8906-b2cc229ae9fc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0cf8d69f-b860-4535-8337-9634477eec91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b7fbab-6dc9-44da-beec-2bcc91c27b49",
        "cursor": {
          "ref": "51908766-f1d3-454b-a82a-0a9abbcb2ff9",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4cfff9df-b331-49c3-bfa3-1075e8f990b1"
        },
        "item": {
          "id": "c2b7fbab-6dc9-44da-beec-2bcc91c27b49",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0a01aa9b-2d9c-4216-b141-5ecb1960a2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0d4531-9568-4b64-8b14-04b60a68bb09",
        "cursor": {
          "ref": "7a012383-f196-4bad-8cec-6c56a51fc464",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "75274f19-e509-4ce3-b0fc-aa1c32409aa0"
        },
        "item": {
          "id": "6b0d4531-9568-4b64-8b14-04b60a68bb09",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0418b73a-941d-4042-9f78-753442838864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 632,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5a56c130-0e93-4e3a-ba15-ce07ed6c5942",
        "cursor": {
          "ref": "1d4c9ddf-6728-4ce4-a25d-b37b7888fd30",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "96ffdc13-cc36-4f4a-aa8d-1a749343da3a"
        },
        "item": {
          "id": "5a56c130-0e93-4e3a-ba15-ce07ed6c5942",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a781213c-b619-4b8d-9d12-0bd32d962f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 628,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b9999356-01ce-46bf-a1c0-37fe03292839",
        "cursor": {
          "ref": "a32fd350-d414-48e4-9607-3ec86b48079c",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7f594a29-8b37-4f74-99f3-48c7ea70ed79"
        },
        "item": {
          "id": "b9999356-01ce-46bf-a1c0-37fe03292839",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "faaa1206-477c-4cdc-93bf-5390fecc4edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "60bb1401-1d6d-4a2f-8450-6f79479e0851",
        "cursor": {
          "ref": "13ac4d8c-9466-48aa-b1eb-a2a3923e991c",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e25d274e-8b7f-470a-867b-ca29ad670026"
        },
        "item": {
          "id": "60bb1401-1d6d-4a2f-8450-6f79479e0851",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ec9fafac-3157-45ee-bb9d-f09bcbc4cbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 649,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "18715789-49a9-45df-8570-027521d0969b",
        "cursor": {
          "ref": "27d99b2b-7fa0-4bc4-a907-4906acac79b6",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cbccfc9b-68da-4462-b3b3-fd1feedd8a4c"
        },
        "item": {
          "id": "18715789-49a9-45df-8570-027521d0969b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3bffb3eb-8125-4273-ad05-000df555cba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "50628878-1754-44a6-943c-12a58005925e",
        "cursor": {
          "ref": "8c3ea3ef-06da-47e6-9cfe-287ab5add3fd",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b7138cdd-044e-4bb2-b341-283c23df65a3"
        },
        "item": {
          "id": "50628878-1754-44a6-943c-12a58005925e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d21241c9-08a7-4019-91e8-1946ba96c7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ff1581-c26c-4fb6-94f8-fb0abb98dfda",
        "cursor": {
          "ref": "47f92bb5-54d7-4f24-8481-91cce67d40b7",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3d42c24f-1e8c-4b6d-a6b8-420209d7510b"
        },
        "item": {
          "id": "c2ff1581-c26c-4fb6-94f8-fb0abb98dfda",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0d7bfcaf-467d-415d-9cf6-6c7298e255f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3930c4a-8646-469c-934f-374f55e817b3",
        "cursor": {
          "ref": "f679a3f8-aa49-41ec-a0fb-75112c724c8b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cf55e129-623a-401c-a657-e50011eb84c8"
        },
        "item": {
          "id": "a3930c4a-8646-469c-934f-374f55e817b3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "08205ed3-4674-46fd-961f-163c8c072b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a38300-736c-48a0-82f9-4cfc2768e0a8",
        "cursor": {
          "ref": "01c111cd-e1e2-429e-bc91-cf0af023f418",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6ff3d281-de70-4314-81d8-d0d92cef438b"
        },
        "item": {
          "id": "39a38300-736c-48a0-82f9-4cfc2768e0a8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b7ec8bb0-9132-4983-94bb-4c524eb4671b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9dcdfc-1536-4a37-8538-c69d11ea5adb",
        "cursor": {
          "ref": "4f7048cc-8288-4ac6-b1bd-dd6df30bdc2a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b99f1372-43ac-42c3-b89a-66e44658b1be"
        },
        "item": {
          "id": "fa9dcdfc-1536-4a37-8538-c69d11ea5adb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "13fbd99a-79d3-40c0-8842-a8eafea0311f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eab1df3-3da3-4c0b-96ae-1f0a3cfb3e4d",
        "cursor": {
          "ref": "5bb078cb-8101-403b-baa2-48bcabef53cf",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "76a06664-2b89-432d-8c51-98b45548cbce"
        },
        "item": {
          "id": "2eab1df3-3da3-4c0b-96ae-1f0a3cfb3e4d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cafbda1e-e8ee-49ca-a3bc-ef59c7dcc1b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dab666-3d43-4ebd-8b86-b8a5fa36108d",
        "cursor": {
          "ref": "f4ab8621-b39c-4615-a01d-1dcfbf0e7057",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "891f76ae-f313-43a5-b7e6-c2c05ca81f88"
        },
        "item": {
          "id": "f0dab666-3d43-4ebd-8b86-b8a5fa36108d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a47d1703-5235-41e9-93ac-a54673569d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0f4d72-ebcf-4d2c-bcd4-fe9f56828bef",
        "cursor": {
          "ref": "cf88ac1d-c916-4ff1-a0d5-b035eaa26ce0",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fec8fdad-9f01-4512-a76f-a601ed6976ab"
        },
        "item": {
          "id": "ad0f4d72-ebcf-4d2c-bcd4-fe9f56828bef",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "38a662d0-0897-48e7-b094-690e170d4e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7321a69c-0003-4122-98e6-07fbb9fa427d",
        "cursor": {
          "ref": "56c1d28b-4d05-4e02-9b7b-b1722f0bc576",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0e7b0513-724c-4f35-9ba8-17a671c22fef"
        },
        "item": {
          "id": "7321a69c-0003-4122-98e6-07fbb9fa427d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a8061634-8583-479d-aecb-714f76eab97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252b6857-92e0-410f-a21a-f86c999da5bb",
        "cursor": {
          "ref": "666adb9b-5c40-414d-a62d-7c89c8bd6928",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "59d5223f-c24d-4dd5-ac6d-3618bde38031"
        },
        "item": {
          "id": "252b6857-92e0-410f-a21a-f86c999da5bb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dd6a14dc-dd2e-40a5-bc6b-ff5100864165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a269fd22-2e37-4a9b-9cf6-82ca9cdcaa26",
        "cursor": {
          "ref": "af2c7780-1226-4a70-aa4f-fde76fba15a7",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c613253b-233e-4f4a-813c-85849db41cf0"
        },
        "item": {
          "id": "a269fd22-2e37-4a9b-9cf6-82ca9cdcaa26",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a7ef68a3-5960-46e2-b45f-1d569546b1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1002093-d75f-4942-b552-7a5d50f1fcc4",
        "cursor": {
          "ref": "9aa017a9-8bd5-4599-a394-6a1a0177a467",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5cd61684-dfea-4b85-a61b-290421c012c1"
        },
        "item": {
          "id": "c1002093-d75f-4942-b552-7a5d50f1fcc4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "658474e3-662f-47d2-81fa-647ba95952a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e3aba7-3a33-4d5c-9a3c-76281c096eb7",
        "cursor": {
          "ref": "e5cc9417-f627-41ab-93d4-8e7e82a72d58",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6076486d-8455-4bf4-b3ae-dad6d2b74a7b"
        },
        "item": {
          "id": "24e3aba7-3a33-4d5c-9a3c-76281c096eb7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1bb61f3c-185c-4f8e-bb65-19694e7a96ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afc5fd6-ff53-4399-a698-e291bdba8bbd",
        "cursor": {
          "ref": "c44fe98e-4cab-4ee9-a8d1-bb942cfc5ea3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4386392a-2a63-42e0-a2a4-28453d5750a5"
        },
        "item": {
          "id": "1afc5fd6-ff53-4399-a698-e291bdba8bbd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "704c3163-2ce1-4849-867d-a5134ec59ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46017374-13e0-4a67-907b-d16c52dc2379",
        "cursor": {
          "ref": "8bab46e5-416f-499b-b6d6-49ae9222fe6c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "20621ed4-99d4-46a6-b7ce-fb9e499ed515"
        },
        "item": {
          "id": "46017374-13e0-4a67-907b-d16c52dc2379",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1a054b0f-2a78-4123-af97-a78bc125cd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6d9f8d-07c4-4668-92a8-9080d3c1518f",
        "cursor": {
          "ref": "e3d41eb2-60b4-40a5-adde-616eaa332c20",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "607f3fe2-2331-4aac-9732-1b78c1aafc0d"
        },
        "item": {
          "id": "7d6d9f8d-07c4-4668-92a8-9080d3c1518f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "15ce6ee0-2be5-43d6-a816-448709d43ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f78025b2-090c-4537-8300-6a7d3ef4534f",
        "cursor": {
          "ref": "7a038871-5889-42cb-8343-dfeece99cf29",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "245ea690-eb11-44a4-aa55-113354a9bdac"
        },
        "item": {
          "id": "f78025b2-090c-4537-8300-6a7d3ef4534f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f9859cd3-1386-4d59-a0f9-38d76d9035c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22de9b72-fbaf-4d5b-a10f-a69127bfe525",
        "cursor": {
          "ref": "57cb7ee4-2b31-4c81-b21b-094ab6d7c790",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ab06ba1c-8551-4526-a360-6530c8fdd4f3"
        },
        "item": {
          "id": "22de9b72-fbaf-4d5b-a10f-a69127bfe525",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0bd39133-3369-427e-8ac0-cf8d4c883b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6513dc-cb3d-4cbb-8ee9-d7a13e0febc7",
        "cursor": {
          "ref": "a187c3ff-fde5-4e70-a7b7-fbfaee580080",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "209c6dea-a77f-4e41-b50a-0adb476b3081"
        },
        "item": {
          "id": "2d6513dc-cb3d-4cbb-8ee9-d7a13e0febc7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1c48068c-2a9d-4bd8-b71a-5d88a9372c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202692fa-6ba5-48e6-9f57-7a8f6fde8d94",
        "cursor": {
          "ref": "c6b0f9b1-9c34-44a6-8d63-db26b802aa8b",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c10d2f66-245d-4ef9-ab40-28d39c15fae1"
        },
        "item": {
          "id": "202692fa-6ba5-48e6-9f57-7a8f6fde8d94",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e6fe1ffe-e45e-46a1-be84-8f6c7dce1c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8100dac-2357-4bb6-b25d-e66eb6661100",
        "cursor": {
          "ref": "5f38ced2-26a1-4d2e-bb3b-dc60f18d2c96",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "be8699e5-62d0-4501-8642-c11e77319b7b"
        },
        "item": {
          "id": "e8100dac-2357-4bb6-b25d-e66eb6661100",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "08aa6b57-a3d8-441d-9167-bce7d3420c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8416c6-a86e-494c-8dcb-d6e80209dd4e",
        "cursor": {
          "ref": "7b1c38e5-b36b-4d70-8973-3129e2c27f54",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cf54379e-625b-40d9-a6c7-18c61bbb4c78"
        },
        "item": {
          "id": "4f8416c6-a86e-494c-8dcb-d6e80209dd4e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9bf73775-e311-443a-89de-c0e0c94040d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256176b6-7edc-4aac-b7cf-813da04861bf",
        "cursor": {
          "ref": "70ac822e-9d82-4ed8-86fa-be4067e725c4",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7aa273f6-8cc6-4e5f-bc18-df0e13b06eb2"
        },
        "item": {
          "id": "256176b6-7edc-4aac-b7cf-813da04861bf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ffd4335b-37ce-4dd4-8e10-71df62880952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7ef45d-7a3f-40a7-b95c-5710af633925",
        "cursor": {
          "ref": "3f905021-274a-4940-9756-0606e17dd8ee",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ae938b40-6927-4ab3-8ac1-348453c84f1a"
        },
        "item": {
          "id": "4b7ef45d-7a3f-40a7-b95c-5710af633925",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9e8167ee-2794-461b-8069-00f9ddf6e58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc759a86-cf23-4cd8-971c-2164d46388ee",
        "cursor": {
          "ref": "c36333b4-9f57-4cb2-8236-9929cda35f1d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bbc9b16f-dc58-4e62-89e1-183ea6fa4e82"
        },
        "item": {
          "id": "bc759a86-cf23-4cd8-971c-2164d46388ee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9b436354-16db-4d28-bec9-f888ef8bca01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8738ae8-865c-4d5a-b6a7-e968af87daa7",
        "cursor": {
          "ref": "f3a01249-036d-41f2-aa7b-13629ffbda55",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d2585b40-713c-426e-b0cf-4c13b1203f22"
        },
        "item": {
          "id": "d8738ae8-865c-4d5a-b6a7-e968af87daa7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7136deb1-70de-4e00-a03e-50b6f60f9690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cd148f-5ef5-4175-9c4c-24a13ff1c3eb",
        "cursor": {
          "ref": "3595ddbc-ac1d-4323-a841-2e308e5aee7c",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "52596d10-0f33-498c-8128-fd7737475341"
        },
        "item": {
          "id": "92cd148f-5ef5-4175-9c4c-24a13ff1c3eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "310b72f0-ce91-4452-aad1-103567f68cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175c5a2e-a103-4424-9685-0100e1ea6804",
        "cursor": {
          "ref": "763ab31d-aa26-4835-b9dc-b38614f6ff65",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "95c0c17c-c2a0-4d98-a054-0e1032d1ad21"
        },
        "item": {
          "id": "175c5a2e-a103-4424-9685-0100e1ea6804",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "40aa0f5e-809f-4c04-b93d-61dbe07761d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377dd9c3-3d14-4009-a867-c5086d31460e",
        "cursor": {
          "ref": "cba104e9-3451-46d5-8358-34cecb26c4e0",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ac162e62-44fe-4e6b-b481-3526d3103432"
        },
        "item": {
          "id": "377dd9c3-3d14-4009-a867-c5086d31460e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "29eaabb9-7076-4fd1-b4fe-1d52defe4c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16bdba5-77d9-46ff-93a7-e904119ceff7",
        "cursor": {
          "ref": "64d4f75c-4bfb-4447-80dd-254ebe9a4979",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b9ba35ba-c6b3-40b5-81ce-38e5c05bd597"
        },
        "item": {
          "id": "c16bdba5-77d9-46ff-93a7-e904119ceff7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6a09b017-302c-4354-8c66-bbca4b7c360d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcc0b00-32e5-43b1-9add-1680c780deea",
        "cursor": {
          "ref": "432915be-218d-4a04-9032-7be4589c078d",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f9c8fa76-b655-412d-8fdf-5f122070e137"
        },
        "item": {
          "id": "8fcc0b00-32e5-43b1-9add-1680c780deea",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2eb91431-df01-4171-8e54-7e3709d7813a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cb7cfc-e0a7-48ba-bd7a-d20e5dcd0e5a",
        "cursor": {
          "ref": "09940591-091d-45b3-90e2-8d495308645d",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2aeb3250-3411-4264-9a0d-73e6ff12924b"
        },
        "item": {
          "id": "b4cb7cfc-e0a7-48ba-bd7a-d20e5dcd0e5a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ca1a73ae-c869-4df5-b494-b5b1745c3c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1839d09-dc69-4572-bf3b-85dc28d67697",
        "cursor": {
          "ref": "807d0121-d2d7-4d2f-8d3d-1e3595fac6e9",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c4e1f43e-c2ae-4356-b911-b958108666eb"
        },
        "item": {
          "id": "e1839d09-dc69-4572-bf3b-85dc28d67697",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "118d0705-5d84-45af-9af4-fed467b0cf1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a804a3-abf3-42db-a2b7-bf10a15e23c3",
        "cursor": {
          "ref": "f08e3bf9-5789-42c7-92e7-3372bfc0637d",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7e84c002-72d9-4477-aa12-fe1cb9c488df"
        },
        "item": {
          "id": "31a804a3-abf3-42db-a2b7-bf10a15e23c3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3a7bb820-cf30-4b64-b225-b14c4776bbec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ec30e1-09ba-4456-a5a6-9c8d8f4089bd",
        "cursor": {
          "ref": "d85a5caf-97fa-473c-9cf0-dff4840eb9c3",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1baa685a-0b98-4ee4-927e-e861128d1605"
        },
        "item": {
          "id": "69ec30e1-09ba-4456-a5a6-9c8d8f4089bd",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "29a3eb87-e7ca-4c76-ba7c-3b401afcd510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7d216e-a9cd-4421-b774-e28cc48222ff",
        "cursor": {
          "ref": "9d00522d-f244-4558-8395-1945c0ed0441",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "466952d8-1f5c-4baf-afa8-25e85659f17a"
        },
        "item": {
          "id": "8b7d216e-a9cd-4421-b774-e28cc48222ff",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a9216339-1a82-45d4-9adc-9a1220669a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8474569-0475-4c54-b9aa-d41a4e4c0dc4",
        "cursor": {
          "ref": "2d98badc-6f8f-4f1d-a6a7-e47c45b9c901",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2f6e86b3-e640-4176-b4fc-9e8416661710"
        },
        "item": {
          "id": "e8474569-0475-4c54-b9aa-d41a4e4c0dc4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8fe5411b-58a6-4779-b5fd-46634b1c86a4",
          "status": "OK",
          "code": 200,
          "responseTime": 627,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3245dfa-ee12-45a9-b156-3c02ffae5dd4",
        "cursor": {
          "ref": "79c83102-5d48-43c4-a152-295ed95acd03",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "86429d8c-88ab-46ab-a252-b10d9e086c85"
        },
        "item": {
          "id": "b3245dfa-ee12-45a9-b156-3c02ffae5dd4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9dfdb8aa-8967-4d60-ae53-7772f4623d80",
          "status": "OK",
          "code": 200,
          "responseTime": 1148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "387b8da0-a302-466e-a18d-e0cf906c15b4",
        "cursor": {
          "ref": "ddb6009f-7010-4fd8-ac8b-cca08cb45315",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e57e8939-ff59-4148-9a5f-b4db743b8704"
        },
        "item": {
          "id": "387b8da0-a302-466e-a18d-e0cf906c15b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "35a01b6c-7363-4e1f-b2a1-2bd68fef326b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387b8da0-a302-466e-a18d-e0cf906c15b4",
        "cursor": {
          "ref": "ddb6009f-7010-4fd8-ac8b-cca08cb45315",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e57e8939-ff59-4148-9a5f-b4db743b8704"
        },
        "item": {
          "id": "387b8da0-a302-466e-a18d-e0cf906c15b4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "35a01b6c-7363-4e1f-b2a1-2bd68fef326b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0fdf435-3ebb-4511-89b7-52e5b70d636e",
        "cursor": {
          "ref": "38531b53-1bd6-4177-9d31-8ab81848db3f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b4768ba1-903d-4705-95a2-efd46e26e288"
        },
        "item": {
          "id": "d0fdf435-3ebb-4511-89b7-52e5b70d636e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7083b6bd-104e-40f1-8728-15b1f6994a65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb8e396-593b-4ebf-84da-46393617df13",
        "cursor": {
          "ref": "fb9c887c-eab0-4e8e-b242-fddb3fd37332",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6b4c1059-18c8-4e12-bf94-3ecca8ce05dd"
        },
        "item": {
          "id": "cdb8e396-593b-4ebf-84da-46393617df13",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "985d453b-6dce-46cc-9113-d28c9c19e41f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}