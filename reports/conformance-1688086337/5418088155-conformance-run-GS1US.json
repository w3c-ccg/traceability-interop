{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c93f2f6b-b3bc-4130-b07d-083312756fe4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8cc72f49-6680-4e86-90f3-1d2bb07dba39",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8161f7d-7dad-4d71-a1a5-69e3824fa48e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1496eb23-7573-4ca5-bce0-c8b15f9b6169"
                }
              }
            ]
          },
          {
            "id": "07622615-2598-4459-9811-e0fd1e6a6621",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "63f5afa3-3b1f-4c38-bb0c-e6f1d780ef9e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e01fe0a3-c78b-48c5-82ac-cfd2978fb5c4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c1f63f0f-36fd-408f-b5af-cea94175ac5f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9af3c572-78e3-4415-97e8-af98157c292b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "310baa1a-b06c-4951-b750-dcaba75c773c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d798ddd-2e1a-49bb-86aa-534684e7f7af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c90335c7-687a-4b49-ac06-88b08ba8807c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "343ffa73-6f88-4d55-9eb5-1465c8f8cc1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "479f3e11-1d83-4f33-a5bd-798fc744dce3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f23a3f3f-972b-4d63-9700-5f1423caba3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ddb5ceb-915e-4149-a68f-9d8ced027053"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb5b7c80-c907-450f-b6db-8dcc955c6086",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "34c8ca94-caf0-4681-9cc7-18020ab92f3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b59738a7-2085-4aae-a6e8-077f79ff1ac9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d49b0df-8138-4557-a473-ea3cb58a3fde"
            }
          }
        ]
      },
      {
        "id": "9d8716f4-89f8-4d38-9d62-490214d3a172",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c9d55a95-3ca2-49e8-b0bf-b85acc48d040",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12d5c46d-9ac8-49cb-b2f0-6538c261d994",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1804a60-a686-479d-ba0d-7afcb2be851a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a178b-6844-45db-af9b-d28cab664357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "566123dd-a5db-4e4e-921d-71c7ea8f1808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083b4da9-f621-4fdb-8b61-46f454fb366f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fd245c-42a8-41a9-b225-382bba544594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d795d5f-61f8-4bfc-830a-1218c63e5eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0977308c-0d3a-4d24-a011-e8fe7eafef47",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daac8c4-4d8b-4f1d-91fd-604e102f0227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "788ba2da-21b8-4e54-abab-c0d62240ad36"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6cff0e30-866a-4db0-949e-e6b9920f010f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc87eb73-188c-4a5a-9809-59b160b5be5f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d603acaa-6a03-4d97-a71a-52eea90298e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4297ded-3a6a-49a1-a5ea-3086ac8e13f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4901b4-d11a-4f58-8ffa-325971f62c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99a50be-4fa7-4222-b627-9e0cf1f9cd78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7bcd6d48-2939-4d91-9cfb-333ad728b3f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e79f686-d8be-4df9-8f5e-59c94b524f11",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df4f6751-df40-4a0a-9b33-52c107fbb79c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6b4b28f6-8d8b-40e5-b51c-0d56d2e7dc6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78b044ff-e597-4bab-8118-d35f1a7dcc81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "13d7681a-230a-40be-8bb7-c630c458da4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "380cb843-c701-490c-9a1c-b3e39c530b4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20f6f62d-9137-4821-a237-c44dfda1c6f0"
            }
          }
        ]
      },
      {
        "id": "a7edc421-c1d2-44e6-b713-196b57d2842d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c31be6bc-a61a-4f2c-a19e-5eb30f630bba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a76c2f0a-ba2b-4c1a-ae58-d3d95b678114",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cd46634c-3c5c-45b4-b222-955f8bcc4a3f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627b43e3-3013-4bf4-945e-86e0f8fa4fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87dddb7f-05d1-4b31-97fd-68548510002e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9328e6-bc43-4338-bd65-774c6476a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bd02f49-00ca-4702-a5c7-93b1077a9924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8bc440-0447-4f70-aa68-c72fb9bb723e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df73e00d-98b1-417e-9cfa-84a2a3912628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78270957-01c5-4900-9052-a329c1411e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f85e0a-7ae2-4d6f-bb75-d0dcd191992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6258004-ac71-42ac-8898-e3d3414a5b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e2e676-2651-4752-805c-07b5ae579aab",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c91cfe-9642-4731-81aa-fc3dc1c44c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65d5db0-c8a6-4625-91cf-07ce1209e560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6710cae9-17c1-48d5-ac49-395fc3c2814f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c181311c-2a69-46af-a2d4-23d114cbcc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcb2921-9d10-4254-9f3d-3252f5ecb442",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d7ff82-c950-4191-a744-91e574d6b266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2061854-2c05-4ec2-b341-1dc5b3816c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b97f28-1494-4239-83ac-2dcd0508db27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d658c7db-9dfb-44a5-8bc0-615f5b195670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045edcda-5d11-4e11-a5d4-c872acd3476d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50670cdc-d7ab-4512-948d-2e3b81c831d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e09d03-4c09-4340-b0d4-372c72268d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944c5762-6f75-4ced-b97d-e26c82fa47d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5476325-4106-48e6-8c12-3f759e930c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe337f31-042a-4289-b065-827c5c8eef83",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893b19a3-de4c-47ea-a4fa-ffb41e1b05e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b833e69-9371-49a2-89df-6662d999f5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fab78b4-8d6c-430f-853d-23eb3ca1b0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e50706aa-12f7-4fe5-8230-c4ec20a5215c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b29685-7bf3-4bd4-a886-a3231bca7384",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040e54b4-e13e-4f6b-8405-6b25f63ba75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28a6ee9-b660-4580-81db-0c164860f217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65459d10-4744-4f16-a588-26f18cc545c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98bd129a-7627-45cd-a0f3-f6ea7b805834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb0cabc-dcda-4775-9efb-fb834bb4faf3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b8960e-7946-4bb5-b3f4-be4053c4b22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09abf35a-83d8-40d7-9849-6b2ab6b62dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd005e26-b245-4f06-bebf-66727284a484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ca704b4-b038-47ea-9a0e-5bd66f50ba19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3c4b55-5e17-4d3e-a727-fe5a2ea3d869",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace4e228-af7e-442f-9f13-7ffd6dcbfbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc1ca7b-dfee-4239-ad21-8a1a14bdacf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f695ba13-722f-47db-b6a3-01f50a0275f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99161a0f-e43a-4082-8d50-a174f8a2200a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bbcc96-0862-42d6-af43-15846e17e0c4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ef72b9-7033-486f-9f02-f7bb318e9d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249b9ff8-dd12-4b8d-8801-d44ede609ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778fb1ad-c6e4-4675-b4b8-738f51e60f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb079655-1f41-4f09-bb83-a595d7cb3142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d99b0a0-8c42-4814-b29c-238e2ba5ac49",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0a31e1-3fa2-454c-b413-ffc401834859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8515733-3dea-4063-b954-05a978b2f5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb75d47-c3c9-4aeb-bc52-7ffb06bd117e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9a97313-dea9-4bba-ac62-d8de1a234293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8411ab4-3150-4ebb-bd5a-ce964fb37d84",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dab14b-c428-47bc-9508-f0b189867c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d48c4a3-5ef1-4d98-96d3-ce58d3059867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2db94ed-c302-4ba3-81ca-38f9c194700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9020c5f0-65be-4498-b746-87f1c98aa866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df925f86-6bfb-4203-836b-a28360a2baf9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5383ef91-0965-4d2a-a706-eb4fb1f6c77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c624b7-4ab0-4c72-846c-c07764f2de88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63ff137-8fc0-4f82-85d6-99cab792cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a773122f-ce26-4183-adbf-2c6be46a8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77db7715-046d-4c75-821d-34a0598b3f4d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9783054e-0d08-444f-a72b-178e4ba6ebba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526deb58-1932-4243-8275-6a380256ffc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9ee9a1-4cf6-43e7-9024-9acd19a2d726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2eb892c0-49e6-4e6a-851a-1503584e044e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e981ec-8ae9-4cb9-ac6f-d48664a41354",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496b0a79-cec9-4967-a6da-a1f147766165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a574aa-5ded-42ba-a950-8da40cbcabe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba4a40c-9eea-4993-970d-c96dada57d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a9e6214-6f63-4850-82c1-bb47f5bec9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1c316b-687e-4dce-b149-77d7ede0d595",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cd193f-6c54-46b7-bf1f-e4da15a07389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2564dd-c2c1-4834-b14e-51f24098b4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1159c932-ea4d-45ac-8db6-f1eede5cc67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c213bdda-229f-42bb-8529-1bf7d336f9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc3d872-f6eb-404c-98b8-4e7bf01d5721",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c78f252-b960-42ed-99be-bf69b66c24bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1d3b06-d6ca-4150-94cb-bdb2dfcc81ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049aea13-9c9b-4d99-8e69-575a38624958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ccd3562-f1fa-4ca8-9c78-c4418396efb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8ee987-74e3-4dc6-b99e-07ad0013cb03",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1fd57f-1be0-4e2a-871e-b354c50cb4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8176907-45fc-47f1-8125-aa2c2667d5ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a467060-9d61-40c0-8185-7e9249323d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0e24a7-d2ca-4aa2-9a49-c4c8285a2397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f48467-6675-4009-bcc7-f65d3ca139cf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f157d8-c911-4d8d-bcae-9d6fb9623b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e316674-525c-44f5-ab08-39e7635e2ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849c60a2-b67c-4127-9e23-3c0581805545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f251f5-5f37-4b6a-8513-b2ad3b63fb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895c705c-556e-402d-a9ee-61efbb37093f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57396390-eddb-4fd1-b530-e8acf3c5f681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2284967b-22f1-4ab5-a0ba-ca9992b7ba6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4365ac0-1ed6-4461-8cb2-c9b786ecf633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2f23c7-5bc6-48f6-931f-53d2d8ce8a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9924e1d7-b729-4ed3-afc6-4c6bee55d4bd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69564106-b144-418b-89b6-6d7e86441924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687bf48b-81d6-4f10-b54f-2502806c4434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9156cef-7531-4a35-ae99-aa19213ea3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd79324-33af-4b54-b99e-45a921030f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633871e4-b89c-4af3-b084-84adda03fc83",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdf8de6-1334-4579-a695-6565be9b7227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2047298a-56f0-4e30-b299-8bd94a04bca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8f209e-42e3-4584-b2e4-b1fadc0ffafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3c4ce7-b996-424a-8816-b10bafb8db74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c8cddc-3268-4268-b494-84c8a96dfd65",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f8bb40-bfdc-44bc-a80b-8f3189fe95d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6ea787-c712-45d2-8166-e04f7c49b44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47b88ea-f4ea-4886-a969-2f893ab43ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64969dcd-5c2a-43e8-85ec-3d0498f1defa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38597dc2-2102-41ff-9a0b-8e1561ce2d9b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9c330c-68dc-45b8-a1a9-17c722ef0160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203624b0-3c65-4e8b-9278-fbe30de47bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad18ca4c-77ab-433b-a802-1c05c0efb40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f54d02-0885-4720-9765-f19d7f7178f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c4b661-7ac6-4b59-a777-e85f1078e4ef",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31370c44-1c7e-437e-8f74-f43007261393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7aa5af-549d-4203-8ec6-b8ce6e754675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0f97ea-f2ca-440e-aeb9-71ece02f740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a20206fa-95e3-4f88-bd46-957b45a39e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19a169d-68fe-440e-a0c1-475ff6d3c02d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b8f1d1-f660-465b-ab11-93c436b6ac77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed62107-f4a1-4612-b82a-3332926dba37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fedbf9a-03c2-4f5f-ac32-9dc44433b5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8cff8c-f3fb-4b6a-b816-55d0986d0391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034ced1d-6851-4676-baf8-8c9e49949166",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1ae58c-3d2f-4d54-9732-c94f112b5e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71be78f-9796-4aff-800f-4752b89fe02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb452d0c-06b1-42b9-ab48-1b1f24f6dd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "703aa382-edfb-44fc-a1ab-87bf802c9af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083d7486-0d26-439a-824f-c6c7c1cc80b0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90beeac0-7b80-4300-b913-011a95b3e52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14c75df-9649-4469-aa89-d035c2e2c44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2da1884-0ba6-44b6-9189-1b1a0b84d256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f36508c-daca-473e-bd6e-3978f36c16a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5d1131-d8bd-431f-9d06-1be0be4cf346",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4343e9-c970-437f-acd4-8a231135efe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccabb562-bf3e-4918-a55d-d1b1d1d136a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33afcd8-ba18-4e4a-af9a-afa48f12d1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5301f7-18a2-4f93-ab52-9a92f8c07139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23075d39-986c-40b2-8948-0a489df7e59a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589338fa-62eb-4451-9fc2-9b635ff65ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19ddcce-6a74-46f5-b27b-38ca28a0b0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcc45a4-0312-444b-a007-1ba3c65b21fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "43eb51d3-5004-4b86-b585-2ea7acc71c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138dcae5-b0ce-4c70-a1fa-aa00e8351bfd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b019fe1b-5241-4a7c-acca-c075d8ce8251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec9d530-519d-4739-aa89-32e8d024f66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8c3134-f1f2-4e0c-a9b8-477ab4de1c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf0dfd6-f54f-4f47-ba3d-eb4db7452c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fdbbbf-1c52-44a3-906d-ae4680d1751f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc718193-d7bf-43e0-bf77-76928a773f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c474fc3-b5b9-4f9e-92a5-232e7859dfc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a230a6-6815-4098-80d1-fbd8e1ea5c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7938ae-cf33-44bb-ac94-87255ac63375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5422487-fa6b-4675-bf6a-4064ef2619fc",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751f99dd-6c29-4963-907d-89b2ff6a15a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af12a596-5031-4c05-91ea-c6178df5ef40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9530fa02-c42f-4046-8a3a-07b1a1a54607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "266b0bb1-952c-44fb-afcf-ce36ee0dd516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0157f5-5416-4986-916c-4839ec1110fe",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b53966-6f3e-46f1-bfa5-aa97b2fb53b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980e94f5-470c-4f5b-ac15-07521608d7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fba6e48-3579-44d5-9207-db9b8e77196d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc9af1b-e87c-4055-b443-ce11d2179570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bec9975-cfd8-44ba-a977-5ae0006694d9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fdca90-3766-42c8-9f5f-623565b2f682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441dc060-0ce3-4b17-9acb-f5ec1d2ae9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2e0b2f-e13c-409f-b245-632ecdf45213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "07683eae-bb80-4085-8d53-4931c8866a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42c635c-aac8-42b8-8695-5d14579dd981",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2027e7a-d8b6-4536-8a61-310b93e29afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8d4dcb6-df87-4312-b1ba-a1c890611f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6d22e6-cca0-4e2c-980d-9499439dfa1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0934328-32e6-4852-a331-4abce9c52f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052bb02c-7bae-4822-88f8-ac896570f486",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7000cf35-5ff8-4b37-ac69-b3e7fdcaa60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8707f38-129e-430d-b117-42dad566d63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71a6d63-2a30-433f-9b28-6213bbed364b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f73d285b-c900-4623-afb0-9448d4f2bca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b87619-772c-4e8a-bf51-bb9c1d2443e2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd858545-6297-4b8f-8d3b-40180cbdbbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48751181-08e3-4af5-b47a-b5b774283e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052f225f-d655-4245-afba-460dfed0c727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "86480825-7cbe-4736-907e-b727f512be5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486c2771-ce42-4a80-bf47-aa2292970164",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1980055e-340b-496f-9292-6f0b81d5fc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d151274b-18cd-4c1b-8181-7e48d7768d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fe1016-0ba4-4894-9232-b6a99ec82436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c385cc97-1543-4b01-b24f-f70dc5917331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba282e33-db64-451c-93e7-d58ae073f04f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd12960f-34a5-44fe-a6dd-e8c4bba8ce8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd47d8e-6d6c-4c2d-86b0-a86fbbae0038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66df3f15-6688-4e24-86e0-90c74b3bac9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "92d28eb8-731c-4dc1-b8b3-cddcf8e2ad6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee5a382-8d31-4511-a016-d69321a0d7da",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416f2678-0d6b-4194-bc20-0113baa9f7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bab297-f966-4106-8c5a-523dfa3da03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96be4f4d-24ea-4085-8bd0-8f50decc4a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4ffc96-8ede-41d2-b3f3-e421efbb2b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0d2068-aae8-4843-b95b-3a0ada66ba41",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b7f489-d6ac-4c98-b44d-b078f1d14aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f4ee24-7eb5-4593-bfab-64e082dbac68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cdd5d1-f804-47ab-b906-710e5674ff45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4c273ee2-526d-4ab8-a5cc-3730cd1abd14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994a210a-508b-459a-ba28-3e4b092133e1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8012c381-cb8c-419b-b07c-43bd4e8b4180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d66347-03df-4b4d-a0a8-7beee141deee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d9e0c3-fda1-40f7-8be1-95b5326025ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2469f14-3095-401f-919d-301609fde751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d49623-bc91-4cfd-9df5-05a5d837326e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9867e399-83a3-40bf-806c-97df3f125c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ec85c1-5b85-4f26-9c28-b3ffcfb6c705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99525d79-ff49-4687-bde3-a290070fc62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "05398502-8e87-4926-8eb0-7be656fc9ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdcefdb-d13b-482b-926e-f8f374aebf76",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15bb325-7f3d-43ea-ab1d-58cc96f6bc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106eaa3e-e681-4374-af29-e86b7b10f31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476cf0d2-a9d1-4263-bd27-80b55129dbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07d13eb-695f-48db-842f-8ccc2dd48397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729b3055-8140-4510-baee-85a66ee45930",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0466b176-7436-4442-9a63-2a6cb5a1e59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcd5063-d563-4b5f-84ef-e09acac41fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edbaa4ef-6ca0-49a4-9a39-4e4f55ae15bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e813789-9b6a-4321-a582-320f101e049c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb843ea-543c-4675-870e-68cedff396d7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67739d20-40bb-4159-9a4c-50d9b47817ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f1356d-bd22-4326-8869-164b4a7e4052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0077af-572e-40bf-825b-d6a0f6cb9d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33d3042-ec0f-43f2-8f90-5e3fdf453381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5961437d-c829-471d-ba4b-e472118c894e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a4bfe9-baee-407c-9516-0d062a761f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366de5ae-c0b9-4980-a55b-56df83d48984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60f603e-4b6e-4d0c-850a-7eeaf998ad0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb9e2e7-f2c9-4aed-bc43-f121c2918241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfc50e7-0feb-4e36-a730-9daad63497fe",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208854a6-3471-476a-b052-8c9eadc62740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c682e12-25f7-4fe5-8d7d-ae4c24d2d577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8aabfe-1164-4ed3-a2ec-ec02695aae7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d40130f-8e57-48dc-9cc7-f61030d3b06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cc2696-d0c2-442b-9832-df15b58bc839",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d486449-e2aa-4ae3-9a04-6e1d3e9a530c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02648364-4811-4b63-aca5-ada33c4332ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81815431-647c-40dd-b3eb-53a857d3c35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "429fc590-5553-4967-bca9-a49de72c4850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c325f0-4139-45e7-91e0-936078f741ee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e606773-049c-492d-948c-d97accc7dc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e6801b-f7c9-448c-8f8d-e5e8f8579267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2aa4e9a-d898-48e2-b2bb-5a99e8ca87e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "40bd2707-1b67-4c16-baf1-5973c9a919e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6daf8a6-07fb-4228-a115-76b44f989f81",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275dfe49-1fe2-4cd6-95bd-25233f4a0af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1953ba2c-5c48-49af-a9fa-b1290b055167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc9fc70-f9f4-4f2e-bde1-41a509fd10d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9b1394-eb21-4583-b713-17edc86e892b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765867fa-713c-4565-a3c3-6577bc7d4454",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7540fb-d77b-446b-846f-a778ba94d9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca5f73d-297d-4f3c-b48b-1538cf9ad928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eb0359-b168-4a84-95aa-928d416ab833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6f86fc-345b-4cb5-a3f5-8f1447fef7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba798b1d-48a6-4fcc-a0be-689309cce2eb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28900c7a-781f-42b3-a54b-31014d338b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7840fd1f-868a-43dc-9674-c539343996a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992255ee-8f44-434f-b268-beba190ef159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c24fd331-767e-4785-a657-e19f479a1b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e362f7-d395-40ad-ac2e-102d10c5dd01",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b1b63c-b038-4b5e-85eb-83059e484e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0311b6-6ba5-4611-841f-02c165457e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954ea255-aaba-41c5-8b67-8285d54d7046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "062ebd69-3f05-4354-8032-c4c25f851594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e20de32-e630-41bb-843b-bdc4601af268",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056e92ab-fb6d-4561-b25c-c9a088374d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a7be06-6229-48b0-a93f-cf4fd7a3487d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03a70a1-cd3f-49c8-a25b-44f387db0a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d6caa3-841c-49e8-a8c0-09d5221b7a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8639ae5d-4ba7-46ea-94ca-0a85cd07ce0b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f40631e-24c6-4098-814c-3e786e04119a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7d683e-a5ef-443f-94b0-afd655685b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7260b8d3-1385-4ece-a823-801c7b9e9043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23ad1f3e-fec2-4ce8-a1e8-90a0181846a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3215dbe4-ee66-47c7-bb74-59b9f25f5763",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf5e428-71f5-449c-83aa-21e729ed29b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea3ae04-7c29-40fd-b137-f8beb712eb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9e294d-4ba9-47c8-8eaf-d29d64e54605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a22348ed-7919-4681-81b3-78ead75db98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a5bcba-9736-44d3-ba77-c31bbb3fdeee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6184ae44-9dd4-47cb-bdc2-329a597d8463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a82a5f08-83bd-4c08-883e-d7438b0de755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156c0497-64fc-4449-ae5c-a99269b6aa62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a05fb18b-eb41-4a8e-8e18-b037accaa059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5ff093-9495-4781-ae7e-126e52d60ad9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef70d6bc-32ca-482b-9bc7-a9962370ba7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b52f02f-baf4-4e08-b71d-8a1d488554a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d2a556-8b67-43e1-bf42-80c5caa53aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5611713a-3bfd-4c93-9f59-9454a0a97f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f722649e-3659-45cc-aca6-a714419109f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f943503-7550-4249-a4a3-4e879d900a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edb50fe-02af-46d1-ab8e-06e3e8983e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d365aec0-124d-4e7c-bd27-680ec751da8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f683fe-e5b5-48aa-9fc9-36b87ce2b63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4f0545-136d-4aba-add3-ba702227a2d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3b8ded-f2e7-42f7-8772-9e7cc057f0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba5b6ca-20f2-4af7-94d6-9a93468b278f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cb984a-f093-4859-b818-cf28743e2ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "672a757b-faed-4d13-b0d1-f54cc758a4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8483aa4a-b220-4505-8d9c-501b115377b0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8347c811-fbdc-416e-b218-c33e41533316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90c7151-1a37-4062-a5af-8f12347418d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f1dc20-eb63-48dc-9e96-6579b4529f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a790e229-c36c-4ae3-8217-94158064ec62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d82476-0c75-479e-8f64-37108dd5298c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da0e713-2a0d-4a72-9104-b35e19e3ec86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf9d54f-7296-4ff8-bede-33528f98e771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356ac522-906e-42ae-8354-85a2607edd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "762fde51-636c-45e5-a0bc-c526375fcd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f9bc80-ba93-4048-8603-e0dea8fbeadd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781360fd-17a5-40a7-b262-8e811fbef41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d223f7-1252-4598-9210-cddb4ad70674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f4c6cb-bc98-42e5-85e5-2dbf43f9b141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1236a867-896a-4567-bd79-994f6712a30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88a8b36-ef84-46b6-8ab7-86769a032276",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285acbb8-3d8e-4115-8328-bfd52444c96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3feafff5-fec2-4d89-b38d-b7286ab3a30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7263cf7-32d7-4f8a-ab3d-53d63a16ab36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d100224-9b3d-43f0-baee-814d89796f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17127744-396e-45a6-99db-dc36758cd751",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3baa8ae7-8a86-4c98-8953-9cf24447a19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdccfa0d-b51a-4c95-9ece-a0ae2c66336d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93df1396-9750-4391-b718-b3e793559c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b1a4841-92b3-43f0-806f-68f5a8b8d887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7e14a4-faa2-478e-b2bb-db9eba1593e9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bc5e40-7aa3-4d0a-80f0-088efbc7f061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d828d796-7785-455e-9387-f5b6735c3b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6f3d22-39b5-4073-bed4-77668407f86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc90a9a0-3e21-4ebe-9bd3-6df4b8a5f202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd355e6e-dd77-42e3-93a0-6e1e697b2283",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be36c37c-c66f-4315-855d-7883d626549b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b455a9ac-63de-4c48-822d-c1141c3e0db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8c9173-e8da-41cb-8184-43f7c817ac30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "91a624d3-98aa-4d9f-988a-12a4db0ab294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e67520-5c3c-4ddd-b4b8-1a44ab4f6b5e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4365bd6f-af1a-4419-bb91-e088030785ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1799d60e-2d0d-46b4-8289-858850b68c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050d40d4-2635-40a2-90a1-2fdf99426a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "321ada5d-9973-4786-be58-be511700371e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c564ccdd-2eff-4944-92df-346bf67bf3c3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429a6390-d5f2-4471-afc5-b7621da86f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67aba17e-7c88-42b4-ae36-72c25981124e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd21d6d-5390-420e-aee7-22d59c458f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec79105c-dcf2-4de4-ac0e-fdb1deda4a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf60b8e-43f0-4905-93b4-a51ef95c1da7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efdd1e7-0f18-4822-a2fd-7d2cb08d686b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7432df-b40f-4bad-bce0-2ea0f0950584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d0ec43-f26f-4ab7-8dbc-d373e467c42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29fd609-c0d0-4fb7-aa22-a691b2059d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd6942e-76ed-4bb3-b0d7-57bc826f15e3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cfd5ac-1bc3-4577-aa0f-b3caa6f0b54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec296a39-6cda-429c-a95e-d0acec84581c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68d50de-1af9-497d-a471-a98705bbf646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a351f6-a365-4b53-a362-3907c27138b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db54be4-7b0c-4f5d-a46a-e2f08306b6d2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4135ca4b-7624-4cd0-aca5-45f3f9e1d915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4d6812-f633-48d6-b9a2-90003e95c144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e031f3-87b9-4e07-8993-b8ac0076acc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a01336e-a7d3-4780-9802-23be68c91783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832070bf-3c3a-43a0-be1c-54272f89f224",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae792b86-0407-4b46-bd49-6b792dfba9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6334ff2a-7e9b-4b00-8916-5a97f7754c2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b9de4c-5520-40c2-a91e-ce4ae0f97ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2752eb99-fec0-40dd-8239-bc313d973d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b55aa2-6e77-447d-be18-14c48b262713",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ab648d-e1ed-4306-b4b4-613ecee302b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d138f21-ad84-45ee-8a09-3f38db7daef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcdd2af-e6c1-4a7b-9f5b-40cbb69f44cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33f50ca-800f-49ec-a17e-d4d9b0091398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295642e2-ff15-4c89-9355-a4ca0e005910",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdc4d82-5bf8-4eb3-907d-d89a761fd3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2726111f-b34c-44b7-8117-b00d817838d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7a6044-27f1-4a48-8c18-6d580bdcce2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09b1fd53-5f1c-4b1e-a5b7-2a6cee9646a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4892f37c-7e7d-467b-b525-95d9c13b00f0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27dc213-fd5c-4923-bd51-0443c3bc7658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d919c23b-288e-4cfe-97d2-bbff37c5e9d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15de1910-a461-4013-8fca-12c4c65216b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee001016-54bd-4396-af12-48808b644274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05df5b27-7cbc-409d-b73d-6bd11e75944e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696aff49-37b8-41ee-b97d-bec307d58350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a46f8f9-5929-498a-a524-32c165396df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044e63a7-e421-4e39-9416-875979c7d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b169d98-7728-40aa-81a1-534fd89c8436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f80f72-3955-4248-b074-743cda52cbdb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4778cc8-092b-43bd-82d1-40a0c4098f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4ff21e-b51c-4294-b80f-8ad5dd756878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877bdb87-a2f1-4e02-9c16-a876a3417f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83d5023e-056a-445c-9215-cf6350dd4c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afadec4-75be-4923-9168-4484154c0eba",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c329fa0f-4725-47a4-b68b-b04aea84b708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e51a3ca-57b5-4bf1-a5ca-1e67550cf697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09398165-7ee8-49ff-bf57-62d699cb1ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "de627553-1042-4c24-b952-1616246f1f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a743f026-69a2-4b93-9ac7-f997e7e338be",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aacb45f-ff3e-45a2-a131-5dad4522af35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d863977-a7ee-4d8a-b391-74eb176999e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5244f2d-4ddb-4568-a01c-b1809408a099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "027268de-efad-4fa7-ac9f-4f5e72cbdd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133b5fb5-4f46-4ee2-ad87-cfa17f89e083",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2914e0fa-1b37-4b61-9eaa-c28bf096ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b23b6ee-3496-4e15-9cc6-1061dc5e50b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dd0901-6481-45ea-9531-75fdb97cb5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1605d0a4-b9a0-4829-a0ee-e2bd99e9b6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045a797d-e71b-4a3a-bee7-0382910c7332",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d98572b-de87-4233-8c2d-09a8104852fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ced948-4f60-418a-bf36-89ce74ed80da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ff09ae-8e74-4457-83cd-d68b094a28bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4dad19-43f6-47c9-b15c-cd43279f01e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b90045-a4bc-42b1-88a3-d7a01964b23e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17854ea-3799-477c-9af4-1b3cfa22ff50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c52116-b72a-4014-a713-40152b546648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdf628d-024d-4af8-b4a2-0c1be4e06629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d85a77cd-f66b-47d3-be90-91ee052721dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fc1dba-0c68-4c8c-85c1-751672d02c03",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94920253-5d1c-4010-bbe7-9f0ab39780cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280b9957-ca63-4150-b7d8-561a8be6964a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5e7c95-7031-42fc-a18a-ef48e6e37fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94fbfebe-fd2f-4c96-a4f0-68f932be43cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0b6ce2-cc01-42c6-b9e6-a86419d756f1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d243d19a-e197-4a56-95dc-593e89536914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fc8c86-d8ac-48b6-a447-8620a85738a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4064b254-fd62-4c63-a679-112d80bfdf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8d1643-77eb-409a-b702-a6ac4ab3b8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31daa9f9-8124-415f-9c3c-f094e829d4d2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acb611b-fcd3-47c8-adc6-819929d4409f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7e67b2-8c0c-4fca-acfd-b4160424afe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f105e863-b860-4f73-a54a-85641ad59331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "980ae6ba-ced7-477a-95aa-c8174bd15ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f21454-389c-496e-8ce4-c228e59ead57",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb9432b-29c2-4350-8bee-14616789e28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4694fb98-b29b-4371-a434-15f5a65ec0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e422ecc5-7fd2-4b95-8581-498ecc53d43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9101ebf2-3ee3-4878-962d-3b773dc59f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3251a292-3768-4557-9b7c-e61846d27f40",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf32fa1e-b1ab-4ad4-8127-39fd8c07b624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6822eeed-d5fc-4515-bde2-f69fe6ee5523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f6c2c2-c4d6-4fa2-a363-487713126995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0da26f76-acfe-49f0-9b62-78b1e9e1a5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aeedc4-2bbf-42c2-8a2e-260ebd081fda",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f43d13-79c9-4f1e-a581-680153ec7369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f81a2edf-0b06-4108-b049-ef7788fbf87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceb46e9-f7e4-4ea9-bf26-ac24683a96ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5e094b-d2ea-4eb0-8d20-9ff36edea642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5c5c79-eedd-47b9-92c8-22d8981553f2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18e487e-b540-47fe-836e-ef9f54d6373f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "164ebd3f-7d0f-4e9d-a149-476e44eac1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e559bddd-899b-4fd7-a11b-f8f6482be14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff67e90d-dfe1-452a-a74b-53bc07a09586"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d637dc38-89d9-4d3a-b3b6-f1ba0203a9b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd2c6865-ace1-4a9c-a1f6-4a33557b8b09",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a3099a-8611-46ba-b452-a24e953f3bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9aec459-b6cf-4e41-85e6-9ee4b8b183b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc5c956-05d3-4221-9b54-5e0c3c484854",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f823b2d-572a-4f3a-834d-f02d3f715259"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a24aa560-266d-4e07-8f0b-9736d8de2cb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09d0097e-826a-4ae6-a606-effa9be07954"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3050a17-d7c6-4828-8d16-e21e7d4c87af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "871f0c34-a99f-417f-b405-72278c8d0814"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b107193c-c2c0-4c78-8449-bb9717047cc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cdd64bb0-c2ed-4315-9ffb-aa5707743a97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "85a4f3c2-90f5-4d6e-a639-c8b2c6502d61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98171a1a-4c0e-4a48-9af3-ceb687c8835e"
                }
              }
            ]
          },
          {
            "id": "bab87274-c4f6-4e77-8cd5-80aaea2916d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "420432f8-bbb2-4b57-b615-17b76fa15b19",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ba3901a-1063-41ea-81da-7f283a779feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09e0e967-eb5f-4709-b728-bc4c9b28d9c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b65833a9-6131-4d32-abb3-311b86425bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2fcceb5e-6304-4b97-8048-34a7ab41b6c0"
                    }
                  }
                ]
              },
              {
                "id": "335aba7f-bc3d-43c1-aed3-1ef42b307864",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed2248a6-05a1-4227-8451-5ff4e234dc92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70d7fc29-da82-4468-8e16-94e64121a655"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1877abc3-32db-4130-976d-a18ff81bb699",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b94740c6-75f6-44cf-89dc-e741d5e823c5"
                    }
                  }
                ]
              },
              {
                "id": "5b39127c-07c9-43ac-a0af-c8a02eba40e8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea23e859-6e46-4007-ae95-61e1957b3ee4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f822836-8f2d-43f0-a166-48a826122874"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68be28e6-85d1-4001-97e5-dd77ecfb89e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd64ac67-3148-4b39-a783-5d8b3a3988ab"
                    }
                  }
                ]
              },
              {
                "id": "764e07ed-1a11-4123-a655-c450057635a7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d9a4641-e8bd-4aa0-82a5-07d91a8b4eda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8047d589-df80-4450-b372-bae9c1dcd0dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9cb4335-c44c-4512-87ce-95f74960f556",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "68fe32d8-0e57-44bb-a10f-79512c1811fc"
                    }
                  }
                ]
              },
              {
                "id": "4711ed85-a946-488e-91fe-fe19ab54ad9c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7f344a5-4ba2-45f0-a21a-c2204cc36bcd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dedebdbb-458b-4c6c-b698-9beffa82521e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ae9ac55-fe19-4052-843f-0121063b5b78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "02c40577-f5a9-4657-a97e-c4a442986734"
                    }
                  }
                ]
              },
              {
                "id": "875dc227-f06b-4c27-8a24-4b8317b88cb6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54510770-9814-4895-ad3f-b9e1ce7dd58f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4694d87b-4ba7-468b-9df8-e0e3c5da72d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49f59d40-e3f1-487a-8629-b1bb8b66942f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4aa2c0d-ebb1-4b49-8882-bafac8e952e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "023dd62a-c9f9-4be8-9700-1266927699f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2263448a-3589-4f4f-b68f-78d2e19c52ee"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "04ec2dde-510f-4723-bc91-46740f05d805",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3cc6da99-7bd8-4199-b754-bf54cb9b9988"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "472f1a33-1e18-4d4a-8a03-f18015789b3a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e8a29b59-7f03-407c-bf93-a994566a6c7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88306449-f458-4adc-9139-8b3855509c81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1da8c59-564d-4796-b8f5-003d2e0a0193"
            }
          }
        ]
      },
      {
        "id": "1ae637c0-5156-4de9-88ab-ba3c57fa8089",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a91fe263-3713-40a5-8c0f-6e7c40a0a905",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e7689a26-090c-4bc6-bcd1-8253f5450589",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c647d846-8c05-40c3-b28a-6d41886947d6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d9a192-4af7-4de8-8885-38b4e3e847b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45afca15-153c-4b7e-a531-2e7849bf2e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040b8e82-3d30-401c-b455-e31ac66de94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4d9273-9bee-45bb-8d3a-a4eb3577ca04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70aae862-cade-4ce1-af71-6ee084b3d10f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9154564a-c89c-41a2-a3f6-2e73b0a21054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06eea4e-5eea-416f-a3af-ab4f7aa3919b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0b1475-dd7e-4622-a2c5-9a1528190860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69161986-2a6e-422d-8cdb-3174815ca5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae110cbf-bc3a-47f2-b3cb-08ef356c3aca",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db88996d-51b0-4e8c-a2ab-4259734b55b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5ef6ff-2ffa-4551-accd-db72b6529156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f89c9b3-4ea7-48ed-b037-f2e3ef024e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b425f63-2470-4dcf-a7fa-8aeb38addf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64a4a5b-bd50-42b8-b8d5-4a8cd6a29388",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dce52b9-543c-46d5-a3b9-95e773c44aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8405554-e552-4038-8556-70be45536b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e8f8d0-7ea3-4ad1-92f4-ab96a6c69220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cef2b7c-1634-430b-8016-ef6ef13c2663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95d0d08-64a7-44ce-814c-466ea2160e31",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcdd3f2-4bb8-4313-aa1c-f1489ccc814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12175e6d-7ffb-4d25-a0ac-4f2b2a50e0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e9e070-f419-4ce9-b64f-ed34f123301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93acf501-da70-4fdb-b530-312f70ff47d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5ea17a-0277-42f0-b97a-f0264decf6c9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5f8bef-7318-4032-95ab-958006a70c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dc781c2-39fd-4b17-b8b7-46dfdb7c4f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f568308c-39cc-46ab-bfc5-8431507b6861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b36105a9-88b3-4aca-8561-3e0b68d11f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b026c6-f4a4-45ee-bbd3-5c9b0db0bea8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b344b2-33ae-423f-8278-96b34aa3135f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da776237-7bd8-42b5-b873-6f5e619aa793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203683d0-09f0-4533-8b42-32a9514d0cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e862a04-f6be-4da0-83db-b6e83d477bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273d6267-b523-4d2e-8678-0f0c1bb599f1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34892d13-087f-4d3a-98e3-7585cd8ea7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e1cd88-2ddb-4fb0-9133-cea51eb3ed51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabf80e3-f07e-4374-8e09-ae15b0b528e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5047d1-3171-45da-bf43-a3ce860d014c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1117093-441a-4240-871b-846a3b66033d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445807e6-b9cf-4126-b0db-7bbb05a53073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8ca6cd-7f06-46ab-af56-8491aea88a6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89798dd0-fe4b-4cf4-9e89-d193939a908d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf3e6e5-7703-469b-b8e2-dcb5f94d3bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747a7f6f-b4bd-42f2-964b-fc5d69ca4c8a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7e8150-4532-4bde-bc33-2347da101b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9d956d-57c6-435c-ac2c-b9940dbf5568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4820fe97-baf4-4aac-a760-e50858ea93e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b97880-f534-4e20-9717-abaa826b3303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5398cc3c-017c-40a4-9ec3-18a3d551eb60",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94eed5c3-70ae-4243-be84-1cadc7377471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8624d124-cc2c-428c-9912-ec6a56e5e8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5803331-229f-4cc7-98fe-36adf74d4256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "672322dd-e364-43d2-b361-53ab0935ad5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416001fa-1ffa-47a0-ad59-f5933d5a6ab9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67869c3c-d2b1-4ba0-9ea8-5619844a8dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a703c8c-cf9d-4bc1-b43a-974e96cd8320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1307f83c-f9e4-47db-b3e4-a5cd4d04dcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94bf4b1a-67b1-4348-93cc-e771028cb373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46feaf06-37f3-4457-8cc9-cf4d36036bd0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ccf96e-5c76-4b10-b9d5-23b1cfc27cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c3f3ed6-d450-4258-a517-b28c62e6e5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7974b70a-b763-4bf7-9e4b-3a7e91429202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f3f9f4-7378-46f4-b023-6d934eea63ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ae2cfb-d7d9-4326-9d9a-aae284106511",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed968be-41df-427e-b174-fc939dc1b275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6f46d6-6763-45d9-bbf3-7830088a6e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53d7626-d123-4ab9-b948-1c29605b1dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fff6b6cb-4ee3-4067-a2da-a713a96f0ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00b6221-7f8e-435f-956b-f9205bdda31b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae07ffa7-3a08-484a-882a-9efd48693169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06883d2-4530-4460-8015-b3cd38fa8ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4307cbb-c358-48df-8d7c-da9948b6b25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d95ee601-891c-4f96-8ecc-12162f5c8182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c8b596-3e2d-4043-a83c-8cd74d1c082e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ac9b21-1970-4d71-adbd-713b70ff5a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b845d7-9c6d-4162-9de4-98af7607422b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c35037-a0c9-4981-ba14-7da0449d130d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2db9b78-c935-4e6c-89c4-44d7ef6e6b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6ac6cf-c07c-40fa-acab-2702936d4177",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262393f9-d8be-4efb-af20-c7854fdd8902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac42f65-fef5-4cd6-8640-b0c1b710eceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f0cdcc-2a48-43df-8d23-e68409c4bd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5678ba7a-28c6-4aac-81d1-d312affb93c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb079bba-2fe8-49bb-b233-6411408dcfbb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcebd337-9696-4f85-9f1a-bb7a112dc8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756bac25-0fd6-444d-a506-02c31060e3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70441432-9a7c-447b-9c48-eaa0a958bba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96479bf-9930-4bcd-b6fd-17d6d12d4f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00561c9c-8108-4c28-81a2-f53409f0587d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840a07ad-4e8c-489f-bbfd-7f2f629e2cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3576c8dc-d7cd-47a1-9f56-f79958db3b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58624eea-a3fd-4593-8471-92b26816b412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e661f9-08da-49c4-945c-59b8ba6c9562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29fd92aa-dc25-4a17-ba68-f5e79dc9a631",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cb35e4-49f5-405a-8d1c-f8d986f42e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23d317e-72d2-4fbd-a480-a82fdd2ca963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ecd410-b0bb-4bda-a78a-744c33b99056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bee69c-ce8a-4477-bbe6-c59c84db4c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5d98f6-9ce8-4471-98f7-aea20632179e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b944e8ec-784b-43d5-9bc8-b2f187a1a4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b767b2-ba3f-48a4-88eb-a84ff4b6319e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a59a3d1-257b-494f-b947-ba26deaabd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37cab976-f40c-4738-a783-483a48db331b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2f8843-b9ee-4592-9a82-1803dc5d9d3f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dffe438-0238-4b85-80ca-0ddd4a81f4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297330dd-7809-4faa-b253-afbc9a3b447e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd0b64a-d7e9-4822-9645-729ed26749ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad1ca1a-9bd7-4b77-a994-748ec25dc64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a3b3d8-962e-4d4e-9476-11730c7f9ff6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5df347f-2985-4e77-aa08-1aeda794b39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e52946e-a245-4d36-98a5-454c3c340fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad1c25c-f3b6-4bdf-b001-650551f40258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "758e0442-6722-4e05-a16d-bbfbb62b1b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d75afa7-be95-4978-8459-a340f71ce457",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abab663-9632-4bec-afe1-bddbb16aafff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85741d04-cc2b-47a5-a6e6-ca6f41046c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30ba110-0bfe-4789-8a62-b775e15dae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb332f9f-b653-4dbf-8bce-04e12e6c2ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4295310-650c-4df4-afed-deca7ef68099",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf372af8-8a91-4748-9eaf-2cc28f0f18ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058fe6ea-5851-4421-818b-05c8181f2bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f0a6ce-824d-46ee-b4d8-235d594ad35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ebe29d-d3d1-414c-afcd-7225f6793575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26750ad7-72ae-4252-b158-7a911c687135",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7befd0d1-8ebf-498c-a9d5-d5287cf49a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abbfcda-04a9-4670-b5bc-c1bcf1488711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9284b6d-a84d-4b9c-bf9c-110835a58111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b954755-19b0-4dd8-b844-1e268bdd7dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4e939a-075a-424e-ae76-fc108100344b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422ac314-fedd-4fcc-8073-0546c3f1bb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eed20ec-5f35-486d-b0b8-21f4c784aa7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd0d0fb-c21a-4d99-810d-800e324b63a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5be85ec-2961-4bb0-b5f4-c02814cda02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b340035-bf33-4453-9a48-c877ef5135c2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb1b1e2-5454-4bcc-b4e8-898fe9078e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec96485-5869-4acd-93c4-f30825ca3a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa070a51-30cf-46e9-9e49-457e77b9e94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d27646-8f65-41ba-88d9-bf5108c8e236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f6c334-8b3f-4ce1-a00f-02d3afa53a30",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067d25c0-4ff3-40f5-9e03-ae6537c8399f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce29c7b3-b4ff-4ea4-bcac-da1f14d38aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec3312d-64a4-44e6-b78e-69cfcf24af7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde82347-8676-4dd5-86f2-043b8fbf49ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6b7553-a54b-498b-a368-bb8c32f3a888",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a81346-aa33-4743-aade-c0cced3ee37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f76f3e8b-72c7-49b7-ae8b-e654aae2f717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2333f554-96ab-4d8b-9f0b-6e808e4b68ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d397b05-af81-45af-9d85-ca7358ccde02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d706cb-3bbe-4d10-9b1c-e7ade563c461",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e3b51e-ec64-44a2-8bfc-e342e5d2113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88312102-63f2-4799-aa13-3eb3130a5f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487b9753-0359-4676-865c-f2845b28d4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "658ab874-e132-4229-9e24-d2fc5c0a29ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b701380d-f0ac-4cdd-9b42-ccb3f1f90626",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a20216-91f3-44c5-95b1-f1881d9a6e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a091e535-8509-482d-a70a-cea264ecc025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469b2b8b-461b-4554-8908-306b435992b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31b9ad4f-d2be-4631-9b19-11b2bb86a3a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa672358-f7f0-4b92-8bcc-bd1a56bab587",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3cdcbab7-64d4-48d7-95f8-45ddbb63b395",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9425c860-6b29-411d-8827-cf658de41f88",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "07fa1727-4350-4c10-aadb-8571dbd076f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d85c0f-152a-40f0-8e7a-78e8d1be7848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "923ea7ae-e6c7-4906-9a44-fe8746949158"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aac2e80a-405b-4254-9274-7e4d197a0539",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92554944-d129-485c-80d1-0b4b21e7c225"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4795c71-d9e6-4589-b89a-e31937a36ca8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f80614e0-ebc2-441a-91a5-df04bdcc55ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c68d292-6c09-4960-ba4d-aea049061147",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8dfde4a6-2e5c-412a-ab8d-33ebee5e42da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc295650-8081-47ec-a571-ab7c5131c33c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "350bdfdf-2b5f-4bab-8cda-6dcabbda63fb"
            }
          }
        ]
      },
      {
        "id": "2d0a9a16-18d6-438d-8f41-3407d4feb6b4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6b990642-09c8-4646-85c3-4096ff0228ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8331a626-85bc-433e-b359-53bc21002777",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb832e8b-3822-49be-9757-a552dd86f8f6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba1ae8f-f4bf-4bfe-9123-d02de191aa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d0a672-ad78-4fde-8261-f1ac98075bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e958c4f-ca99-4560-8147-5d5116c79861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "df2ebe03-3f67-4c59-a603-e011cd61512d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7102d21-2245-4cea-a088-1675fe6555ed",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e9a008-2161-483d-a92c-3638cfdc79b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e547cf8c-b51d-4b0e-8fad-31a8bd9fc241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecfdad9-8044-42ef-ae0e-dd909e28e94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c630d2e8-4c25-4a24-940e-fba3dfdf3b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603aa0bb-3ce9-4763-aa65-d15258b91c5c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a088f3-75d2-4548-8dde-d9614f659e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6df99b-4187-4345-a4b4-968f1bdfd437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96cc2ab-2f33-49ec-9d5d-812a609f139f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b539220-0891-42e2-94e9-5501edc84aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f07bc4-04ec-4fa0-994d-bc4ddabdbfdc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a929f24d-f5e5-4f38-99fb-769579729646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed401da6-f7d3-4d61-9a3d-be5751b01658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4915350-9324-4b2c-9d36-4f17a4e074ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a84a896-e1c3-412f-a050-af3db6ee66a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571a315d-3ec6-46c7-a0a5-b3e15e49028a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc310cca-e297-41bd-84ca-d78b14eabeff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cc639f-1ef2-48e1-b0d9-9a01fdd567e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3d828c-5081-4e47-bef7-66134c33da34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "246c7f66-15bb-4f4c-b53c-0ea7ff8485a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba4e35a-2c82-4263-a56f-2ba4f5238854",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e0b0ee-e550-4ff7-acbe-5c41f0277833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48d42a6-3ca6-4e5e-85ec-4f0ef5d40e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f11ff72-7bc6-4957-be8e-4288f30749e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5140e844-a138-4dab-80dc-665e88174871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a97976-5db1-4794-9b78-68117da98f07",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ca9f68-c6ff-4a46-a519-00ad45303763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77dc34b-f3bb-4365-adbc-296d4a63f880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e0f1d8-050c-4e09-adf6-f7d642841221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4236cc40-e8c0-40b6-a001-e924bfda79d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd167894-d528-48d0-b6a5-22abd9aaa593",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f4dce8-4367-4ab8-9c6f-2cb6c52ffcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a85915a-6471-4f67-9795-2f0899c9be14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a2fc2-08cd-4e6e-837b-49f9091575c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87699859-14a7-4729-a525-a551825cf28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b48552-aee8-4395-9465-5b6c60b77568",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3905b7-7418-40aa-9e1d-0076e8ba2c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92ea3c8-e3bf-464b-bc63-0033e5046776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292b11f8-51fa-41a7-b8fe-5c168a8fe8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a19f6289-0e7d-42cd-8c77-a5cb51794880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22890fb8-41aa-4c68-b81e-47a5d4ff0a3c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e3718b-6839-42af-9715-c7a8db598b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2779cc5f-d3cd-4976-8d2e-37164ec7ddb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "455e168f-d543-4111-9958-3d8953ed6b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54f4e415-c544-4c33-b66d-06768a6ba700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a7d681-a5bb-4a0d-a96c-d2a3b7f98292",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcea6f9-265d-4f99-b687-86e4f0bf7ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e39083fa-9f87-42cf-be30-c501cd98de42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79378047-6e1e-4f7f-bdbc-4ff1954218ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d85443-e3c8-445b-8580-c6636875e4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886c6861-f9c1-4fa9-98b5-c251c0f97734",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d56641-8099-471b-bf85-b80ee901009f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c49b4d-0dd8-4736-8e72-a245bdd9b66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81104b23-1374-488f-b99f-a3aa27f59de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "20e0ebe8-4a00-4702-875f-6c62e60986c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bba6f8-4ce5-48e7-b3f9-2d7de5ac4549",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b3a42-b8a5-4911-859a-8e1769e80cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24841427-201d-4493-8742-cdb599de5475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0adf2c3-7ba3-4188-890e-a74fca5bdd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdee46e-072e-4854-a8e4-ad2461e1d204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0583912-1608-4166-9534-941085efbf78",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc966ab2-2c0a-494a-a798-902e6ae2e68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0852a81b-7365-419d-99d3-8b31af37e3f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b75179-1e7e-4f68-b4e0-e7201fca68f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "14b8302d-5b8e-4cc7-b788-dced11df2e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d07d582-1e7b-44b1-b945-6d60a99fbcfe",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7457422-f776-4db3-8330-d975c5a3273b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8f4cd3-0392-42d5-bf9c-47897f655279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26896a43-f873-4325-9879-4660bb62602b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf37742-4a49-46c4-8bc7-be2a346f3f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4272bbd8-a835-49a2-9a64-159bb02330c5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72069223-bb97-4bc0-ad18-7c6eeeecda11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afea8efc-0df1-4781-bb89-010005808514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4239b90-af79-4689-aaa6-bebea80757b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "44b34199-d2e2-4727-8c2d-cda79f706eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27365f57-7653-4bf5-93dd-7739d4cc3791",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb52883-4276-4768-9def-90a17696464a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8c8a31-625b-4823-9387-b854080ce9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477a692e-2ebf-48dd-9f4d-7722774cba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "da8fb248-51ea-4d70-8a91-e3de7dcfa678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57834562-1205-469f-9792-cc23a7c1a70a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3040041-c0c1-4d1f-a202-beb88d131c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa42d505-9d4b-43b4-a7bb-fc6c23a05584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c3e797-0560-4db3-9e4f-95209fb64faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "51484498-16c0-4269-b3c0-40deca7af49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b145a7-7cb9-4cc2-b549-c2802a129694",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dca4df4-ded0-437f-8116-d8c33159d720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b44343b-2e5e-4fd2-b952-8762a8e8050c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4edc62-f457-4af8-a41a-9fb4114d486e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01d84b03-ef9a-471b-b576-96dbc99ef154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161355e1-360c-40c6-b64d-d3238d47d7d6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749ab43d-d928-4048-9f29-e364f8186adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3249be-0391-4e00-bb30-9fd438f237f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3735f5b-a27c-433a-a101-7916a0f705e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bf0c1ff-a14d-48cd-bddc-2912bea0307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78bc71d-59ba-470f-b8bd-add2654f651c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe492a3-cfa3-4734-9b63-9c8d1462e837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ef5aa1-b94c-4eea-bc16-a071bd367c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b02e21-7398-4125-beda-0a3370bddfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ac2394-a852-43a5-a4af-fa4687c19456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15493e76-f594-400c-819a-2432ddc121c0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd97a9ac-c246-44a4-a629-cf24afad72af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a745b6-bc49-43a9-b3b5-43f3fd36f356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0235da2-c965-426c-a6ca-318542800819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ab0c0c-8bcc-4a46-bde5-d6cb32340717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c9ec1b-1284-4086-8e1e-d1be18cfbc23",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78ba59b-4db0-4f63-8da6-3881979159f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b078ff1-02a0-4839-8a43-41e1bcbf512a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b4ec50-df6d-4e71-805c-f5761e181040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76a76ae2-80d3-4b59-b09b-e50e878c858f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541766f2-db30-4c65-ba90-b1eed4755a2e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca1db4f-c77d-4bf2-a45b-70304e1ba3aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1bf843-a690-4935-815e-a68e392e05d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d252f6bc-e4da-4d7a-99d2-5f90a58047e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce7df7a-c25f-47c6-9809-3ce7173d8df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f66f615-6fbd-4696-a64e-8e01e166ce2d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fbe01d-157d-43db-9bc9-8b02b11bfb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f6a750-80f1-4e61-99b2-06baa7b574f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8f59b3-39c3-4dde-88cb-d15917b61199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b4209a-970d-4ab9-8220-bf770c96d1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7104c1ec-031e-4667-a99f-364552b6a75c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c61e2f-9d82-4505-80e4-8cd59da4c3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3747dfa-1d58-4f89-8697-21af790c26ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2892d2-fa16-46bb-b8ec-333d5af22172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8732bf06-7cd6-4357-a5b2-c0abf347afb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b550435f-4121-4a0a-933f-3a57db805cc0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da352aa6-8eba-48f2-8780-80d0e2888784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a3bca0-78e9-43a1-bd3b-82424f1ffddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e32f9bb-9bb4-480c-b2f3-f6899b3bfbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f774dd-0d15-41ff-b33f-5d1115ef5644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33326d0-a9c5-4878-a303-7d38d13d995c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67db1486-6259-4415-9f37-ac4eb56b0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c12c186-94b5-4589-884a-64959eaa4f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36fb2e3-80f8-471a-9ebe-8f0009a5eba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7e89f4-15ea-452c-812d-cc387ff5ae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534be35f-f22c-4594-9f03-8823cfee7da4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3629ff3-35ed-4cc5-a302-cc8399810402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4852b4ae-88d4-4bfa-add9-2b882759db2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2d69d3-9016-4f45-8493-0e4e5236b562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2cb3c5-5517-4378-bde6-adcc7e67cf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4835c12a-94e6-42ab-9aa1-68f68e724dc6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad52ac7-5e30-405c-b4f7-8e143ea14c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2709c4b-7513-4d2c-96dd-bf65e83e736f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ecf7c9-1e41-4a8a-a26d-959ca709f963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "454004b1-52e6-4550-98f7-5e6eba9826be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f46dab-6948-4bce-aa58-41da0ef451f4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c2c8f4-acc3-4bcc-8292-a1bbd425c87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e373a1e-cd3b-4bf3-80c4-3b617ad7a486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fe064e-ace0-492b-98d2-d987cc0979c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eddab1d-90f9-43a1-b3eb-ab2052bdc793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadd15dd-f444-48f8-b143-b46e1b5079c3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4721ed-c2b5-47af-8007-b58bded9b562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e1b5b7-ab82-4369-afbc-0457d6d5930b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a850ac-1e6f-45b8-a92a-4532fd848e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6355648-6098-4fd5-ae6e-283a25146ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbba8da-11cc-4957-9ad3-4baad27d162c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb6768e-f8ff-4ec2-b300-a695daee48f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86505e4-ebec-449c-8698-770be2f568e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4558419-9fe1-4f10-837f-3be6f51fdfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da28e61a-2ce1-42f6-914a-f5a701c57ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78687e5c-0587-4bed-a74e-c50acc1bc1c1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3226eb6c-d872-4f0f-9ed9-a338109b9961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509135e2-ee36-4802-8ab9-0abed258eb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae88dceb-af07-4069-986b-1fa3e35224f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2446b75a-47b5-4d0f-aee6-efcdbc4a0a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ddd1bb-b68c-4a75-aee7-c8eadae3879a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8820f61-d315-42a0-b790-2ccbcab22adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983b3dcb-9606-41c0-9fa5-58fec86dcb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aedc93c-8423-48fe-94ce-b1ce31a051b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdff6799-5176-405e-a9dc-e337d5fea93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b68e9e1-b03f-4c6f-95e9-7967ff997b62",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa38da9-ff08-4fe6-91f1-541c2a1447ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdc111c-1668-403b-9755-02f1f59777cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41269af-5679-41c8-a4e7-4c36957fd5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81ec6e5e-508e-4249-b8d0-526fe554cd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103f4f70-a144-4d30-8071-3d3bda512a4f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e314f2-941a-425e-97e3-6a281518b3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573e56c9-776f-4579-90d7-c232fc9282ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa21d11d-9091-435d-aaf6-f36cdbc3e33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1592ea-cec5-4232-9c15-cfc42abe67dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "192bcb25-319c-47f3-b95d-c250a2a02c9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07c26d85-dfa2-42e6-9ae5-479735fd0f9d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d360bac-a79b-4bbf-b0d1-189b66a9caa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5af9bd-b0ca-41b4-9443-fa2815a91296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc7625e-a86b-4351-9f48-bb2d675de85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d7c4321-d455-4595-abf8-d8a9b7478484"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d96851cc-cd98-4500-8a00-19adc8290ba9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47671266-ae04-4460-afb5-6837f3d87552"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6107a997-9cd6-4724-ad37-911c79caf89f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aea6afef-b7da-43bf-a64e-3da5e140a84b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "137e2ed5-5032-4eec-ba65-3e9298459199",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2e193168-a373-4a43-9ed6-75a34b8c1738"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0942dbd9-7223-4b66-b1ea-5a551472c097",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e6ec42b-2557-4a97-a0e1-119c25bf7400"
            }
          }
        ]
      },
      {
        "id": "9198ae9a-fee4-41d9-9bda-63b8c8dbde61",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e997775b-c547-4bb7-a2a4-09f606dd6231",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9087f61e-4998-47e4-bfe8-d15ea086e45c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a5cfdd4-a2ee-4def-ba2d-3e35106db9bc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e12d47-8697-42b7-a93e-ed1de5f4d2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145af2d3-2986-4f0f-a541-9cf8462a6328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ba95e1-1f69-4665-a1ed-e7a982517be6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ce6eb0-f545-4bbe-b4da-10fa181fd008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c923a6a1-bca9-4d67-b233-ed5344942177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb72cc1-4071-453d-8c3b-5cdd3e2f7c6a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85580fd-b7b7-4d43-8c97-eae385c9f86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0b3d430-2372-4e36-9b81-03c4c3fbed29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba5d7aa-831f-4a70-b53b-33fd196d57f4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ffe210-3620-4082-bd23-26bf00a40eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2462c29-6f60-4025-9ed6-316df141c925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadb3ed5-07a3-4a20-b017-a158515989d4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df900df0-ad39-4175-a43b-432c143a9394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2386ce0-a501-41fe-a380-f8927c8ebc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2f5bfc-daf6-4974-8f47-3f8383de7b45",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31da954-7a11-4402-9993-c58b0d11f9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f6865d-022c-4f4d-bede-d65ed127b53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50a4a7a-5e4c-4667-a741-a87665cbd043",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009eb403-554b-4cee-8900-ebca154e8bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3425568-67f2-47ad-8019-253fc46a48d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98185ef-4fae-47b5-a939-145ba9cf4203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d28998-63a5-4281-9793-0f279f5bec61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd07d11d-c1a0-4cba-a7e1-afa028b0dfa2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0317106d-f575-4acb-8315-43e0561a8849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad41a21f-49dd-4a07-8080-c80bed8bab13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9982f0-0dff-4108-aa94-0c929a1b6bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef23d28-1679-4355-a81c-afa0d20ce3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6570106d-dd67-4ec7-8138-a702e3ef073b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafc35d0-3fc2-4dd2-b679-77bf1a1156fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c96bab0b-07d9-44cf-b6b0-d106edbac699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15c210f-8809-4845-9d2b-d2fc48cc950d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654568ce-1710-4872-8373-5503245ce12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e001816f-72d0-4874-9057-3fdec98edc90",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7d0f19-05a9-4e85-b65a-40fcd2d6fc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff7e7fa-accd-4bab-9662-811ee27e2b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e47148a-371d-4760-9f4e-a7fd964d9f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99897ca-7c45-4573-a7d4-3ecd0b8b25fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e0537f-7cf8-431e-a7a8-fdbb4c39f661",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804a93fb-8323-401e-8d86-e9deb7065f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc76134c-5ae9-44d3-a494-4a02162859f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "400b1e65-7bb1-43af-8d1f-dbae12e49964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c708b77f-e5cb-4ef5-94e5-54d15e18b79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b33c40-7f59-4e1c-ae16-4bf339b35f81",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d05abdd-87c5-4022-b4da-dae74a13fcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482740b7-ee12-4d66-b3cc-48a3f8a0baf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98a53a3-3201-428a-abae-3f3971167301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43f270c-4707-48bd-8494-259b7ef22b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3520dfe-e613-4271-8bca-40d3eac5814f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c1cb0e-b021-4474-a436-6a12d154eb9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a4b6b9-73cf-4321-a883-5fc4224832d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92afad69-c9c6-4e27-a235-5d1c79750390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274473ab-9f8d-4651-b089-f16310b254ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08de6a6-a32d-4f95-9044-c947a47296d3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e814779-535d-4f54-b293-152647bcb348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12827c4a-35fe-4f6e-bff9-99564ff1ffc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec7fc46-5048-4c58-af3f-248d10453862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de12f310-a803-4a8d-be77-1f60676af2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df862c6f-db81-43a8-87c9-dcd766d1ff26",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6ac2c0-322d-4fb0-9e1b-2649dc3c875f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "432193f8-45d6-4f6a-a66c-d9229d937974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76beab72-d56d-4394-883a-dc5b3cdfa6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe6a14d-d90f-42d7-a870-90448e32e537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d60a22-f03f-4024-9526-ce0bbb533df2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4185b429-182d-4a6e-a3bc-b44d24cf82ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ac7f509-ce47-44dd-a7c6-7c3e8bb37adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a441f3-37d2-444e-9a6e-5ad930cca904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49a8d87-f03f-4436-ad15-a77f171253d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfdb2e8-0a48-44a8-8fb9-6893698c3969",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61d4ac8-15f8-464c-bfcc-362390252198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a669d93-0890-4063-a06f-99d0922069bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9472f41-fa9c-4476-bc21-8ca489c2fdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de86bd05-c4c5-4aaa-bfd3-7ba42f761379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba42428a-44e0-45da-8467-b14313ca1084",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ec4558-9363-4062-b3c8-dbfe2c19b2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7de0ad1-6099-4265-a292-04d44629e047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22456286-779f-4e1f-ad63-9a4600ab7805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e60da4d-31a2-4d1b-b512-f5ce85e2f71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f9f096-e6b2-4016-a153-bc98181db0d7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f274e659-4ce7-4230-a2dc-a0956239d35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f438b545-7968-466e-8a31-dbba4b8a10d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c49f49-5446-434f-9edb-0172dd3a4d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638e9546-8a3e-425e-950d-f8086cb51079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde63475-2664-4417-9b86-dc3cee22d55d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2985161-1e25-4a9d-ab7a-d6ad0876fdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ad48c5-2e11-43e4-bb46-fb8ab922dd2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8382885-a66c-4964-bc39-a6933201aeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "252e2fd5-d5d6-41ca-a112-e229478eb35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596ab2d6-5efc-4326-bfe9-c3d2e0b6e7e3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b684a8d7-9998-4480-8b7e-0857c66d4c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b24d2a8f-8754-4486-b81c-7885ddf089ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0986f57a-b2d5-49e7-b100-5abb83c9ee8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef82d9f-5a43-4025-a1f9-a6692ff28b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cbf92a-a9fc-426a-b263-308039a6b2ba",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c3619d-c876-4933-bd33-0cc9e09a26cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c453b0-bb3d-49f5-852e-53c11ea0becf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107403f0-1464-47cc-b8d8-a63344beda06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bb2c8e-0c76-4f69-99f0-4abed36053a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3a5859-d128-4637-9494-73117f61b81a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d78c59-3e80-4b9a-84da-b8ff205d2976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f70c9a-10cf-4aa3-a18d-455e00edb3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff49588-01df-40c4-a85e-157481345fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7046c5b7-8782-4fe2-a9d7-96062d7d9e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4681279-edee-49bd-aa68-9b5dbed6ee66",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e37a1a8-071b-407d-a577-2b81b79ec4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a573a7-60b3-4406-8d4a-0be3c4f81b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e01bcc7-305a-433d-8d47-2a92da40f92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c41be1-682a-410a-9388-6a7a884e5da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945132d0-3cea-4acf-af56-f5d0ec4c1453",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3307432a-5c33-46f7-971d-04af6831ae7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5d0083-1b35-4f96-b202-e3d723ac4f4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a74e78-18ec-49d8-ac65-60f746e8f179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4457810c-85d6-4ed6-9e61-fe8316926183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64717bf8-55a4-4ef0-940f-61dc924d81fc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181b921d-6f4e-4329-8954-39d137e6dd30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f935f753-0397-4b9e-88b0-045b122e09dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a54b03e-95b0-4a75-bc71-92497833d2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82560f93-ee8f-4c92-a3f6-9eb7b0eb3d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba6cc33-e626-4754-b275-f0d6e149eaff",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6396d4a5-4707-4fa4-9539-e41aa478a21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56147461-67c5-469a-bbd8-7ddabaa5ee66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4b2e83-4bb5-4600-97b5-ef585e73f027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a47ba5-7d1c-4aa7-b7b7-ef4422b25d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c02f4f-3d65-4078-9338-277e182c84f3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8082770f-4a96-4989-b507-3282b0e7f527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1637da08-78e6-488b-bda5-fd4ca24fdea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec920e4-e61f-4ecd-b0c0-3c096c0c99a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f75bd0-4050-47a9-aab5-e52ad7ead7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4f67e3-0fa2-4ebe-bc06-bcbec8c1e905",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eda6b16-354b-4882-b09f-9c2bf30bd182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae3654f3-0ff1-4946-9014-463274642a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dc159c-ad81-4ebe-917e-272c58ef0643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8832d9-b060-4d4a-bffd-47f2d5b9a87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7379a93-13be-4405-9a9b-99f812a0646b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292157fe-db47-4c07-a1a2-b7eaf5731a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8244b458-9c99-4f06-b113-24d167723503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6716678c-35f3-4bfb-bf42-1e96e22c5367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f852db-aba2-49a2-906a-b746b8c7ed41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013580b9-63fc-49e8-8725-3ac87acd9944",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c249bf-ae0f-4e01-ad03-b9c89c954403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bbf8065-5bee-48c5-b111-7830d72f15af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74af158f-48b0-42f9-8352-3c6b1ebbe7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96f58b6-2b29-4af8-ad58-f0ccce1f867a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297eb6b7-7777-4ed9-8fba-2f34179302d8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe97a69-ff11-4d8b-9edd-a5485695fc34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a88e7af0-f712-441c-9d73-483949aed6dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "857b86da-7a14-406e-8be6-6eb0d89cdabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13ae31a-dde7-48aa-bad0-fb5b950818a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29959ac8-a63b-48d5-be34-1be22055766c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9de38f-f676-4d1f-becf-56b298fb8f6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63329af-7e6b-4b25-a0c1-e4650704986c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d2ba84-e967-4352-8629-da7436fdfb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dadb71-9d89-411a-b159-0a4fcfdff35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee1bdf5b-3394-4e86-b679-634a32f494aa",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf14a2b-1a5b-43e1-8fc6-d021965526b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "293b8a48-c127-4ef3-8672-bd7a04b0f950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e51c29-fcae-4906-8aeb-39a480ca6ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf88f0e-1efe-4b54-8a7e-99a0434fbde8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5636ed-f2ce-46ee-bf32-994942325e36",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdaa376-c3b0-4f57-ba4b-8ff4bf12cbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7a3ebf-e5b4-4f96-855b-03e5c6cf9ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e49641-9540-43cc-b9ca-0c04b3930dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd7a1a0-1794-49bf-8121-aad3c371bb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e159d08b-8f10-43d3-99f8-0be78bd87858",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589f3d35-e423-4c59-846e-a223e3df0e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2d94a1-ebe1-4102-923f-7125dffb59e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8131123-b947-4c42-86b0-c44d69647022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca47dcf-01b9-4d54-b2e8-6297d97a9e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f24551b-4191-481a-aaeb-0a8016543f6b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcbb9ba-556c-42a2-a682-c9ccbea22906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe668b5-4c30-4f60-9586-aa70e1e77596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef224ed-7f39-4ac4-98b0-af3c1a3b611f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e73ee5f-9dbd-4640-bdf9-91ea8a1208fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618a4631-11bb-488d-8878-db2d264451ca",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf27d53-a333-4967-a187-fe8239600a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ad877f-09fe-41e5-b73a-99c528f9fa82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42ce9e2-ecae-4f1b-8834-e6de9df244bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50880331-27f5-4713-953b-52555e69c535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63791ab1-2c81-4b93-a63d-08d046626929",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1c947e-a796-4537-b311-74fc5b84168d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5051eb9e-6528-47f8-a3dc-dbd0c13767a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654a04d5-76a0-4f52-a27f-ecc253d7eba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094b6684-3db7-42ec-84c6-a15b9076d2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634a077a-0f11-470f-a241-bdebe523ade8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af023b92-2f74-4810-9d30-3ba5b5d66832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bbb16f-a7aa-4840-aafb-91188773dc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1468c16-98fa-4a4e-b55c-97455103a015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb46d48-8b72-4f8c-826a-ad669e52e63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802e2783-906f-4afe-b896-a375232ef3a9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95102b7-9f86-4ae1-9530-09402f62d524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f527a8ae-00c0-49d6-8702-d453531901dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8dfdc8-77cf-4d64-8885-1513b372ace0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5325461-979f-4c24-9fd5-afeddb928174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077d25f4-ea68-471a-9790-93a456862dae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5420e6f-244c-42a0-a28a-730c1cc8bd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c72d75-6b67-4e02-9a02-ce6a86fa666c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a36f69-8492-408e-8845-dc520773da63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f637fb74-e1e7-4800-97c8-7643556db62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeeb4c7-c1b9-494a-a566-bd65abb3ec09",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87624dac-d6e8-4d96-b3f0-ef9e8278b126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b54b3f9-e87c-4910-9f17-57bc41c646e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aa5389-8578-4b11-8f26-adf59d241821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2e7044-ca55-458d-9f5f-db0d98de09ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44567b11-e454-4d47-af0f-076e3c4cc637",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ae60c7-1f99-493f-918d-00073dc901cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b402a1eb-aa49-4848-abd8-9336da425073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b798c0-236b-42e1-9847-51626d5deea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2364cd59-9397-4738-aaa6-38e9237f21e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7580503d-c0e2-4d3f-bd06-7c637947dfb1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfffd56-2c2a-460f-90f4-0e33862a726d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6512860f-ceb1-451d-8581-20a06f521ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa015426-9321-484c-9b41-2920d1d4f376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb3cb6c-d368-4a51-a433-d8c98ee52681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf578503-f852-45e3-b1e4-22d32d9605ad",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04076b15-a0b1-4800-a0be-3f89e41c1155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f9ff7c-e975-4765-a631-534a355071be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3a5e57-b7e2-4f9a-ac7c-de9cbf78ae05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56a5367-13a7-470c-aae7-6bb87586d148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543f381a-595a-4de9-9565-172489c1d0b0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6eaf61e-e13f-498f-9f55-fd58a7261f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed748920-5ca9-4265-b32d-fc5434a1fb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba11cbfc-555e-42b0-af0d-ff51a2de3a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a682899-6503-4f42-bc6e-7ee57052de14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452c558c-6012-416c-ae5e-44f98545d576",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c14f9e-be2a-4316-b862-3a584460f8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5206ec-fbbf-4f0e-8392-84528f221069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc80041-213b-4f03-83cf-b8750e181ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba8548e-d024-4c26-a766-6197d92b9765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf2837b-7af1-452e-a8c5-9e6cf251e70e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1099a2b1-9866-48ff-a49f-ef6f1a1c8ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9b91bc-4738-460a-8e82-cab4e7bdf75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de074a6-1536-4e3a-834b-ff2277afe42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc8cad7-c0da-454b-acf3-570a9fafee9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a966413-b231-4ce7-9eeb-0c91efd9ae05",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba02ab78-9383-40e8-9a62-c746961a94f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cadfcac-100b-485d-b8fe-7b102b16e953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60345f90-e6c5-4755-a987-7f85c48e5c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701a7dde-de58-4046-acd6-401cf52026f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9407b3fd-c834-418a-8eda-606bc639802d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f77395-433e-488c-95fa-f88605cacbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670668dd-d3ea-44ab-aef7-67befc42d39a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca6e404-c0b4-4770-a085-d194a771b91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdea9de-2db2-4ea1-aa03-bcaf8305240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee94a5ed-fa92-4a4f-bab0-7daa8273e94a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6beb8fa-cfdd-4e7d-9e6b-7866c6085e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7755a2dc-4dd0-48d9-97e5-cfd9138de7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dd3836-8ff8-4eba-a725-e2dc434c689a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41319fdd-d7b2-42bd-ae6d-4c26caa88fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388237fe-c1bd-44fe-9a68-48169628af59",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730c6242-e062-4828-83fd-9061b505f7a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756b8f90-3976-4980-a507-e920fc697b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e47907-27fb-4307-ae36-0bea7f851db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4adbca-e264-4984-9811-a59f04fe923b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905ff3bb-e177-4afb-8500-9f9d8399854b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437af967-8f12-4894-8a41-fd2a965f55bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347b87a7-6ac5-4d14-8b70-f89b936e5ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc84cb2-ee7b-446b-a4cc-599799829636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45910b3f-4a5e-43a0-8989-95fe7252aaca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226ecacc-52a7-443d-84eb-74d07f265440",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5fe360-c63a-4cb7-bb72-0da031d3b3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9387a545-92a6-4556-80a8-7102fb1d0bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7363878c-a29e-4395-b553-a582dffb1819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bd103a-dc09-4c4e-a7cc-e9985fd17fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce99e44-a5c8-422e-a28e-b961b34cebf1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a781f7b-63f3-461a-933f-a8102e86f9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3ebb9e-6adf-4396-8dcf-6ed06544c59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8137fc8e-d7f6-4ddc-91da-ccdb4a7c0818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d70a9c-7ea5-46a0-857f-4cae564a7a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8712996b-38fd-4d45-9a88-bf2fb306bc3c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ccb563-db47-4081-8928-9d09de9bd4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5474fb-32cf-473c-9327-b792754ac926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebaba12-2ce9-41d5-8078-e11129d225c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68b37b1-e389-4b82-aa67-4206a8fff52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2ec6b4-d151-4bda-8961-dd743626c286",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f2dea9-0494-4e59-9616-8fd34d54aeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225f7e5e-dd86-463b-a386-7c8595972d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abdb855-14fe-4132-8d24-41e8a1cfbf53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717a1bbb-e123-46af-a064-2a062ffd629d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0c28f0-c2d2-4486-8c88-ff63b99a15fd",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6305dca-5e53-4175-bcdd-2743a56d0383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d20d8aa-7533-402d-b513-21dbb5c215c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8064c5-9a28-4354-95ce-afef32033249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab212f9d-4866-48b5-82c3-4d63a263e59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bc6cf9-75d0-42ee-bec4-f6439f5701a7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c432b1-86a0-431b-a237-3445e18fa445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8592c818-02b5-4cb9-bcd3-921b8a9204aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88626219-044e-4f08-89ab-c797612fd139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc12efd-ee1c-4be3-b0d0-dee9cf332ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4560a21f-3ac0-4884-a9e8-65ba927db28b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cf37b9-0b98-49cd-8725-3053da66e627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffecf13-28e1-4282-99db-d081ae296700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec9d59d-a476-40a5-892a-9b2fc4a88c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3dd55e-8227-4acc-9e48-a84d541ee769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930b7607-92ad-4005-81a2-d94bc8986693",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c163e5d-f11a-40f9-8f75-6061e39c58a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dce68e9-a082-46f8-a7c4-179220c858b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d90904f-dc0e-42d4-a436-116afd4fe233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac391fa-2e21-423b-b621-6c9917353076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ec754e-6d0f-4387-86d1-4cf7cb0de95b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c775c4ec-149f-4279-8629-809211019b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f09178a-f18b-4e75-a311-0844d8a2c8a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebc16ee-efac-40a8-83b5-a3b512a13b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "295a1719-2a21-41a4-92f5-cbe5e01c810e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3068e4-9b97-48bf-8bc0-ce2fc03b7b09",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea33c37d-efea-4201-b13d-3bdae6ed76b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd74f7f-7730-40c4-8778-16bb42aea360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd100469-7f2a-4621-b891-1f8f2050b7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6d3de8-2b04-4249-b3c3-4fef9da4316e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd9835d-fb41-4870-8a60-e4e9f0d5dcdf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502a176f-34a7-4b2d-a1b8-4bf20c242e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25459b18-6455-4b9c-9ead-86b6bdcb7dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4100f93f-8ccd-41d0-9bf8-5b79bf9e28df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8056ad2-0e16-4fa6-a6d4-554c82c91058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96d1a5b-3cd6-4a7a-aea5-075302622617",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65469b28-05e6-4ae9-864f-cfb84e02e7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7ee5102-161b-407f-a126-a6cdedc848fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049458d4-df5e-4508-87c1-6546e35206de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fcabae-bea7-443e-a731-fbe89d6442dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5943f0e-6a91-4d7a-a8ad-46280c21a1d8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ed01ce-34e2-4c46-b64e-f5a7d641917b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbebad2c-f2ba-4110-bf1e-c5ab7d8328e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd904aa-670c-49ce-831c-581aa06e07a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfcca60-2eec-462f-930b-1b1cf7bf6cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acef791b-cf8c-4afc-92f5-292e3c3e7d2f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c61586-7354-4a69-8d02-5cdbc20002df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88013f14-0b87-4477-b683-37e75edf73bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e812e4a-da57-4c01-a3b5-769bab862162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f643e33-bfdb-4ed6-acaf-95e792e6995b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9de097-d743-4f73-bdd3-9b9861cdbc6e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8426d73b-e50a-4245-b5a1-76c989262169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0148e56-1ecd-4c62-9d29-74b51bf3444b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6c5e4e-0241-4028-9531-8c760b9e72ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c4b450-6f67-4c74-a0da-e794b9aaa5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c909d915-970e-4a7a-b25a-458a232f2876",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b953e3-4c5d-48c9-b489-74448e2ad6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cca99052-3bc7-461d-a60d-a516daeba919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d73081-9854-4621-b785-e1404f297aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2899140-7af7-4b9f-8464-27340fe88e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7140f8b-a701-4634-ab10-d98049390ef1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e46083-df9a-4f59-9e49-f036e313061c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5256f3a-0fef-4c19-96b3-7e846000f552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f9faab-88e7-4c01-bd2c-501aabfff3e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109cb279-053f-498c-a694-51f6097eb9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a61c68b-164a-43a3-b02a-a49a3dec6437",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fff2842-412a-406b-9f32-b5902caa25fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f90c49f4-a81e-4163-8128-572410e8c2eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9d6ce8-d4c4-499f-acc6-a5456565a9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41f3868-cc99-43e9-8eb1-4c477d9e23a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf755a53-c858-4a89-92b1-ae4ba1335a8f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d2d846-1c26-43cb-8119-93e242dc0b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5863aa91-7123-4a67-be10-372a80bd8880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17621147-b493-493c-9538-6463b9f5adb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3c3f6a-45a2-484b-8d9f-098dd61b7765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d2373f-0222-4d48-9e25-a1f163f74857",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb024485-8537-4f0b-b5bc-99e6a258b4aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32c3c8e2-7337-4845-a8d6-19aea55c7d6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35baaea-d420-4393-97ce-e0bd7b38bc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd7def8-14b8-4d1b-aad1-0430385514b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83519b93-75d3-4c15-a819-0cc4b0926d5b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b676dac1-59f9-4e7e-a930-4f1bb5797e6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56a41fcd-1d18-4e5f-b5bc-92f842cb0dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c528193-4b5c-4741-845c-c25f9abd6dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7609eb7e-c2b6-467a-9df9-d459bc871d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d390ddce-7698-47d6-9ca9-01b1480d9b1f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07434e10-a0a1-4605-a8e9-5563d3ee8c54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41486d86-f21e-4863-975e-9d1a7f5dd868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c792f639-659f-4d94-ae7c-629e8f25cb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c51d9e-620a-420d-8587-e4141d808ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4505c7d4-c4de-419f-b2a4-931ee00b6667",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa445cc8-1875-4c42-ade7-61f3d7a7c9f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdeec979-adf8-4e69-ae8d-2887e38ff42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817be5f8-ec9a-4c59-9f1c-1235cad7f7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7775747-c775-4cad-838b-43499600df34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9430b4e-c644-40ed-bee3-bbe441360e12",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dc96b2-2816-47a0-bd2f-19800d4ac7c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccc6a509-5ab9-4f5a-83e5-6fbe8ad4856d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169ed541-8477-459e-8f85-8127a00657f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67712d5-fecc-42cc-9f72-212295a07f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c6c694-70f2-41f7-bbf0-a5d62690808a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e749b8f-7935-4881-b296-4c0610028365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb70d3a-1d79-4d17-976c-dd0b8271497f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab48f277-7ac1-46de-a2b4-bdbf8d8756f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55941b47-7c0b-442d-aabc-0ad248e6ab03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b5d5c0-b4b6-4361-9af0-ca77b5522390",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24da7567-0462-4c87-aab9-44e5b333bb02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf4c679-efe2-4f3b-8aeb-17c7a6e80562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c659b2-05bb-445f-b909-cf78e7846399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d883053-06ea-4949-9ac7-d974486be465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0831f1-1014-43bd-bb82-79e8fd0bcba7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d1e3c9-73a4-4af0-bab6-3bd1829b86bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b230d601-3d9e-4b35-aa33-85ca5fbd869e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb981384-2094-4375-9b61-cc7e47039d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74985fbb-01bf-4d58-82fd-9fefb64e9159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92949985-b810-4b43-9958-f1803e7960b6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a55be72-36c1-4e7b-9517-c874ea223768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1115b408-4d7c-4920-b556-ce71ce533bdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45f24d9-6a15-4236-b29c-0bae5d9a36a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ca4069-a38d-4d4a-8ce9-eab88a0a2891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48bc138-b22e-4445-ab6a-c89881279679",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7042b4a1-1659-45cc-a8e7-ccd1953bd91b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d396f9b-4256-4c2e-95cd-093f296fef61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ff68e3-403c-410e-ad95-f439ebfbe6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc608a0-25fe-4d9b-9834-309f19b7744e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3189394c-a2da-4ad2-a5b5-e84049f75a14",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f2c706-4690-46fa-960b-86723ea53961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f016a37-5136-433c-b6cb-53218c3126ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5141dd4-bcc0-492a-953a-daecb59d50a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904d8655-c7ae-4f67-ae6f-7bd5f0e02a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc88b358-d9c7-4fd0-825a-2933c5cc3c80",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28457505-11eb-4637-9d9d-991476839ef6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1eb5dbd-680e-432b-992d-067f7d2c81a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df862ca9-7689-4fad-8d3c-6d8f69245d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee988bec-a64a-4138-9999-f847279c0ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7948d927-627b-4fb5-9f95-070c96092d58",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8775dc4-da15-4f65-bb37-94b81f51396f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a575e6-7645-4096-8079-2267ae065fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aed85e2-e6ab-4a31-8146-d1c910a66111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c9aac2-ff0b-42a7-be58-2cf25004044e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b787ff1b-fc3f-4721-a442-4b228fc61756",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03b0ef9-9f6e-4ed3-9494-492a12d15942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6183b876-5e82-4eaa-a3e5-fbdd174482d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0600f7a-cf22-47ba-afd5-e6c2543fb064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236ef991-fcf0-41d9-8be4-5bb20a94c17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f813914c-68df-4c07-9e95-d308f805154e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3078dc26-4603-43e1-a02d-9b9651a8343f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1f58efb-bcc1-4373-aea1-c321aa33b36f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e825b251-0dc6-4758-9f47-2fefa073857f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc35619-dad9-4236-bc31-1cad03223796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c89e7d-8440-48fc-afee-df559e9cb81d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d44697b-b9c7-4758-b732-e1a16d909bc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0197e983-caa1-4758-adb1-cef1545d2f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64edde87-fc6e-47a0-ba6e-e98484d64cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57bb712-c8d4-4a25-b119-594c21ab0ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d50f7cc-9894-40c8-8a18-45cf86196a3d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dce650b-3eb8-4480-9dc9-2bd402538509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c55c8d8-65fc-4a7b-a798-4dad88927d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc85ab01-0b71-4867-8b71-35735ec74146",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa4f65a-40a0-41de-a5af-5459b81cf5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6a1a9f-f03e-40b0-b10c-d60dd9a668da",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929b0277-e30f-45e0-8b42-d59884a8189c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c109591b-4ea5-47c3-9678-99bc1d1cf826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2cd45c-2f56-4da3-96ea-52a402891ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04771fb-d7bf-4c6c-a14c-6321fd29a893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95939662-b35e-4484-8ddb-3596c63bb94a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810b2794-9bc3-4224-9df9-b792546ec0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10271b93-663c-4557-abf8-baa9b03bcf0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b9a5be-d85f-49b7-b9df-d20e2c27a799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8822bb-748d-4743-93f0-fa5cc0e92f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2df14f-7bde-471c-bdae-02163b412c80",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0001d5a-2514-40af-8df4-d852b6e7351f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8cf2fa7-8dba-4c21-9da4-e604abf84f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd48ff6d-0551-4366-9db0-2560f5bfd153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204a44ed-1273-44cd-9607-ebe7734c7a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e6b2e1-e2f9-43cd-88d5-05c8e1ecb595",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6dea31-89d5-4401-ada3-b3f2b99882ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a4afb7-c2cc-4525-add4-2a1589a4cf1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84cddeb-2be3-481b-b125-71a2263578f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf3bbde-93f6-4688-a30b-ddaacb79d307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e795b923-b10c-4c00-b8c6-042b5a14b690",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527e301a-7fe6-4757-ba68-a2b9330e94ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c750f5d-b6a0-4f0f-bc10-40a06ca395ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f677106-e64e-4c68-b4ad-8b8c7aa0f132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5915f5-5122-45a8-915e-07e2622361eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377c78c4-ce07-4647-a860-e7d4feb9dd2e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24999b93-60d3-4cbe-99df-a6612f374680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5a445a-2117-4cec-be0e-b2edaebd315c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8abd92eb-5839-4e07-a623-8ef886055357",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c0ed22-ee23-4c86-b44c-2998b81fa165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0898afdd-0a7f-458c-bc93-7f4288715df4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736bd276-b0d4-4143-b7e0-44a13872667c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90e6ea99-d7bc-4fbd-acdc-ac8c3b814628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e67969-fcc5-4bbe-b3c3-4d2336b769cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c442dd1-2585-40f5-8fd4-f51d8846990d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efcaf690-120e-4077-8879-929433a9dd41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "308633d8-ddc8-4136-9255-c06650b8dc02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97dbceac-4431-44d7-943d-c9f59906e9ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5a6d448-0bb8-4390-a8e1-a61dbede1a1b"
                    }
                  }
                ]
              },
              {
                "id": "0470e317-b49a-40b0-bd6a-d6e04cbc4561",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "552ecc85-8764-48d0-8351-02e4aa6f78f5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314fbf18-0f6b-41b7-a41c-f68dc74ec1cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "076447eb-ef81-49d9-9210-9a0541c179ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "391e4880-21ee-4a3c-9f97-731407aabd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04554872-1cad-45e0-9c6b-8aada0e25c83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b0498f1-97fb-4e6c-a260-663c722a047d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1db8499-9570-4974-bb00-355dacc137d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a47ab597-1f50-4274-afa1-08d4f060b15a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45110a31-ee07-4734-90f0-6a88362eb1e8"
                    }
                  }
                ]
              },
              {
                "id": "84f8f806-27b9-45aa-b5ce-5eb944eba24c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "18faa423-de86-423b-81b9-42f537bb4640",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6ef322-3806-4fff-867e-f5b13ffbe25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dfe20939-42d9-4c72-ba3f-f2dbffd13bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8ac772-37ff-46f9-8d73-d7fce29910db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde84878-9a96-4cf2-8356-c6521a007216"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f2fc57e-0371-4911-b1ad-d63142a64e55",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6854357a-e56a-403c-b86a-04e47788bac0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "412f9ea7-021e-4a54-96d7-ca62c1d8e7da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e048f7c1-5650-49a1-bc3b-2a1a32e93c69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2896400-12ce-4002-9054-85dbf7c8fac2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "451723ff-6950-4bf2-9252-d074c17a4388"
                    }
                  }
                ]
              },
              {
                "id": "88005684-c9d6-4dea-a210-d938bec40851",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "608f5f7d-2e9f-45c0-8dce-e9b8ca3cdc16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ecea21dc-a592-452f-a11b-a70dc30540cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02705359-ff4c-44f3-ba24-8d042fca6c37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f86a41e-5613-4751-81ba-edcbbb77f046"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83f902c4-2826-4306-a041-7a37fb2eab69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bd42fd57-4cc9-4127-9a9d-f74b5c427e46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2482d542-485c-4c94-aaa4-7c9523652ed0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34ddb725-5dac-49ce-97e9-b65464d2ff79"
            }
          }
        ]
      },
      {
        "id": "4f5c8a97-97a1-4a8f-90c7-206d556557a2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "64bccc27-1df8-4016-98dc-23883c6bec49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3817db62-813e-4a3a-b569-54fd6aa594e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf998a5d-b644-4011-8a9b-770139b79827",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2735572-9efe-40a1-9fd1-396d55fb3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "93b7eda2-a6a4-45e5-b352-4fa2d991ee4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315fe609-9cb5-4cc2-89e0-bce884e931d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b541b2fa-e33c-40d4-bfba-d2ef3310c3bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e6df366-bad1-4c71-82f9-74369fbad55c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b2c99e-6055-4967-a3a1-6ca01425c94d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adcff91f-51c5-4d93-9392-1b5b74c67cfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eed07158-4a1b-4469-b79f-d6562ab52b3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87199b27-efa2-4e7d-9667-2e27f26c2377",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dae0c527-7047-4df4-8631-25c2f329440d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34b51de1-d075-473a-acc6-45cdc95b0298",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3add63f-5d8c-4557-a046-3c8578365a93"
            }
          }
        ]
      },
      {
        "id": "38fc4df2-d8df-43b7-9979-3ebb40c7355d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "439c788c-ff9a-4b26-bd95-f4bc3539451b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3f1b34a-5df4-4405-b91c-5a1ab3ab6650",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd244e6b-c5d0-4e6b-beb0-f6c8fac92762",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda988cc-b8f5-4ea8-bee0-153e486abac1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4f09ed9-6c0f-4839-b810-2cbf1176ee29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1690202d-cb45-4220-9992-bb52ef39dbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fe405a5-a71a-491c-a6c4-0bb5c5ade144"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b22488f1-c0c2-4f3d-8232-808792fccdc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2507f9ac-94de-4c0d-a8f6-1235ccc72983"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78033496-d0b6-44d6-a735-027f4e8ce338",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88e04d11-8f0c-4e31-98c4-e034d1466cdb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "168c4e39-a2bf-4050-b026-38d485b4fa6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7033a61e-144b-426a-9ac4-11e7756bc8d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a463869e-5507-4819-8998-e9e4b796f094",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a344657-e54b-4c62-8cc2-23051c8099c1"
            }
          }
        ]
      },
      {
        "id": "909601a1-98ca-4560-9e86-9b9196d0675f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "df456d8d-cabb-417e-9866-8c7d447f120f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c61b6774-0405-450e-8ae9-3d016a5a9d4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27a1f7ed-2aae-443c-b42e-cc147bd359c2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f63e3-5b87-4e00-b13e-e0a795902f08",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "237fe759-17e2-4fd9-a54d-774c90471719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e5eca3-2999-4882-ab2a-b1e2580d6511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c6586b6-2490-4abd-97e5-7336e9187092"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ff0dcb4-7c15-4242-8287-c3d45c0d2cea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f79494d-bdda-43c2-8008-5133df76cc93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04177faf-af82-422c-8841-fa44912885a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c95dcc6e-c72d-4289-a6cb-64a1027af82b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "053bd6c7-e45b-4341-8770-23600bd1bb98",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "925e6868-7332-44c2-b77f-f7618cf2c8af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2c4c3bb-91f9-4d4d-80c9-e1429dcdd16f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25aea925-1d80-4bc5-9ed3-7753e0ad1e95"
            }
          }
        ]
      },
      {
        "id": "e867f147-9ecc-4388-8ce2-ac73a5770110",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbd1d695-3798-46e5-ab3a-ca688577e3e8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7002f8d-0564-447b-8588-b3564071f735",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e5472e9e-18b1-494b-8d8c-321f16a585eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f979f7dd-ae4b-4027-9a3a-630c3a832e6f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d1692bd-143a-461f-bfbf-a61c8207c931",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 231.394366197183,
      "responseMin": 12,
      "responseMax": 6284,
      "responseSd": 840.0426544983948,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688085865688,
      "completed": 1688085943076
    },
    "executions": [
      {
        "id": "8cc72f49-6680-4e86-90f3-1d2bb07dba39",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ebf0c91-7dcd-4660-a69b-e968fab5679a",
          "httpRequestId": "3bad7e19-e937-4021-ba08-be18bb8b383a"
        },
        "item": {
          "id": "8cc72f49-6680-4e86-90f3-1d2bb07dba39",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c56f8d81-8ed0-4206-be3e-fe6d2b05db85",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "07622615-2598-4459-9811-e0fd1e6a6621",
        "cursor": {
          "ref": "33cdaba6-ef10-4696-9af8-2e42675c3cfe",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c56c88f4-e682-4186-b9db-5d9d20330d30"
        },
        "item": {
          "id": "07622615-2598-4459-9811-e0fd1e6a6621",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e7210759-f9a9-4932-9f44-659c509b87c3",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "310baa1a-b06c-4951-b750-dcaba75c773c",
        "cursor": {
          "ref": "764d7279-6d5f-4056-90aa-8dc7bd1c970d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "238ceb8b-9ef9-4816-94a8-fc1cd2ed8e9c"
        },
        "item": {
          "id": "310baa1a-b06c-4951-b750-dcaba75c773c",
          "name": "did_json"
        },
        "response": {
          "id": "8dd17012-faec-4a77-b39e-35dcf8ea69be",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1804a60-a686-479d-ba0d-7afcb2be851a",
        "cursor": {
          "ref": "69e83063-02c9-4541-b09a-1cde84e80f7c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "090eb461-6e0a-4d35-887a-419f1e04f765"
        },
        "item": {
          "id": "f1804a60-a686-479d-ba0d-7afcb2be851a",
          "name": "did:invalid"
        },
        "response": {
          "id": "dd8892a5-86ce-4995-b180-4a87aa571975",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1230,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "f1804a60-a686-479d-ba0d-7afcb2be851a",
        "cursor": {
          "ref": "69e83063-02c9-4541-b09a-1cde84e80f7c",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "090eb461-6e0a-4d35-887a-419f1e04f765"
        },
        "item": {
          "id": "f1804a60-a686-479d-ba0d-7afcb2be851a",
          "name": "did:invalid"
        },
        "response": {
          "id": "dd8892a5-86ce-4995-b180-4a87aa571975",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1230,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "083b4da9-f621-4fdb-8b61-46f454fb366f",
        "cursor": {
          "ref": "ee6c68f5-6025-491a-a492-451bccc8307a",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "21029bfa-3c32-4ae8-a03b-d19c933c8b78"
        },
        "item": {
          "id": "083b4da9-f621-4fdb-8b61-46f454fb366f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3151fdd5-446a-4845-8465-7a2486a1492f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 24,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0977308c-0d3a-4d24-a011-e8fe7eafef47",
        "cursor": {
          "ref": "d0904c13-4317-4e87-ab05-adf92c1f4163",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b6e0b51d-75fa-4995-94d7-3f12bfc2045f"
        },
        "item": {
          "id": "0977308c-0d3a-4d24-a011-e8fe7eafef47",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6bc275b7-b937-4be2-8200-e9202b5b3af5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc87eb73-188c-4a5a-9809-59b160b5be5f",
        "cursor": {
          "ref": "909391ac-0fc5-4ad1-9661-be11d8091463",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "21ad9beb-c4b5-49a8-8ae5-494fd3b0c202"
        },
        "item": {
          "id": "bc87eb73-188c-4a5a-9809-59b160b5be5f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "745baaaf-2c98-4b57-bc3f-97f4984eb70d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "5e79f686-d8be-4df9-8f5e-59c94b524f11",
        "cursor": {
          "ref": "7fdd144c-5f38-4372-a71b-6886a4898b0a",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "56bb088e-52cf-4ccd-9f96-2bfa11444cff"
        },
        "item": {
          "id": "5e79f686-d8be-4df9-8f5e-59c94b524f11",
          "name": "identifiers"
        },
        "response": {
          "id": "2ffffed2-c7f4-479a-b4bd-3f2d5e687a0f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd46634c-3c5c-45b4-b222-955f8bcc4a3f",
        "cursor": {
          "ref": "f1891e11-8495-471f-b778-ad7553d33442",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8e648b78-95c2-4065-aed7-786907ca3ec3"
        },
        "item": {
          "id": "cd46634c-3c5c-45b4-b222-955f8bcc4a3f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b03e523a-c7f3-40aa-99d1-c217e76c51d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8bc440-0447-4f70-aa68-c72fb9bb723e",
        "cursor": {
          "ref": "30b474e9-d272-4730-bfaf-28af67e51a6a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0273eb22-a883-46d2-bbb5-13a3648065f5"
        },
        "item": {
          "id": "ed8bc440-0447-4f70-aa68-c72fb9bb723e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4fc050b2-2053-44f6-bb2c-423ad03b71a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e2e676-2651-4752-805c-07b5ae579aab",
        "cursor": {
          "ref": "b17c5be2-b139-4b24-97e8-48a0ff83d748",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "38c77bb2-bc77-42eb-bd37-1ebe47cace6a"
        },
        "item": {
          "id": "f4e2e676-2651-4752-805c-07b5ae579aab",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bea5c064-a89d-45a5-acde-8e29cba156a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcb2921-9d10-4254-9f3d-3252f5ecb442",
        "cursor": {
          "ref": "fb7604e2-05f0-42a4-83b9-373622ff41e9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5a73ea55-e6b2-45b3-9777-6b0dd5a90004"
        },
        "item": {
          "id": "9dcb2921-9d10-4254-9f3d-3252f5ecb442",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "23734974-5b02-42cd-9ead-6e763e296a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045edcda-5d11-4e11-a5d4-c872acd3476d",
        "cursor": {
          "ref": "60d20c64-ca62-4488-8620-da0ca1353052",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2b0d0d00-380d-4b40-902d-7a8f85051501"
        },
        "item": {
          "id": "045edcda-5d11-4e11-a5d4-c872acd3476d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a2100544-95b1-4f05-8d47-26dff3d22b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe337f31-042a-4289-b065-827c5c8eef83",
        "cursor": {
          "ref": "98e24b9f-b34f-4150-9ab7-028b4f9b922b",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "80a81c77-6bd2-4ccc-bf90-eb20a8af9041"
        },
        "item": {
          "id": "fe337f31-042a-4289-b065-827c5c8eef83",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cda0ef36-8de5-4a60-859c-0c49276166a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b29685-7bf3-4bd4-a886-a3231bca7384",
        "cursor": {
          "ref": "7a4475e4-8091-4e62-80bd-4be661bfbe5b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a3ae6bea-8222-4e8e-9ee8-ddda85633ddb"
        },
        "item": {
          "id": "d0b29685-7bf3-4bd4-a886-a3231bca7384",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a73107bf-274e-43a4-979e-70011f644ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb0cabc-dcda-4775-9efb-fb834bb4faf3",
        "cursor": {
          "ref": "aef8e581-7790-4ed6-87a2-a248636c9dc7",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "51ad19d2-7824-47f5-ba39-4a6f1c645cbd"
        },
        "item": {
          "id": "5bb0cabc-dcda-4775-9efb-fb834bb4faf3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "84f378b6-8b35-4d10-81a6-c9354535e825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3c4b55-5e17-4d3e-a727-fe5a2ea3d869",
        "cursor": {
          "ref": "780333b8-fcc7-4138-bb7c-2a0a2a1a007f",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "baff1c5e-12b7-44d3-8a2c-822589de3838"
        },
        "item": {
          "id": "ed3c4b55-5e17-4d3e-a727-fe5a2ea3d869",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0d99decf-eb60-4409-8f3c-3dc0e6ddf79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bbcc96-0862-42d6-af43-15846e17e0c4",
        "cursor": {
          "ref": "07528267-4df5-42bb-936f-5e88e74e90b4",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fe10ccd4-4262-4f7a-8ed2-18a0887b73b3"
        },
        "item": {
          "id": "60bbcc96-0862-42d6-af43-15846e17e0c4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4ec949e7-1631-487a-b06d-4e09551f89ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d99b0a0-8c42-4814-b29c-238e2ba5ac49",
        "cursor": {
          "ref": "5fbff295-fa52-44b9-9758-c9501f25449b",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b2274a44-b8e0-4a6c-97ef-1b04fb4c8097"
        },
        "item": {
          "id": "1d99b0a0-8c42-4814-b29c-238e2ba5ac49",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "63a2a1bb-927e-4949-8cd9-b4660e091f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8411ab4-3150-4ebb-bd5a-ce964fb37d84",
        "cursor": {
          "ref": "0c3aa6d9-ebc5-4fa5-b920-2e950733b019",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "88d71548-0828-4eee-9345-713a57683fbc"
        },
        "item": {
          "id": "b8411ab4-3150-4ebb-bd5a-ce964fb37d84",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "25e14a23-99fc-4151-ac3d-48d18fbfd92e",
          "status": "Created",
          "code": 201,
          "responseTime": 950,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "df925f86-6bfb-4203-836b-a28360a2baf9",
        "cursor": {
          "ref": "cd1c324f-071e-4f2a-ae6d-1bfd8ebc23f8",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "844309af-b1c7-4d07-813b-70d7fe02520a"
        },
        "item": {
          "id": "df925f86-6bfb-4203-836b-a28360a2baf9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d99341fc-027d-4549-b08d-7293c6330ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77db7715-046d-4c75-821d-34a0598b3f4d",
        "cursor": {
          "ref": "dd9649cd-c9a6-47dd-946f-0f7a9a4a07e0",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9ecf1c17-e61a-462d-85a5-2873e94d74f2"
        },
        "item": {
          "id": "77db7715-046d-4c75-821d-34a0598b3f4d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b8387d26-8f8d-4849-b7e1-a71712935f89",
          "status": "Created",
          "code": 201,
          "responseTime": 5568,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a2e981ec-8ae9-4cb9-ac6f-d48664a41354",
        "cursor": {
          "ref": "54bb0005-4fb2-4ff2-a35f-04c099a87b29",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7bcc8604-c56c-4315-86dd-351bf07b7e4c"
        },
        "item": {
          "id": "a2e981ec-8ae9-4cb9-ac6f-d48664a41354",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d70eba2b-41c5-450e-9045-7f85e41e4f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1c316b-687e-4dce-b149-77d7ede0d595",
        "cursor": {
          "ref": "333bf10c-2b6d-4553-8348-ab519d3eff87",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e014662a-9e36-4bc8-969a-2b3f4e417f76"
        },
        "item": {
          "id": "4c1c316b-687e-4dce-b149-77d7ede0d595",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6941f941-d833-4311-9d86-b0fb8eb94ea0",
          "status": "Created",
          "code": 201,
          "responseTime": 6006,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "8fc3d872-f6eb-404c-98b8-4e7bf01d5721",
        "cursor": {
          "ref": "3973aa4a-7ed2-4bc0-bc4b-f1f76468d878",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e264d65b-df24-47e9-acff-527ec0fbd791"
        },
        "item": {
          "id": "8fc3d872-f6eb-404c-98b8-4e7bf01d5721",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "aeff8b2b-af99-4d16-800c-cbe4783805a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8ee987-74e3-4dc6-b99e-07ad0013cb03",
        "cursor": {
          "ref": "2f6a7aa3-5940-4757-a1f6-a5504d29d7ac",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5a0c76fc-a5ba-4eac-85ef-ead04be15b80"
        },
        "item": {
          "id": "3d8ee987-74e3-4dc6-b99e-07ad0013cb03",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "44bc1c6c-ab2a-49d1-ae99-2f61f27d6a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f48467-6675-4009-bcc7-f65d3ca139cf",
        "cursor": {
          "ref": "2aee45d1-5f33-4b7c-90a4-3dd9760a159c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f75c1107-b559-465a-b8f3-55e76abf0902"
        },
        "item": {
          "id": "54f48467-6675-4009-bcc7-f65d3ca139cf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d7caa424-1da9-4360-a011-8e52ba76109b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895c705c-556e-402d-a9ee-61efbb37093f",
        "cursor": {
          "ref": "806ff092-58a0-482b-91e8-9c9bb4e33cea",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e74c1b00-4b78-46b1-9dea-f06b19089a57"
        },
        "item": {
          "id": "895c705c-556e-402d-a9ee-61efbb37093f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e4e7b0c0-bc68-4410-816b-0eb2b298bb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9924e1d7-b729-4ed3-afc6-4c6bee55d4bd",
        "cursor": {
          "ref": "58a8715e-12d9-4bd4-aa3d-8b041a8dfb1d",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a7661628-a895-49b4-b009-d827ff29e7ef"
        },
        "item": {
          "id": "9924e1d7-b729-4ed3-afc6-4c6bee55d4bd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "26c0561f-4212-4793-9316-7f818787d5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633871e4-b89c-4af3-b084-84adda03fc83",
        "cursor": {
          "ref": "8f7a809d-59d7-4279-b5ea-bf934213b2c8",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "350b29e2-4b3e-4501-ba78-5ec0615bb49c"
        },
        "item": {
          "id": "633871e4-b89c-4af3-b084-84adda03fc83",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "76b099ce-ab26-4c26-b983-03ae79f91413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c8cddc-3268-4268-b494-84c8a96dfd65",
        "cursor": {
          "ref": "3184e78b-0e33-4f5c-a68f-12a269df8b9d",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "956390a1-3045-460d-b456-cca2157bc8e4"
        },
        "item": {
          "id": "78c8cddc-3268-4268-b494-84c8a96dfd65",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4150858f-05cd-46e8-9dba-a85861f94ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38597dc2-2102-41ff-9a0b-8e1561ce2d9b",
        "cursor": {
          "ref": "eca69226-c7a1-45a9-91db-af70e9748bfa",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "44f224dc-3389-4dd5-9b54-889890550269"
        },
        "item": {
          "id": "38597dc2-2102-41ff-9a0b-8e1561ce2d9b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "07d88683-277c-49d2-8f29-8bcb02dcb662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c4b661-7ac6-4b59-a777-e85f1078e4ef",
        "cursor": {
          "ref": "83d77064-e6ff-4d09-a1e2-5d223ce12484",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d0525b76-918a-4191-8f48-d2a556a17a50"
        },
        "item": {
          "id": "95c4b661-7ac6-4b59-a777-e85f1078e4ef",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0eae964f-889a-4a98-b8f6-947ffc84b761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19a169d-68fe-440e-a0c1-475ff6d3c02d",
        "cursor": {
          "ref": "99d49d8b-e90c-4ccb-a37b-c47177deb1e2",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e65d370e-919d-4371-9140-76576929ba28"
        },
        "item": {
          "id": "d19a169d-68fe-440e-a0c1-475ff6d3c02d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "36fcfcc4-4012-4a09-8b3b-250142af1156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034ced1d-6851-4676-baf8-8c9e49949166",
        "cursor": {
          "ref": "6231c11b-319e-4620-9dce-397b4c04fc40",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fa02e9b0-cea6-4827-adf5-95cac89cafe6"
        },
        "item": {
          "id": "034ced1d-6851-4676-baf8-8c9e49949166",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bc5ccda9-6e69-48cf-a1ed-6b23403f738e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083d7486-0d26-439a-824f-c6c7c1cc80b0",
        "cursor": {
          "ref": "22bd1b15-29d2-468a-974f-aaf34293166f",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3a1031ac-9282-4109-b865-5042f45e5848"
        },
        "item": {
          "id": "083d7486-0d26-439a-824f-c6c7c1cc80b0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a84b6a9c-0059-413b-914c-da738472da5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5d1131-d8bd-431f-9d06-1be0be4cf346",
        "cursor": {
          "ref": "242112d7-9ad6-4b7b-ac04-a991241e1483",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b4b9996a-8879-4c1d-bae3-4ae0d64666fd"
        },
        "item": {
          "id": "6e5d1131-d8bd-431f-9d06-1be0be4cf346",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cd615cd9-c6a8-44ae-9e69-4ba004b04181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23075d39-986c-40b2-8948-0a489df7e59a",
        "cursor": {
          "ref": "9a73287a-2d22-4085-9de5-a70072decb87",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "007eb62a-ba2d-493f-8aca-0dde1ca66e75"
        },
        "item": {
          "id": "23075d39-986c-40b2-8948-0a489df7e59a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "24b0474b-c8e3-4503-b8a7-f3efe4ea3753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138dcae5-b0ce-4c70-a1fa-aa00e8351bfd",
        "cursor": {
          "ref": "980846f6-79ca-457e-95e1-0ab20312b818",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "36507902-5956-498c-b559-248fd38874cd"
        },
        "item": {
          "id": "138dcae5-b0ce-4c70-a1fa-aa00e8351bfd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "74d943dd-533d-4a99-b01f-1f5914143abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fdbbbf-1c52-44a3-906d-ae4680d1751f",
        "cursor": {
          "ref": "5a2128e7-41aa-451d-939c-e6f3126984e6",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ff7221e1-614d-417c-ba38-ced660ee1534"
        },
        "item": {
          "id": "c8fdbbbf-1c52-44a3-906d-ae4680d1751f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6114a0fa-2d50-4657-9f94-f07004773188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5422487-fa6b-4675-bf6a-4064ef2619fc",
        "cursor": {
          "ref": "f5416c90-8e79-4f70-a115-be16c00a6727",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "21f57421-fa2a-4cd7-8452-4deb522fb721"
        },
        "item": {
          "id": "f5422487-fa6b-4675-bf6a-4064ef2619fc",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ceeda466-d39d-4010-8b54-ea63772572c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0157f5-5416-4986-916c-4839ec1110fe",
        "cursor": {
          "ref": "dc5c4320-23b5-4839-be4c-c7b544e33cc3",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "52033d70-8dd6-4947-8652-eda9edca8434"
        },
        "item": {
          "id": "dd0157f5-5416-4986-916c-4839ec1110fe",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c6164364-a4fd-49d7-b51a-756a3bd3bc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bec9975-cfd8-44ba-a977-5ae0006694d9",
        "cursor": {
          "ref": "7310b011-6542-46e3-8da7-776c83a6cd32",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f5eb0d2e-da52-48f2-8fe7-7f3334b0e285"
        },
        "item": {
          "id": "5bec9975-cfd8-44ba-a977-5ae0006694d9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "21ceea75-c681-4626-80ea-641df526cb3f",
          "status": "Created",
          "code": 201,
          "responseTime": 3418,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a42c635c-aac8-42b8-8695-5d14579dd981",
        "cursor": {
          "ref": "81b0d470-8e9f-419f-9993-fe36242a7fc0",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "607cbba9-d200-47a2-933e-b2d99cb72761"
        },
        "item": {
          "id": "a42c635c-aac8-42b8-8695-5d14579dd981",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6057f906-7fd8-49e0-9f52-772a61e9b82d",
          "status": "Created",
          "code": 201,
          "responseTime": 3149,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "052bb02c-7bae-4822-88f8-ac896570f486",
        "cursor": {
          "ref": "7191f330-9a02-4969-a5b8-93bbddcf307a",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "243a061a-46f0-4215-beef-423d4e0ac6ff"
        },
        "item": {
          "id": "052bb02c-7bae-4822-88f8-ac896570f486",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4839051e-b4af-47be-929a-f7ee5b2513d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b87619-772c-4e8a-bf51-bb9c1d2443e2",
        "cursor": {
          "ref": "08cc3f50-4c49-446b-858d-786f30cdd1c3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6c18baa8-3ab0-451c-a140-5270d79fafd2"
        },
        "item": {
          "id": "71b87619-772c-4e8a-bf51-bb9c1d2443e2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f039581-df95-42ba-a4f9-8b0ed4255a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486c2771-ce42-4a80-bf47-aa2292970164",
        "cursor": {
          "ref": "862cf159-1089-48c6-a2d4-84cb828e1c79",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "68415315-6e3e-416d-9a16-a2069cfff3b9"
        },
        "item": {
          "id": "486c2771-ce42-4a80-bf47-aa2292970164",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ec4d7c92-0e23-4fc2-9d7c-cbe8fadf58f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba282e33-db64-451c-93e7-d58ae073f04f",
        "cursor": {
          "ref": "c54bf5a7-7fbb-4544-8e85-85b1a74831ff",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2759ff6f-7f75-420d-9dc5-2dda7503da6d"
        },
        "item": {
          "id": "ba282e33-db64-451c-93e7-d58ae073f04f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1347afa3-213f-4cf9-a68e-f710ec35394f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee5a382-8d31-4511-a016-d69321a0d7da",
        "cursor": {
          "ref": "f692bee8-a0bf-45b6-b2a8-1d5330a12536",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "07c2d879-f340-4f1d-a0de-949c2e2ad2a2"
        },
        "item": {
          "id": "dee5a382-8d31-4511-a016-d69321a0d7da",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2b8edc6e-2215-4fc9-9b94-33973ba1a475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0d2068-aae8-4843-b95b-3a0ada66ba41",
        "cursor": {
          "ref": "effd46b4-fda4-4e49-a24a-c78b59b75daf",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bec51e01-8d40-493c-96d1-4fc28f676331"
        },
        "item": {
          "id": "7c0d2068-aae8-4843-b95b-3a0ada66ba41",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cec1cc07-f564-4899-8d6b-9266d297ef4a",
          "status": "Created",
          "code": 201,
          "responseTime": 6284,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "994a210a-508b-459a-ba28-3e4b092133e1",
        "cursor": {
          "ref": "e0cbcd30-bf36-43ec-a215-94b4be9dfc40",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "884fea81-a455-4590-b1e8-621f894fdf03"
        },
        "item": {
          "id": "994a210a-508b-459a-ba28-3e4b092133e1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5fab79c7-5981-406c-8694-8e4c6732b87d",
          "status": "Created",
          "code": 201,
          "responseTime": 3793,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "82d49623-bc91-4cfd-9df5-05a5d837326e",
        "cursor": {
          "ref": "55d9d689-2021-4d49-86cb-9b82a361d713",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "904510f0-bc55-4677-b220-0006d9f71918"
        },
        "item": {
          "id": "82d49623-bc91-4cfd-9df5-05a5d837326e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "18d2f3b7-409d-4691-a938-78d8ede811f3",
          "status": "Created",
          "code": 201,
          "responseTime": 2695,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ccdcefdb-d13b-482b-926e-f8f374aebf76",
        "cursor": {
          "ref": "c33b90ce-c96c-4f56-b8e2-b258f62e9920",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c7320a65-68a2-49af-ab74-e8ea01d8f1f6"
        },
        "item": {
          "id": "ccdcefdb-d13b-482b-926e-f8f374aebf76",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b993b2cc-bf73-4c85-b069-5dc64d60935f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729b3055-8140-4510-baee-85a66ee45930",
        "cursor": {
          "ref": "150f71ff-25cd-44e1-bb70-ffca7c225baf",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6c8a9a92-819b-4a8e-9ec2-085f806d2f62"
        },
        "item": {
          "id": "729b3055-8140-4510-baee-85a66ee45930",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9722823f-8816-4c42-babb-9d9a64aad0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb843ea-543c-4675-870e-68cedff396d7",
        "cursor": {
          "ref": "3bff2296-92b5-4a77-b414-f6c97811a325",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9d635312-3c01-4430-889b-953b7008848b"
        },
        "item": {
          "id": "cdb843ea-543c-4675-870e-68cedff396d7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9a38dbc3-a01f-45b9-83a3-0aabef5c3ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5961437d-c829-471d-ba4b-e472118c894e",
        "cursor": {
          "ref": "2c6d6a4b-8ec8-4c24-9333-860832e19a66",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "15530b0f-19e6-47e5-9d5f-a11b39c833fb"
        },
        "item": {
          "id": "5961437d-c829-471d-ba4b-e472118c894e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2e30b43b-7642-4a41-b63d-398a760e1c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfc50e7-0feb-4e36-a730-9daad63497fe",
        "cursor": {
          "ref": "96a330b5-7511-463a-8d08-9d30d9c67f58",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "627eaa85-8408-4326-a0f5-0d1edbf7200c"
        },
        "item": {
          "id": "3cfc50e7-0feb-4e36-a730-9daad63497fe",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fd220be3-61ea-439b-a1d4-04d6a1015bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cc2696-d0c2-442b-9832-df15b58bc839",
        "cursor": {
          "ref": "f5c49bdc-6c01-49dd-a4ee-0f9a8556e4b7",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "675c2287-3b18-4740-a5c3-803797e18423"
        },
        "item": {
          "id": "60cc2696-d0c2-442b-9832-df15b58bc839",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "12508dbd-4c7f-46d8-a7a3-87c0efb0b7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c325f0-4139-45e7-91e0-936078f741ee",
        "cursor": {
          "ref": "47be4c05-4d7c-4652-8bc7-d218d59ab2f0",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fd218442-83af-4605-ab2b-100838166b18"
        },
        "item": {
          "id": "13c325f0-4139-45e7-91e0-936078f741ee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "22defcab-9c78-473a-94ef-ee173fffe1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6daf8a6-07fb-4228-a115-76b44f989f81",
        "cursor": {
          "ref": "87af758e-78d8-4f30-bdf0-4919d600cb3a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d56bac76-7599-4fef-9d85-5b11f7edf44a"
        },
        "item": {
          "id": "d6daf8a6-07fb-4228-a115-76b44f989f81",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "899092d1-d69e-461a-84cd-da7d228bb047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765867fa-713c-4565-a3c3-6577bc7d4454",
        "cursor": {
          "ref": "17058645-f97c-461d-8e06-e5ebe53231a7",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "45d93920-cd67-457f-b384-f1b530602810"
        },
        "item": {
          "id": "765867fa-713c-4565-a3c3-6577bc7d4454",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d2b12eaf-6e6d-48c6-a518-12e864624cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba798b1d-48a6-4fcc-a0be-689309cce2eb",
        "cursor": {
          "ref": "b946630b-8e21-40f8-86e7-f66daa113c3c",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b69fe21d-12a1-4a20-98de-d19755556427"
        },
        "item": {
          "id": "ba798b1d-48a6-4fcc-a0be-689309cce2eb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "25979d72-e000-4232-8149-f05bf8d5f402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e362f7-d395-40ad-ac2e-102d10c5dd01",
        "cursor": {
          "ref": "3ad45d20-c735-4cd7-bec3-84df3a564f52",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c27b3abe-698c-4212-9c06-af9af5072fba"
        },
        "item": {
          "id": "f1e362f7-d395-40ad-ac2e-102d10c5dd01",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d717e1c6-f68f-4009-82b7-4746a27204b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e20de32-e630-41bb-843b-bdc4601af268",
        "cursor": {
          "ref": "5915555d-eb3c-40bd-baad-ccb67d3b427f",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ea47f5d0-5dac-44d1-b789-c4e899a6d11b"
        },
        "item": {
          "id": "5e20de32-e630-41bb-843b-bdc4601af268",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1a76b89a-89ab-4ece-b1bb-15d86d69d6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8639ae5d-4ba7-46ea-94ca-0a85cd07ce0b",
        "cursor": {
          "ref": "f6829bcd-0188-4fb2-843e-fe9c27885cf5",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1bd80433-7ae7-47de-9dd0-6badb38e5fe6"
        },
        "item": {
          "id": "8639ae5d-4ba7-46ea-94ca-0a85cd07ce0b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6a40ccaf-6459-4854-9acc-1926dcfedbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3215dbe4-ee66-47c7-bb74-59b9f25f5763",
        "cursor": {
          "ref": "549d8c65-bd5c-4a87-8952-4ae65efc14c1",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "121b25f7-de4b-48c2-b3b6-d51281b994eb"
        },
        "item": {
          "id": "3215dbe4-ee66-47c7-bb74-59b9f25f5763",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5e8a1215-eb15-4034-a188-4685aa2604c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a5bcba-9736-44d3-ba77-c31bbb3fdeee",
        "cursor": {
          "ref": "9cd64130-87de-40a4-bbc3-1a3e88ae5d34",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4eebd1a1-969f-4d59-a266-84d31f373ab9"
        },
        "item": {
          "id": "25a5bcba-9736-44d3-ba77-c31bbb3fdeee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "301dd6f9-f17e-4e91-9290-e8bd90b40a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5ff093-9495-4781-ae7e-126e52d60ad9",
        "cursor": {
          "ref": "b589ec7b-a9f1-4812-952f-32b40f23c4f9",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4946e06d-02c3-4a99-8313-bbf6d9a0a7e5"
        },
        "item": {
          "id": "dc5ff093-9495-4781-ae7e-126e52d60ad9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cd44492b-a09a-42ee-ab37-8d25dc721974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f722649e-3659-45cc-aca6-a714419109f4",
        "cursor": {
          "ref": "24bc3f24-7cc8-40e2-9b0a-87b1ab29ad3f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cdab684a-bbb5-4b8b-bd1f-a9318af417cd"
        },
        "item": {
          "id": "f722649e-3659-45cc-aca6-a714419109f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7415dbee-5d29-402c-8ab3-4802a7eb7ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4f0545-136d-4aba-add3-ba702227a2d6",
        "cursor": {
          "ref": "6c66f7e0-d599-4f49-9bc7-4204f40e3b76",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "041f01cf-3ebd-4e3d-b2f2-01f5268efdd4"
        },
        "item": {
          "id": "1d4f0545-136d-4aba-add3-ba702227a2d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e5a17c70-b3c2-4666-8087-cef84abb2108",
          "status": "Created",
          "code": 201,
          "responseTime": 3156,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "8483aa4a-b220-4505-8d9c-501b115377b0",
        "cursor": {
          "ref": "f602693e-ce40-4bda-88fd-c093cebe49da",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ce2b2864-c7e3-4f36-9cca-0bfac7942b10"
        },
        "item": {
          "id": "8483aa4a-b220-4505-8d9c-501b115377b0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "aa003299-6e3d-4063-b0a9-b543fe0c012d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d82476-0c75-479e-8f64-37108dd5298c",
        "cursor": {
          "ref": "1d68c090-fd4d-41c3-aa3f-a161f0a72a2b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e257156a-7fe6-4f79-b2de-1dd17f668a3a"
        },
        "item": {
          "id": "19d82476-0c75-479e-8f64-37108dd5298c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "75979b24-3bf9-416f-860a-6799d615f725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f9bc80-ba93-4048-8603-e0dea8fbeadd",
        "cursor": {
          "ref": "615be7e5-dc21-41a1-88ac-e7c5f1128083",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "522ef3e3-b115-4ce0-8497-f0c5f538283a"
        },
        "item": {
          "id": "36f9bc80-ba93-4048-8603-e0dea8fbeadd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f669e4b7-a9ba-401e-95ce-405e283e58f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88a8b36-ef84-46b6-8ab7-86769a032276",
        "cursor": {
          "ref": "d989b5a3-7a46-4d57-94a1-4168dba40c2a",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "678def02-9c04-4289-ac68-72e2ec8a31c7"
        },
        "item": {
          "id": "e88a8b36-ef84-46b6-8ab7-86769a032276",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0675272d-2dc4-4699-9b19-5da51baa4b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17127744-396e-45a6-99db-dc36758cd751",
        "cursor": {
          "ref": "b20a099a-cfa0-44be-93a0-dfeb65a03b88",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c87e3260-873e-42f9-9aee-95e8e60b2d97"
        },
        "item": {
          "id": "17127744-396e-45a6-99db-dc36758cd751",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9f32b4b9-1fac-4471-9ef6-3ad735519435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7e14a4-faa2-478e-b2bb-db9eba1593e9",
        "cursor": {
          "ref": "eebfb0f3-91b3-484e-b5e3-fe46a151d401",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5e7686c6-83a3-4601-93a1-7f1e5fa39822"
        },
        "item": {
          "id": "7b7e14a4-faa2-478e-b2bb-db9eba1593e9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ad5d1d38-e9bf-4ea9-a044-8dcce8c93c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd355e6e-dd77-42e3-93a0-6e1e697b2283",
        "cursor": {
          "ref": "dee70c9d-d30d-4a90-b162-6a36fb1273c2",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "79c88b07-df5a-4871-bd5d-a14045f7ab60"
        },
        "item": {
          "id": "fd355e6e-dd77-42e3-93a0-6e1e697b2283",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "81b13b2c-d6bd-4f9f-ae28-c309e394105f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e67520-5c3c-4ddd-b4b8-1a44ab4f6b5e",
        "cursor": {
          "ref": "4acc2588-9e5c-40f0-bdc5-47dd716dbe8a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d4c41b22-9dc3-4a6b-a8c5-691b6ee0bb84"
        },
        "item": {
          "id": "d0e67520-5c3c-4ddd-b4b8-1a44ab4f6b5e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f5a8a24a-ee8e-482c-a1f0-5e88315b5570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c564ccdd-2eff-4944-92df-346bf67bf3c3",
        "cursor": {
          "ref": "69c59e44-79d8-4bf1-851e-c3964716cd9a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c2a2d48f-57d2-4c74-847c-e61405b8214c"
        },
        "item": {
          "id": "c564ccdd-2eff-4944-92df-346bf67bf3c3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "47eda44c-c64c-48c3-bb71-39227ada0d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf60b8e-43f0-4905-93b4-a51ef95c1da7",
        "cursor": {
          "ref": "44a7413f-09c0-4702-be13-f654e0ec3932",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "20844d54-ba9d-467f-8eb4-c5576cb52298"
        },
        "item": {
          "id": "fbf60b8e-43f0-4905-93b4-a51ef95c1da7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "94d534ee-5c29-4b39-b050-c53590acb049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd6942e-76ed-4bb3-b0d7-57bc826f15e3",
        "cursor": {
          "ref": "a0684f4c-fa04-45ce-995f-2115db88ac18",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "90a377a9-98be-40e7-a67f-aea29ee37bc1"
        },
        "item": {
          "id": "3fd6942e-76ed-4bb3-b0d7-57bc826f15e3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "edd833fb-3c38-4807-adc1-24b990646605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db54be4-7b0c-4f5d-a46a-e2f08306b6d2",
        "cursor": {
          "ref": "af7e1886-e443-4aac-bae0-bbb4937e2185",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "048c1fbf-62ca-4248-8c30-10835968a4c0"
        },
        "item": {
          "id": "1db54be4-7b0c-4f5d-a46a-e2f08306b6d2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2d6f6c52-13c9-4eb7-93f0-fbac2301f869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832070bf-3c3a-43a0-be1c-54272f89f224",
        "cursor": {
          "ref": "ce41a409-1737-4704-8558-02a0b97217b4",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0c6a1c47-78af-4006-b6a4-ebd98290a734"
        },
        "item": {
          "id": "832070bf-3c3a-43a0-be1c-54272f89f224",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b8688d16-deb4-453c-abfc-d51daf0d0fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b55aa2-6e77-447d-be18-14c48b262713",
        "cursor": {
          "ref": "0b60e3ec-38c4-4e72-8f6f-88b80b506cb2",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "89a152d9-58fa-44c2-9ad5-1f3afe700c64"
        },
        "item": {
          "id": "f8b55aa2-6e77-447d-be18-14c48b262713",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a8cc1b40-917d-43f4-a1b2-fccd7292b9da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295642e2-ff15-4c89-9355-a4ca0e005910",
        "cursor": {
          "ref": "8adb1f23-c5ad-4c7f-a041-35b48f749fa2",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "381e0e87-deb6-4572-b206-2f302429d7e7"
        },
        "item": {
          "id": "295642e2-ff15-4c89-9355-a4ca0e005910",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e1741db5-af50-4740-9e97-78839fdff8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4892f37c-7e7d-467b-b525-95d9c13b00f0",
        "cursor": {
          "ref": "f363149b-492b-4ab7-a4e5-fcc86ff6efe5",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "57652401-f65b-415b-90df-8240145aeec4"
        },
        "item": {
          "id": "4892f37c-7e7d-467b-b525-95d9c13b00f0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a730d7b3-276f-459f-9f89-1bd86abbb64a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05df5b27-7cbc-409d-b73d-6bd11e75944e",
        "cursor": {
          "ref": "5a9e1548-3980-4bfc-8717-176e2e1ea1cb",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "727c9853-3f58-48fd-901b-563c4ac2d245"
        },
        "item": {
          "id": "05df5b27-7cbc-409d-b73d-6bd11e75944e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1ee4e92a-21bb-4fc2-a5ec-f3bbc52104b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f80f72-3955-4248-b074-743cda52cbdb",
        "cursor": {
          "ref": "590a6fe3-c2df-4212-ade6-8383e85f38c7",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "150fb9cf-aecb-4463-80f2-8afb2863b1db"
        },
        "item": {
          "id": "53f80f72-3955-4248-b074-743cda52cbdb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f3fd5b88-aadb-499c-a664-1a46ca173517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afadec4-75be-4923-9168-4484154c0eba",
        "cursor": {
          "ref": "2a876c18-c5f5-4707-9f2d-841868753694",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bc7b01fd-7bac-4321-ae7e-2a77ee3bd3e6"
        },
        "item": {
          "id": "8afadec4-75be-4923-9168-4484154c0eba",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2b4d8c76-e9ac-47ef-917d-5a06b0cc43d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a743f026-69a2-4b93-9ac7-f997e7e338be",
        "cursor": {
          "ref": "ef7a1197-e07d-4fa9-aa46-61d2278f55cf",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b5351590-7162-43fe-9956-4b40d6c1b1b9"
        },
        "item": {
          "id": "a743f026-69a2-4b93-9ac7-f997e7e338be",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "789eb3d2-796c-4a40-a88b-885f41d7453c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133b5fb5-4f46-4ee2-ad87-cfa17f89e083",
        "cursor": {
          "ref": "288081e6-b1b3-4d93-9a4f-6d92bec1b87f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4950e7de-1cf7-4c06-9484-c81747541b46"
        },
        "item": {
          "id": "133b5fb5-4f46-4ee2-ad87-cfa17f89e083",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e2bd8f46-f28f-4365-af74-078a5b869e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045a797d-e71b-4a3a-bee7-0382910c7332",
        "cursor": {
          "ref": "aaf6e8ed-6653-484b-be6e-50aafbd18d60",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c3e975f3-74ee-4326-a778-fa734188fc0a"
        },
        "item": {
          "id": "045a797d-e71b-4a3a-bee7-0382910c7332",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0811ba10-635f-4f71-8e65-da55a775486b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b90045-a4bc-42b1-88a3-d7a01964b23e",
        "cursor": {
          "ref": "4e32e42c-361f-43ca-a514-ae852ae83c36",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "cc5e41e6-cd4a-4497-9197-e9d3bd20ddf4"
        },
        "item": {
          "id": "91b90045-a4bc-42b1-88a3-d7a01964b23e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "851b3e08-1485-431e-97d0-21bd2e3d6115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fc1dba-0c68-4c8c-85c1-751672d02c03",
        "cursor": {
          "ref": "2425968d-cd61-45d2-b877-bb88985772ae",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "effba52d-bc94-4ce5-a9d6-2ba23d308606"
        },
        "item": {
          "id": "10fc1dba-0c68-4c8c-85c1-751672d02c03",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a5f96c9d-69eb-497c-a1fc-821dbcc3b29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0b6ce2-cc01-42c6-b9e6-a86419d756f1",
        "cursor": {
          "ref": "8e736106-f9ab-4594-9c0d-ba2215a3acdb",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e1bdb3e8-c512-4bd4-9427-6ac8c0847cc3"
        },
        "item": {
          "id": "8e0b6ce2-cc01-42c6-b9e6-a86419d756f1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5be5ac92-7ddb-43c8-a1da-d8381c98c847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31daa9f9-8124-415f-9c3c-f094e829d4d2",
        "cursor": {
          "ref": "09a12a74-f1a4-46d1-a9fb-e2956982f60a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9db79c86-3f0c-4d99-81a2-79b46c73e212"
        },
        "item": {
          "id": "31daa9f9-8124-415f-9c3c-f094e829d4d2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8abd68f9-c5d1-4e16-a045-ccf5a834a0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f21454-389c-496e-8ce4-c228e59ead57",
        "cursor": {
          "ref": "b98c82b0-44fc-480e-8633-e4c076e8fc63",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5cfa2941-cedf-4b22-a643-3d1fecbb99d3"
        },
        "item": {
          "id": "f7f21454-389c-496e-8ce4-c228e59ead57",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d0fc2d62-bd6f-4aad-ba29-811045462f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3251a292-3768-4557-9b7c-e61846d27f40",
        "cursor": {
          "ref": "044e4f1c-7dcb-4edf-a958-68de381066e5",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "922f18f4-c146-4f52-95e6-0e84d07dd062"
        },
        "item": {
          "id": "3251a292-3768-4557-9b7c-e61846d27f40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c55820d7-e263-4910-8e12-baf0c6cfc8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aeedc4-2bbf-42c2-8a2e-260ebd081fda",
        "cursor": {
          "ref": "201b71de-0db6-4f90-b887-5badf2a19d89",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "696ab9d1-e5a1-46e3-bdfa-e3e189db5f0a"
        },
        "item": {
          "id": "97aeedc4-2bbf-42c2-8a2e-260ebd081fda",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ccb75cef-a85d-44a4-9602-c1ef5224bc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5c5c79-eedd-47b9-92c8-22d8981553f2",
        "cursor": {
          "ref": "946cd734-ba2e-4b81-b4b6-83ba141c022a",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ab27e591-14bb-478f-9ef9-96d30c92c717"
        },
        "item": {
          "id": "2d5c5c79-eedd-47b9-92c8-22d8981553f2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "38365f4f-14f5-4c41-93bc-9baa144ec3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2c6865-ace1-4a9c-a1f6-4a33557b8b09",
        "cursor": {
          "ref": "07edd0f4-75f3-4fae-9e0f-92e124e420f6",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "897cb446-4ff8-418c-bb47-a37e8011ebb0"
        },
        "item": {
          "id": "cd2c6865-ace1-4a9c-a1f6-4a33557b8b09",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "79023b05-e788-4ee2-b97f-046d23bf1060",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "420432f8-bbb2-4b57-b615-17b76fa15b19",
        "cursor": {
          "ref": "a8076fcb-c695-4c92-84a9-3436f280d789",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3241144c-d8d6-45d0-9e78-f5eb4968069a"
        },
        "item": {
          "id": "420432f8-bbb2-4b57-b615-17b76fa15b19",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bd92cd6e-ff5c-4689-ad6d-3e386f2c453e",
          "status": "Created",
          "code": 201,
          "responseTime": 2504,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "335aba7f-bc3d-43c1-aed3-1ef42b307864",
        "cursor": {
          "ref": "79dfacec-29bf-4e21-83cc-9fb963273bce",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "90d27e4a-8cc6-4332-8bd7-523c0eb38cc5"
        },
        "item": {
          "id": "335aba7f-bc3d-43c1-aed3-1ef42b307864",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9cb32e8d-47fa-4056-8caf-78607a916ff8",
          "status": "Created",
          "code": 201,
          "responseTime": 2561,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39127c-07c9-43ac-a0af-c8a02eba40e8",
        "cursor": {
          "ref": "f81152ea-9399-4efe-8aa9-f1ede29159bd",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5729f9a3-c073-42af-9c49-f17ca573af82"
        },
        "item": {
          "id": "5b39127c-07c9-43ac-a0af-c8a02eba40e8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6d131375-a5ad-49f9-8f9d-54ddd26de159",
          "status": "Created",
          "code": 201,
          "responseTime": 2602,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "764e07ed-1a11-4123-a655-c450057635a7",
        "cursor": {
          "ref": "a67a29f6-f5bf-4fb0-96f5-a90a29b44db9",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "247c24d0-3bd2-4cdf-9868-e19adf850e52"
        },
        "item": {
          "id": "764e07ed-1a11-4123-a655-c450057635a7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f21720df-74f0-4483-b552-2a36964da31c",
          "status": "Created",
          "code": 201,
          "responseTime": 2841,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4711ed85-a946-488e-91fe-fe19ab54ad9c",
        "cursor": {
          "ref": "f318fe31-64e9-4a2b-9d7f-37c970b5b4d4",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0b4af658-cd8b-491e-b84a-a1368a5c499f"
        },
        "item": {
          "id": "4711ed85-a946-488e-91fe-fe19ab54ad9c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3521ee57-1f29-4476-8c3b-5d7c3236fa66",
          "status": "Created",
          "code": 201,
          "responseTime": 2745,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-30T00:45:23Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-30T00:45:23Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "875dc227-f06b-4c27-8a24-4b8317b88cb6",
        "cursor": {
          "ref": "eb08b8a5-7309-49a1-8d4a-2a1b5999eacc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "df4c272a-255b-4412-9ce0-bc37db88ce6e"
        },
        "item": {
          "id": "875dc227-f06b-4c27-8a24-4b8317b88cb6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a35ad539-30e1-4b45-89fa-cdad15270dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c647d846-8c05-40c3-b28a-6d41886947d6",
        "cursor": {
          "ref": "60214a58-c970-4f60-acb2-db593b9c7375",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "50a24af1-9699-4633-ae09-8a9047425fdb"
        },
        "item": {
          "id": "c647d846-8c05-40c3-b28a-6d41886947d6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dd038108-bf4b-4512-a9f3-dbd372da5bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70aae862-cade-4ce1-af71-6ee084b3d10f",
        "cursor": {
          "ref": "b39b9aff-0b73-4ee5-a1b2-a195a590c38c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cda6a98d-5b9c-4598-ab3d-98fecaae8c19"
        },
        "item": {
          "id": "70aae862-cade-4ce1-af71-6ee084b3d10f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "809fdf40-e1ca-4f48-8c02-1ddda2998011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae110cbf-bc3a-47f2-b3cb-08ef356c3aca",
        "cursor": {
          "ref": "d457b4db-d128-4fe4-866f-180322e1203d",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "67c12ca3-e4a1-430f-a212-c80aa9707048"
        },
        "item": {
          "id": "ae110cbf-bc3a-47f2-b3cb-08ef356c3aca",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5338773e-270c-4af9-8d88-e853e69d0801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64a4a5b-bd50-42b8-b8d5-4a8cd6a29388",
        "cursor": {
          "ref": "72f8ff62-4246-41ab-880a-cd1c78bbd576",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3783b26c-5666-4bcc-af1e-a0122e65f453"
        },
        "item": {
          "id": "b64a4a5b-bd50-42b8-b8d5-4a8cd6a29388",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e8ee0635-a65f-4465-a9c6-db0fb481a3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95d0d08-64a7-44ce-814c-466ea2160e31",
        "cursor": {
          "ref": "d18e1c77-ab51-428e-b95c-3913652609d3",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d98d9cea-221e-48f8-b0ae-251fad4c1747"
        },
        "item": {
          "id": "b95d0d08-64a7-44ce-814c-466ea2160e31",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fd8b40b6-d342-4258-9a76-675a80312425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5ea17a-0277-42f0-b97a-f0264decf6c9",
        "cursor": {
          "ref": "e3a50282-a2d4-424e-93f8-1b24446a45c8",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "49a9460a-eea9-4efe-89f3-2ffd1462dff5"
        },
        "item": {
          "id": "4c5ea17a-0277-42f0-b97a-f0264decf6c9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6fa38581-6c55-443b-8632-dfeae72499ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b026c6-f4a4-45ee-bbd3-5c9b0db0bea8",
        "cursor": {
          "ref": "21a6b713-10a3-46d1-a088-53f4fdb378c3",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ef0a96a6-5f1b-46a6-adbf-fc1911dc17ea"
        },
        "item": {
          "id": "02b026c6-f4a4-45ee-bbd3-5c9b0db0bea8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1780a389-c9c1-4502-bfe6-f56fed344d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273d6267-b523-4d2e-8678-0f0c1bb599f1",
        "cursor": {
          "ref": "db830900-cd2b-49b7-9e62-6cfd6b3f1d36",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8d81bda3-9ade-416d-9d42-99253385f224"
        },
        "item": {
          "id": "273d6267-b523-4d2e-8678-0f0c1bb599f1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a3c4f12e-fc6d-46c2-9569-f602382345e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1117093-441a-4240-871b-846a3b66033d",
        "cursor": {
          "ref": "c55ce527-472e-4549-858b-c5860adef64d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "50b3c76f-fe63-4a4f-9113-3d91da4ae48b"
        },
        "item": {
          "id": "a1117093-441a-4240-871b-846a3b66033d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e12b97f3-b3ab-4441-8562-40e2c4b7295a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747a7f6f-b4bd-42f2-964b-fc5d69ca4c8a",
        "cursor": {
          "ref": "ac84c68c-d226-4b73-be83-cc777e7b17f4",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "eadb1266-372f-4d50-b3e8-dd54cc8c0ae8"
        },
        "item": {
          "id": "747a7f6f-b4bd-42f2-964b-fc5d69ca4c8a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b37b6d99-5c0a-4604-951d-12e4045b31c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5398cc3c-017c-40a4-9ec3-18a3d551eb60",
        "cursor": {
          "ref": "bee1b9de-bde3-4c07-becb-7d5b506f9c8f",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fcc45f48-ed80-4955-89a4-1064f552ec82"
        },
        "item": {
          "id": "5398cc3c-017c-40a4-9ec3-18a3d551eb60",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e98eb773-c195-4873-9fb5-4a3defa57b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416001fa-1ffa-47a0-ad59-f5933d5a6ab9",
        "cursor": {
          "ref": "5b5fa5a6-dc99-4edf-a427-07f5dcceef39",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48d5db43-7b63-4fa7-8721-d388e083cd55"
        },
        "item": {
          "id": "416001fa-1ffa-47a0-ad59-f5933d5a6ab9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "32c5e3fd-8df4-4877-8c23-2addbd1a7bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46feaf06-37f3-4457-8cc9-cf4d36036bd0",
        "cursor": {
          "ref": "ddeda91b-3f36-45dc-a46f-27abcfe397a2",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b9796d7b-21ea-4a55-b495-c7ef12beb539"
        },
        "item": {
          "id": "46feaf06-37f3-4457-8cc9-cf4d36036bd0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e9a688ba-2a9f-44d7-a105-16ce5244b658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ae2cfb-d7d9-4326-9d9a-aae284106511",
        "cursor": {
          "ref": "b2839552-c808-45d9-913c-e5de5a6be364",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "042c30ce-5049-4e74-8a3b-dd90cb192ad8"
        },
        "item": {
          "id": "18ae2cfb-d7d9-4326-9d9a-aae284106511",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0bebc8db-4951-4cd9-927e-9f7ba0eed1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00b6221-7f8e-435f-956b-f9205bdda31b",
        "cursor": {
          "ref": "39b13420-05d3-4e7c-966d-7a965fe25bac",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "847eaf51-b183-4205-b6f7-554e29419af3"
        },
        "item": {
          "id": "f00b6221-7f8e-435f-956b-f9205bdda31b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "803d6176-c90d-45dc-bcba-d422bb08d98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c8b596-3e2d-4043-a83c-8cd74d1c082e",
        "cursor": {
          "ref": "d77a1e18-201e-4525-bc07-711343534a8e",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0287f71c-c14f-4574-b27f-e876081ba9e7"
        },
        "item": {
          "id": "39c8b596-3e2d-4043-a83c-8cd74d1c082e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dbf7310b-1a29-41c6-aada-5b438329124d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6ac6cf-c07c-40fa-acab-2702936d4177",
        "cursor": {
          "ref": "20e2c2ff-e740-4910-b200-99e5345e3569",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f0003754-347c-46fd-9044-41c5936a9214"
        },
        "item": {
          "id": "0a6ac6cf-c07c-40fa-acab-2702936d4177",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bdffa6b9-02d7-40e9-9be7-565b3916ab7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb079bba-2fe8-49bb-b233-6411408dcfbb",
        "cursor": {
          "ref": "667fe0fd-6684-44b8-ac96-edabcf3c6066",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e0557bbd-90d2-4cb7-a518-2b526e6017df"
        },
        "item": {
          "id": "bb079bba-2fe8-49bb-b233-6411408dcfbb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d370f186-2974-4e44-9b6b-675ae1f7136f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00561c9c-8108-4c28-81a2-f53409f0587d",
        "cursor": {
          "ref": "e256da50-402e-455d-8ada-8baf1e4e210f",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7220adf4-b344-4763-aad1-73c632a3eb60"
        },
        "item": {
          "id": "00561c9c-8108-4c28-81a2-f53409f0587d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "05f466db-5e52-4fec-aea9-5f1b117eeeaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd92aa-dc25-4a17-ba68-f5e79dc9a631",
        "cursor": {
          "ref": "0389b85c-ff3e-4393-9a87-c53cbec0f28b",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "55054095-538a-45e5-a4ae-6276becde3a9"
        },
        "item": {
          "id": "29fd92aa-dc25-4a17-ba68-f5e79dc9a631",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "379c27f6-045f-4467-985a-4830df84410d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5d98f6-9ce8-4471-98f7-aea20632179e",
        "cursor": {
          "ref": "928e06e2-17b1-4efa-9c15-ff2691a1830d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "52ac8718-6c92-4a46-a126-48fb80603f1d"
        },
        "item": {
          "id": "3b5d98f6-9ce8-4471-98f7-aea20632179e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2e540cf1-7634-4cd0-90ef-3334b86788ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2f8843-b9ee-4592-9a82-1803dc5d9d3f",
        "cursor": {
          "ref": "5f623fa4-223f-4b69-9994-ac388da7e7e9",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bfc4782d-f821-4b78-85a6-d99efc6f739d"
        },
        "item": {
          "id": "fb2f8843-b9ee-4592-9a82-1803dc5d9d3f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d63b1774-482e-4e2f-b13a-5593c53eb451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a3b3d8-962e-4d4e-9476-11730c7f9ff6",
        "cursor": {
          "ref": "be9902a8-e3a0-4886-997e-50f429947126",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2f1ea413-ed97-44ca-bf20-83bbaff0ec78"
        },
        "item": {
          "id": "f6a3b3d8-962e-4d4e-9476-11730c7f9ff6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "17abd87e-498c-4f78-bf2b-e9f913a12e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d75afa7-be95-4978-8459-a340f71ce457",
        "cursor": {
          "ref": "7d81edf4-2074-4772-97c3-ea61cb75541c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e83f6565-d861-406c-8477-a2a33cf020d0"
        },
        "item": {
          "id": "4d75afa7-be95-4978-8459-a340f71ce457",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "86c73891-1789-45ad-b17c-f91d94256975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4295310-650c-4df4-afed-deca7ef68099",
        "cursor": {
          "ref": "415444aa-4d56-444d-a3fb-a091186bed1b",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4c11deeb-4b05-46d4-82c1-b94897f825b5"
        },
        "item": {
          "id": "c4295310-650c-4df4-afed-deca7ef68099",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "abb17278-f575-4b7e-a391-7dc6f4448b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26750ad7-72ae-4252-b158-7a911c687135",
        "cursor": {
          "ref": "1b7a9d89-f3a5-4d3e-b0ba-e87cd5b097d9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6e6218e6-9c7c-4a03-baf5-873dfbb91508"
        },
        "item": {
          "id": "26750ad7-72ae-4252-b158-7a911c687135",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a0f5ce56-5746-4161-840f-367fdc8dc44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4e939a-075a-424e-ae76-fc108100344b",
        "cursor": {
          "ref": "deb78967-aa78-40b4-94d1-4c0b4031c42d",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3792112f-8cfe-49ba-8591-6e7fd1ed4772"
        },
        "item": {
          "id": "ff4e939a-075a-424e-ae76-fc108100344b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "befc87f5-c55d-4ba6-8714-4d98dbcaa171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b340035-bf33-4453-9a48-c877ef5135c2",
        "cursor": {
          "ref": "d1649e89-f982-44f1-906c-99d7b072b758",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f5c0e622-4773-4d88-ad36-8385f0d5fecb"
        },
        "item": {
          "id": "2b340035-bf33-4453-9a48-c877ef5135c2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0493c93b-b385-48bc-940e-1bf3f7390221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f6c334-8b3f-4ce1-a00f-02d3afa53a30",
        "cursor": {
          "ref": "c3a955e2-cb3b-40e9-aa31-bb2d50c02292",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "878f5d2d-eda2-4a4f-924c-f7662272b0c7"
        },
        "item": {
          "id": "85f6c334-8b3f-4ce1-a00f-02d3afa53a30",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c040ab2b-52ba-437c-aebe-f28e2e70141a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6b7553-a54b-498b-a368-bb8c32f3a888",
        "cursor": {
          "ref": "611f64d3-00be-4b20-8575-877410b4e821",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "df188487-51ba-4f3d-9583-9c1addfafeac"
        },
        "item": {
          "id": "7a6b7553-a54b-498b-a368-bb8c32f3a888",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "229efc85-b354-415c-9876-1eb87e59c4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d706cb-3bbe-4d10-9b1c-e7ade563c461",
        "cursor": {
          "ref": "ec7d3cc2-f748-4d0e-8cc0-6c29314f43e6",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ac488170-b3f2-4ec4-9386-d9b2c026ea3d"
        },
        "item": {
          "id": "80d706cb-3bbe-4d10-9b1c-e7ade563c461",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "846ae082-5d6d-4e89-9a40-c9b99736b992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b701380d-f0ac-4cdd-9b42-ccb3f1f90626",
        "cursor": {
          "ref": "1def68a6-2266-4a6f-bf1c-9b83eb4d4552",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "61451ddf-c514-41f9-af8b-a5c5435fb64a"
        },
        "item": {
          "id": "b701380d-f0ac-4cdd-9b42-ccb3f1f90626",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c2ee0f19-93b1-4841-99ee-ee2f924f53c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdcbab7-64d4-48d7-95f8-45ddbb63b395",
        "cursor": {
          "ref": "dc83723a-22a0-4bdf-8f7d-76231115f140",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0e6b78b1-d566-4fa7-955c-ac36453a66c8"
        },
        "item": {
          "id": "3cdcbab7-64d4-48d7-95f8-45ddbb63b395",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "960f1379-0dfe-4e79-8d18-f8bdcaedd981",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "eb832e8b-3822-49be-9757-a552dd86f8f6",
        "cursor": {
          "ref": "5e44f645-0e4c-4a1a-bb55-a8e25ab2d226",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "57941455-93de-4a08-98df-c551f8750f42"
        },
        "item": {
          "id": "eb832e8b-3822-49be-9757-a552dd86f8f6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "79c2795c-56c5-4c5d-b53b-140ca3a71c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7102d21-2245-4cea-a088-1675fe6555ed",
        "cursor": {
          "ref": "5e6352b5-2d40-428f-a8f2-e82ec876a924",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "29399c61-720c-4667-8759-352b16f7c366"
        },
        "item": {
          "id": "c7102d21-2245-4cea-a088-1675fe6555ed",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1bb23b13-0eeb-45bd-bdce-89d2e2a1b2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603aa0bb-3ce9-4763-aa65-d15258b91c5c",
        "cursor": {
          "ref": "27151e37-9acc-4564-b4c0-68f53b77b29d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0e244dcf-e3e8-404f-a5f9-575a6dbff798"
        },
        "item": {
          "id": "603aa0bb-3ce9-4763-aa65-d15258b91c5c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1a7ff55c-b621-40d4-8bbf-2dc17d991b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f07bc4-04ec-4fa0-994d-bc4ddabdbfdc",
        "cursor": {
          "ref": "62680875-baca-4fa2-945c-326a3395a12d",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "36626bce-7616-41fa-ae96-c4d3de391117"
        },
        "item": {
          "id": "95f07bc4-04ec-4fa0-994d-bc4ddabdbfdc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a3f2b36e-0dac-4636-ba3a-f1c7d6f2727a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571a315d-3ec6-46c7-a0a5-b3e15e49028a",
        "cursor": {
          "ref": "451f0e1f-ebcf-4d21-ac0c-320bea4c77bc",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "32a91ef5-ed2a-41fa-a006-68b4c9a536b4"
        },
        "item": {
          "id": "571a315d-3ec6-46c7-a0a5-b3e15e49028a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9f301e44-12d9-41bb-8663-dcf0c359df04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba4e35a-2c82-4263-a56f-2ba4f5238854",
        "cursor": {
          "ref": "0038774c-f3c3-4fa8-a750-ca909bcd1d0a",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b3c50aa6-7731-4f0f-8f22-6c70d58aa339"
        },
        "item": {
          "id": "aba4e35a-2c82-4263-a56f-2ba4f5238854",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c5c30850-65e1-461c-af3a-4f4f7e54090d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a97976-5db1-4794-9b78-68117da98f07",
        "cursor": {
          "ref": "e0bafdaf-d60f-454e-86d5-d0f812962075",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b7993b52-c599-4428-8318-4b1cfd7379a2"
        },
        "item": {
          "id": "e7a97976-5db1-4794-9b78-68117da98f07",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a32e85b1-5990-4a13-80ed-b747617436fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd167894-d528-48d0-b6a5-22abd9aaa593",
        "cursor": {
          "ref": "87b25be3-0943-4083-aef9-a7e3155ceec2",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "764e1c7b-53f2-41f7-b0e5-9344225ec652"
        },
        "item": {
          "id": "fd167894-d528-48d0-b6a5-22abd9aaa593",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0bd5e90c-163f-4766-8fd5-76da52916407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b48552-aee8-4395-9465-5b6c60b77568",
        "cursor": {
          "ref": "ac21c9ee-dee8-41ad-80a3-9fc5d3ec1b08",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a3015338-7e6b-43d4-b6b6-46a42bb66bf3"
        },
        "item": {
          "id": "12b48552-aee8-4395-9465-5b6c60b77568",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b5855d1e-67ea-4dcd-9ebb-2cf0add5e2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22890fb8-41aa-4c68-b81e-47a5d4ff0a3c",
        "cursor": {
          "ref": "3356a6e0-3ee2-431f-b351-a6cba9b7655d",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b8ead928-1b66-4e21-9e60-14f6d8e48e8d"
        },
        "item": {
          "id": "22890fb8-41aa-4c68-b81e-47a5d4ff0a3c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b6ea5baa-d3e0-4e14-88b0-fb5c94b60d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a7d681-a5bb-4a0d-a96c-d2a3b7f98292",
        "cursor": {
          "ref": "770bd687-d1bf-43dc-9dc0-37f454a65098",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e32285fe-a999-4bd6-8b43-b0f8fa4b2194"
        },
        "item": {
          "id": "23a7d681-a5bb-4a0d-a96c-d2a3b7f98292",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "046b3fc1-dfc0-46b8-8bd6-09ad5ffbdb3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886c6861-f9c1-4fa9-98b5-c251c0f97734",
        "cursor": {
          "ref": "96be9baa-0309-400a-b5dc-e7cc4e594c23",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a6e7a4d3-9e02-4437-8da3-b41687adf0f6"
        },
        "item": {
          "id": "886c6861-f9c1-4fa9-98b5-c251c0f97734",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4be06837-a9b6-4018-94ba-5fc31792d0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bba6f8-4ce5-48e7-b3f9-2d7de5ac4549",
        "cursor": {
          "ref": "99dd1bbb-d10b-4b88-9c18-38cb2c407edc",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "01da73c1-5285-4e7b-b6e5-93b055e021d8"
        },
        "item": {
          "id": "a5bba6f8-4ce5-48e7-b3f9-2d7de5ac4549",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "64c3731b-5ca7-49e6-a28d-a4eefca7e0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0583912-1608-4166-9534-941085efbf78",
        "cursor": {
          "ref": "8fc4cf4d-b56b-41ac-95fd-bb9be76c732e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c8b6c4a0-9c0e-45ad-b226-2b4b4ac18d35"
        },
        "item": {
          "id": "b0583912-1608-4166-9534-941085efbf78",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d4ed3a65-c8b4-42f8-b075-f7ac413b079d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d07d582-1e7b-44b1-b945-6d60a99fbcfe",
        "cursor": {
          "ref": "874a9886-8f8a-462e-b12a-ff03f6a941ef",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7d9c5eab-9a2f-4f0b-84c7-6eb5e01b942c"
        },
        "item": {
          "id": "7d07d582-1e7b-44b1-b945-6d60a99fbcfe",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "708e7cf9-df12-4036-af7b-d087d3d1479f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4272bbd8-a835-49a2-9a64-159bb02330c5",
        "cursor": {
          "ref": "e1ebb111-60de-4f7c-b47b-80dcf029de6a",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "67e73e42-dd6a-44a0-9265-2eb8aca8f74b"
        },
        "item": {
          "id": "4272bbd8-a835-49a2-9a64-159bb02330c5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "89305d30-2067-4440-99fa-0ba741907ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27365f57-7653-4bf5-93dd-7739d4cc3791",
        "cursor": {
          "ref": "307518b5-10d8-43bb-ac6a-99d57a3b3b62",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "96769e21-3500-427d-a1b6-e850ace82a06"
        },
        "item": {
          "id": "27365f57-7653-4bf5-93dd-7739d4cc3791",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c17923bf-f745-4cae-bb26-7126fa200e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57834562-1205-469f-9792-cc23a7c1a70a",
        "cursor": {
          "ref": "0885d3a3-5dca-41b2-a061-d79933d8f018",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b034f019-e4c9-45cf-8d8d-4c9c6a306060"
        },
        "item": {
          "id": "57834562-1205-469f-9792-cc23a7c1a70a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0f32df76-4ba2-4592-943d-b25587dcc681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b145a7-7cb9-4cc2-b549-c2802a129694",
        "cursor": {
          "ref": "a0fb9a44-ce2f-4555-9c5c-ba4590cefd38",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "31318731-7853-4850-92d4-c42b94998803"
        },
        "item": {
          "id": "59b145a7-7cb9-4cc2-b549-c2802a129694",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6d47bb31-6cf3-41f1-a04e-7566571510ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161355e1-360c-40c6-b64d-d3238d47d7d6",
        "cursor": {
          "ref": "f7cd44a7-ecee-4653-a0bc-c43773fcdb00",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ced7ef21-f1b9-4a99-8da0-3e15507d8bc6"
        },
        "item": {
          "id": "161355e1-360c-40c6-b64d-d3238d47d7d6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a4494742-de11-4d79-a6eb-1ca13772cdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78bc71d-59ba-470f-b8bd-add2654f651c",
        "cursor": {
          "ref": "642a17d8-edd5-44f5-befd-23c04a1ebd7a",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "48e933f0-4660-45ef-9227-6271a3cbee0f"
        },
        "item": {
          "id": "d78bc71d-59ba-470f-b8bd-add2654f651c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8760127b-0eab-4896-b7e0-734076a43d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15493e76-f594-400c-819a-2432ddc121c0",
        "cursor": {
          "ref": "77c5cf89-583b-47c6-bf17-a2a7329eaaa0",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "16c96439-a91f-47d7-a062-8474088d0272"
        },
        "item": {
          "id": "15493e76-f594-400c-819a-2432ddc121c0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "16075da7-e2de-464b-bda8-bb447a788f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c9ec1b-1284-4086-8e1e-d1be18cfbc23",
        "cursor": {
          "ref": "497372bc-595b-45b4-a363-6968c511ed9e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "34ffdb1c-b7e0-4729-bd8c-c2827bf20c63"
        },
        "item": {
          "id": "f2c9ec1b-1284-4086-8e1e-d1be18cfbc23",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "08dd8fbc-cba3-497d-a2c6-542e0c740376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541766f2-db30-4c65-ba90-b1eed4755a2e",
        "cursor": {
          "ref": "ae3cd778-8185-4d0d-9c09-b25989b13eb4",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4ed4514c-dcfc-4473-bbea-d29d4ceeeb41"
        },
        "item": {
          "id": "541766f2-db30-4c65-ba90-b1eed4755a2e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "62682022-33ef-47f0-94b1-180669df3d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f66f615-6fbd-4696-a64e-8e01e166ce2d",
        "cursor": {
          "ref": "39720322-6ad3-4ee4-9240-0ea00b355c34",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d974d547-5851-4c17-a36b-79bec8d9158f"
        },
        "item": {
          "id": "2f66f615-6fbd-4696-a64e-8e01e166ce2d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3f41c559-45fe-467e-bd10-2cf77b83163f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7104c1ec-031e-4667-a99f-364552b6a75c",
        "cursor": {
          "ref": "9067f63a-c994-4b6d-95ab-6e03163110b3",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "23e2fb12-3f5b-42e3-be88-0af09c29c250"
        },
        "item": {
          "id": "7104c1ec-031e-4667-a99f-364552b6a75c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4cbd862f-dd24-429e-8fe1-71f4866f9c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b550435f-4121-4a0a-933f-3a57db805cc0",
        "cursor": {
          "ref": "82043e64-b32e-48a2-b8d2-de9aabae2594",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "78b2e8fc-3869-4a86-969e-2443b35f2b64"
        },
        "item": {
          "id": "b550435f-4121-4a0a-933f-3a57db805cc0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a23d8e7-178f-4a14-9cad-b8b787bce85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33326d0-a9c5-4878-a303-7d38d13d995c",
        "cursor": {
          "ref": "c3430f77-6119-440a-8dea-5128b709ba98",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f0dcbcd1-b8b3-49c8-9d97-537cc4151605"
        },
        "item": {
          "id": "d33326d0-a9c5-4878-a303-7d38d13d995c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f91f6c34-c9d5-4209-b14b-69db21b6c1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534be35f-f22c-4594-9f03-8823cfee7da4",
        "cursor": {
          "ref": "7b714ac4-f1fe-48ee-9797-763d944e94db",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a5ef6956-97a8-4a7e-b0a1-26aef5463085"
        },
        "item": {
          "id": "534be35f-f22c-4594-9f03-8823cfee7da4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "efcec5ac-786c-4c4f-a604-6a763e2053ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4835c12a-94e6-42ab-9aa1-68f68e724dc6",
        "cursor": {
          "ref": "b3738427-c288-4809-aced-5ebf203f42dd",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f046d729-8379-4cb0-a306-eedc228e4fa9"
        },
        "item": {
          "id": "4835c12a-94e6-42ab-9aa1-68f68e724dc6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c362ded-32c6-4cfe-9b1c-0a298f64f003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f46dab-6948-4bce-aa58-41da0ef451f4",
        "cursor": {
          "ref": "b2fc2cd2-8d1c-44ca-a629-89009d2e6d9b",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b7d4d2e0-15ac-468a-8e0a-7d30472b96be"
        },
        "item": {
          "id": "01f46dab-6948-4bce-aa58-41da0ef451f4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "726ac8bc-5d5e-416f-8d62-5475acf38bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadd15dd-f444-48f8-b143-b46e1b5079c3",
        "cursor": {
          "ref": "c76d3f92-d4b4-49f5-9e4d-3e6d64222b98",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c228b9e3-0d86-46c5-b5d8-2a905665decc"
        },
        "item": {
          "id": "fadd15dd-f444-48f8-b143-b46e1b5079c3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ca0daffd-4b55-425d-8db1-8660000f649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbba8da-11cc-4957-9ad3-4baad27d162c",
        "cursor": {
          "ref": "bacbb8fd-3978-4437-bcfb-299571974149",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4e914e38-bb82-4c67-9285-cbf00671ea3b"
        },
        "item": {
          "id": "3bbba8da-11cc-4957-9ad3-4baad27d162c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ce54858b-d58b-47a1-8249-af1daa69fdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78687e5c-0587-4bed-a74e-c50acc1bc1c1",
        "cursor": {
          "ref": "9bad1f8b-8048-4bfe-8755-b69654a0a51d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f1169585-e446-465b-bdc0-9b795bb0ba3e"
        },
        "item": {
          "id": "78687e5c-0587-4bed-a74e-c50acc1bc1c1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "36ed801b-c918-4083-8ac8-b333c4d9375d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ddd1bb-b68c-4a75-aee7-c8eadae3879a",
        "cursor": {
          "ref": "5b3d82e4-47b9-407c-98a4-859199af05b4",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "afff67ea-6c3e-49fa-9f34-e268f5a5f22c"
        },
        "item": {
          "id": "f6ddd1bb-b68c-4a75-aee7-c8eadae3879a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5f29b0ff-d262-4b44-91c4-94b1a09d665c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b68e9e1-b03f-4c6f-95e9-7967ff997b62",
        "cursor": {
          "ref": "695cf3f8-c03e-4afc-88e6-b0ae8e781587",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "33fd04d4-a0cb-4e41-98ef-cda6d12f5db7"
        },
        "item": {
          "id": "7b68e9e1-b03f-4c6f-95e9-7967ff997b62",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b7eebff7-55e8-491d-bc87-a5115fd36940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103f4f70-a144-4d30-8071-3d3bda512a4f",
        "cursor": {
          "ref": "462b52b9-6126-48d3-a84d-559786743993",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ab0c5ac1-3d79-49f5-9022-5a2221f738d6"
        },
        "item": {
          "id": "103f4f70-a144-4d30-8071-3d3bda512a4f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "84f7fdab-0f02-4256-8506-053b58f84528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c26d85-dfa2-42e6-9ae5-479735fd0f9d",
        "cursor": {
          "ref": "579a2ecb-187e-4b1f-9a7d-3fe53c0b0976",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0663a901-3a08-4287-9730-9ec600882bb7"
        },
        "item": {
          "id": "07c26d85-dfa2-42e6-9ae5-479735fd0f9d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7ba95bed-b7f1-4612-9384-4c443b4df115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "7a5cfdd4-a2ee-4def-ba2d-3e35106db9bc",
        "cursor": {
          "ref": "5f6d7736-1a5e-4554-a218-11ab89426147",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "33578382-d102-455b-b521-64822db0295e"
        },
        "item": {
          "id": "7a5cfdd4-a2ee-4def-ba2d-3e35106db9bc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ae850cd4-569c-4543-aa25-e714b8f1285a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ba95e1-1f69-4665-a1ed-e7a982517be6",
        "cursor": {
          "ref": "11f7d255-929d-4a40-ad4f-6c88549b93d1",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b8de444b-370f-4299-bfc0-3e3ba3dd572e"
        },
        "item": {
          "id": "66ba95e1-1f69-4665-a1ed-e7a982517be6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a3b383cf-ac7e-484f-bf07-0186edd6e433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb72cc1-4071-453d-8c3b-5cdd3e2f7c6a",
        "cursor": {
          "ref": "3b2be908-d917-497c-849f-d949eaaeb727",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "994e8ce7-e6e7-4129-92cb-a2c07df167bd"
        },
        "item": {
          "id": "0eb72cc1-4071-453d-8c3b-5cdd3e2f7c6a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "57e63284-6717-4231-ad31-4a426ede156c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba5d7aa-831f-4a70-b53b-33fd196d57f4",
        "cursor": {
          "ref": "5fd1c0db-d027-4cd6-94e4-cc8807fe0d85",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ff89f1c-f7f4-4b0d-a250-91f476bc3eb4"
        },
        "item": {
          "id": "aba5d7aa-831f-4a70-b53b-33fd196d57f4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c551a643-5f56-4e61-805d-582df80c3cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadb3ed5-07a3-4a20-b017-a158515989d4",
        "cursor": {
          "ref": "725412b4-cbf2-426f-ae51-ec738d411b15",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3d564646-741c-4c96-ae05-b8583628bbb1"
        },
        "item": {
          "id": "eadb3ed5-07a3-4a20-b017-a158515989d4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "33dec34f-7532-437f-85a9-4d90f73d28d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2f5bfc-daf6-4974-8f47-3f8383de7b45",
        "cursor": {
          "ref": "3a8c0291-b7f7-4fb6-92fe-652f526911bc",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ef85ef50-7e04-484d-81f3-a29d966593c9"
        },
        "item": {
          "id": "8b2f5bfc-daf6-4974-8f47-3f8383de7b45",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c2745dff-b6e6-40cc-87d3-0b312cec7784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50a4a7a-5e4c-4667-a741-a87665cbd043",
        "cursor": {
          "ref": "ab6e3096-a358-48a5-895a-c0c54ae5e3cd",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "600752cd-bb70-4b88-add7-36174e187feb"
        },
        "item": {
          "id": "c50a4a7a-5e4c-4667-a741-a87665cbd043",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4bb6b091-ed3f-4d6c-955f-9e7baee415b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd07d11d-c1a0-4cba-a7e1-afa028b0dfa2",
        "cursor": {
          "ref": "2b8d945d-1499-4acb-945b-0b1821e27cd4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "212d0dd6-0ec4-4d21-b1a2-c22bfb33012d"
        },
        "item": {
          "id": "bd07d11d-c1a0-4cba-a7e1-afa028b0dfa2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "18e78bba-4c1f-4605-8323-a1f573cab337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6570106d-dd67-4ec7-8138-a702e3ef073b",
        "cursor": {
          "ref": "d13b3c2a-d314-4fe7-828d-333f9c4008de",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1160e452-4bea-4cb0-b97c-64bc68952feb"
        },
        "item": {
          "id": "6570106d-dd67-4ec7-8138-a702e3ef073b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "07f67034-83f1-4dec-83b7-be7d4f2b35dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e001816f-72d0-4874-9057-3fdec98edc90",
        "cursor": {
          "ref": "43085e55-c011-4021-99e5-6e89a3992750",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3360cff1-430f-4070-b12a-d21b56e4acac"
        },
        "item": {
          "id": "e001816f-72d0-4874-9057-3fdec98edc90",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4b86fd6d-8551-4eb3-8e88-72fb22773648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e0537f-7cf8-431e-a7a8-fdbb4c39f661",
        "cursor": {
          "ref": "cf9ab31e-08e1-4f71-a5ff-014851fbbb62",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "66577fc2-ab60-4b82-9afa-b0177ab16e1c"
        },
        "item": {
          "id": "d6e0537f-7cf8-431e-a7a8-fdbb4c39f661",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bf925d15-af16-42c8-a86c-f2e12345e849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b33c40-7f59-4e1c-ae16-4bf339b35f81",
        "cursor": {
          "ref": "760e1cde-1079-4d77-8e3c-1a8c2cd24b89",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b1b297d7-b01a-4150-9356-fd33e5d0ecc3"
        },
        "item": {
          "id": "f5b33c40-7f59-4e1c-ae16-4bf339b35f81",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6debfef6-6ccd-43d3-9e5a-6e24ce898148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3520dfe-e613-4271-8bca-40d3eac5814f",
        "cursor": {
          "ref": "313a1919-4aee-459f-9fdf-21918812b815",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bc54cdba-b8b0-49aa-9d5a-79d0869ce96e"
        },
        "item": {
          "id": "d3520dfe-e613-4271-8bca-40d3eac5814f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c115ff83-bc08-4712-8c1b-d1b89769ca79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08de6a6-a32d-4f95-9044-c947a47296d3",
        "cursor": {
          "ref": "c9f08297-ec67-42bc-9d01-0378519f5419",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4b822ee6-33f9-401e-af93-03b036521028"
        },
        "item": {
          "id": "e08de6a6-a32d-4f95-9044-c947a47296d3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6b91ab86-8804-49fc-b9df-b6c22a304b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df862c6f-db81-43a8-87c9-dcd766d1ff26",
        "cursor": {
          "ref": "44130156-6ac0-41e6-8f9e-2db1f972df8a",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5b5713fc-7acf-4b4c-87e0-75119da5744b"
        },
        "item": {
          "id": "df862c6f-db81-43a8-87c9-dcd766d1ff26",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fcbf690a-716e-4021-b097-8c9649020d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d60a22-f03f-4024-9526-ce0bbb533df2",
        "cursor": {
          "ref": "b76e7022-e98c-4b13-a4c0-c8e09c231c7a",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "facfad2a-2ba6-4b4f-ae40-e90a50140713"
        },
        "item": {
          "id": "e2d60a22-f03f-4024-9526-ce0bbb533df2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9447a754-b900-44f0-ba74-572cc254677a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfdb2e8-0a48-44a8-8fb9-6893698c3969",
        "cursor": {
          "ref": "5ca90fd9-d002-41b0-bae6-3aa9b2a0deaf",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "91fe1f51-ea1c-4aab-a2d3-2be6d14a085a"
        },
        "item": {
          "id": "3dfdb2e8-0a48-44a8-8fb9-6893698c3969",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "aed9ddf4-d092-422f-94b1-3887575fc789",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ba42428a-44e0-45da-8467-b14313ca1084",
        "cursor": {
          "ref": "b139d308-45d0-4795-9d50-8038eb27712a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5c8c6642-5c4f-42a5-8360-8a2546a64421"
        },
        "item": {
          "id": "ba42428a-44e0-45da-8467-b14313ca1084",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "622e473b-f660-4aa4-8212-ebf250971d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f9f096-e6b2-4016-a153-bc98181db0d7",
        "cursor": {
          "ref": "23c00923-bc2d-452f-92ba-09a4a9aef3ef",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f3a47e9e-9214-4d7f-ae2d-a65feb0532ba"
        },
        "item": {
          "id": "b2f9f096-e6b2-4016-a153-bc98181db0d7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5b76df83-a0b3-4328-94fb-04cc584fda66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde63475-2664-4417-9b86-dc3cee22d55d",
        "cursor": {
          "ref": "be50925f-cbac-4ae1-aa5f-b5c68f14680b",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e8d44125-9135-49f7-bf8c-9561f1f43c7c"
        },
        "item": {
          "id": "cde63475-2664-4417-9b86-dc3cee22d55d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "46abc83b-f968-4e1a-902f-98670446b607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596ab2d6-5efc-4326-bfe9-c3d2e0b6e7e3",
        "cursor": {
          "ref": "f810e7ba-edf3-4a3f-b23c-03f3655a2fea",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d8ab1e70-7780-43cb-8364-38675a87bfc4"
        },
        "item": {
          "id": "596ab2d6-5efc-4326-bfe9-c3d2e0b6e7e3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0168aa64-5c95-43d4-a223-8fe918708ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cbf92a-a9fc-426a-b263-308039a6b2ba",
        "cursor": {
          "ref": "0d79506e-c877-484d-8df3-20440f8b50fe",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a1b6b1bb-bf3a-4142-af68-3fa5e5c984ef"
        },
        "item": {
          "id": "a9cbf92a-a9fc-426a-b263-308039a6b2ba",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "43d86b3e-5e04-40e0-85a4-4fd3812c55e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3a5859-d128-4637-9494-73117f61b81a",
        "cursor": {
          "ref": "44aad313-c99f-473c-8825-baaaedb25196",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4a79de35-c8a0-4f06-8e34-4be06cf77b66"
        },
        "item": {
          "id": "3c3a5859-d128-4637-9494-73117f61b81a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "16f78d77-8641-4661-9b08-64b59bf68d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4681279-edee-49bd-aa68-9b5dbed6ee66",
        "cursor": {
          "ref": "4e1a9b25-a530-4a3c-96ed-ef3adc6cc57c",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "69eb7551-ed39-417b-b500-38516b269d93"
        },
        "item": {
          "id": "a4681279-edee-49bd-aa68-9b5dbed6ee66",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "90e914d2-c6bf-4ff8-a336-f04cc0359f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945132d0-3cea-4acf-af56-f5d0ec4c1453",
        "cursor": {
          "ref": "779c7804-1f11-4dc0-be0c-6dc117aa7c57",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b99b3084-f3d6-4a13-b31f-95103b6b0698"
        },
        "item": {
          "id": "945132d0-3cea-4acf-af56-f5d0ec4c1453",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "68fdc0a0-4a3f-4109-8efe-cc354014e291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64717bf8-55a4-4ef0-940f-61dc924d81fc",
        "cursor": {
          "ref": "7da310e6-032a-446c-bed4-819252d3fee0",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8e68adb9-dd42-4691-ae41-34d580dfc79c"
        },
        "item": {
          "id": "64717bf8-55a4-4ef0-940f-61dc924d81fc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "540a1a67-7791-4c30-b1a1-b15667e6cdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba6cc33-e626-4754-b275-f0d6e149eaff",
        "cursor": {
          "ref": "29a59823-5f3f-4800-a7fb-0239b064979a",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e2675ab4-4652-4b08-a091-6001537fddb5"
        },
        "item": {
          "id": "cba6cc33-e626-4754-b275-f0d6e149eaff",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9590b07d-ee80-40f3-aa40-f41cb7829310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c02f4f-3d65-4078-9338-277e182c84f3",
        "cursor": {
          "ref": "8ef2a6ea-1bfd-49fd-9c2e-740afc417322",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7eff0bff-c918-4772-948b-3def433f8dcb"
        },
        "item": {
          "id": "b8c02f4f-3d65-4078-9338-277e182c84f3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f3d80442-d7a3-47f4-8d32-3001f687ff5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4f67e3-0fa2-4ebe-bc06-bcbec8c1e905",
        "cursor": {
          "ref": "ac15c175-2725-47fd-99e3-579381b7440a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "10ed0f4a-9207-4f68-8026-60dd0d509e2a"
        },
        "item": {
          "id": "ce4f67e3-0fa2-4ebe-bc06-bcbec8c1e905",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fc905bed-65f4-4b80-8ed2-7be098b07b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7379a93-13be-4405-9a9b-99f812a0646b",
        "cursor": {
          "ref": "16add757-3030-4bfc-aff4-375b0c0b6103",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "72c6d69f-1ce4-4c68-930b-e49e203f870f"
        },
        "item": {
          "id": "b7379a93-13be-4405-9a9b-99f812a0646b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6abf579-a7df-4134-8baf-f81c1011b824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013580b9-63fc-49e8-8725-3ac87acd9944",
        "cursor": {
          "ref": "da832673-9323-4e72-b78c-bdd0b97ea9f9",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "02a1aec0-6507-40cf-b213-3e419cc4b913"
        },
        "item": {
          "id": "013580b9-63fc-49e8-8725-3ac87acd9944",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "70a24fe4-057f-4359-8025-cc88e0c77be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297eb6b7-7777-4ed9-8fba-2f34179302d8",
        "cursor": {
          "ref": "d2a94528-c71c-4313-95c8-b2e0afa6da06",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5851c18f-6e10-4a9f-beff-afc4540e8096"
        },
        "item": {
          "id": "297eb6b7-7777-4ed9-8fba-2f34179302d8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "266e9999-2121-40ba-9e6b-6825ffe8e7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29959ac8-a63b-48d5-be34-1be22055766c",
        "cursor": {
          "ref": "0d2de689-2b95-4163-89f9-6feb64a55e70",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8dc4bb66-1b90-4ec3-9a8f-dc9f7f49bd23"
        },
        "item": {
          "id": "29959ac8-a63b-48d5-be34-1be22055766c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fb227fcc-ca2f-4cfe-b0cc-7e548a164831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee1bdf5b-3394-4e86-b679-634a32f494aa",
        "cursor": {
          "ref": "46d6ef48-f386-466c-87ce-21fb6873963a",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d2f2957a-02db-4a6a-8717-9f2d7c6fec76"
        },
        "item": {
          "id": "ee1bdf5b-3394-4e86-b679-634a32f494aa",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6bfe8cca-c0f9-4cab-ade8-b78802c1b948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5636ed-f2ce-46ee-bf32-994942325e36",
        "cursor": {
          "ref": "216b1620-61f7-4f81-a686-a9f641525065",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c709feed-07e1-4576-aedb-7a3e2235235f"
        },
        "item": {
          "id": "8f5636ed-f2ce-46ee-bf32-994942325e36",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "da610442-de05-4faa-88a7-cc7acf7a1c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e159d08b-8f10-43d3-99f8-0be78bd87858",
        "cursor": {
          "ref": "d4e038ab-70be-4804-9d68-d6db07e40b71",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "399cb4ad-c7e3-4efd-917e-3831a335b704"
        },
        "item": {
          "id": "e159d08b-8f10-43d3-99f8-0be78bd87858",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "510c895d-911c-424b-81fd-5aaa88920548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f24551b-4191-481a-aaeb-0a8016543f6b",
        "cursor": {
          "ref": "517689c8-96be-448e-b75a-1d77c2ca32fb",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e70f9f50-db0d-4283-8e96-ff448bd63eb5"
        },
        "item": {
          "id": "1f24551b-4191-481a-aaeb-0a8016543f6b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d7107bf9-30a1-4aaf-9481-c513ae497dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618a4631-11bb-488d-8878-db2d264451ca",
        "cursor": {
          "ref": "a37374f8-bb8f-4973-a41b-eb76e3010ca5",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9962b80-0040-4c62-9acf-ca2c7d3accb5"
        },
        "item": {
          "id": "618a4631-11bb-488d-8878-db2d264451ca",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "56ad0034-e678-4840-9b26-966a5af478b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63791ab1-2c81-4b93-a63d-08d046626929",
        "cursor": {
          "ref": "d5d98d1f-a3a0-4579-900e-6443a1918d48",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d1d3edea-1df9-4669-8c49-6eae28513bb7"
        },
        "item": {
          "id": "63791ab1-2c81-4b93-a63d-08d046626929",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fa81c755-a2d6-406f-8f46-bd016dd338bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634a077a-0f11-470f-a241-bdebe523ade8",
        "cursor": {
          "ref": "b75fd40f-4b94-454a-9463-ea531a307bbc",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b86216f0-ee37-4076-b4cd-a20778043d97"
        },
        "item": {
          "id": "634a077a-0f11-470f-a241-bdebe523ade8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f64b33a9-89d0-43a9-8273-fd2f028f0ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802e2783-906f-4afe-b896-a375232ef3a9",
        "cursor": {
          "ref": "3aa7df4e-c187-46f7-8596-93d4a2936021",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "310d7a96-b444-4569-b5e7-061efe8e7292"
        },
        "item": {
          "id": "802e2783-906f-4afe-b896-a375232ef3a9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0bbfa76c-ac15-489d-b4ca-a14fa9d4d84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077d25f4-ea68-471a-9790-93a456862dae",
        "cursor": {
          "ref": "e817da7c-be7d-4963-b542-f47792a57fc4",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "9195ce4f-eccf-4286-8aec-ec3c10e11fca"
        },
        "item": {
          "id": "077d25f4-ea68-471a-9790-93a456862dae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0726eeac-7d3a-402f-aa06-7132027ec2da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeeb4c7-c1b9-494a-a566-bd65abb3ec09",
        "cursor": {
          "ref": "bc2722cb-d2f8-457a-b2dd-77775ec41576",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1a6f7bcf-35e4-4962-92c1-405136cebc1b"
        },
        "item": {
          "id": "2aeeb4c7-c1b9-494a-a566-bd65abb3ec09",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a9a69d6-6dbd-4c27-b201-516203304800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44567b11-e454-4d47-af0f-076e3c4cc637",
        "cursor": {
          "ref": "4ebb95e9-3d7c-4016-a3a6-ac662e7a5412",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "78154e66-d8c0-4f05-ae0e-39295ca9ff79"
        },
        "item": {
          "id": "44567b11-e454-4d47-af0f-076e3c4cc637",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "578e934b-921d-4e1e-9c68-4a5ef7d1e7be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7580503d-c0e2-4d3f-bd06-7c637947dfb1",
        "cursor": {
          "ref": "d6dffe9b-3c0c-4bc8-b8e0-2162523397b2",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d8ef59c0-4c18-42b1-acbd-a7d10d963c54"
        },
        "item": {
          "id": "7580503d-c0e2-4d3f-bd06-7c637947dfb1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "cf04f473-067f-4e56-abe4-dd170f526765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf578503-f852-45e3-b1e4-22d32d9605ad",
        "cursor": {
          "ref": "61b1d65d-5fee-46bd-9cd0-2de9ea0c80ce",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "109eb601-7f4f-456b-b272-c3d6e1cbcf20"
        },
        "item": {
          "id": "cf578503-f852-45e3-b1e4-22d32d9605ad",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ec307a07-f46d-42bd-8c66-55e55b9cee68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543f381a-595a-4de9-9565-172489c1d0b0",
        "cursor": {
          "ref": "d6947525-7adc-4a59-bed5-4f7d921d42ae",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "717060eb-e994-4bf5-a8a0-06229ac8feb2"
        },
        "item": {
          "id": "543f381a-595a-4de9-9565-172489c1d0b0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a3afc18f-f38a-465f-b2e7-82ec62fd2ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452c558c-6012-416c-ae5e-44f98545d576",
        "cursor": {
          "ref": "0b85e013-dc69-45a4-a8a9-f3e3807b564e",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5b823162-4590-42af-9272-378be472547c"
        },
        "item": {
          "id": "452c558c-6012-416c-ae5e-44f98545d576",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7f10cde2-f8c6-4166-a4a7-371ec1ed78aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf2837b-7af1-452e-a8c5-9e6cf251e70e",
        "cursor": {
          "ref": "0e254891-5fb0-48d7-bc6d-3b86a59283b6",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "497b1362-310c-4be6-9fb1-173333bf4dc5"
        },
        "item": {
          "id": "acf2837b-7af1-452e-a8c5-9e6cf251e70e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "11009905-3fd8-4167-94a9-81ae25cff691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a966413-b231-4ce7-9eeb-0c91efd9ae05",
        "cursor": {
          "ref": "bfbd5aa6-f478-4344-86b7-0f74d450a272",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "59e8768b-2d64-4ad8-ba7c-be169198a17a"
        },
        "item": {
          "id": "6a966413-b231-4ce7-9eeb-0c91efd9ae05",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d03fc9d3-aeb3-4c3f-84ab-1563172eeb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9407b3fd-c834-418a-8eda-606bc639802d",
        "cursor": {
          "ref": "d726f4f2-64f5-4b7a-9045-1bebfd64ce23",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ff6449e2-66d6-4ac4-b835-d73dee5fd784"
        },
        "item": {
          "id": "9407b3fd-c834-418a-8eda-606bc639802d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "195b2b00-8976-4974-a805-50076e35becf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee94a5ed-fa92-4a4f-bab0-7daa8273e94a",
        "cursor": {
          "ref": "822e264b-54bd-4ada-b6d7-d941f2a0e5cf",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3caed291-5051-44c4-97c5-5e5e5a4491c0"
        },
        "item": {
          "id": "ee94a5ed-fa92-4a4f-bab0-7daa8273e94a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f4d9eccd-3ea0-4ad9-acbd-ee1ca2b865be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388237fe-c1bd-44fe-9a68-48169628af59",
        "cursor": {
          "ref": "fc4f8523-0c33-4630-a597-064ec0b0103e",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "564e5909-57de-438f-adbd-93d514a4d9c6"
        },
        "item": {
          "id": "388237fe-c1bd-44fe-9a68-48169628af59",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "347a91d9-7bac-40e6-a875-7c66f84c248b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905ff3bb-e177-4afb-8500-9f9d8399854b",
        "cursor": {
          "ref": "56c51866-2ff9-45f8-809b-6264a64c3f07",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6218f8d7-3751-49c7-9dcd-c4412429ca38"
        },
        "item": {
          "id": "905ff3bb-e177-4afb-8500-9f9d8399854b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "119f84ed-7a75-44e5-ab67-c5f021bd792b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226ecacc-52a7-443d-84eb-74d07f265440",
        "cursor": {
          "ref": "2304afc9-1df8-49ae-b302-e917f86d72bf",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5adb15a5-806a-4624-ad46-e2004ef715a4"
        },
        "item": {
          "id": "226ecacc-52a7-443d-84eb-74d07f265440",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b160fdb2-6ddf-4658-bfa1-60a7bc78db89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce99e44-a5c8-422e-a28e-b961b34cebf1",
        "cursor": {
          "ref": "7fea7ea8-d98a-48c5-83ac-359ce58d6c5c",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bce6aa2b-d6d4-4f58-b049-39e9f7d02711"
        },
        "item": {
          "id": "7ce99e44-a5c8-422e-a28e-b961b34cebf1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b3142746-f3b3-4086-bc14-d699afc7d81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8712996b-38fd-4d45-9a88-bf2fb306bc3c",
        "cursor": {
          "ref": "dc2e2568-f82a-495e-be6c-8dfe772e2b87",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9aa7f067-fd15-495f-90ce-e9e9fcebcd20"
        },
        "item": {
          "id": "8712996b-38fd-4d45-9a88-bf2fb306bc3c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6b64fe1c-14fb-46ba-b989-3498bfdee9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2ec6b4-d151-4bda-8961-dd743626c286",
        "cursor": {
          "ref": "c781104e-f70b-438d-8606-f67651902e3d",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "76f67c10-95bd-4486-97a0-ebe8e70ae1bd"
        },
        "item": {
          "id": "8a2ec6b4-d151-4bda-8961-dd743626c286",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b8b666fa-8f6b-4a82-985a-c062a565b37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0c28f0-c2d2-4486-8c88-ff63b99a15fd",
        "cursor": {
          "ref": "a52ad7b0-19ae-4a96-8ea1-dd1e43c6cb9f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4faa3800-dece-49f2-98ce-6961b706dbb3"
        },
        "item": {
          "id": "cc0c28f0-c2d2-4486-8c88-ff63b99a15fd",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5f2b1ae8-ef9f-43a5-91bc-c28d200c0506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bc6cf9-75d0-42ee-bec4-f6439f5701a7",
        "cursor": {
          "ref": "1319f864-7209-41a9-b311-56fb20fd65d1",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3f6df1f5-c2a9-4a64-865e-0a7c9d5c63ed"
        },
        "item": {
          "id": "78bc6cf9-75d0-42ee-bec4-f6439f5701a7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5143f5b5-57f9-4087-b1f4-8eb7d3c8412d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4560a21f-3ac0-4884-a9e8-65ba927db28b",
        "cursor": {
          "ref": "51392c82-5eee-4ab4-80f0-688cba9005d7",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fe39c9d3-d6e6-40f4-9538-654d893e94ad"
        },
        "item": {
          "id": "4560a21f-3ac0-4884-a9e8-65ba927db28b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "77b565e6-7c9f-48c0-8034-2c63a072aa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930b7607-92ad-4005-81a2-d94bc8986693",
        "cursor": {
          "ref": "e67ebfb1-306c-4fc1-bdfa-02decf4c3f02",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "61988d8d-f723-4249-a1b5-8684f28bfea6"
        },
        "item": {
          "id": "930b7607-92ad-4005-81a2-d94bc8986693",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f9f1e1ac-492c-4627-8516-05ab6595496c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ec754e-6d0f-4387-86d1-4cf7cb0de95b",
        "cursor": {
          "ref": "1b1a4ea1-14d8-4f72-821a-fa2a05c7042b",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "867f5a63-0b90-444e-8633-f5d54f4c09af"
        },
        "item": {
          "id": "d2ec754e-6d0f-4387-86d1-4cf7cb0de95b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3261b7c9-0a2b-494e-b63a-497d46c262b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3068e4-9b97-48bf-8bc0-ce2fc03b7b09",
        "cursor": {
          "ref": "e8bad9e0-6159-4865-b5a8-010eae7db48e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "beb8a9ff-03c5-4998-bae9-c2beb796405f"
        },
        "item": {
          "id": "ff3068e4-9b97-48bf-8bc0-ce2fc03b7b09",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e80e5b5d-37d7-4293-a123-471279328a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd9835d-fb41-4870-8a60-e4e9f0d5dcdf",
        "cursor": {
          "ref": "0fc03d49-2d1c-4e05-8b8f-a6c8986ec8ef",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a0a61367-86b3-4d23-93ba-8f1c6e5bf3ca"
        },
        "item": {
          "id": "fbd9835d-fb41-4870-8a60-e4e9f0d5dcdf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a13587eb-7a05-452b-991e-fac3da9c1516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96d1a5b-3cd6-4a7a-aea5-075302622617",
        "cursor": {
          "ref": "3216cc6f-ad83-4a88-bf9e-1a36d4a2900e",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3126e69f-e8d2-454c-a82f-fa9289c93b80"
        },
        "item": {
          "id": "d96d1a5b-3cd6-4a7a-aea5-075302622617",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "331136a7-b8d5-4349-a85d-366776815b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5943f0e-6a91-4d7a-a8ad-46280c21a1d8",
        "cursor": {
          "ref": "1320da97-b82a-438b-aa33-0d8cfb660841",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e8cd5389-7edf-4ac6-8b0c-ca8445fbb13b"
        },
        "item": {
          "id": "d5943f0e-6a91-4d7a-a8ad-46280c21a1d8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5be492b9-0696-4304-a91b-eeb128445c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acef791b-cf8c-4afc-92f5-292e3c3e7d2f",
        "cursor": {
          "ref": "f04f6327-2557-4968-bcc4-16e74b434be4",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "caafcf1a-86e7-4223-a916-e2587c77f655"
        },
        "item": {
          "id": "acef791b-cf8c-4afc-92f5-292e3c3e7d2f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1a632845-5cee-459f-8931-e8ffaa7ca238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9de097-d743-4f73-bdd3-9b9861cdbc6e",
        "cursor": {
          "ref": "c1c73e8b-59bc-4a0a-9ac7-440e65ac7f96",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b774ffe3-5652-43a6-bed6-8b7d5c0a57b7"
        },
        "item": {
          "id": "cd9de097-d743-4f73-bdd3-9b9861cdbc6e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "18a23769-a898-4e5c-8c26-5491e6341267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c909d915-970e-4a7a-b25a-458a232f2876",
        "cursor": {
          "ref": "34c8112f-4a23-46d7-953d-afb339d2da77",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c70a05f0-0837-47e9-be47-76ea398f4fb1"
        },
        "item": {
          "id": "c909d915-970e-4a7a-b25a-458a232f2876",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29086cd1-ca68-4660-b942-3969df0e92d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7140f8b-a701-4634-ab10-d98049390ef1",
        "cursor": {
          "ref": "a8d2b1a0-63ca-4bf0-bf65-a7b08cb59c87",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "888402dc-3fde-4d8e-b173-0e5a34de81fe"
        },
        "item": {
          "id": "f7140f8b-a701-4634-ab10-d98049390ef1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "777783f9-b169-41da-9094-51a43d608724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a61c68b-164a-43a3-b02a-a49a3dec6437",
        "cursor": {
          "ref": "1c2fd64f-42de-4f4e-8a71-4c6e9cf31b68",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b059e05f-ab92-447e-b19e-4e43be85f0ac"
        },
        "item": {
          "id": "1a61c68b-164a-43a3-b02a-a49a3dec6437",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1e5d188a-02d3-4804-9c80-01b839c514c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf755a53-c858-4a89-92b1-ae4ba1335a8f",
        "cursor": {
          "ref": "6d47f646-020c-4b5b-b0df-5e7481b2ae78",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "03668332-1ec8-4f6b-bc87-2abe2e20b90d"
        },
        "item": {
          "id": "cf755a53-c858-4a89-92b1-ae4ba1335a8f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "851d71ed-11f2-4ab9-bc3a-2f8a6553f530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d2373f-0222-4d48-9e25-a1f163f74857",
        "cursor": {
          "ref": "543328c5-c314-47dc-9a28-321ce5f85315",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "74998c23-235f-4dca-bc55-541dbeaff29a"
        },
        "item": {
          "id": "35d2373f-0222-4d48-9e25-a1f163f74857",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dd6a7bee-4c79-4337-82a8-fe837e84fb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83519b93-75d3-4c15-a819-0cc4b0926d5b",
        "cursor": {
          "ref": "863434a7-a362-4811-b0c6-2fce1f06ab48",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "bd8b9671-656a-4ca8-b912-277dfe6bff0d"
        },
        "item": {
          "id": "83519b93-75d3-4c15-a819-0cc4b0926d5b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fb4e53bd-9ad6-4930-b0b4-e2e0842dd522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d390ddce-7698-47d6-9ca9-01b1480d9b1f",
        "cursor": {
          "ref": "c5b5b872-6bd0-4d6f-8c8e-2608826d3cd2",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4203326e-e249-41bd-baf0-1320428fe41f"
        },
        "item": {
          "id": "d390ddce-7698-47d6-9ca9-01b1480d9b1f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "07888171-3b81-4848-b3e3-77545d701d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4505c7d4-c4de-419f-b2a4-931ee00b6667",
        "cursor": {
          "ref": "f3861e29-23bb-43ff-a592-c3fb54fcb8eb",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "86097f54-efbc-47cc-a313-a970155b9625"
        },
        "item": {
          "id": "4505c7d4-c4de-419f-b2a4-931ee00b6667",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "00e4d9b7-3f0e-4d4a-bc40-8ef4abaf2cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9430b4e-c644-40ed-bee3-bbe441360e12",
        "cursor": {
          "ref": "e1544ffe-c591-4073-8ea7-f8447984da81",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "df0916f2-8629-4e11-9d31-61fa44b33bc7"
        },
        "item": {
          "id": "b9430b4e-c644-40ed-bee3-bbe441360e12",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f5ff3077-8665-46b6-a38b-ac36547756f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c6c694-70f2-41f7-bbf0-a5d62690808a",
        "cursor": {
          "ref": "91008fc4-1109-4451-8efd-161fca5e0f41",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d34b1609-89bb-4148-9a4f-b7ad7e91dfe1"
        },
        "item": {
          "id": "63c6c694-70f2-41f7-bbf0-a5d62690808a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c7597574-6074-43bc-9a1e-93ea7f7d6712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b5d5c0-b4b6-4361-9af0-ca77b5522390",
        "cursor": {
          "ref": "140c5186-8d99-4fba-a438-ba88da03c37d",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4f8f7778-459b-4cb8-9a74-c15f3b85b453"
        },
        "item": {
          "id": "24b5d5c0-b4b6-4361-9af0-ca77b5522390",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b87a1e64-d44e-4ad8-9843-ff732d97cea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0831f1-1014-43bd-bb82-79e8fd0bcba7",
        "cursor": {
          "ref": "e8b216c4-f072-483a-85be-861865c6419b",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ef0740e2-1658-4bfe-b495-540639d1af3f"
        },
        "item": {
          "id": "de0831f1-1014-43bd-bb82-79e8fd0bcba7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "510ea7de-ec14-4569-a04f-37d948630846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92949985-b810-4b43-9958-f1803e7960b6",
        "cursor": {
          "ref": "2e79db59-c957-4821-8fb9-9ea2f7fe1498",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "75fa07b4-c4e9-4acc-96f5-e060221727a0"
        },
        "item": {
          "id": "92949985-b810-4b43-9958-f1803e7960b6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "31decee0-7b95-4543-b62f-088343ac6cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48bc138-b22e-4445-ab6a-c89881279679",
        "cursor": {
          "ref": "f0b060d1-fa0e-436c-8dab-f2996172ebc9",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ce5b4f26-7620-4e8f-8c7e-df1287eb3b74"
        },
        "item": {
          "id": "a48bc138-b22e-4445-ab6a-c89881279679",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "dc79be65-110f-4b3d-a17c-aaf1984c6758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 916,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3189394c-a2da-4ad2-a5b5-e84049f75a14",
        "cursor": {
          "ref": "c931b9cd-9363-446c-b14f-66626430b973",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "13a219e2-ca8e-4e3b-bdda-ff755c6bd814"
        },
        "item": {
          "id": "3189394c-a2da-4ad2-a5b5-e84049f75a14",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0a9e7ff4-f04b-4fec-9f4c-f6bb4184d182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc88b358-d9c7-4fd0-825a-2933c5cc3c80",
        "cursor": {
          "ref": "8469b954-d32f-4980-9ed4-f0142491b6ee",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1d4d69cc-9fde-4d55-b296-193bc2d07d0b"
        },
        "item": {
          "id": "fc88b358-d9c7-4fd0-825a-2933c5cc3c80",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8f8f9a77-90fb-4b95-9205-b193231029d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7948d927-627b-4fb5-9f95-070c96092d58",
        "cursor": {
          "ref": "193e71fd-acc9-40ed-ac39-5aff4a17d4f1",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6a29bb46-8e98-4266-8833-f8c9205db155"
        },
        "item": {
          "id": "7948d927-627b-4fb5-9f95-070c96092d58",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f9182c93-9142-408e-8619-55cc3db810fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b787ff1b-fc3f-4721-a442-4b228fc61756",
        "cursor": {
          "ref": "d55d1fb8-44bb-44f9-92d3-554e812abfd2",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3a0a45d2-e81b-4da5-b910-7caf209b7a7d"
        },
        "item": {
          "id": "b787ff1b-fc3f-4721-a442-4b228fc61756",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0717dce7-66d4-4de7-ba65-648398cd06d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f813914c-68df-4c07-9e95-d308f805154e",
        "cursor": {
          "ref": "e26ee204-b5cc-4b65-8229-0a60f8992140",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a4963976-2630-4c0f-95d3-4bd7fdbcb7f4"
        },
        "item": {
          "id": "f813914c-68df-4c07-9e95-d308f805154e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a91f4a97-9615-4b03-8aa4-be60f3985274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c89e7d-8440-48fc-afee-df559e9cb81d",
        "cursor": {
          "ref": "289eb9c1-acd6-49d0-aaf0-173b92f8566c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "bb06f93f-0637-49fa-9e5b-6b3085a23d6c"
        },
        "item": {
          "id": "a7c89e7d-8440-48fc-afee-df559e9cb81d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9c1453bb-97a9-41cf-8ae6-c74358b182ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d50f7cc-9894-40c8-8a18-45cf86196a3d",
        "cursor": {
          "ref": "bdcd46b2-c622-462b-9b1e-a8f47c532776",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6486d90b-eb2a-48b4-9ebf-3dcf1c08f2f7"
        },
        "item": {
          "id": "2d50f7cc-9894-40c8-8a18-45cf86196a3d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a11def66-698b-4c3f-9adc-5f085d74405c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6a1a9f-f03e-40b0-b10c-d60dd9a668da",
        "cursor": {
          "ref": "ea83f39b-b9e2-442a-86a5-2d1d66c1c4e1",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "1fe69b4c-fee1-4c5e-abac-aaef9749acc5"
        },
        "item": {
          "id": "8f6a1a9f-f03e-40b0-b10c-d60dd9a668da",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "99665117-7b06-4d40-b151-4a4aac49d791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95939662-b35e-4484-8ddb-3596c63bb94a",
        "cursor": {
          "ref": "ab592ff9-e1ee-488c-af1b-a1cbb58cc24c",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "43aae648-9594-48cf-bbf5-149c4fbef40e"
        },
        "item": {
          "id": "95939662-b35e-4484-8ddb-3596c63bb94a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "17976a9e-4a40-4eb8-9ad8-f6f861728546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2df14f-7bde-471c-bdae-02163b412c80",
        "cursor": {
          "ref": "b197bc4d-1711-4206-84f2-e293550f7bbb",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "558b5c5c-e45d-4fcf-85fb-eb4eb3ccf3f8"
        },
        "item": {
          "id": "1c2df14f-7bde-471c-bdae-02163b412c80",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "efd82339-109d-4edf-826c-226496a04692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e6b2e1-e2f9-43cd-88d5-05c8e1ecb595",
        "cursor": {
          "ref": "5878266b-95f8-4928-9f5e-6ca6ab310061",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "10069bc3-9e68-4fbc-9068-c4b208be319a"
        },
        "item": {
          "id": "70e6b2e1-e2f9-43cd-88d5-05c8e1ecb595",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "40498e6c-fb9a-419a-8216-f62e7a86e5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e795b923-b10c-4c00-b8c6-042b5a14b690",
        "cursor": {
          "ref": "faa5964c-ab17-47dc-8de5-a929d67727dc",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "56302aab-a059-4eba-bd02-64c4a0c8496b"
        },
        "item": {
          "id": "e795b923-b10c-4c00-b8c6-042b5a14b690",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7480e513-4e5a-42d3-befa-d09af6433299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377c78c4-ce07-4647-a860-e7d4feb9dd2e",
        "cursor": {
          "ref": "f6099375-3ad0-45ba-b7f6-da67c08cbe04",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8829e4f0-737a-40b6-a9f3-9ff9e548a62d"
        },
        "item": {
          "id": "377c78c4-ce07-4647-a860-e7d4feb9dd2e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "894236c3-fc57-45ce-87d5-491a1a990f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0898afdd-0a7f-458c-bc93-7f4288715df4",
        "cursor": {
          "ref": "47bf72e0-b081-452e-a278-4d4f675cbfb9",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "22e05ea0-d925-4d5b-bfdd-f5cf6c169d81"
        },
        "item": {
          "id": "0898afdd-0a7f-458c-bc93-7f4288715df4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "39068c98-fc31-40e8-a49e-83c3b7feb751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552ecc85-8764-48d0-8351-02e4aa6f78f5",
        "cursor": {
          "ref": "93edf878-4aa8-40c5-889e-e7d66d32b747",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d71a5a97-3e49-4b36-a3d7-6b0c13e8ecaf"
        },
        "item": {
          "id": "552ecc85-8764-48d0-8351-02e4aa6f78f5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bfb320ae-097a-41b0-8847-d7eab54ddf94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "18faa423-de86-423b-81b9-42f537bb4640",
        "cursor": {
          "ref": "895d4035-5be7-4550-89d1-add4277b79cf",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "da3c484b-a554-4391-b96e-e523d93ad4a4"
        },
        "item": {
          "id": "18faa423-de86-423b-81b9-42f537bb4640",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a1e12575-1164-4fc0-8c05-35d66cb85555",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "6854357a-e56a-403c-b86a-04e47788bac0",
        "cursor": {
          "ref": "92b9fea0-e444-41d8-9bb5-83509c051114",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f2fb4ff2-3c49-4e78-8df0-24e7f962ce13"
        },
        "item": {
          "id": "6854357a-e56a-403c-b86a-04e47788bac0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3d4ef55e-d10e-457b-80bd-4c6da6d28571",
          "status": "OK",
          "code": 200,
          "responseTime": 2405,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "88005684-c9d6-4dea-a210-d938bec40851",
        "cursor": {
          "ref": "ce020a58-4b9f-4a45-a0e7-3ae90486dfc4",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "3b98b86e-0611-4a81-8365-d32a164e784f"
        },
        "item": {
          "id": "88005684-c9d6-4dea-a210-d938bec40851",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7692e87c-6e1f-4db5-9180-2aa60981245f",
          "status": "OK",
          "code": 200,
          "responseTime": 2693,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf998a5d-b644-4011-8a9b-770139b79827",
        "cursor": {
          "ref": "bf22c14f-061f-4f55-9f92-7fc20792b96d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "75d318d1-ca8e-4e23-ac3e-536f2f7e9a1c"
        },
        "item": {
          "id": "bf998a5d-b644-4011-8a9b-770139b79827",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bfb33a6c-28f5-4964-a486-64101194c89c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "bf998a5d-b644-4011-8a9b-770139b79827",
        "cursor": {
          "ref": "bf22c14f-061f-4f55-9f92-7fc20792b96d",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "75d318d1-ca8e-4e23-ac3e-536f2f7e9a1c"
        },
        "item": {
          "id": "bf998a5d-b644-4011-8a9b-770139b79827",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bfb33a6c-28f5-4964-a486-64101194c89c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "bd244e6b-c5d0-4e6b-beb0-f6c8fac92762",
        "cursor": {
          "ref": "4049c740-dd64-428b-a1bd-979d1fc349e3",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "659b7582-01d0-4db2-a2a8-4ac15698b9db"
        },
        "item": {
          "id": "bd244e6b-c5d0-4e6b-beb0-f6c8fac92762",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "452df948-ab68-4879-bb59-5279fcdd73b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "27a1f7ed-2aae-443c-b42e-cc147bd359c2",
        "cursor": {
          "ref": "5e394b7b-40cc-4a49-ab52-ca11e0b19e30",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "bd3f2a60-3774-453c-8f9d-19d415ec2812"
        },
        "item": {
          "id": "27a1f7ed-2aae-443c-b42e-cc147bd359c2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3b130754-121e-454f-bdb8-4ae425ca70fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}