{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "21f2b4cf-5873-443b-8f95-38c83d0499f8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2c9ca2f5-fcb7-41fc-9f19-5f18a552a2c2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "278a3ec4-fec8-4eeb-945d-6e405929e4e9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a9052551-384d-47f6-a7a1-d72de1eb30c6"
                }
              }
            ]
          },
          {
            "id": "dc6a4e90-bf4e-42e7-b4a0-b2efb88641e9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df040c2b-a644-4f21-9de0-f5e54ab2511b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72a87ceb-91fd-4a0d-affb-5c2d053fcf04"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad7ed093-e960-4488-9846-608ed0f5696d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f0df4d6b-8faf-4db0-9985-54b4ceffcbd2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c4a07ba3-7a92-4d96-8b9a-fd0f935a5960",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1f8daf9-f7eb-4bcf-aa89-4f2a3c018655",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50eda2d3-4aab-4bef-86a6-94f790e211da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "887eab41-d808-4585-804b-5f12bed6c187",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9414aeb-7107-4dbe-bce0-d4e907f9f4ac"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "157e146c-173a-43e6-94a9-2d611960b09c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1336d523-a682-4e24-9bf3-402473c22a3d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80670f56-4967-4c87-89bd-9f640f3ddca6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9698ecaa-c85c-4e6a-9372-fd5356fd08b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afcf6f7d-8fc1-44dd-8731-3d4cb9dd37a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a40a11b-83c4-4fac-ad10-1803d04c155a"
            }
          }
        ]
      },
      {
        "id": "4a3a4de8-1ab0-4ea3-8480-acdd394a3a22",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "fabf08be-6ff5-4a87-b534-545a50b9932e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04e818e5-a7ff-4e30-9302-230d1eff4340",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c3c6f51-b531-4535-9b2e-91806ebe9f6b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b93d35-8671-4262-a14b-31dfc3c8102b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23141360-e5f2-4fdd-8858-b58aeaf2ae00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dba8e58-fcab-4194-a8ed-2766020f27f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b864d530-72b2-4986-9059-d1698fd0a145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "000da909-bcd4-49d7-987a-2e541dfd1d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69dc49a-78f7-488b-9144-7a611ed5388a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc7ded7-8caf-4eca-99fd-4fc57989f024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ca1c734-3702-497e-8baa-fbca4a9e53ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "100c5beb-5ef4-46e8-9ad1-b43905e15d01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e514953-6a33-41d4-b28b-980843831263",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f427cc-19a3-4730-897e-761328d1cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f89221c-e0c8-4035-a3cc-56751bfb33c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d501b4f9-cc03-4559-8f5d-188d0014cbdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0366f5b4-7bc5-460c-aa75-de13b852143a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc9450d-f12f-4e2a-bc9a-7dab2154e64b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ff311a-57b0-474d-80fc-188cae3995b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b489edc8-673c-4357-ba48-541d1ef052c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efa1f23-2fde-42ae-a316-bd1a4d2c1647",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6a7bce03-463e-4465-a0a4-d7cbab4cfc98"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "89367b26-a34b-4d91-b04c-8d67677116d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06012b6c-d440-4320-9753-c79f225d5c9d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5daf5c3-0f31-4aa6-b08f-a0f32b6c2181",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7d60c017-9c23-4cdb-8a60-494102c4b2e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e0c64b5-f2c2-40cb-916e-50fde8dc2e8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "19b6dcd8-45f7-4f4d-a2ac-649a3afd158c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6e1a3ae-b5a1-4687-9841-b33f9a4ec2a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b199d721-3f1b-4f49-b4c7-00ec21d29e81"
            }
          }
        ]
      },
      {
        "id": "4f1f823a-7380-47b7-a5b2-3f85b0f3d974",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ac28d328-1514-4c39-9d9f-a3a196f3b950",
            "name": "Negative Testing",
            "item": [
              {
                "id": "afd14a27-8534-4852-8714-9769ccca507f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a558f452-734a-42f8-8626-8e3ff15f65ac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aaca59-06ba-4511-98dd-6f6188932ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdef4aac-0d6b-49f7-ad86-624e2fccb370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1f667e-e5fa-42c4-a218-0f4ff1b75e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ccb0ea0-bae1-46f6-bc44-7b4d2cb410f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b8c663-c332-4cd3-9a92-8aaa37538a0a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c8e43f-c384-4263-a681-b96ba9b321f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89105d0-9083-4f1b-ab51-ebae46a716ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff367837-674d-47af-b49b-cb78773678e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f5df046-e090-4ab3-aaae-bddc8d7c9212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f469ed4f-dc6d-4b0c-9aae-ef2aea0cdbcb",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d88775-b3e7-4ef9-bda9-4c5c1e551c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c9713d-476e-4c64-b5d7-2d1c78a181a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a5fc1f-fc8d-40c2-8a81-40c055f85644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df648f8d-e0c8-4603-8714-18dee871704d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da69aa61-a155-4633-96e2-be85b8cae011",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198ddb8e-7445-4125-bf2b-73f8beec80ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c013e7cc-e3c2-4af3-9383-52420c5c6234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f76e6a8-8ada-47bf-ad6a-f3bee9347ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c67e7012-835b-462e-b78d-c24cf507c00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd11a2-7124-453c-a547-1837096bdc46",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d56c8a55-955b-4cdc-8594-60de6fc8e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef94853-a553-4aba-a51b-7617a5400f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baabbbc6-6206-4906-a7f4-b3af8bce04fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75337125-44e9-4e9c-a9d1-daed60f59c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c87f48-9475-460a-9e53-c7517309e4e8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8656e6f-97a5-4dba-bf2d-95cc5be1bb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf34c83-698c-4cdb-9a46-95d6e9b84d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f2d6fa-d739-41c6-8e13-db4a56239d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68e7677d-6398-437e-a2a2-a1b02d4374cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37222cf7-e27a-4af1-8748-970a2ff857f4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5a1515-50a2-4270-8733-984bbfa15aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30309f5-5fb0-452f-9a8e-1cc64d9e8e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfdcf37-5384-49b8-ba6c-8ed1ff924583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8a6ad32-0f34-4e28-a8f6-01b596cef77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38a07b5-9580-4fa2-a1e8-180ee74ddac6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8ecc4e-629c-4cf8-8d93-cacdcaf358ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cfb1a5-0a60-4366-8afd-b0e494e14f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad432f0-89e5-402e-a8c9-56c852b7e17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35bf211f-47bf-410b-bb82-3e104bc689d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79187199-2b25-4406-ac02-e6f3af360032",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0044dac-48d7-47ab-98f0-702148573bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fba8fa-db21-4562-a518-b84006379994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172281ab-d726-41c4-952d-6358b05598e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf3d5d33-878a-4b9f-a094-746cc3f9dc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55d6c1a-70b2-4b21-991e-c196e2141ac8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8694273-5fea-4b26-b6c1-24b6c58487d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d31b66d-3e09-46ae-90a7-89b9db552858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adb25b4-d9c1-44ac-a0e8-58b971487f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8deed31b-5c99-4b81-8dc0-2ef897b7b0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fc5717-de1d-4cb1-8364-645d2e75b60b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7899d9-5401-410c-8fee-bcd831677bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f70476-1150-4acf-bdd5-5a942b1d4f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2b457c-8beb-44e9-86c5-53e1897cd2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61f9ac1c-e6f4-4c34-99e6-29c31d743789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6f2aba-d27e-4b08-9b6c-0de09e572b69",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9b389c-9f26-4d4c-b3eb-73057c13daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd3b16f-bc82-4e52-a5d1-1b26107d4ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3932d5d-9282-483a-b93e-c2e7971063a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e545a60-3ad8-4441-9c32-d37d0aaec4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa2a8ce-3096-43a9-837c-ef169051299e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae6b972-f59c-4f89-bae1-50811138506e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a0073d-3693-4e89-97f8-17389ca3adb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44731cf-00b5-45d9-b41f-13daaf0cee72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57c56bd7-388b-4d85-bffc-c2ae824353d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04debd67-a046-484a-986a-df963fb6ca58",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825ab9aa-a05b-4638-a180-1c2d7959f250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6360575e-246f-47a1-8963-8bfb6801fd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b20939-b138-4cf9-a37b-06e10fccd7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecef9e62-3af4-4fc0-a82a-a51ec06beca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145849f2-adc3-4888-97ce-82ffc2de6b22",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39383c34-83b3-45fe-bca3-35cf02a465e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ff4b3c-1b8c-46e4-8ddc-1c199a152654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf6510b-c4d1-4405-9d39-80a6ad1ec490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25cdd423-2e27-4ff4-9d74-b087bb2a1dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee80c85c-e3dc-4800-a59c-36adb8f5225c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24d0374-3b7e-437a-9f0d-4b46dd815390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c37b192-e285-4088-b22b-49e5d509413a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b506962e-64cb-45e6-8f89-0116e30f0324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9ea8016-4b8d-4021-bc19-1f451fbce617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab2bb8c-412b-435d-bc75-73e4c39d52f6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d0d6e3-aa3a-46c7-858e-25ad3bc0c585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e709e1-2e50-45b0-bda3-2c6528f1061e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4faf17d-bad8-47f4-92fe-3b635d3bdd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a195833-0204-4bf0-9ca3-2a212d8f4942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c80861-2a6e-420b-90ae-8cbd606c009b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304abaac-8840-470e-ba4a-96af364b9b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6781dac-4824-43b8-9122-974b1323dd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0982922-79dc-497a-a55f-62902d16d9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f285137e-4555-4470-a8f9-d2fbac96332a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef54543-63d8-45bc-9280-e293510f62ea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294dcc4d-c0b3-43c6-9eb5-b750a6e25e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25610999-23f2-49e7-b012-baf588a9d777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1173eeaf-571c-45ba-9524-ae69ece80050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "946bb683-2dec-4da9-9346-488090796b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d030f2b0-8e6c-406d-8971-dd1435755cca",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6283233-7ae3-4f49-9044-e1649c409bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8c8a75-316b-4b61-803a-b0edecef14ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e0d670-48b1-4ab4-ab7a-ebdfa4a670f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "817e35ae-fbe4-42b3-84c6-47de2e44971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed45c910-a3d5-4e01-92ea-10a7805a79bd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12d17a3-6291-465d-aac6-d5505ce88efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42962a5b-6624-43a7-9692-c738857da87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e844a9-1050-4c06-b314-7534276bc46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df08fca2-e67f-4ebc-9353-aa103beb1779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745b8538-f17d-44de-b9fb-a594b50745e3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6fdaf3-a4b0-447b-85b9-7e67551855ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2974cbe-b2a1-4d4b-9b7f-bbd0c12a2066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26027243-0a64-4045-a091-07fa90d64c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4850ab42-3eaa-4c10-b0e4-9bb131039654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3717da5-8de8-4be6-ba2d-77b70cafa925",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0fa5c8-9e89-4508-b641-1d3f48242d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa6c2ff-593b-47e2-a985-9b67424d47e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e49106-7213-4b5c-a7e8-9c59a1a3bd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24b9abb-0459-491f-bd31-1d517f2c3fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24da5a3d-bb99-427c-ae14-77840860a48d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75029772-edc9-4304-a44d-2707177c7719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3fc4f8-a534-4bc0-a0b3-b8ba83baebc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db961b75-068c-487b-b6c2-a0656876ab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b02db64a-7ff3-4f39-8d68-b0a6de87dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ecdfc0-6fe3-45d0-b794-11a96d461bbc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffeaa88-e40e-4ae3-a7ec-0a58cc3dffe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3aa4d17-56aa-44af-92ba-70bd7c731de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f5bada-d684-4398-8fd0-3b30deb21361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7db4f72-ab6c-4f66-9c70-fd44d4841898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8396e4-6dc4-437e-bedb-4175c5154783",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f879e15-d6a2-4f4f-9b84-64f2823a77f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df62431-15f7-4537-bbe5-a9ed3a808638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac30537-d56c-41a7-8115-6b960940612c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb6f907-57af-4959-8a5e-cb4cca607430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb0f637-645c-4d4b-b4e9-28b0b952f2fc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69684c7c-47d3-4a5c-8d79-3fa6eb269261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b40db3fd-f49a-4d74-bace-e2f71cc97062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df938f50-76cf-4297-9d9f-1e6c9a06ec28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11f873bc-5245-407d-a009-4db49442e251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4df159-f9a2-42f0-a9a2-827b3fe66d47",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa2c1f8-24b2-4d27-902b-089186657de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862c2431-5969-4f69-9618-41d6416f1aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ad69ad-0c4d-4aca-980e-828522d23efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a257ef2-7a08-4964-9fc5-ea250724e249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e46232f-f2ff-4d5c-8f7d-d68f2851b401",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40c8223-2e91-4969-85e5-750fe3a9630e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cc5c3a-f4e1-4429-a5ad-34a0419e7458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf81ec3-7d49-40be-beb2-8bfa694c06e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89c865b2-4ce2-4fdf-aa4d-06604a604666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13d31f2-97c8-4813-9cbc-38b11dc697b4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6e4ac8-937a-444c-881b-ad51e1d8563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54b32ab-9fec-48e3-b5f1-1493fad127a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed4ef53-1d02-426e-997b-a2da0ebaaaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41782328-890d-4a97-a280-0837e51b51d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ffb5e2-00c9-47de-993c-5211b67bec07",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e2ebbd-dca4-4b9e-8783-0aad44385ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9814bc-a4e8-4060-b531-3d0141bdde7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cf0262-4d4a-4402-a215-c0655cea4075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2aad93e-eb1a-44b8-bc59-52c2b967be2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dfea82-2b21-432d-ac40-5ef6bb8e8c71",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fa961f-0483-4563-a332-07435f406397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6870857c-69c8-46cc-9bfe-0ca9ea3fc059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15114b56-b9b4-43e2-82a9-d7d43a09d724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff69c7ab-361e-4bec-9647-686f32c19502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a1a4c6-2b74-4626-8b0f-8b0dd847819f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d810c7c2-0938-41bc-bf8e-95119540f332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb4ef30-733f-4fa1-b3ff-e90f5843e4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5db8066-4730-4ac5-a5c7-2b9a42919b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d36ba31-f248-4ccd-9095-718b34728d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5f0825-cba8-413f-8f0a-c3d9cd03004e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cdb226-9f40-404d-b66a-5867bd8b7fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec7f079-ab3e-496a-8f14-a8f19a805549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260c0519-45c4-4aa6-b884-83c30321f80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d9120e-34ee-4b31-b187-f04540c404ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7ddb7a-6889-492a-b40b-0793d73c4ac3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87937847-6c31-4961-9372-b4bc5a1706ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604031b5-3673-46b0-ad30-bd0fd31e6b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711c2fe6-597c-442f-ba74-02e2e66d8d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "259ea378-1cb8-4a90-9c72-d62039caa591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a972c81d-27c0-471e-976e-80a7d545fe5f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef31790-4646-4b59-b7e5-1fe5706e3c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdcf3b4b-53c4-4015-ac4c-b701e566aae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadd36fc-d977-4e36-b670-b39f84f03313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9314f38e-efca-4608-ac1c-3f0a84e042f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7ce59f-0a83-4bf3-99b1-b40081dbed65",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53069480-bd5f-44b4-9e28-fc79ab19e482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affa3104-4ff2-46c6-b70b-5a6e31d58dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365caf6b-bc12-40c7-a338-d850a1732f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a246a6d4-7c5b-40ba-af1d-f9a9d421bc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27158f8c-c2e1-465c-b612-ad3561608d44",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7fe63f-f7f2-4d0a-adc1-ca4299ac6c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1728150-2ec5-46b4-a280-3b63e5a5f386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad63edbb-8649-4a56-bb64-627d61eb55d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a83eddca-58f0-4239-ad48-aa190bd9d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36431afd-f2f9-4759-afdb-7424b7c17ff1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2e1aba-271c-42ef-b916-34115948dade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07e7919-1ae2-4aa5-bc14-0f87b5398d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b36a0e-2de7-42c5-8991-4d2b9db8720b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a77281dc-ebf3-4a78-bc82-4b2c3ca30d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15844e1a-6a77-491b-a05e-6dd76818c9c9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88aa1727-3179-40f6-99f8-2d96f25616a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce2ae3b-5660-47cb-81a7-bf047ffc1352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429bd451-039e-454e-b068-acd453a11712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee1127e-4337-4f5b-9388-c915ef900f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4959e96a-9660-4a9c-807b-ffdc97e8edb3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dd07a2-194d-424b-b5a6-9fbc2783fbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32169b1-5938-440e-9292-22bad8ee4a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9099a03-c453-4df4-97d7-847b401e33d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dcd908f-e816-4ffe-a4b3-df5f296fd008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc77c075-38e4-4502-ab8e-9464ea5b2a84",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1966aed3-1208-4831-9cbd-41aa1ea368fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706caecb-da45-4b2f-9636-789f4694a225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366f3664-88d1-409b-be6a-115cfac65c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f75403a-f071-4848-8332-6170b9752d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933bafa9-f4ae-48bb-a1d0-5a8181f1b4a2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cfe574b-92c3-4cb6-a94a-fe217647b04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426a0adf-3251-4da2-b736-078d586ab48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abeb54b-c50f-42a0-a4f0-f57cbf2f325f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47e9be04-878f-48df-8d0f-78641759905b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cf166a-68d9-44d4-bcce-9357bd8fc0d4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c8a494-ff75-47e8-a6b3-fc42b6c74c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d422f5cd-114b-4f6e-bc92-748602e63cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889bc885-52f8-425d-9754-924b3e5cbfec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e3cdc9-9e3e-4838-9734-0453912ae1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb927770-af7c-46b3-a5a2-6865a41d000f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5f41f0-eaf4-4106-9dd0-0d3ed77cfe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a2654a-cc1c-4b86-81f6-3bebc4ca4e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe22347-f56c-424d-acec-cd0744965d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3bc6e4-8b82-4d54-a3a5-ac3085037424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09370cd-f4f5-4046-8370-130bc606c080",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4166e862-e6ce-4bc1-bcfa-2f77979e9e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "188a91a1-94db-4c28-a2f0-6d0439939006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323aea1c-ba9e-494a-bbea-4bbaae27b2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e138cb-ef5c-44a3-bf93-7149306163d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59912f5a-725e-4883-a3c6-4c8fdad0d05d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e962791-713f-49b8-b17f-378a69875e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0b07c0-8285-4650-a69f-f0f0591d1cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6f7ad1-2662-4b38-a575-0438e5446b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afcc857-6c6e-49d0-9a96-46c949f168f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de85685-e27a-4765-81af-7f4bd47afed9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5b1839-3d45-43eb-8498-08e5802afc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf22c7b1-f66c-4807-8c83-4e8eb6d3d08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3976b970-7f19-42d1-b31d-514ef20643ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fbbd61-2756-4ae5-bfa8-1363283afe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baabd7b-6b58-41f2-a8e8-9a61f674dd70",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b38b07f-5ea6-4fec-8b08-1cc925e3ee4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a9011f-0f4d-4a2f-bf11-a02cf3b5d899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00407ac-527b-4df9-b6fc-424be00f9048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be9e7d5f-ae24-4662-93d6-8a1270efadfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88b5c1e-0aaa-42b5-a7d6-a4027e404506",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da22ba26-7b4b-4fb1-a07c-c3dc67785c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f03c9c1-d659-4e67-bcd2-0cfd5ad40a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9c1857-1302-4fc8-b1c9-0f31bbf908ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d3d4f3a-69ee-48db-85b0-67b5b9df0ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8317f8e2-b4a2-4523-94ab-ec0d686a9915",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b835c2b7-6451-434b-9a86-4259ad2edd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62d8ac1-e269-4320-91bd-0206a3ebe623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f65662-489d-494d-95c7-f83f326bc901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c21282c-7cf9-4db8-83af-ef63a8a6e2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06cdf3d-f0d7-4010-ba2b-69d28d496480",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d82f3b-f801-4f2c-8bc4-5c2b7dba423e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c411168-f23b-49fe-bd2a-4d6f012377ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1eb3bad-de1c-41d8-b5fd-5de616a4ce80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "612cb036-ee57-4664-bd58-3bc2bdc5c77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcc989b-1052-403b-aa91-a166e0fcf143",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6278a46-492e-442c-a729-c44a4778167b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccfc8c6-2adf-43f1-ac7c-38b971ce033c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4628c319-457f-45d9-b1d4-fab5724bdef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffee4da-856c-4df8-88fb-a0cd3d258f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60e5f40-a655-48fe-bbdb-5348fb1cfb70",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155ba803-0fea-4a10-aefb-141fc6038efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91752d4-a249-4847-b7bd-45f9c10401d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb10b3a-03d7-4f41-ace1-31b12f0ffc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b82b2760-cc45-4f8a-80a1-9afedf6b35a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2ec4b6-ad35-4407-98b2-050cd5b3f7ba",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5218f920-371e-4652-9608-9d77a9ad5704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c823a2-3fbf-441e-a0ac-1da2c2dffbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e459dd44-8c70-4122-80c6-e973c9b874f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bf02fa-9e21-405f-8ed9-6ad272149321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af71086b-a9fd-44a8-b400-8de9e5dd9b13",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f9bee5-67e1-4024-acfb-4ca8ced2e5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f979c40c-70ab-45d0-884e-cf0959522172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b55fd9-13c1-4973-852f-4867e77f932d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7412b8e7-edb0-49ea-a75e-b8a06cd75366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131a3da9-d923-4100-b950-ba19636c31cc",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558bd322-2b13-486a-9052-d88e2494ad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0089b78-26ed-49d4-b61f-95e60276a55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6646df21-9c0f-4346-a9a8-465001280f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c06bd0d9-54e0-4538-afca-47aa7046384c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f229d86-d871-4037-b842-e8684235ee56",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2735fd31-58f8-475e-9280-b1e1f60ae417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89715ef-7e02-43b5-b7e6-8e89df292a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281253e5-92a9-4d64-b0fa-09738350e053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd932dd-c628-4ebf-bb3c-67b4450f9b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539ab0ab-3a8a-43b5-b9f6-5b06333708b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da6d535-f4a0-4576-af9f-e62d31e44603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da20b53-024f-433f-8d4a-9866dc02f1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ee49a8-fde0-41b3-956f-93439f260aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "db383c4c-a09a-4aae-aab6-0be6f3df4ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae3a55d-d3d0-4fbe-beef-9ae246f5327e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9fc6694-d709-478a-87a9-efe6754bd507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4939ec08-3018-4365-bee5-8770c5a58ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73110342-35d7-489b-a399-24e93c312752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2948af-353e-43d6-a123-a26a103fbf13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8c97cb-f3e2-4091-8359-51ff2d68a81c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e790dc13-e18a-4743-8a2b-0495aad94a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566f1edf-7b16-4a28-b03a-f99b92c215f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfeda3e-9912-410e-940e-6d21039868af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7742669c-e476-4986-9634-40c3a84d89a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0945452-e011-45a8-8515-30c780d9c54d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc456e7-b317-40a5-a582-1be13d46185e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d0aad0-0886-43fc-b707-4492a79f381c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4659c1e6-ab02-42d7-afb8-22ab65b70b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a62a283-f02c-400f-84ab-d701eccdb55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79ca5ec-b524-4822-897c-f50e31cd7d79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e92bf62-cbaf-4978-be45-3c9945c69421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31431791-191a-40f7-b6cb-e60530a21a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad0b1ad-aa52-4028-ab1c-f8dbad225c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ff48b0-4a59-4b13-a169-ebb3c32e1ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2416db89-4b51-4976-806c-467d76488e42",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7659601-0edb-4759-a9e4-09086b16cdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7a66c9-d598-45d3-a72c-275c27c39a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3dc903a-1cc2-4874-a636-b7d5b7ba83da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6bd702-27b3-470a-9d71-3b64670c324a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81936a8-21e8-424e-9278-86883d61ee85",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83963ba4-1cc4-4400-bb1f-c516cd0f5841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded42d7d-a62f-422b-823b-33d207de3981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5098183-368c-4bbe-9903-61243bca6d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9399d5-bedf-4d2c-a05a-a2aa630f683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aed2b3-1994-4c85-9c71-80d716b02403",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61249f1-44c1-4412-aa94-56ef79a0173b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525aff51-2409-4cf4-948d-70979c47ca60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc67e4ab-c53e-491b-bc9f-b563414be054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "919335ef-8850-4afa-a1ea-c2eb0b2032af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cd34b1-7ec2-4cce-a0e9-5834162e8c18",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58212f9c-0ba7-4bd5-8e43-cc78fa4be342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea99cbe9-2e52-459a-a930-5b527ca4463f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fff1932-82ce-4bec-b5e0-25b6fda55d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c526828-4099-47c8-a7d9-8e6d2f6963c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002dcb98-777b-44e1-aaac-e40ab3edbeed",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5354995-748b-4a32-becd-7da4c9ea55b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4741ee2-65e8-42d0-aab7-81799e3de7bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc63a38-36e5-4466-b3a2-24f8bb400469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6327f3a9-63da-44c6-a0fb-109547f140cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a6a0a8-2317-4ea0-b604-95c97349e4d9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8cab6f-f04e-4585-99d5-84dcac57753b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26395f2b-a483-4956-b005-54158e1b288f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7210f2-8b6d-4172-95c1-6d9f458d900f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "23b13c1e-e196-49c1-9763-0184bb095375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ee10f4-4edb-4475-8484-a391c63daa94",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e33e85-1dc5-42e0-bd71-8cdb38360552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3872603-4263-49ea-939b-996fe4a80ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ff5fb9-a6fc-4449-b425-90c7531b2bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "97843591-2c4c-4ce7-9118-d05b4b660824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5274fe6c-2a26-42a9-bbbc-56c69c8c9e9f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0766fe33-4268-4ca8-bb5d-680dfbf427ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146a8310-0a27-496b-b534-6a34ec7f21c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a1d2ae-bade-44c6-b752-e86659597b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff6c38a-ac10-445d-a14f-a2c5d9435ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4333fc4-c464-4376-9bbe-fc47da67e55b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f370ec5-6b22-4085-a747-cf44078e7950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ae3740-0622-42a5-a850-d2c3711ed5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299d0812-b935-4985-8d1f-bca6284f2151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "754dc078-600f-4d33-b6a6-9edb7a8f7ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e595619e-4c5b-4f32-b3e3-e01a565a4928",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79329771-0cf9-439a-973a-003adba66d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e34184a-e190-4b5b-ab03-3158eb055207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dd319b-6181-4459-bf50-d61400cecdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7d3ea6-d8f7-45ef-a847-71ef4b457124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8f3a06-0a57-41a9-a646-e1198230e1d7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042b8834-8e19-4d79-8672-9fe22e58cca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9126deae-f2ae-49de-82a0-816607e5d82a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf06154-be2e-4978-8cc0-a9147a3ff538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f84292-30b4-4a4e-b270-24b422a7ee22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1fcbb2a-5aad-4b21-8267-4c8e020bfbcf",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8bbe53-ff4b-48c4-a800-37c31db4e894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba08f9a-03be-4ac1-9b0d-ed2da1b14108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09ff170-a091-4b5b-b224-a225eda2db48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3b47a0-eabd-454d-85f2-35a7d4eb363c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc664b7-9219-49e1-bfaf-28d5f191ef15",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc85889-7696-404e-b4cd-5756b0b33a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21d4318-2e80-46e9-8cf7-320c63a82ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ac9f6-a4e2-4626-a13d-cd2bed42a865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80d1dc82-b11f-48ae-b360-d5acba66bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29cb27a-3e1d-4fc1-894d-8c48f0dd1954",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cdff8e-00a7-4df2-9ebd-066b5e0709d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa12ba4-91c2-4ec2-a690-cfac0e9f4512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbca7e10-5b21-4dac-897f-80b23fd8e2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d88651-cb04-4b2b-adab-fc0559b19487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbbb9df-676c-41c2-9fb3-f676bfbf65a2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace41348-a78b-477d-952e-2429885f2a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9309fb-914b-498f-90f9-ec8fce44e396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ee61f7-e75a-45a7-a748-8d22a7c7b281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6c14f0-6caf-470d-85d2-94e3577ae408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfb50a5-afa1-4e88-a5fb-dee0f841db72",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8449db6-9833-4e9d-ad4e-a88b3759e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44edefe-8d0b-4713-b476-5ab31a1d7a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b247863b-0137-4094-85d9-fa5c5c895154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a72f50c-9112-4f37-afc5-fe100f7e6f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d092bb12-0fe8-4e02-8e4a-428d18d37d17",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f93fd25-4d6e-426f-8ea2-25190ed1fa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84a5f68-34e8-4abe-a316-3983b2e02510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f25a72-bfa4-4467-a741-fb12ed75b8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46be449a-0623-422f-8d6b-738cc2462eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342322b0-4d7f-4558-aa43-fda81dfdc9f1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8ba5a4-5386-4399-9178-9df07b220ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa34215-5cf9-4885-a051-c03102d2375f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bf499e-e9ae-47e2-957a-4337398c392d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1afee105-108a-44c2-b8b2-662419949a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b478fcda-866b-4629-ad5e-fa8b212e5893",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9b5afb-bc5a-4599-921a-f6cee6bfbfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "262b0979-076c-4930-ab1e-34544fdff828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c8a0a7-dd66-4801-b003-5a2108271f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "177953d0-99a8-4778-9218-23bf627babc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76c50b3-0e40-4ead-8e33-fb528ec65cfd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0767c462-37f5-4759-9627-de8c646d77ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe63bbe-cf92-44a8-bd80-2c1d7aacc8d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4b817a-ff24-42be-97a8-b5b3e0959d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb53c6a-ca22-4fd6-9e52-85406d4f1054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7c7a0-0016-47de-9bd1-745d97a59c8f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70306d77-da6a-4422-a6ac-a1cd57b1a4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2347a3-53de-4683-8e06-d8c477a44c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e308b696-29b3-4229-a971-d883a447b0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f371b9fc-9651-4d69-a445-de4caaebdba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68260f5-20b4-4c2b-bd22-ac6b33868306",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2aef10-33ba-4e07-81e8-0247ed3fb449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c27beac-31e1-44c7-9bfd-8feff131ceac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56eebbf0-8356-40d4-9415-1f4a317e57fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fefeda-4386-4ea7-bfb8-7b98863a6c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997e36a4-80de-4ae4-8ccd-1ad579866128",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2d17b4-db92-4b27-a3d8-03b67db7bf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d10a804-be9f-4b5c-a9cf-4bdd9a0af6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca838de-a899-4737-b4e9-9c9f9187f6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75276128-d5cf-49b6-b304-8984852c7cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41213a6-1ea9-4e06-b100-23ed88ee75dc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43c2e6b-1529-4f54-919f-e082ea62e39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1b9e3c-ae8b-4855-86e1-e104e2b8765b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71112eda-2122-4f4a-9d0b-e723a94bf976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cafc8dcd-3a9a-48c9-a5ef-b726f24f63ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d75eee6-ef69-42eb-9d38-de234dd2e85d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef697e4-f11f-4ec8-b6fd-39a3a74b7bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96e3447-9576-479d-834b-1d0bf02b258a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26f1fcb-48f1-4c72-afb1-bea2e318d79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a33b837b-74d7-4749-8e1c-e8a6e5dfed86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bf97ae-6c17-4c77-b5f1-8c191353b929",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862a6009-b632-44f2-9871-7e547046e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf77617-258f-4f46-b492-4bf037564529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adda901-e554-4833-965f-56b9d750d301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cc8bfa-1dec-4869-aa16-583e0c77376d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75accc63-af77-485b-8b07-8625bd7afd3a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68a5960-ec45-426c-b8e2-b79c59ddfa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0582a43-b208-493a-accf-dc6dd9bdc989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b877f00e-fcac-470a-a971-8affee2c268a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed27a323-d8bc-424a-9d9e-088a962ef16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf39433b-e783-4d54-a592-f73039fb385b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc6bf42-9b19-40ce-9469-54b812da1fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c5baa9-be4d-4b8f-9d15-ee399fb6560f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d8626e-1105-45cf-bf11-347eecbbc55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e224369-7a73-467b-85e4-35d466387943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314c434e-76f9-4662-8d97-7e2008ec1671",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc176e3-88dd-487a-9379-63442a60e93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac9a5e5-9fe9-43ae-9cb9-f7b0f794a5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ec7e08-dbb6-4ae0-be3f-ffef8eaf0651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23305657-e2d3-4fa0-8b8e-9fab58c90628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938d3fe8-ebf3-4860-84c4-1da371e96094",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3447783-0c07-48a8-ac22-4045c3f1fe61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e8973a-4c7b-42e9-ad5d-b75d6952cffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffa6341-fb31-4bca-8a90-8f1fd3edb908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7dfc9f-21a4-437a-842a-b35a92e2d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ec0c70-bb59-455f-85fa-2b24926aa9a2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f83e01-e687-4041-b477-ebf0ff5a1381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dcbf3f4c-a5d5-4595-98aa-44ef1a84f61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1f0c69-4cfb-4240-9adc-78cb8d026584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3bbe7fc-63bb-4aab-b5d1-5a4e8600eebe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c482b107-2d67-4d40-9da3-f3abafe7de26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d49f28f-36c6-4522-84b8-8f1bb8088b3c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c59669b-145f-4daa-a3b7-03e1115cd79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "828c83e9-3bf6-419a-aab5-967fceb70ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208db783-a040-478f-9dce-126177a543b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dbff623d-75cf-4d8f-bebd-7563ff358606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57212c8e-2d3e-426a-a7cf-3c0edde19f07",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be41ba4-f891-4c64-8821-bbed7a8b366e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9bb130d-d458-4b66-9c51-2b7d65a84462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7765d33-eba6-46d9-b2b0-a0b9d34264aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9de106f4-d9de-4e34-9e4e-9551dee3cdb2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72b0c720-d90f-400a-8cd6-0d369196101f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e57b099d-f746-4c31-a438-30826f59d5c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "013cc80f-dbb2-4fae-b255-84cc11809df2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62ca615a-50d2-412f-bb32-72cd884a4f60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d2f998d9-3282-4ec0-8071-9fda3d7bb58e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "454b2578-840e-419e-956d-a65d992ef584"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4835714a-b714-447f-8f54-6f02f60a498e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ae788bb-d509-4ce4-8f2d-653fd1cb3498"
                }
              }
            ]
          },
          {
            "id": "27a38270-d003-43bd-9df5-217e99c0e8c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6df67a92-92a9-4196-b268-14854c334d11",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2b9bb49-722e-439d-959e-b9964af30d52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f521cd1-cbb3-48e7-a1a5-63b44b7019e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "323f1e71-3ab9-48f1-a509-1ed120f7e410",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13280f17-4d53-4d14-9062-dc434e51a9ff"
                    }
                  }
                ]
              },
              {
                "id": "adc53b80-2290-45ab-ae7f-0b362fc53250",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a09ec6b8-cf63-44e2-9cef-899660822b8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2313903b-11ec-4739-af90-d18833628756"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb96d1ad-9379-4fc1-a039-faf65a9e9baf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8950d426-edf9-4310-9682-b906fd48aa2d"
                    }
                  }
                ]
              },
              {
                "id": "c334de23-0896-4939-9757-2f409dc76748",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc24c127-6bb4-4e5a-a34b-9a8313852ddd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5b4f154-a58f-46af-86f7-c7dbfb8a2ee3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17502c92-2f4d-463d-9567-74d3a7f7d10f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "26b81678-c3b0-4722-9240-79bebabf8c43"
                    }
                  }
                ]
              },
              {
                "id": "505e7088-db88-4349-96e5-1eeb7bd6c0ad",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24652698-1809-4802-8848-c52a9db5ab9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a60f2801-0395-4976-b456-2216b2dd38ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "533025e0-37ee-4431-a589-ea16767cc90d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "307bbd85-24ed-47db-a6a6-592f86fffc5a"
                    }
                  }
                ]
              },
              {
                "id": "c05d6f8b-3b83-42ce-9415-721d6ac03001",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8b281fe-8cfe-4e45-8957-26dc3a70ed35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f2c1e61-8a89-4e85-bb43-aa296d91d8c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c322f681-f2ad-49ed-90ae-42dc21288096",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12be9443-41dc-4ec8-a1f2-c810db623ea5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c60c9085-d15b-4214-a614-870e37670b14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d403cf0a-cad5-46d4-891c-9da56af0d8c3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "baf6d09a-6fa1-41b8-9390-4e13b9ebe561",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34b76a8f-e5f4-4848-a9b1-d37ccc10eb68"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5ecfe37-b2ca-4050-b2d8-7d38e5824615",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5b44b92b-6b35-4f5f-b05a-18aeca27ba5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7f88ea6-02ad-40c6-a6e7-0b7781711e32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d49f3892-dafc-4cea-b3f7-457cd4ae3bab"
            }
          }
        ]
      },
      {
        "id": "367c8966-d627-4648-ab7f-cd6c237ad5a6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f7a91722-ebc7-49eb-8fc3-b972e1124114",
            "name": "Negative Testing",
            "item": [
              {
                "id": "86dce792-1ec5-40bc-8807-4a52e517cb3b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b94cb2dd-1ad2-4a58-97c3-483117175962",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0a00b8-8c87-403a-be9e-5be635951586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17694110-f2d3-4541-b6c8-39ad885b9c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684d0238-a07a-4656-9a41-4ef9e4c8088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8eab39c-7d7a-4aa8-b24d-74658e2a17ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004d1b6c-043d-421f-8969-2a27538117e4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ed8ace-fa68-4716-96db-565fde8b0cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faab2817-56c3-4c78-80c2-48f96dc0faef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e277eb-9cce-4984-81a9-480c151f3cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52fb52ee-4891-437c-bc32-a64db7a04abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca0f91a-4a70-4da2-a611-1830416166b8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8ba441-f565-42b7-9581-c7f91a949002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4550685c-0421-42e8-bdac-e228e68ae645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2106154a-7feb-4b59-a872-e29268631fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c71eb27-af33-4ac0-91de-b9a66a252412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26ac8d1-5f6b-4ab2-b22a-1a0bfc22b8c5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae06b89-5488-45d7-bab4-528f1ff16cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9a26d4-37f8-4081-bc05-f5a07df16e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccf9f1a-435e-4159-ac23-196d7c5806c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3165809b-5f8a-4dd5-8d53-33ad7a1eb4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac27af6-b95a-44f5-be18-fbca368af932",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2738484-6b00-4580-b51b-8f6583751da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e510516-842a-4037-80cc-c33f60015e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b0b0aa-5928-4c5b-a661-4646c7e59b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8448f10f-d8f0-4cad-a6d3-874870bc341c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfce0497-4d06-4548-9c38-9137c8e5da40",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92262757-26d2-40ea-8f5d-9f1234feeb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a24f00-64c1-4626-94f9-2fc959371f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952d435a-2171-4467-974f-83c60cd88a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "560b0491-152d-458a-9c60-eba49b113bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09791e9e-cbd1-4455-8b9f-d969794663c7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18b6dd3-12aa-48de-9938-11f3d9b9f687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acded033-7b54-4ba8-85bf-9c76a8c09413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57419bc7-c639-461f-b8d6-5e8a15e78ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "467df3db-5e63-4bc4-9468-f6547c2fe2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa5fa5e-f124-4ee1-b78b-4cfea44536d9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd83630-35e7-454c-ab67-f12ac22d7f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5c2758-2202-47a5-87d7-ec0a702050fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0daa4b8-eb44-424d-9c44-871f21433913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58904659-fef5-4431-ac21-42c388e553be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078624c4-3cd3-4380-a283-0634847a340b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5611b57b-4616-4117-a711-f9105636d489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c54378-c81f-4c31-b96f-22c014a3da82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a72b50-2af1-4cdb-8a39-77c684ed0e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec77dd90-9e15-4d1b-83fc-e0ed23415e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eed22fa-5ee5-4c7a-9f90-88f5ea1d8a14",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfe7104-55d0-4004-946f-b8094447034e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88abb3c-ca45-4343-828c-f78486758512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec5d907-2aeb-41e2-9696-f66aa668f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e48d1d0-8705-4cb9-8e7f-b289fb988184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde9456d-42bf-4eac-9f1e-21a8833b5657",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f81ce2-9ff9-44ac-97eb-933f26d07c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "339b2655-0486-4ab1-99f6-2ec612e5af34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca6e591-0aea-44c4-9293-e12eca4f1013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b4157df1-fbd7-4172-a925-fa5df4089044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cda7d0-2db5-45f3-83c7-9ad9a5242446",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3be689-3dad-4559-8868-754863fec6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e582d1af-5900-4634-a377-bba4f674eed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be3bbc2-bfff-49ed-ba94-25fb86c3a66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6412d129-a428-4767-a5f1-0dd26e7cad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f19167-08a2-4a6e-aa01-3d05bd5757a3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a700eb6-e625-410b-bca9-61d7472c6429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b309a005-4ef9-4653-af93-e0bd30dbf8a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58142974-c3e5-4649-85c8-6c735ae400d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a3c6ee-b041-4b37-811d-d5dd9b31fb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94982258-e0bc-4628-bc9c-8580b6b72393",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "471b9419-a253-4c6d-aa63-b1ded00c86b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb90a92-27e1-4e74-8dad-2bfb445dfecd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43fa1ff-d9fd-4e72-9de4-4f66dce165bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3021475e-c93f-4d97-a184-2d29856d1890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed21302-e544-427a-9910-e4c019990d30",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af03a74e-fa86-4468-b343-51a8c3db4ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79bd263-6813-46d9-a0da-33f465e73793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c08fa05-9897-4d10-ae95-83dc8123b1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e171b43-deca-424d-8973-18a1c58a9f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ed77e6-f673-41e9-8a2a-13bcd38040f9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5121777-d3fb-401c-b6d1-f4fd7c0dc398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0e8d3b-3b4d-4d53-89ce-94a66168c4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1648a2cb-8c36-49ca-9eb7-ebbf2ae35a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6e45e0-9788-4801-8db2-40286ff2cd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5500e085-5cfb-4da1-baed-791fcfa6e905",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26acbe69-7aae-4184-b5fe-7ffd40ecdf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96954bd-e6fa-4ea9-87e9-335ac15bc80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d0a404-1412-4330-a0d6-f9b76c4e48db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3dd5df-f9bc-4715-a7c5-a513b9d5276c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8963def4-a719-477f-ad46-61ec88cf521d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f13090-ee4f-406d-b047-e1a1b07d06b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62675b3e-dc8e-42c1-8deb-ca04a5a42ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f9924f-d0cd-4249-9a41-f8762a4fac01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bbfcee8-f09a-4a40-9e56-4f8ca72358e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68934b3c-01a3-4400-b6c4-f3df03aa028e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c053635-9713-40bf-b37d-d84f6858fe26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e38ad82b-b396-40ad-b817-4969ffd812c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec29329-d077-4b2a-8d1e-636f271dfde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9796b3eb-62e8-414d-9420-5aa0d14cccd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53798f1-8594-4afc-a18c-9f3ba34e565a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e96a7d-480c-4add-8002-5180d15c1488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39de666c-9860-4d10-b3e5-5b29072de337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d621cbf1-02a8-4e04-8074-5dbb1a9e0815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3fe98c-f78b-4d45-92bb-62493f4d706a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa97d0d0-4988-4519-9179-5af133668ec2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b699d6f-ebb5-4808-8ac9-a82b95a2f5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab774486-484c-42db-8081-4c75ad91c3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5c34c7-a052-4f47-8f50-0c14b8565bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9744b2f7-a50b-48fa-baf7-d04a3d073208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65867383-5e92-476e-96e6-77ef6f150f9b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55ef431-ac61-4456-95d7-27c2708ea7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c212d7-c4a6-4761-9e72-b94abd4c31e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d852ea88-303a-45b1-ada1-426d976d0d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d25279-921f-4474-826f-4f5ed4791266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a905c91-e70c-42ec-8236-5cc746241f5e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "489f27a9-c1f4-4515-a539-c7fc1e6d89b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e830b43-10f2-49f5-891c-67337d048268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a19414d-8829-491b-bfe8-89f31656ec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e245a7-bc38-426d-9b1d-b7019b6e2475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14b2e58-16d6-4d99-9fd8-d6393efbf69a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0530664-5867-4982-81f2-cef1df4fd39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f0f7e5-0ebd-470e-9151-597ab15591d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ddbe2a-1295-4230-8cff-77fe8cfe26fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77b0a573-2b7b-4f82-8eb8-e0f7e096823d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b431aa2-56b2-4f29-b20e-cf11950964d5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b170488-0216-46de-8ec6-a488c1ffb14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1789515-350d-47da-8aba-1949ece18bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0eb878-3573-4992-835b-26da27f92b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "559767c3-2aa1-4e08-b59b-2ea6bb959b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a479b01-7dc4-4612-9333-8effbb9e39c4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe836a6-f409-4f7f-ae70-4bf49b06e997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aeece6b-a90d-427e-ab1a-aabfe91e1bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3635e38f-caf0-4881-9668-dffdeed0e0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5cb7d8d-a127-4953-be6b-57203d69b7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018fafea-cb99-4545-951c-bc219ef7feb5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b99232-7d09-4119-823a-84c8431afd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b7e352-f9f9-4f6b-a9ed-643144a720c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6163db-e2c2-4192-804f-adc666974a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f25052-55e8-4322-990b-1109c4db04f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41983b5-f834-461f-8651-c071b1135b49",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516643c8-1795-4018-83d5-750aa055ccc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f58ea5-fcf0-4079-b0fe-d49958c997fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7770401d-2b5e-4f7f-8225-b03abf67267b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46f95490-8549-4a0a-b441-b4a5e99c3b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb601036-5c34-41ab-8fc9-980ab1cdc030",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c3a4f7-c307-45f1-974f-9e4d098b452e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc6b980-4deb-42c5-9a61-ff816524dd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e82414-82a2-440f-bd1a-56906d8afb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd49a8f3-f063-44bb-9427-4b068566cf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f6d0a8-3c49-47ac-8b7b-56ae8f2aafca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad1e6b9-0b50-484c-a272-5f5606cead39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc3e3e6-5fcf-42dd-a259-500cfa9d5efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010fdecd-a049-4442-ba59-eb25dacfcfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4af96c-04cb-4975-b526-ca7f5704a65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd160f6-3ba6-43e3-bdbc-c275d56a43bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c985073-478b-4837-8b28-850f6f5c347b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4771e8-f5fc-45b7-901b-053e26beba33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffec63d8-d923-4c52-a20c-75c432171d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "babd55bd-3d4e-4372-baec-0030cdbc17e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a88438-3cca-4705-a63f-674cc973a47e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb2ba2c-6eaf-43e0-9074-7ff1863cdfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6eebb61-b92e-4f5b-b734-6b0815c00c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd43d21-f456-49e7-9374-2a03a5dbbb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55745b21-f5d3-400f-b12a-99e9ce30fca0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "11012af2-5827-404d-97da-04f99e375d99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76a8171b-44fe-42f1-a819-658f814deabf",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54230104-aed9-4137-91d0-7829c1152139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064c15d3-0c09-4bc4-b9ec-dbed5a4b9125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20762f23-1351-4760-a836-cfc2a1b42671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f208a5ce-d8fe-4970-b4b6-99a463d2a4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fde03e-71e0-4b7a-ac8e-50a811f85ef3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b73638e-a366-4443-a937-0d3124938ebf",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "da87cab3-8077-48a6-a237-c27619b6a17d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fd8b27-b685-4e88-b6bf-80be424ebb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34a4f02c-15b6-499e-9591-08e2f447ad01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "969131d4-47dc-434e-b8f9-e3c427e2b28c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5682eb53-1c7a-4c92-a47b-0ff9045dadf7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e00f2bc9-20e9-4264-b24a-1db6154af5c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a9dee5f-2a03-4e64-b8e5-445283fba7f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95bcf9f4-ba33-4508-a8fb-7f39bb7d054c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "636763e9-f0b8-47f3-a6ea-dc755a4793be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c43c3ae2-c292-4aa4-b669-98268979ba90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa5b1f3a-801e-45d3-a051-4b219864ce65"
            }
          }
        ]
      },
      {
        "id": "be42e98a-0b60-4d83-85f2-4c8205ad050b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d9ff968d-2029-4dc6-a42c-d57f1aa32d36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34bb16d6-29aa-487c-8110-ff968f33eb4f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f246161d-5ef9-418a-9b41-b93371f2ecb4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07da67f6-4322-4522-a034-2e79986563bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3bb061-0f2f-483a-af52-90a284cf75ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a332f8a1-78fa-4592-8140-a6bae7e6e451",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f6f219-f2d6-4a02-ae28-b9c85f95c596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329d43e5-7c9e-4459-aa9b-831d5d4bd608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac1b5eb-bff2-4ecf-97cb-8bf2b2bbcf16",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da419a2d-7ad0-4338-88a3-6ccfd84eca05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da99f4fe-3ff0-479a-91de-95b3cce05456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f550fd1-78de-4881-9f61-ac9098e58726",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c211e2-2f5f-4d73-9d57-796acf457223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feef119d-546b-4cea-9fb8-980426da080a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6326b43d-5cd0-4d3e-b774-461f6b63ed47",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5be427-e8bd-489b-8b0a-063600bdc856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bb0fab-a244-4eb5-ae5a-7ad2c529e82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef2ab92-bf7e-4af4-be73-f9d15cbc35a4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67652278-b03c-4272-97b8-678691c7071e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e6a9f4-ae74-4e12-af01-1bb0c9791a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560784ab-cf8c-42e3-bd52-1c9b039151de",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12333ac-8fa8-4a62-9d00-ca9e985ab53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ace0504-71c6-48a3-8aa7-d1eebdb2cfb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3128de0-7869-40d5-91c2-904596ad1d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0ba7b7-ec35-4ad5-9081-8a6047c66363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513ad899-4c2e-427c-83ee-2b4f338bfa36",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19875807-0258-465b-85e2-ee42aa8b38c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04192501-7d35-4e22-8d3f-32cbfe8689e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3f0033-ee82-459a-a5fe-6f00b62c9799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c235b7-87c6-4779-a4b3-d96202b0da82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79317dc7-a471-4bb3-a51c-80af1f0bc896",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f03d4d-8dde-4149-bc60-90395a43f762",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0bc7ccc-ab76-46f0-bf01-9cc14f1c536e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7d6e77-f33f-4f51-bbe4-08a6312aa132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98dcac16-62f0-4c20-aa79-1ca933de1f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddfc10f-16a3-41f1-90a7-079b626286ca",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a647885-b6de-49f2-a877-0a78c50b82bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9de683e6-5cba-4ebe-9a8d-3f615acfa931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528f8aa4-5c05-43b5-9152-1b687a06648b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38272520-1194-44fd-8540-74bd99451f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9040cdb1-2cf5-420f-93c3-a13569046e6f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f275eae4-408f-4568-bfb1-46127ae4a5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e59695-6926-4155-820d-611e2d7d47b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de55773-ef00-4ecc-abe3-e6886c0e2fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f380e7-ffd9-4678-8b48-459eb4f427cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aac953a-8036-44b3-bf20-cd5c161b0a01",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cd0d6a-6b85-4b71-a1e1-5a65ca485dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5af24b-5a46-4d0e-9b0a-40a5b8919887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f759517a-8c7c-4a78-b3bb-f933004a535b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556996f9-81f2-4d97-92a5-c3f69964ebaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c653c313-cb63-4890-a9f1-eefddafe1f43",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6f421f-2ef1-43b3-a4f9-3d81f515976e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "815c2525-9ae0-4f50-aaaa-79cd9360f84f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b73ffe-0e63-4a12-9dd7-e2965408b08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92438d09-9861-41a7-b651-951b3656d38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89407ef7-3cd8-40f0-9945-ebcfa53a431a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b120387-4b98-45f5-a670-3b5a44ef9b91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35dfceb-9c52-4f9b-bdb1-497f48405308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea91b75a-6f2c-452a-9673-99c11f89fe5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234ded57-00be-48a5-a86d-648a0bde09ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afd1e17-f8d3-4680-8458-e679133d98cc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23880c87-1711-4b9b-92ef-fb238cf96b90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3e4f01-6b68-416a-a584-3df2819ce04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcf4eea-54e3-4638-b044-dc9000e79622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7eb20a-1677-4c0b-8fa0-1018770b9fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287da9fb-2b51-4eea-9f0b-5c19b622e61e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887e3821-abca-4055-b302-f54add4fb16b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd3368f-f466-4e16-9814-918a889c586d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c053ae65-f73d-46ee-9dff-187b027ac865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1033f8cf-fb66-4703-a0fc-1f30c832d83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561aaab8-811e-4de7-9ba6-a31d7c02cb48",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca451f6-e855-46d6-9739-0dde5e058817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d985d4-64dd-40fb-a474-8c39b116b0a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e78708-d00f-477b-9f79-d1e67a53753d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "899eea95-8189-4dab-b575-89cb24811128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c27358-0c17-46e7-850e-b0deb7b0c288",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c139561-0fdc-489b-b406-e9e463aa3038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b597a985-df01-4f5b-bc80-05f3b4132165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e960f4fb-e2c4-4983-aff7-3918ac034772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677339e5-5573-4a47-af75-bf2c2e9a0bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bb0ff1-8dc8-4bd4-9bb6-fbf86674018b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eb7a2b-8fa9-4eda-9745-a4aa382fdcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c579159-872c-41ba-b092-086e2c90f651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c575cbc5-adee-4826-ad5d-d65eda9c088a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e806b4b9-f05d-484e-98de-9d392c2cfde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d58b166-e50a-4558-87b7-c85e9ec69b70",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8f4a8b-3388-4213-b041-4b7b71cd7e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532737e6-94e5-4181-afee-dee4dc858127"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc31a74-3f13-40b6-ad02-926768b512fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be658657-dfd2-42ae-899e-99dc23e3ccd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eea6b22-21bf-42dd-a052-28b7c0e64408",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a816548-06ff-409f-86eb-ad6b4abf7aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc473ea-5925-4cb9-bda5-51ae3457854e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375d07d8-7823-41e4-9f88-0c039880ec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2fe8ff-87c0-4db4-ad8f-f85efa441854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc4f3df-2f18-4cdc-b8d8-cc7ad6b7b0d2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f193574-cd24-45f1-b0d7-09194e2cd3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9fcb33-4d10-45b4-8380-3be3ca313304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e810e2a0-bc76-42fb-be73-1098b8a55d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482fd5bf-7ea6-48bd-b1f7-22e1e27289a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02e3913-9818-43ca-98c6-205b1f179639",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f0cc91-23be-458d-885f-68ffaf0db77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8723bd-e458-4616-8166-785c7649fbd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1903c9b-1139-4a02-93b0-c896406dec4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2047ee3f-2683-4355-8217-a75facd57178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64665dde-f8e2-45d7-924d-fc8e06a732de",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b8f1a5-85e0-4af6-a037-5c5657db1cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b55103-7934-44c4-b1fa-7deb8447c0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1f11db-e787-450e-8269-3a76b5dfa929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021325cb-5384-4ce8-b0db-a3b142e84828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c8639c-29e3-4365-a6ea-bd64e447d42d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c936fda-7cba-4999-8320-ac34933052d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b457ba-1d6f-4ef2-8857-2ee35f36ef03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38c5432-1beb-477e-9161-4a158a6aa60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b560cc2f-ae07-4e92-9e89-921ec8919aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a681d5e9-c2a5-44ff-902d-22ba80b11289",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec062a7-155a-4402-a18d-ac29c59f4e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78b4551-b58e-4bc4-9979-98e130781108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f6d91d-65ec-4268-a098-cbec64f90337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963db480-959e-43c2-b4ca-e9a0e43adb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3653da-ad9d-453d-ac5e-adb956a8d754",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22286a4-c527-4b9c-941e-9fda88576b60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1e6201d-1149-45c7-bf71-a5c435c7c714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73b53a1-9c65-4a04-b068-ed74e8b791f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2493656a-2bcc-421e-b8db-5cc22f7eba7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eabec4a-9e8a-4a4e-8ec3-f07dd9f2dca9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50f0d95-b955-427e-b610-2b6e02ad42d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c292e36a-01a4-4e23-b6fc-868aab2dc1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2745535d-4f11-48be-abbf-9cc9a331841b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a2a48d-fd81-4fa4-9f4c-e2029ad364f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7f9af3-240c-44e7-a86e-bbbc4783c267",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ddcca3-7f44-4797-8ed6-ada9f72a279d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9780ae6-a7aa-471a-8067-bc3c302b56ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab3ac20-798a-420d-8af5-c2aa4e403a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9dd48b-9da1-468f-93c0-922e492cc412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80152a66-ba5d-4476-ab45-3d92a0b027b7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56aa7608-bea2-40c2-bc43-9a93e33bb06d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b90d0df-3d2a-4b73-9035-35e1a307511e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9eaeead-791c-4099-a84a-8a30a4a4e659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228f7da8-8f63-46cf-8fd7-5195c3905092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c532d3-abe5-4549-af75-95379fa9001b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea1d6b4-3aa5-4707-9fa8-26f266399de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aceee3d5-23f0-421e-b802-b5a0a58c4776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8688d4c7-748f-4b10-9070-9007958b6cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da39b2ff-5213-42a1-95a0-43b8d0d446d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e653273-aee9-4ee7-b386-b3ade12b729d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624f4c40-da93-4524-affb-17c3b3072d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45382bd9-a8b4-4710-8e8d-8bc1fae22727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e0e9d4-9e15-435d-8e28-b63c389d2505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd51ba0-a795-4d4c-a470-ac7188cc6247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fc3e05-a77b-4e51-bcd0-b95aaa1b62d6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c6e3e7-418f-4b75-b100-34191b3fa5d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0615eeee-87da-4a3f-ab2d-1d9304fd7025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1486441d-2cd1-4f19-9fd9-f4708827f5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2480f42-ad50-4060-a9ab-5952f1776244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c87909-4224-4e88-ae98-33b89b8fec4b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6723fa7-d343-47d9-a3b4-96fedc932eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1f51b30-b0ad-4616-b175-cb93e160f8c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a72f62-45b4-4668-9ae9-9a85fc8937cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51d0605-66fc-4c49-bdac-7a0fed27ae7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe6661c-1401-4ecc-85be-6e262d62f162",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ad7f80-5e9b-495d-9ff0-0f4f75e007e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b4001c-a322-4e33-8de0-4667d298932b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d646c5d3-291c-49bd-9f3c-5c76d91a1759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a32498f-bf4a-4b81-8452-20f04a2c2ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2088747d-2d39-4c33-adcc-37f722ead60c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fd8a42-6776-4d12-8d88-e188147a3ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4c1acc-eb34-487a-9722-62053206096b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b861c2a1-8c04-4e58-8e76-a1ef6993434e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625ff159-79bd-4412-9485-a3e6146e8eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a955e18-8224-4c7c-9f21-111cfd532d58",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b890e0-c833-4266-83ba-7501c3c7e381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69858b7-04d4-4d97-b9be-14c33e14c097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f630c36-fcc3-425e-8ba9-0f620bb77764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c6ff4d-9a17-4b92-b135-10d4a4a5d10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d440cb72-9ab5-4cd5-9997-cce428d966a8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730b7be6-3211-4253-925b-0558016f27f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6227e9b8-f4eb-4733-aa1c-6a6e97c8f9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf03dbe9-d235-484f-8fa0-d318ae5584f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a444a4c7-fb9c-4f2e-b872-c81068b7c1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfe2a81-6a91-488e-b3e6-e4b0257103fe",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9913b352-9182-4613-b263-ceb6b659bbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1dcdee-37f7-4728-b78f-9b21780fa687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b24465-11d4-496f-9ad9-58d48663d394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83162a62-2e5e-4cff-9a54-863b70a2c978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d71ea0a-838a-4182-8439-79dcbd258a42",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766cfbea-adcb-4861-b456-bc02fc7881e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7cdb6a4-5b48-4b77-8fc0-6ea6e4d8553a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b05123-c9e3-4dc7-a3c6-696ea7efe5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80824d59-885f-479a-8b04-fddd78c46f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777fb4f1-a5de-4ee6-bbe7-2ba5920c069b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b583fac-35d5-453e-a8e6-4420eb2b39f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babcc786-f355-46ca-94fa-da092d155c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a88e53-60c0-486d-af80-4234130de3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73e245d-f367-4205-808f-02604827430d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6b46a5-5127-47f6-8c7e-ce9b4528d6ff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c733211e-6337-4c7a-92ca-9f78cf559bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94551e7a-f96f-4d7f-9661-3dfb28f6c0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db3057f-a8f0-4e2d-9554-1b404b8a7eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e3e7e3-d13e-483a-8faf-00fbc0b53a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e907050-fde8-4bb2-9890-7744be8fe049",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc8fb05-e5a4-4b28-91e3-718cab9676d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "187a3aea-defb-4df4-a98d-ea1cf5b99f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca321c3-636e-45f3-9d12-b489a31f1e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116a661d-ed02-4838-afc8-6c6b686b9940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a63f2e3-1379-4eb5-a32f-3e90271500c5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca476598-55a3-4e48-824a-7c87447f3bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e026b64-2a34-4a84-ba7f-4ea37eeabbc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff23d4a-b052-479a-bea8-8f03ba552221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f49579-3029-4e39-86a3-882b5b26d5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c53e65a-4ae5-4a52-8550-61038d00f044",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db3bad6-0774-45b7-936b-d18abb4ce441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586f9818-5e8b-4298-8d28-61022fdf5df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9818b88e-edb5-49a7-9e1f-fcdb01ff945a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f456cba-0435-4489-bb91-e1c4c3b281f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae24edd2-d5de-45ad-9ea0-7c6657982dee",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9274ab4-b1de-4347-b6af-58585c825e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b858a8-7cfa-4818-8f49-28fef73f2347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b67f8a-4cf5-4566-895c-4efb7f71ee48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99017778-8ce3-4d68-b33f-608e98e3047d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d72100-3de3-4ae0-b4db-922fe072e1f5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f6557c-6a6d-4671-822e-49c56be2ec36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac780a6-f166-43d4-a567-8b6639a3c5d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d37faf-dbe8-4c08-9bbb-8706603171d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b14069-9f55-4733-9882-306c9df26238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ec5c07-233d-48c6-b00e-cf62f6fdf145",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f2e506-4908-4840-a1c9-0d1ece3026a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee777633-e07b-4af8-a52b-4db5cd173f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7343c3-454a-43a5-8c8f-51f6aaedea7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5883f270-c5c3-453a-a8f4-bbf7222917ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59211ae0-9c61-404e-b0d9-fde81da1faae",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81c8571-0493-4f7a-914c-de56c9eba149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ca83a4-21d5-4e90-9d1f-651558c348ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a21d49-db05-4472-8b9f-ca812c7bc321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc1425f-3592-47b9-a9ab-8d822b95dc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3cc4ab-a3cc-4674-a3d4-0f37fec559fe",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8d0520-6bc1-4db5-8438-dfc13ae0cedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2734deaf-9e23-4bb7-80c6-b0c4e0318a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe34d80-690f-42ae-916e-565ba4f43990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9340c2-e43d-4d29-9ec4-791893da2b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c520ebfa-3fd1-4b85-86ce-bd20f6cb7d9f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4051cf47-e55b-4d66-92ed-547d5174a6e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba55ca05-58c3-43ed-98b6-f8c700561d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50973493-3577-4d38-b10e-147d15a81c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6662e6c7-8ffe-4d2e-ae05-a8240f2dcc02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c16234-d5f3-4668-a008-97aadca7f41c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1484d835-9d91-4872-af7e-b70928527781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf1d4da-a78b-4729-bb7c-73ca749b7bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadf65e1-0dbd-4fbd-8d25-bd0562861c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3befd8dc-6d76-427e-89e3-752068a74837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa753da5-af92-4831-9ba1-6fa229ac1767",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fca4f7-0d4d-4792-a45a-629c8fd33dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa96c044-3bd3-40c2-9e47-f87d16263217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f17dda7-d793-4dea-92c0-ffefc6904e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56dbddc3-a859-4e41-b96c-9d24297d3ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6206fa5b-0ac5-4360-aa82-ee8c2eeda753",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a8c9f3-db15-4ff0-a778-313dae3ab4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df67ee88-16f2-4413-a3af-3c5f9fd8225e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb6ab8f-c2f4-418b-9d96-bf84d6b6e69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245c8e91-5f4f-43e3-8dec-ddcbac087b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ac1cb0-fe62-43cd-961c-00384f62a12f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe6a6dd-36c0-48c0-8e88-cbf9b664d8ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d776a5d-5eba-4f2a-8c29-18d8da8d440f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9002bb4-b69d-4b22-ab4c-64844f286bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48c00a6-5da2-4e8c-950d-de05d5d312a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60e86f7-25ee-4465-b807-9fd9629c55b7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b660035-ee98-4c02-900a-6ce3bf7311de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9dc8a5-085c-4cc5-ad91-01e9576fd47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fefbac1-153a-45bb-8f83-c7ebfbcbe131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e1c201-2ea6-4063-a89f-016d3c7de847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a07d7eb-f250-4dfd-9a51-d1a7497dea85",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c91b52-e5fa-49cf-b29b-54bfbd42347d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c2eec6-64b6-4745-be88-cd6895759351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c10e75-fd15-4073-8853-e305709de4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6b52a2-1c98-4273-89e8-2e5bf52288bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db7907b-55c6-4135-8c93-ed49c5f2f1e1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9d564d-29ff-4e9f-ae18-0ff9baf896bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa94f47a-e9ab-4f7d-8277-9dcaac9e28eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc609b14-513d-4a01-9f97-6cc6a46fdc19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddae558-bb1c-4f47-ae86-2d77a0ce487d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19a70a2-721c-4c7e-88bc-cc6e955a6ab3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754c2fdb-1b47-4bbb-87a0-df42340ea56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d0cc21-e430-42da-b60e-a9dd9c92c85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7a162c-cbc3-45d9-962b-03ab5e4e998e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc5bffc-3c2b-465f-9996-f0aab1a3af6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae9ef0c-b392-4054-9708-8798cd581a32",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c103d6b-67a6-4024-8e71-88b313634379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc5b918-b662-4fd5-9120-87907825ab08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7994f4-922f-4e32-8265-bf242f7733f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19f1cfc-8a93-4b80-b4ee-979ed1bfa73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c83024a-3d1d-4589-a27a-b6d6a3e1922d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f27b9c-2248-4ce6-a129-c6e6c32fd724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22600130-3397-4fa8-85d8-3824434c11ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e333c2-4b4d-4772-a5cd-869027dfc121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d383c2-9fb5-422c-bc28-1ce197ee37d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0281e9a1-5b11-4405-81b2-ea8e8eafee25",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cabeeb-4a43-4478-98fa-2a9fae268602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5759a43-49f5-40fd-a65c-e0ad027bcc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe66eab1-67ef-4f0c-ae49-483f8d598d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf68f3d-6f8b-421b-97a3-61ee1c69d5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23aac0b7-fed7-4b4f-95bc-6030fbf7f616",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a77c15-188d-4e5e-b0b6-3d28392a477a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a169b8d-cc58-4469-ad33-acc02bbaaacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715d949a-973a-4d83-a602-c026f6a65bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6666cd8d-77dd-499a-85df-dbe137056bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efa766a-6c3d-435c-b3c5-08337fd8e104",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cd7a90-046c-4c30-8adf-ea656dfd7ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce737ae-d70b-4f47-8ab3-0d00c75a42ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e14255-1237-4df1-9e35-cfe170f4496d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f083abaa-2f79-4fa2-9025-22c1dd5833be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba42bb9d-bc93-4467-862c-f529faca1fc3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34401d45-4d03-4b9a-8e55-faa898f1e67f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb4df8d1-4a6b-4be1-811c-1fc0c0b347fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13784f19-4754-4edd-881a-af05e9f0df0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d509f044-0365-42ec-a732-7e025e9ad660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23863be-e2fe-4d88-99d8-60916a353f7e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b359e1e4-7465-4eaf-9862-c1c3e02a30db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4c3689f-9240-4c66-ad6f-11ca9bc4ca1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b82dd1-2c04-4d14-b013-af6c45fee38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2810a6be-00e9-41ed-87c5-51ed3d6c9641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878e45ff-ee41-4a6b-829e-827323981e30",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e1636a7-3268-40bd-9832-85aaf4cdc792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c4123a8-4aed-49ab-8463-a02b64462b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd50c69-8348-4b80-b814-b149647e5dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b01873-3737-4a8e-a1e8-edba7697c424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63b78f5-856e-434c-8481-fa235ad265fd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b5bfc8-8d30-44f8-ac8d-a246387f4ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd64016-ac5e-492f-a6a2-590418fd5fa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc829c6-29d8-4921-bc90-cd682a284225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ff9e2dd-7a56-4437-b2fd-a68562ae5d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5554442-9dc5-4626-b09a-837a6ee2f779",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65de4ebc-c948-40d4-bbe4-d63d2bbe34f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb107ae-d296-4946-aca5-a7c95da3a7c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0abfe9-3f40-436a-afe4-8804f6f8ab07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676f0768-5fe3-4128-bf02-84872184c4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efd6922-c5b7-45d1-8bee-dd099808d684",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4176ac1-1ae2-4970-9062-af80a3841b94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd80f43-5ea3-4a86-a172-4bb75839e208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e8d3f6-06ce-4b4a-8c96-2c8aebc62a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e48fb69-4d6b-43dc-9d36-3dadcf42f507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cb3924-3945-4998-b5f6-9d8a37601c98",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb44b4a2-d8c9-4b61-8b0d-d6da35038237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543e321b-5350-44e9-9d56-3998edd94d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e989f00-1b46-41b1-a598-cbf1883b2a50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8595e6-edc3-4da1-ae45-6980bb83fcb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b857ca38-d3f2-4a13-ba2b-24da7f5336db",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10595002-b182-4ded-ba21-4d8cb8cd65f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1428334-0aec-4b08-a8d6-46764afea472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767ff0c5-1c16-4894-84d3-bee75a90ceaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e021856-360c-4262-9aa5-d27144b24e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2b782e-87bc-46aa-8dda-4873fede1318",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32a1143-562b-4460-ab4e-11318bf9de4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39ebe157-7530-47a7-a948-645b0bbea50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6e4857-7d5c-4c79-b61f-1575bcb0dceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4665f564-76ba-4234-bdd9-d5e9a2ca5eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e8d1e7-3277-4c73-b2fd-fe6c10d1c896",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4fabd8-73f7-4503-ba48-b0c2ba17ddb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4697a048-f31e-473c-9607-1d6888ca3a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e30a90-095b-4c21-8861-71fc786ae404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6671d363-3525-4512-8c40-7b7ae09990c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466bea98-74ac-44d8-9a80-04aa8f175c0d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68d74a2-c5a2-4e76-a518-c164f311b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16be087e-56d2-4d25-ab95-e6a69e431d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e02705f-e87e-4cb5-a4a5-e4cecfdb1c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffacbf3-480a-43fd-9e33-f38f826f6de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe02f8b1-58ce-4a29-8bd5-e703a09d64fc",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8482658-489d-42b1-862e-6ab357f17c44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794f1030-f77b-46b5-9036-962beef6b1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12c2cc1-e5e8-4d00-a37a-2de16b47cb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e42fce0-0ed1-46a8-86a3-85d30894efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ed4b03-f459-4214-82cd-649967c456f8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e614f7c5-1e16-4cd5-bde8-048d2de43a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4af4663-1f1c-4421-bd4f-7914dc8e03fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5aa0a09-9efa-432f-b27c-0ba68b3e4cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f334425e-3623-4a7c-8bab-0cac1f314b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83c0f79-1480-444f-afa0-2c4fac671389",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8896e26-da62-452f-80b9-a3fa7696d4e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86d27999-48a4-4e73-b502-bf90d6e37659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b92ac9d-e998-4c98-b909-03823d8a2605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8558e2a5-f4af-4521-8aab-3dcd1def16fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b64b0f-9c42-4bfb-aec0-2fa8f4ae724d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16495fea-9b65-4213-a336-18cdf942539c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c2750b-a7fd-4a6e-aad3-67f0d6eb64ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7079fe1-fa7e-479f-99e1-83887b1e4c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bdf55bc-0951-4f4c-bb90-17994ebf2870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69c54ccb-b5c4-4ac8-ab11-cc1c374010be",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2d92fa-a23c-4949-803e-c92f6cd12282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c4e46f-dee4-44e7-bd22-a083e13c2a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3365ef-4fa2-4c2f-805a-a4fab9b2b4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c036b90-1e90-4706-a073-b9eb5c58d92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0d95d2-b5cf-49fd-8fc7-8304a4294da7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b69d53-6c53-4e98-993e-0e918e4a3edf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b232d7d-de66-446f-94d8-9270efd1aa14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d0e720-09c7-4e6e-9e20-bea0704039a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37ace68-dce2-4642-b723-d9159e88ce58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0704db0-2b27-4eec-8308-b2eb42476958",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b411024-0026-4ec8-abc2-81663e54b298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d488ea65-f432-4c28-8e0e-cbce1096da78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cba1a90-a27d-4958-a768-86e724ac6d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b90017-85c5-4995-aa52-7f23f9227400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f3d9f3-0645-4f06-9478-c4d5d93ce7c6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0034c059-5d3d-445d-9c55-cdf2771d277a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7dab1eb-b568-4e51-b318-c8bc2a9eabde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93c1ba7-8c1a-45f0-8849-d2d68186489a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19d3bb1-5a6b-416d-83cf-585a463a6392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b11056-e28f-41cc-8cab-8de1ae0e643b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d18341-691f-4579-a1c3-10da26e998e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f78db7-c60c-4a24-85db-e2672f4b1514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c817b5f-326a-466d-9f0c-dc59437e7895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a11090-4e28-432e-9513-f7ab7bf8c5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d7ffc6-fcaa-4f28-ae99-bc45356e49ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a6c15d-5a8b-453f-a921-074861c65ac9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8b2fb10-dbd1-4dd9-878b-d19549c57e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d42cc0d-5570-42ed-bfe0-0a73aaf8db81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0420687-8237-4b9d-87e6-f9a1bac76604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd2bce9-e24d-40cb-8bda-32804795646e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ecce75-cafb-43f4-92d1-1ae3a8387b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81c88755-5a5f-4725-a51c-d0fd848393bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59210fc4-135d-448a-b645-e750cc1ecbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b036e537-276a-4923-9892-a8dceffb8e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ccefb6-8e86-4758-93ee-8a15a4059c6a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d51942-8671-4da5-962b-5d4485c1f2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b2388d-3574-4cd5-be61-5e4b68bc6ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed646e9-81f3-42a4-b5c2-5a3c634f53c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "928fa29d-5eb2-4034-8e04-faffdcb6b717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8157cf5a-b62b-482f-8956-c430b6accd54",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872d432e-96ef-4fff-b50f-23ee2d49e43e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18041391-b03b-4918-891d-7966e74aa8ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c360b29-6b76-4c15-8d9f-ade061b41591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81086cf7-10b5-4fca-85b1-259fbc6c4801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67db455-b400-4a7b-a894-00b8033ff53c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5370c745-a92a-43f1-b8d0-96810da20d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45783d72-6fff-4353-bc89-fd170a2ec819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d11771d-6941-4c6c-8759-fa8bb705100c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa16986e-5b34-4c29-8d2d-08084160604c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b778cafa-7100-4960-9efe-2a75b89ceb69",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3965c77-9019-483e-8f3f-d455c81d3614",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45c3e24f-a515-4e20-bce9-b7f77fa53c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb2f366-dfdc-45bb-9bc8-e79b8a905d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f32a6d-56ec-4301-a0a8-d6b84d9dbee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fdc6d7-9bc1-4bc3-8060-4ad2befeda3f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f845d6d9-46a9-47e4-a871-6189923fa95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2b28d31-d77d-42a5-87d8-8be113f92540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a303e825-ba26-4c8a-a212-a49a00aa5d72",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63628f9e-016e-45f0-8d09-66376a922785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbc0958-3434-4953-a3f3-ff5be321428c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ed8f52-e29c-4692-a5cf-ec797c52d372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ef848c-e45b-42a2-85e0-15d35a09bf43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b822b16-0d8b-4084-9453-8ccc1e974cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb2faa3-e44e-4357-9c63-ce6f325db25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7467b8-9b09-4d9e-9c93-2c7d659314e7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e9a38d-d575-44e5-a291-bac93a3df52b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d9a7c93-9184-40d3-a4d9-5a5812d7edcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a9b3da-7ee6-4cc3-9b87-413cc557e83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ee95b7-c2d5-43c5-ac0d-592cc5d725b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a34496c-ab27-4e1d-8c39-9e1a2ecc08ff",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f35703-a3a7-46f7-b685-fbe4108938d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110ee0a5-183c-4b79-9061-1c43424018b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3875acde-566d-4faa-b61e-5dd018620255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf88f8f4-8d98-4dd3-8e05-f3f6fff3633d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035b07f7-91dc-42fc-a454-9f09cf5ddc7e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37357e9-27f5-4ef2-bd52-54b470626430",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7826db47-f408-4459-8ce3-2e87b90ad564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e55039-4e95-408a-ba28-20b75bd001b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a8f20c-e807-464b-b008-0239e6ccaddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadf2542-fe86-4945-b016-d159855dbfd7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c00304a-ff0b-460f-9759-919726da0437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af80badd-3896-4962-8875-4f9e1314e8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3b3891-a016-4232-a0e9-728e3e9c86c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adf3fdb-435e-41e3-ac17-d5c72bc7c7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c71d66-fe3b-46cc-9874-6f003fd33887",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46eb5f0e-3aa2-4421-bd42-d766b8a5ceb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5a011d8-6da8-4737-975b-827013ee1796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bb525a-b1e2-4e8a-b4c6-0137f50fa66b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcb4523-0e99-41ad-9144-5cecb5ab5905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19420994-8192-40f1-86eb-36c998aa53d1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92515dbe-f0e4-4704-b26d-e814a8130b37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d61a5439-23b1-4077-9c13-42783b5d4479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6bc708-a1c2-4e9b-8b4a-263228ae415e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cef8d37-65b5-491e-93ce-6cba963bf491"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93666f02-d95a-4d68-9eba-30a9bf8d562c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7fd9d69-8629-4e60-9b84-ed597f5afb65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "348420ed-8ae9-4c46-9dee-5ff6db08977b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5626eacd-312b-4775-8b09-c04b2846be6a"
                    }
                  }
                ]
              },
              {
                "id": "4b851356-060b-4209-a427-6f68a56d1765",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "320fd8bb-6b76-4786-9ad8-9d339a50ba60",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29557d10-4685-4de5-89fe-6e6dfc6a4c64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13e85a1c-8117-4ccd-aa51-c72490bc85cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53475e3-bb73-4109-b646-b7017cc5ccd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d81b0f3-d7f1-4cc2-bf7d-24dfa98ed7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3fb1d8-437d-4e9e-9d8c-9bf9df0f829a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74748a0c-9b3b-4058-9641-88fad4d7e6bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a8e745f5-72f9-4c7e-9022-e276e7763a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b046e5-28c9-4ada-87a0-51eb04072351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8976730-6500-4e69-8d26-014ff389a63b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64f662f5-e159-4d9d-b4e0-6c09189ed61e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c15300c-aa0f-47e9-96f2-88cffcc750a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bfe47dc-8a70-47a9-b35d-49b06bb43646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcec7d95-6ad3-4bbe-9905-56eeb7892122"
                    }
                  }
                ]
              },
              {
                "id": "626c4ef4-9c17-44b8-8eb8-7a7354cd3269",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f2f67b81-0923-4793-bf80-8708a94e9ef1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429158b9-7685-4714-90de-d867acc000ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aad16075-f3ff-4899-8da8-5f18b93711bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc28d31-3da1-4afa-81a1-0644ccc66249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6340dc9b-d69f-49f4-822f-a78799ccca84"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9d906dee-5b16-4966-a8f6-7feafee32cf0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b8c1330-36df-4606-805c-1e7d6cdca8c6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4242f847-1a0b-4ed7-bfd6-0b47da13b044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e5b5d390-335e-4e30-b012-26b468dd3136"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "478a8fd7-c9ca-4a5c-97d9-2b171eec63a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "911e244e-620f-4694-9218-fc560c0a7bf9"
                    }
                  }
                ]
              },
              {
                "id": "7fc7ba22-3bb5-486d-b0a0-222121c7600c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e534ac13-c5a2-4459-beb5-4f7e0e6c633e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4941a08c-927d-4bbd-8215-50093be26ec3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7c7cea6-2912-43cd-9272-35e45904a678",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bea914f0-b073-4c52-b2e4-9eeb691eea7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bbbb5de-ac03-48be-a3d8-9e38df1183f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "22954044-c53e-412a-b1ef-d781d65ddef8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d44f57cb-b89f-40d4-9f47-2c8b4728d321",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8e4b590-97a5-4799-aacb-143ee2f3160b"
            }
          }
        ]
      },
      {
        "id": "9732d5cc-2b8a-426f-bc37-24de4959bb2f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6a96fb49-9d8b-4ba3-b3ac-d462d8f79e2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec0da140-301b-4607-a55a-4dd560eee75e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd596a4-b939-4517-b643-4f454b24b08f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "43347e69-a114-4eaf-812f-c23c330cb8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c817c0-324f-44a5-9d87-b34998481386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f1cab5b-23f6-43af-8584-85f2d0348a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfdd0ee-4ac3-4c0f-ba3f-bd31475f1e4f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4db1b0-222d-4ce6-9173-0170d991792f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5b6b92a-8044-4d19-bfd7-b0dd68f56d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75f48c6-e60e-4b32-b681-caa657e74782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5ae8506-8eeb-4985-b503-2643461fd1f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "561055f3-e646-4190-a5af-dee54b8a95cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90947243-7d91-4618-a566-8f65475f3926"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92cae5d8-1038-4ce6-8424-da547a45a3b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "174e3721-7a25-4737-a776-286649de5855"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6ed3470-df41-4982-8559-229badac6f3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e50a8030-0bea-4e37-8434-bd9c7080bef1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76f92313-5d93-40d2-a81f-12778269dc40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7a7a253-988d-4435-9e72-fa6e7cf12120"
            }
          }
        ]
      },
      {
        "id": "52a96076-4bf3-463b-a835-5fbfd1186331",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "30cadb3f-335b-47fb-9d8b-55204fb3c023",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce2e862d-355d-43fc-ad09-c170479b8361",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bc46d56-ab0e-46f0-a7d6-d8b7724dc1d5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7c4ded-34bf-4ec1-9549-93b19f862dd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "46c17868-ebb1-4516-b653-5fc10a1b5d60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c05ac3-2180-427b-870d-e59c54adfc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c269d32-8a0b-4d71-ada9-16d94df6ca66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cb0622-c573-4dac-9b60-6a5e57950ad0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf541741-d2c4-449a-92b5-fbe71ee98cdc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9eaab2c5-4c4d-4dd5-b24d-468039572c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d736273-c4f7-415d-9009-cb912d23d6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3027bdf5-f18b-43a9-8432-34fecdfd5bbb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bac71e2a-3564-40bf-b451-67734773f330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d8e801b-ae96-443f-a8ee-83505f591878"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e91edf2c-c00d-4203-b9fd-2211e2366d18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7ba335d-aeef-4448-b7b3-8aa08d97ccb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6556fdd-2e82-4a53-b4f2-d9a11041cfa3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f6b31d26-e2a8-4086-8f30-8552e6b666c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c6883cf-9209-4013-846c-f54d4122b3ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a873dde5-aa46-4852-aa7c-c70af178ec53"
            }
          }
        ]
      },
      {
        "id": "e09482ca-2166-42ca-894d-e332be1ff5cc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2b26de59-0318-4a82-b722-1f22900547b7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "923b3235-4947-4080-974f-698d2dd655a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8641056-e52b-48fd-91f6-7cf27d5df6f8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e47b1e-0385-4d0d-91c1-52418696c2d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d529958d-3342-4bd5-9bdf-f688b4a49042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97fe79f-5aa1-4190-84db-83c0a3bc5aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f57b628-87cd-43c3-b5f1-d4f7f120b777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c42187-5e2b-4f60-8435-25ec8efd625b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a373997-da86-4b39-987e-a23adc2b7dcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98fbb0aa-ba7c-4df7-9046-7eec1839965b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d098d0-4721-43fd-93ea-e52067f16e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b0011b5-104f-4f02-83bc-e31da9443ee6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef1c6477-336f-4866-b615-bf66c41117d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c7e681a-39c4-4e47-bab0-6cc88a3d7f6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90686196-0d72-419f-b8b1-98e7c774503c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b290479-710f-4c17-b153-26c6b4794885"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dc34e44-b66f-4e03-b0d1-29bb1cba0c8c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d10fe666-a6b6-469d-baaa-46f056ec7a82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e9c4649-ba44-4831-99c1-29fd24ed7972",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08c49a05-f365-489d-b566-78df16120a80"
            }
          }
        ]
      },
      {
        "id": "955ef7de-c9fb-4601-b20c-4b41ebbceec8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0487249d-1513-4f3f-b496-83660b8e4b91",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2a783e3-d697-4549-87ca-2e14f0edbbba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7ebd5ef1-87e5-4aba-b633-90a587bb42e2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09a224e0-c1f7-4a65-81bf-f0675f5127a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "549dbb79-aec4-4f94-8fe3-be483b9c63d2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 188.2671755725191,
      "responseMin": 13,
      "responseMax": 1994,
      "responseSd": 366.0689632693844,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673829541099,
      "completed": 1673829601193
    },
    "executions": [
      {
        "id": "2c9ca2f5-fcb7-41fc-9f19-5f18a552a2c2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "587aa5e1-450a-46ff-809d-11b277a8f02a",
          "httpRequestId": "e7a638e1-360f-40a9-800d-b02e640e7554"
        },
        "item": {
          "id": "2c9ca2f5-fcb7-41fc-9f19-5f18a552a2c2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a0e3fd6c-95fe-4721-a90b-884b082aacee",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "dc6a4e90-bf4e-42e7-b4a0-b2efb88641e9",
        "cursor": {
          "ref": "ab09fbe7-0d04-4a1a-9e78-518316fb5ffc",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "53d556c3-821d-41e9-8b88-51ce60853017"
        },
        "item": {
          "id": "dc6a4e90-bf4e-42e7-b4a0-b2efb88641e9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8ab43d55-bb85-4e07-ba14-50acc65e20d5",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "c4a07ba3-7a92-4d96-8b9a-fd0f935a5960",
        "cursor": {
          "ref": "539a1142-86f2-425c-89b9-4a7a781be71a",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "49ee6df5-3332-4b26-85eb-bf5377a1a56e"
        },
        "item": {
          "id": "c4a07ba3-7a92-4d96-8b9a-fd0f935a5960",
          "name": "did_json"
        },
        "response": {
          "id": "29e1c903-77c8-48d7-bc41-ca9c6afd1b1a",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3c6f51-b531-4535-9b2e-91806ebe9f6b",
        "cursor": {
          "ref": "6845592a-e7d3-4201-9532-04028c911995",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bf3fc44-8f1b-4bf4-b7df-e6df44369fb7"
        },
        "item": {
          "id": "0c3c6f51-b531-4535-9b2e-91806ebe9f6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "02997696-17d6-468a-929a-6fc4b08184c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3c6f51-b531-4535-9b2e-91806ebe9f6b",
        "cursor": {
          "ref": "6845592a-e7d3-4201-9532-04028c911995",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bf3fc44-8f1b-4bf4-b7df-e6df44369fb7"
        },
        "item": {
          "id": "0c3c6f51-b531-4535-9b2e-91806ebe9f6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "02997696-17d6-468a-929a-6fc4b08184c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dba8e58-fcab-4194-a8ed-2766020f27f9",
        "cursor": {
          "ref": "c3f3cd1b-232c-4834-a76d-30fec508c64b",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "de90c191-33e8-4617-9516-c0cbc294f63d"
        },
        "item": {
          "id": "5dba8e58-fcab-4194-a8ed-2766020f27f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "691fc029-75fb-49cc-a39b-067dbf63cc99",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69dc49a-78f7-488b-9144-7a611ed5388a",
        "cursor": {
          "ref": "285dcccc-8309-470b-875f-a607c5fcd4bc",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e5b726ed-4b9b-44e6-9165-cbba754585a0"
        },
        "item": {
          "id": "b69dc49a-78f7-488b-9144-7a611ed5388a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3f7b4f77-e30f-4bc3-8cec-805e517adb8b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e514953-6a33-41d4-b28b-980843831263",
        "cursor": {
          "ref": "a9293ccc-f9a8-445e-aad9-c8a6194d973e",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e94d8aba-654f-405d-9a6a-7510bd4460b1"
        },
        "item": {
          "id": "1e514953-6a33-41d4-b28b-980843831263",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "234b249b-d97f-49ca-a5ad-697d779afd01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc9450d-f12f-4e2a-bc9a-7dab2154e64b",
        "cursor": {
          "ref": "9d2f1cb7-21e6-42eb-92f0-ffd09b811bd6",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7d6dd60-f93a-4254-b5d5-616a1598e100"
        },
        "item": {
          "id": "4fc9450d-f12f-4e2a-bc9a-7dab2154e64b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4173e967-c5e5-41ea-b665-ccbdba7589c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc9450d-f12f-4e2a-bc9a-7dab2154e64b",
        "cursor": {
          "ref": "9d2f1cb7-21e6-42eb-92f0-ffd09b811bd6",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f7d6dd60-f93a-4254-b5d5-616a1598e100"
        },
        "item": {
          "id": "4fc9450d-f12f-4e2a-bc9a-7dab2154e64b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4173e967-c5e5-41ea-b665-ccbdba7589c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06012b6c-d440-4320-9753-c79f225d5c9d",
        "cursor": {
          "ref": "fb416ece-9fc9-4817-8bf0-a5fe01cef881",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d3aa6334-d7ef-48cb-b08b-964ef34fa71b"
        },
        "item": {
          "id": "06012b6c-d440-4320-9753-c79f225d5c9d",
          "name": "identifiers"
        },
        "response": {
          "id": "bb356d9e-2b79-4c69-871a-9b6a5c8f9460",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a558f452-734a-42f8-8626-8e3ff15f65ac",
        "cursor": {
          "ref": "2d189dc7-3520-4809-8f21-de649e6f4d98",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a9f8cd58-16bf-46e6-b852-349c56de0be9"
        },
        "item": {
          "id": "a558f452-734a-42f8-8626-8e3ff15f65ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ee53e16-95c1-4575-89dc-3641e2f6970a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a558f452-734a-42f8-8626-8e3ff15f65ac",
        "cursor": {
          "ref": "2d189dc7-3520-4809-8f21-de649e6f4d98",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a9f8cd58-16bf-46e6-b852-349c56de0be9"
        },
        "item": {
          "id": "a558f452-734a-42f8-8626-8e3ff15f65ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ee53e16-95c1-4575-89dc-3641e2f6970a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b8c663-c332-4cd3-9a92-8aaa37538a0a",
        "cursor": {
          "ref": "3cb93118-9d96-4dd4-9c56-ac9a49920824",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26fca5a2-3a6b-47df-b7b4-ddad6e592ad6"
        },
        "item": {
          "id": "25b8c663-c332-4cd3-9a92-8aaa37538a0a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9c8032cc-2f1f-4f2f-b8ca-14125b5a172e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f469ed4f-dc6d-4b0c-9aae-ef2aea0cdbcb",
        "cursor": {
          "ref": "34c263c2-3f48-4c83-ab23-b69c159231f8",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "93c039d5-5ae2-46d6-804a-8cfb1c2615eb"
        },
        "item": {
          "id": "f469ed4f-dc6d-4b0c-9aae-ef2aea0cdbcb",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "242ad4a0-04ee-4fe2-ada8-f52b61532e8a",
          "status": "Created",
          "code": 201,
          "responseTime": 1546,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "da69aa61-a155-4633-96e2-be85b8cae011",
        "cursor": {
          "ref": "e36b775f-34ee-458e-bf39-cc22be304bd1",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "11c44de8-0760-4a2d-9453-7c5b01435d78"
        },
        "item": {
          "id": "da69aa61-a155-4633-96e2-be85b8cae011",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7dce2771-bbb3-48b1-99a7-1703eb9a8a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bd11a2-7124-453c-a547-1837096bdc46",
        "cursor": {
          "ref": "5c3aaee4-519e-47ac-8aea-7189798108f7",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6d2851bc-eb12-41a0-b278-4e57de709977"
        },
        "item": {
          "id": "94bd11a2-7124-453c-a547-1837096bdc46",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f977b02b-ff99-4187-a12a-d90f2f20b7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c87f48-9475-460a-9e53-c7517309e4e8",
        "cursor": {
          "ref": "f1a51fcc-36ef-44ca-b413-684cdd2f4a39",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4f93785d-f236-4ced-8ff9-dd4356d02218"
        },
        "item": {
          "id": "47c87f48-9475-460a-9e53-c7517309e4e8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8b6a317c-c644-4b10-afb3-e4938fce260f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37222cf7-e27a-4af1-8748-970a2ff857f4",
        "cursor": {
          "ref": "b006b522-8a99-4c74-903a-d46e655762c3",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aef58f72-7dae-4be7-b962-2811ab12fe6b"
        },
        "item": {
          "id": "37222cf7-e27a-4af1-8748-970a2ff857f4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b7e2eb47-d650-4f78-a06d-3e9d1e4d7493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38a07b5-9580-4fa2-a1e8-180ee74ddac6",
        "cursor": {
          "ref": "cecf0b39-6f5e-49f1-8d57-f267692bd6c9",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c9d0994b-b561-4178-ba38-5a4b43a1d8f8"
        },
        "item": {
          "id": "e38a07b5-9580-4fa2-a1e8-180ee74ddac6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "67d2c960-7ad5-448b-8213-4700af54fa44",
          "status": "Created",
          "code": 201,
          "responseTime": 1362,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "79187199-2b25-4406-ac02-e6f3af360032",
        "cursor": {
          "ref": "74db9612-2369-48aa-ab47-8f6410b4aa12",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c264238-5ae7-429b-a5cb-aca28db6b55d"
        },
        "item": {
          "id": "79187199-2b25-4406-ac02-e6f3af360032",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b931ef77-6c6e-4c18-8b16-8c86aff8db1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55d6c1a-70b2-4b21-991e-c196e2141ac8",
        "cursor": {
          "ref": "e859fcd6-3cb3-41d5-b281-fa0b55619b87",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "291b58d0-b752-429e-b1c1-2af5dfed653e"
        },
        "item": {
          "id": "e55d6c1a-70b2-4b21-991e-c196e2141ac8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "199d8803-9b90-4f16-b373-8d609b4becc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fc5717-de1d-4cb1-8364-645d2e75b60b",
        "cursor": {
          "ref": "0bad1617-89ea-4cf0-9b85-c95972ba49fc",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e488cd56-802b-4b89-983f-b9c05fa64ba2"
        },
        "item": {
          "id": "e2fc5717-de1d-4cb1-8364-645d2e75b60b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3ae985aa-8bd3-4c93-81d1-8a4174aebeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6f2aba-d27e-4b08-9b6c-0de09e572b69",
        "cursor": {
          "ref": "4a7e9e96-42d2-4fb3-8c0c-d7ed7b457b1b",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ddc25aca-1632-4431-af8c-e82cbbec36f1"
        },
        "item": {
          "id": "cb6f2aba-d27e-4b08-9b6c-0de09e572b69",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "13209c5c-2c59-4a60-adf8-b64401818d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa2a8ce-3096-43a9-837c-ef169051299e",
        "cursor": {
          "ref": "bfa33ff3-2e13-498d-8d32-ae9448559901",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "77d7a9a6-56b9-41c0-a699-ed318db222f9"
        },
        "item": {
          "id": "5fa2a8ce-3096-43a9-837c-ef169051299e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fee4b93a-902b-451a-9301-b9dbaa34a95e",
          "status": "Created",
          "code": 201,
          "responseTime": 1355,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "04debd67-a046-484a-986a-df963fb6ca58",
        "cursor": {
          "ref": "54bddc0f-f8fa-4bdc-8005-0f28fa22e4a3",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c5d62b79-88ea-40a5-8381-14a579e6cb9d"
        },
        "item": {
          "id": "04debd67-a046-484a-986a-df963fb6ca58",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "5a31373b-03b4-449c-a767-d0270d9526b8",
          "status": "Created",
          "code": 201,
          "responseTime": 1994,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "145849f2-adc3-4888-97ce-82ffc2de6b22",
        "cursor": {
          "ref": "32eb7d9a-13e7-433e-b260-a39e4e47629b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14d574fc-2d42-4ec8-99c6-d93d3713cf77"
        },
        "item": {
          "id": "145849f2-adc3-4888-97ce-82ffc2de6b22",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e6520fc8-0d70-4585-964d-4a3ac7f50837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee80c85c-e3dc-4800-a59c-36adb8f5225c",
        "cursor": {
          "ref": "5389518e-e0d0-4c2c-bc29-02eeeaf48afe",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "718c091a-8f57-4dc2-b5aa-85e970c3ae35"
        },
        "item": {
          "id": "ee80c85c-e3dc-4800-a59c-36adb8f5225c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d9e8272d-b18d-4bc1-9c19-21e2785bb2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab2bb8c-412b-435d-bc75-73e4c39d52f6",
        "cursor": {
          "ref": "2fa037ea-0bc5-41a5-a04c-b114d7f67d11",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0a2afc43-f819-4cac-8701-811d3e274ac5"
        },
        "item": {
          "id": "cab2bb8c-412b-435d-bc75-73e4c39d52f6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "73d70ff1-1b8c-41f0-8e51-975b1f3ebc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c80861-2a6e-420b-90ae-8cbd606c009b",
        "cursor": {
          "ref": "adbb65ca-6ee1-4c11-93da-26b7d594d942",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b78b91d4-9945-4ed5-82b2-45abef73ea16"
        },
        "item": {
          "id": "a8c80861-2a6e-420b-90ae-8cbd606c009b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "461d7254-49c0-4462-b325-2c1a76c218a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef54543-63d8-45bc-9280-e293510f62ea",
        "cursor": {
          "ref": "d0bec200-247f-4b53-8347-57c070357107",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b66f6ac-c3dd-4c8a-b060-c5806cf6942e"
        },
        "item": {
          "id": "4ef54543-63d8-45bc-9280-e293510f62ea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e751f66a-cfc6-4972-9309-e124958b859f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d030f2b0-8e6c-406d-8971-dd1435755cca",
        "cursor": {
          "ref": "7da0dc82-6de6-4d06-9d73-0364fda3c80a",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "da05de9c-b844-41c5-adaf-2a935e460dad"
        },
        "item": {
          "id": "d030f2b0-8e6c-406d-8971-dd1435755cca",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "59c95eff-4f31-46fd-9e70-d33e4b888a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed45c910-a3d5-4e01-92ea-10a7805a79bd",
        "cursor": {
          "ref": "cce7c0af-67d9-475f-bf4f-5571067bd928",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5760ef88-15fa-41db-ad02-59ef52ca4a8d"
        },
        "item": {
          "id": "ed45c910-a3d5-4e01-92ea-10a7805a79bd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d84513c4-bc06-4448-9f82-a49c081140fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745b8538-f17d-44de-b9fb-a594b50745e3",
        "cursor": {
          "ref": "14b91559-d49d-44af-b038-d01592996baf",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "21091979-4281-4c39-bca1-0cfbdee37a4a"
        },
        "item": {
          "id": "745b8538-f17d-44de-b9fb-a594b50745e3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ce1fe18a-2f36-44b1-a1a4-2d27d9330fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3717da5-8de8-4be6-ba2d-77b70cafa925",
        "cursor": {
          "ref": "8fb1f512-9aaa-4b20-b975-dda68dfdc671",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f9938f58-cf8f-423c-9b82-4e71043d3cb5"
        },
        "item": {
          "id": "d3717da5-8de8-4be6-ba2d-77b70cafa925",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "46f933eb-e5be-4982-b40f-da50c8ec3859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24da5a3d-bb99-427c-ae14-77840860a48d",
        "cursor": {
          "ref": "f2254310-3f3e-4b92-b1a9-56ac7be6bfdc",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "398b48be-7089-49db-8feb-31c80789c363"
        },
        "item": {
          "id": "24da5a3d-bb99-427c-ae14-77840860a48d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cdaf790b-5ff2-45ae-ab98-6a2c22b8a172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ecdfc0-6fe3-45d0-b794-11a96d461bbc",
        "cursor": {
          "ref": "3fc07f18-868f-44a3-9d01-1ca36648825f",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0fb2f0a1-52ab-4caf-9070-4e57f2efc798"
        },
        "item": {
          "id": "e0ecdfc0-6fe3-45d0-b794-11a96d461bbc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f3c67a8f-931f-44ea-a50a-bae39271aa68",
          "status": "Created",
          "code": 201,
          "responseTime": 1489,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6f8396e4-6dc4-437e-bedb-4175c5154783",
        "cursor": {
          "ref": "c5d07853-05df-4f55-ac64-ce8c062b1d65",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c5d39d34-c548-4989-988c-505ea002192f"
        },
        "item": {
          "id": "6f8396e4-6dc4-437e-bedb-4175c5154783",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "021a2191-b595-4c4d-a7c2-80ab95684707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb0f637-645c-4d4b-b4e9-28b0b952f2fc",
        "cursor": {
          "ref": "004f691b-be82-4354-9691-c9d0f5f920d7",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "31810d5a-956c-404d-a4a8-2a677bd59f27"
        },
        "item": {
          "id": "4cb0f637-645c-4d4b-b4e9-28b0b952f2fc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0cd64d17-6bb8-4ffc-8a7b-8cff31024350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4df159-f9a2-42f0-a9a2-827b3fe66d47",
        "cursor": {
          "ref": "6269eeb2-4b90-4280-a008-302b0f2f2587",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0b473c95-c078-432a-8623-a7b0e20892cc"
        },
        "item": {
          "id": "ea4df159-f9a2-42f0-a9a2-827b3fe66d47",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6a73fbf0-fe7b-4b8b-ad1e-20f96d46a5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e46232f-f2ff-4d5c-8f7d-d68f2851b401",
        "cursor": {
          "ref": "525169b8-c9e5-40dc-ab54-5aa037300df1",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "58c6c757-dc10-4607-bb25-1f40c1185440"
        },
        "item": {
          "id": "3e46232f-f2ff-4d5c-8f7d-d68f2851b401",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "779892f4-d682-4024-827e-f2bf9b4dc2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13d31f2-97c8-4813-9cbc-38b11dc697b4",
        "cursor": {
          "ref": "e6467970-d154-42f8-80ec-dab52077b016",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d9444a9c-381f-428c-ae5a-22413c89b74c"
        },
        "item": {
          "id": "b13d31f2-97c8-4813-9cbc-38b11dc697b4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "93b95833-5e58-4b77-a7e3-4a845cc10bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ffb5e2-00c9-47de-993c-5211b67bec07",
        "cursor": {
          "ref": "693140af-15ea-4d07-a3fb-4eeeefc0a465",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cde5eb66-85aa-4010-b78c-1854de9c571f"
        },
        "item": {
          "id": "f9ffb5e2-00c9-47de-993c-5211b67bec07",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f49dd21d-2c04-43eb-b92c-4a622853dc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dfea82-2b21-432d-ac40-5ef6bb8e8c71",
        "cursor": {
          "ref": "16e9f215-16a2-404d-9f23-fcb7a9d1b4a6",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7142fc3d-a7e3-45c5-b265-cd7bd86bc951"
        },
        "item": {
          "id": "20dfea82-2b21-432d-ac40-5ef6bb8e8c71",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6148df8d-e13f-4a4e-a417-8a451c3bb4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a1a4c6-2b74-4626-8b0f-8b0dd847819f",
        "cursor": {
          "ref": "4a9d580e-d001-429a-811f-57f284845f9e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7cc348e8-ffd6-4aa6-a799-cfb93367289e"
        },
        "item": {
          "id": "16a1a4c6-2b74-4626-8b0f-8b0dd847819f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "63f0359f-5835-4034-a51c-e08faccbecce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5f0825-cba8-413f-8f0a-c3d9cd03004e",
        "cursor": {
          "ref": "7e3ab4f4-a5d6-4304-b0b8-c262b48a84ca",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "cdb15be1-7840-49fd-a018-b4b37dfa72da"
        },
        "item": {
          "id": "5d5f0825-cba8-413f-8f0a-c3d9cd03004e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d316ceff-415c-41bc-8883-5bc49d5e3c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7ddb7a-6889-492a-b40b-0793d73c4ac3",
        "cursor": {
          "ref": "550e759b-c9c1-48bc-ad1a-08e6843ad85c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff577256-01b7-4400-a576-b7e92356e3bc"
        },
        "item": {
          "id": "3b7ddb7a-6889-492a-b40b-0793d73c4ac3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "90e52878-eb9c-47e3-bf2a-fcd4f0a582a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a972c81d-27c0-471e-976e-80a7d545fe5f",
        "cursor": {
          "ref": "6d4951f4-ee66-48ea-93bc-ab9da103b8dc",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "971a1d1d-d427-41d1-a361-6be6317bd378"
        },
        "item": {
          "id": "a972c81d-27c0-471e-976e-80a7d545fe5f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d36088db-4088-4209-9284-a5cb7daef922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7ce59f-0a83-4bf3-99b1-b40081dbed65",
        "cursor": {
          "ref": "48b76ad4-58ef-4cb4-9628-ce3e0391bfcd",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d5c83eb3-8239-4ca1-9095-6efbe6ecd9df"
        },
        "item": {
          "id": "4b7ce59f-0a83-4bf3-99b1-b40081dbed65",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8cec5ce3-d8a6-4116-b616-0085b75b7127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27158f8c-c2e1-465c-b612-ad3561608d44",
        "cursor": {
          "ref": "44fa0d07-c232-432b-9479-6e8f9eaba944",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "85fa6a22-58b1-460a-bcaf-577781bc4361"
        },
        "item": {
          "id": "27158f8c-c2e1-465c-b612-ad3561608d44",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "541f363e-db18-4a9d-9499-fcf2c459dd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 769,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "36431afd-f2f9-4759-afdb-7424b7c17ff1",
        "cursor": {
          "ref": "59739249-89e1-451b-82fd-d56af26fd7a4",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fc37ff72-9b7a-4b9a-a6a2-fe060b4b524c"
        },
        "item": {
          "id": "36431afd-f2f9-4759-afdb-7424b7c17ff1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0e1b2302-c9c5-4d42-9134-0d3b54a41f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15844e1a-6a77-491b-a05e-6dd76818c9c9",
        "cursor": {
          "ref": "b3685a4f-c52f-4ed7-beab-927dfa7a9403",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "047a96b2-0040-49e6-a83a-eddc2ffff60e"
        },
        "item": {
          "id": "15844e1a-6a77-491b-a05e-6dd76818c9c9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5b8626f0-26e1-4f93-864b-10e9dd34160c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4959e96a-9660-4a9c-807b-ffdc97e8edb3",
        "cursor": {
          "ref": "31fcc297-aaad-4af8-b6ec-110adbf25e74",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2458406c-9170-432e-9de2-547f220312da"
        },
        "item": {
          "id": "4959e96a-9660-4a9c-807b-ffdc97e8edb3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9495b6c9-4584-4923-9747-3324955f5314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc77c075-38e4-4502-ab8e-9464ea5b2a84",
        "cursor": {
          "ref": "2b92496f-af98-46f8-b082-45812e07fd88",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3e22686b-1c4e-4e09-8008-cded592670fa"
        },
        "item": {
          "id": "dc77c075-38e4-4502-ab8e-9464ea5b2a84",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e7738902-8f37-4a9e-82dc-328c2b01e1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933bafa9-f4ae-48bb-a1d0-5a8181f1b4a2",
        "cursor": {
          "ref": "e89362b6-44c0-4efb-92d0-941886870eda",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "272084f4-cc91-485b-ae5c-6e1dd80ac97a"
        },
        "item": {
          "id": "933bafa9-f4ae-48bb-a1d0-5a8181f1b4a2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "317b67b1-629d-4768-a205-9179b3d2f38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cf166a-68d9-44d4-bcce-9357bd8fc0d4",
        "cursor": {
          "ref": "ecc196b4-5876-4236-b571-e79c54fdce12",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "538474bb-a589-4334-a2f9-e6907f158f06"
        },
        "item": {
          "id": "70cf166a-68d9-44d4-bcce-9357bd8fc0d4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "03992f39-1814-4b84-8ae9-b655c4e387ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb927770-af7c-46b3-a5a2-6865a41d000f",
        "cursor": {
          "ref": "9aaf9153-4f0c-4473-bbaf-035086864e48",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "469d9332-694c-4e09-984d-3833d2bd8edf"
        },
        "item": {
          "id": "fb927770-af7c-46b3-a5a2-6865a41d000f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cb0641e7-c975-4bd3-9dfc-03dae7b38808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 764,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e09370cd-f4f5-4046-8370-130bc606c080",
        "cursor": {
          "ref": "8cc5f4e7-6156-4768-8546-928b7772eb53",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "63a512ff-4b98-4358-83d7-66e2119404e4"
        },
        "item": {
          "id": "e09370cd-f4f5-4046-8370-130bc606c080",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "df028957-e219-400a-9204-be651da89687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59912f5a-725e-4883-a3c6-4c8fdad0d05d",
        "cursor": {
          "ref": "ea97f563-452f-4216-a52f-1380bf5aa6d8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ae11c362-d9a9-4928-920b-6072821dea6b"
        },
        "item": {
          "id": "59912f5a-725e-4883-a3c6-4c8fdad0d05d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5c57ebfb-4c1c-4bc4-a46c-e086460bd9ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de85685-e27a-4765-81af-7f4bd47afed9",
        "cursor": {
          "ref": "249fcb21-6150-48ca-8bbe-8fb091dbd181",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "50d2d9ed-482e-48a3-ac43-a1d9965d15eb"
        },
        "item": {
          "id": "1de85685-e27a-4765-81af-7f4bd47afed9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a1be0d89-1ba1-4c7a-9163-c042615590e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baabd7b-6b58-41f2-a8e8-9a61f674dd70",
        "cursor": {
          "ref": "67d9a241-d157-4153-8ee5-f1325f305161",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cdcb5547-db64-4883-9081-0d73f0ac7b7b"
        },
        "item": {
          "id": "0baabd7b-6b58-41f2-a8e8-9a61f674dd70",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a7cc2379-4cc4-4354-8b6e-422cfe24b7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88b5c1e-0aaa-42b5-a7d6-a4027e404506",
        "cursor": {
          "ref": "818afd3e-b27d-4b79-b3cb-046615c66df9",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "22fd0109-fb3c-40e6-8834-644a65d59c2b"
        },
        "item": {
          "id": "b88b5c1e-0aaa-42b5-a7d6-a4027e404506",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c1953a8c-c5e5-44fc-b767-d2045f6336fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8317f8e2-b4a2-4523-94ab-ec0d686a9915",
        "cursor": {
          "ref": "edf8a74f-e012-456e-81b5-453781fe6703",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a4219620-12a4-4b11-a261-b5b0ddb52e00"
        },
        "item": {
          "id": "8317f8e2-b4a2-4523-94ab-ec0d686a9915",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "53edb97e-7678-49a5-99b5-d6242eb0df2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06cdf3d-f0d7-4010-ba2b-69d28d496480",
        "cursor": {
          "ref": "2bd2549e-26b4-4943-b6e7-1a131c260e63",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "fe505634-81c2-40f6-8d75-7213e7a2f0e8"
        },
        "item": {
          "id": "d06cdf3d-f0d7-4010-ba2b-69d28d496480",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "876f882e-ac74-4f01-8c79-664fbc901312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffcc989b-1052-403b-aa91-a166e0fcf143",
        "cursor": {
          "ref": "b8895597-77ef-443c-8ff3-36b3e8cb9513",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "76d689d2-f2b9-4782-b0d8-6f86d5c045f0"
        },
        "item": {
          "id": "ffcc989b-1052-403b-aa91-a166e0fcf143",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2713deae-b86f-4cad-a545-1f707408f2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60e5f40-a655-48fe-bbdb-5348fb1cfb70",
        "cursor": {
          "ref": "02be7dcc-8a18-430d-bdea-69522ec79c5e",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "804109d2-3295-4d77-af54-1619f87bd2cc"
        },
        "item": {
          "id": "a60e5f40-a655-48fe-bbdb-5348fb1cfb70",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ea49ff5e-f6d0-4947-b43e-29978737e03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2ec4b6-ad35-4407-98b2-050cd5b3f7ba",
        "cursor": {
          "ref": "1523a96c-f949-4f3f-b432-afb1cc670525",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2c3ba8a3-92db-4fec-a52a-1ea3023dfd09"
        },
        "item": {
          "id": "1c2ec4b6-ad35-4407-98b2-050cd5b3f7ba",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b25868bc-a71b-464b-a76e-38216e149159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af71086b-a9fd-44a8-b400-8de9e5dd9b13",
        "cursor": {
          "ref": "50450f54-9ba8-4d02-be29-db254b95350d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5ee04a9e-796a-4162-8a2a-67507ea00332"
        },
        "item": {
          "id": "af71086b-a9fd-44a8-b400-8de9e5dd9b13",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5f8bc3e6-b799-44e5-8eac-480b59551857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131a3da9-d923-4100-b950-ba19636c31cc",
        "cursor": {
          "ref": "10120473-6898-4747-87ea-032538ac8538",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "70eea561-b85a-44c7-b6e2-bef707798139"
        },
        "item": {
          "id": "131a3da9-d923-4100-b950-ba19636c31cc",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a21042b1-93b1-4d80-a8ec-80c81285f385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f229d86-d871-4037-b842-e8684235ee56",
        "cursor": {
          "ref": "f96ff4e4-f7a3-4cd4-96c1-de79d1ed76dd",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44e4b31f-9320-4165-a34b-5d2cb2b17ec4"
        },
        "item": {
          "id": "9f229d86-d871-4037-b842-e8684235ee56",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "807e91f4-e7cb-4112-a8a2-c31afad05a0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539ab0ab-3a8a-43b5-b9f6-5b06333708b1",
        "cursor": {
          "ref": "87449277-b3e9-4f4a-9970-5393e50c822c",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e90c3340-6387-4ef6-a6b0-6d09967ae969"
        },
        "item": {
          "id": "539ab0ab-3a8a-43b5-b9f6-5b06333708b1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4073c8b3-84b8-4478-8bb7-db9370a22372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae3a55d-d3d0-4fbe-beef-9ae246f5327e",
        "cursor": {
          "ref": "a6760968-1e32-493d-8c6b-ab3f4150dd4f",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f71153a9-1ba4-4aba-898e-817824b68cf4"
        },
        "item": {
          "id": "bae3a55d-d3d0-4fbe-beef-9ae246f5327e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2c08d3e9-c000-4034-95f3-22e8d322ab07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8c97cb-f3e2-4091-8359-51ff2d68a81c",
        "cursor": {
          "ref": "39854b5f-7dc1-4a42-a28d-c6e7f34b9445",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f44a1e75-35aa-4dcf-a802-08c085777d2c"
        },
        "item": {
          "id": "5a8c97cb-f3e2-4091-8359-51ff2d68a81c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5aefe1a0-1b7f-448a-bf00-983af5907ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0945452-e011-45a8-8515-30c780d9c54d",
        "cursor": {
          "ref": "a2dc9b2a-599a-4ba2-b678-322a5b296b6a",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fe57855a-2d24-40a6-888f-46f4a9ce0a5b"
        },
        "item": {
          "id": "e0945452-e011-45a8-8515-30c780d9c54d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ef788831-2e76-433d-a5d6-73435e5fb276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 407,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79ca5ec-b524-4822-897c-f50e31cd7d79",
        "cursor": {
          "ref": "bb2a55e9-4f81-48ef-9ecd-0617f15e12b0",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a6b19ec-9637-4449-901e-a0960638ce39"
        },
        "item": {
          "id": "c79ca5ec-b524-4822-897c-f50e31cd7d79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c9f60585-b5d7-40ea-8070-8ad2764edcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2416db89-4b51-4976-806c-467d76488e42",
        "cursor": {
          "ref": "fb4bb98b-16c5-4f5b-808c-3c216684ae15",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b26ffadf-4c77-4692-b2df-4d1b70a269d7"
        },
        "item": {
          "id": "2416db89-4b51-4976-806c-467d76488e42",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6e141d65-a99d-4ed9-b3ce-b8d18d3b1210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81936a8-21e8-424e-9278-86883d61ee85",
        "cursor": {
          "ref": "1d293774-f23a-45b9-8634-c7c3ca670b5a",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3ca2c146-c6fd-42c7-8c47-31728042c40d"
        },
        "item": {
          "id": "d81936a8-21e8-424e-9278-86883d61ee85",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "44e4328c-019c-40d1-be1e-7f7860f3d949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aed2b3-1994-4c85-9c71-80d716b02403",
        "cursor": {
          "ref": "154b506f-d657-4f0d-89a2-d98bec48ff9e",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4ca85a58-110b-46ea-ba4a-134aea2a44b2"
        },
        "item": {
          "id": "97aed2b3-1994-4c85-9c71-80d716b02403",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fa795ad7-e371-415a-91cb-1505e21782ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cd34b1-7ec2-4cce-a0e9-5834162e8c18",
        "cursor": {
          "ref": "c7fd3d12-66df-453d-9bf2-839260de8651",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6477f1b1-6169-4079-8cfc-eff7baef88ac"
        },
        "item": {
          "id": "d8cd34b1-7ec2-4cce-a0e9-5834162e8c18",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e3b95ad0-4a28-4276-9ff7-e3482d93e531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002dcb98-777b-44e1-aaac-e40ab3edbeed",
        "cursor": {
          "ref": "5e07a0b2-170f-4b14-822a-b5021c38d76b",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "61895af4-4cd1-4ba6-bdef-dfb9fc21f3cc"
        },
        "item": {
          "id": "002dcb98-777b-44e1-aaac-e40ab3edbeed",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "55e3ff81-8cab-4b8c-826a-b811e02f53f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a6a0a8-2317-4ea0-b604-95c97349e4d9",
        "cursor": {
          "ref": "50bee46b-3c03-49ca-be5f-a6442a4d8a84",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4cfd0c87-6ea9-4bce-988e-e1e967bc84f3"
        },
        "item": {
          "id": "73a6a0a8-2317-4ea0-b604-95c97349e4d9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2507d6dd-064f-40d9-bf6a-70a0be83caf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ee10f4-4edb-4475-8484-a391c63daa94",
        "cursor": {
          "ref": "fe9650f6-c78d-4bbf-9cbe-a3421c1ab7bb",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c9209a2d-d027-491b-9cf5-cc4d3a71a90d"
        },
        "item": {
          "id": "41ee10f4-4edb-4475-8484-a391c63daa94",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8c820d59-52e1-47a5-8c45-748516d8d4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5274fe6c-2a26-42a9-bbbc-56c69c8c9e9f",
        "cursor": {
          "ref": "116b0bb3-58f4-4981-94c4-ced4d148bf45",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b60abf23-eafb-4486-90dc-85de1a702dac"
        },
        "item": {
          "id": "5274fe6c-2a26-42a9-bbbc-56c69c8c9e9f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0fef3582-0bd2-467d-9c0c-a22fa03021f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4333fc4-c464-4376-9bbe-fc47da67e55b",
        "cursor": {
          "ref": "9f7befe9-54a1-40ea-9982-ef554e94a11a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f144ef96-a118-4e76-8008-738238e93769"
        },
        "item": {
          "id": "a4333fc4-c464-4376-9bbe-fc47da67e55b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bf0f0e19-7e7e-4156-a5c8-c79a1d45cd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e595619e-4c5b-4f32-b3e3-e01a565a4928",
        "cursor": {
          "ref": "f4846039-cffb-43a0-8886-c0ff7345c9f0",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2f04c4d1-f326-4f29-b042-7e2331465959"
        },
        "item": {
          "id": "e595619e-4c5b-4f32-b3e3-e01a565a4928",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "58d5ac87-9c38-4194-8332-234970cd529b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8f3a06-0a57-41a9-a646-e1198230e1d7",
        "cursor": {
          "ref": "945cc28e-10c3-46ea-8d09-b940430b69d4",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c57a3db9-fba4-45fe-be07-1449f17cd114"
        },
        "item": {
          "id": "7b8f3a06-0a57-41a9-a646-e1198230e1d7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "16b5598e-a917-4438-b3d3-dcdd68c4e5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1fcbb2a-5aad-4b21-8267-4c8e020bfbcf",
        "cursor": {
          "ref": "b3128671-ab1c-43d7-874d-a2d47ca7f7c9",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c3720d71-9264-444d-9392-322f1991745d"
        },
        "item": {
          "id": "f1fcbb2a-5aad-4b21-8267-4c8e020bfbcf",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fddf9e44-1729-4e1c-bf25-0d31215ebf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc664b7-9219-49e1-bfaf-28d5f191ef15",
        "cursor": {
          "ref": "1d57cf1a-4cf7-4c59-b23f-9326c2718095",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c61a7467-d5bc-4525-a815-6880fb731ede"
        },
        "item": {
          "id": "1cc664b7-9219-49e1-bfaf-28d5f191ef15",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c2a04d1c-7ae5-4b7f-ab9f-a5923831f9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 779,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b29cb27a-3e1d-4fc1-894d-8c48f0dd1954",
        "cursor": {
          "ref": "b2df2474-05f8-450f-9743-6c49f17e91c9",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4fa412fa-9844-4298-8c49-cf86ea565d21"
        },
        "item": {
          "id": "b29cb27a-3e1d-4fc1-894d-8c48f0dd1954",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8945a8a3-bb48-4d4c-9974-6ee55363a191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbbb9df-676c-41c2-9fb3-f676bfbf65a2",
        "cursor": {
          "ref": "b1e561eb-a913-4844-adc5-d3e91fc29615",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "98fb5c5c-63c6-4281-b165-ff68ee197924"
        },
        "item": {
          "id": "7dbbb9df-676c-41c2-9fb3-f676bfbf65a2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "db45ba66-13a4-4ac9-873e-3fd089f8a204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfb50a5-afa1-4e88-a5fb-dee0f841db72",
        "cursor": {
          "ref": "d25c8d34-ca03-42d5-ba11-8de916da0c99",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "614c87e7-4a83-409a-97a4-13268da668a9"
        },
        "item": {
          "id": "dcfb50a5-afa1-4e88-a5fb-dee0f841db72",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3ef59f56-c5af-4695-89ec-5255bd7e1c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d092bb12-0fe8-4e02-8e4a-428d18d37d17",
        "cursor": {
          "ref": "e3c01722-3999-4b16-9c17-e24033a93da8",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e64646ee-66da-4414-82c7-e11937ba0d7c"
        },
        "item": {
          "id": "d092bb12-0fe8-4e02-8e4a-428d18d37d17",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fcdb135f-ec07-4769-90bd-f7200fd62e84",
          "status": "Created",
          "code": 201,
          "responseTime": 1622,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "342322b0-4d7f-4558-aa43-fda81dfdc9f1",
        "cursor": {
          "ref": "fc0798c7-184b-44d1-9cfd-deb1fdb10ead",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9f2a7959-b05c-48bf-8402-c5b02a7b01f5"
        },
        "item": {
          "id": "342322b0-4d7f-4558-aa43-fda81dfdc9f1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e4d1576f-1a5e-4d06-81bf-9d3b770a1061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b478fcda-866b-4629-ad5e-fa8b212e5893",
        "cursor": {
          "ref": "c558fa55-88bb-4971-a127-63ea1cc2582f",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de01b12a-a1db-4598-b3fa-dcf0e37fb60e"
        },
        "item": {
          "id": "b478fcda-866b-4629-ad5e-fa8b212e5893",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0aa9d553-58b5-4b23-b3cc-3aa364b5b8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76c50b3-0e40-4ead-8e33-fb528ec65cfd",
        "cursor": {
          "ref": "b1efeb01-a00a-47d6-82f3-f5029d9dd69a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c54e7cf-a832-428b-96d5-286366701ec8"
        },
        "item": {
          "id": "c76c50b3-0e40-4ead-8e33-fb528ec65cfd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "080122c9-cbc1-4f35-8656-17d2ae9bac46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad7c7a0-0016-47de-9bd1-745d97a59c8f",
        "cursor": {
          "ref": "b0096d41-ffbd-44f3-8a74-52e94aad1048",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3a96fb0e-d800-436c-b06e-ad584ae38b0a"
        },
        "item": {
          "id": "0ad7c7a0-0016-47de-9bd1-745d97a59c8f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cec67d48-fc25-4f43-9dc1-15f1ba8ce37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68260f5-20b4-4c2b-bd22-ac6b33868306",
        "cursor": {
          "ref": "c36f85d3-6aaa-495f-a3dd-191c447e423f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "941e6f0d-6392-43d7-9baf-07bc7ea0228d"
        },
        "item": {
          "id": "f68260f5-20b4-4c2b-bd22-ac6b33868306",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8f2644d0-b60a-405c-beae-9f2baac542b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997e36a4-80de-4ae4-8ccd-1ad579866128",
        "cursor": {
          "ref": "7b782cf2-aa03-4fc6-8a69-0a74813cd07b",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "976ba5ea-2948-4a4a-a4ce-6894cac19090"
        },
        "item": {
          "id": "997e36a4-80de-4ae4-8ccd-1ad579866128",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "69d06d71-1299-4571-ba0c-fc016e5b52d4",
          "status": "Created",
          "code": 201,
          "responseTime": 1489,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f41213a6-1ea9-4e06-b100-23ed88ee75dc",
        "cursor": {
          "ref": "d639ea33-df64-4b91-86bb-2f7407a03153",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "26516fce-db29-4f56-a6a0-df8dd0a626b4"
        },
        "item": {
          "id": "f41213a6-1ea9-4e06-b100-23ed88ee75dc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e091f47e-f18d-4318-abc4-89785d1951ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d75eee6-ef69-42eb-9d38-de234dd2e85d",
        "cursor": {
          "ref": "ff2e23f5-f132-43b0-9c1d-ecaf2a7c32c9",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "74d68171-c2c0-4094-a7b4-f9b6ba90172d"
        },
        "item": {
          "id": "2d75eee6-ef69-42eb-9d38-de234dd2e85d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ed403ceb-9e0b-4230-b6bc-0eaa7f2729a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bf97ae-6c17-4c77-b5f1-8c191353b929",
        "cursor": {
          "ref": "1ce1d696-0567-47c8-8795-92e7ff7c2a0f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c7e1a7a0-edcf-40ad-a3e8-854fd2317e75"
        },
        "item": {
          "id": "e7bf97ae-6c17-4c77-b5f1-8c191353b929",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "af721684-2470-42d3-9ce9-fb34d6693961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75accc63-af77-485b-8b07-8625bd7afd3a",
        "cursor": {
          "ref": "69581048-16e9-4eb4-b679-475d14d48307",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ed21d5b2-1aa5-4786-96e4-cf0714b56cab"
        },
        "item": {
          "id": "75accc63-af77-485b-8b07-8625bd7afd3a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "32bd5e54-ffd6-4ea6-b56d-146c0ceabed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf39433b-e783-4d54-a592-f73039fb385b",
        "cursor": {
          "ref": "c92809d4-f97a-4ae7-b200-80dd0739dbfc",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b667ec37-24a2-4b51-9bf7-2f47f4917c6a"
        },
        "item": {
          "id": "cf39433b-e783-4d54-a592-f73039fb385b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d9c5daa0-125d-43b1-8301-fcb4f1230fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314c434e-76f9-4662-8d97-7e2008ec1671",
        "cursor": {
          "ref": "b3cb9a29-c75d-4666-8cc0-e7e989d952ea",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7c871fa9-061a-4242-88d1-8445564ef923"
        },
        "item": {
          "id": "314c434e-76f9-4662-8d97-7e2008ec1671",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0809b611-3eb8-4d70-bb9e-0df0c3c33904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938d3fe8-ebf3-4860-84c4-1da371e96094",
        "cursor": {
          "ref": "a6bf154f-08e8-4a30-868c-0dc601a4ac90",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c4930f8d-d9c4-4893-aee8-fe969ca2a890"
        },
        "item": {
          "id": "938d3fe8-ebf3-4860-84c4-1da371e96094",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2cf064ca-6681-4820-beb0-006e6fda233d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ec0c70-bb59-455f-85fa-2b24926aa9a2",
        "cursor": {
          "ref": "b3bd01e5-1b12-494d-8497-dce1271f3c47",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "62b88032-db60-4c37-bbb3-7130265e5ad0"
        },
        "item": {
          "id": "b2ec0c70-bb59-455f-85fa-2b24926aa9a2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0ba54916-7257-40bb-8465-6dc0f391d004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d49f28f-36c6-4522-84b8-8f1bb8088b3c",
        "cursor": {
          "ref": "3a7bfa57-9a91-40a0-a21f-dfdb8aee86e5",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4e1807ee-2bcb-4716-b2ac-15a8957a16f5"
        },
        "item": {
          "id": "2d49f28f-36c6-4522-84b8-8f1bb8088b3c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "872b5fb7-9edb-4bc4-a7cd-9fc50e2cb517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "57212c8e-2d3e-426a-a7cf-3c0edde19f07",
        "cursor": {
          "ref": "ddcd30e4-0076-4b37-b01a-c235db61bff0",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "702d106b-5e30-4e11-b58c-9e57b582d76a"
        },
        "item": {
          "id": "57212c8e-2d3e-426a-a7cf-3c0edde19f07",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "897ffa2c-f61c-4119-8e6e-955941615594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "6df67a92-92a9-4196-b268-14854c334d11",
        "cursor": {
          "ref": "7f477e26-fb58-406b-9729-5fd24045515e",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "73d0e50a-f94f-40c2-991d-18295572e8af"
        },
        "item": {
          "id": "6df67a92-92a9-4196-b268-14854c334d11",
          "name": "credentials_issue"
        },
        "response": {
          "id": "32a2ca9e-aef9-46ca-929f-1f5eb4b2e3a6",
          "status": "Created",
          "code": 201,
          "responseTime": 1507,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc53b80-2290-45ab-ae7f-0b362fc53250",
        "cursor": {
          "ref": "17d4eb05-b16a-4fee-8344-e3c595a3047c",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "787dd834-57b6-4c4f-9689-e374215f9087"
        },
        "item": {
          "id": "adc53b80-2290-45ab-ae7f-0b362fc53250",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "44a91b04-fef5-45e4-ab24-5103792f87c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1504,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c334de23-0896-4939-9757-2f409dc76748",
        "cursor": {
          "ref": "39fa6df5-5761-4c92-b6d2-f8d00732d85b",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b83f9de0-ab48-4b59-84b0-6778ea5c8768"
        },
        "item": {
          "id": "c334de23-0896-4939-9757-2f409dc76748",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ddfb8f77-5c40-475e-835e-2d4807a214ac",
          "status": "Created",
          "code": 201,
          "responseTime": 1513,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "505e7088-db88-4349-96e5-1eeb7bd6c0ad",
        "cursor": {
          "ref": "0c5f0cb7-d874-4f73-b3d0-b412d04b422a",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ee0bf194-2981-4246-b6fd-c451d568b2e7"
        },
        "item": {
          "id": "505e7088-db88-4349-96e5-1eeb7bd6c0ad",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "30219df0-fedd-4a45-9750-ad2356bd0f8b",
          "status": "Created",
          "code": 201,
          "responseTime": 1513,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05d6f8b-3b83-42ce-9415-721d6ac03001",
        "cursor": {
          "ref": "aea34ee2-f3ad-41de-bc7d-89fcc4aa04a9",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1271a69f-94fa-4d5f-a356-b3578c293c77"
        },
        "item": {
          "id": "c05d6f8b-3b83-42ce-9415-721d6ac03001",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1daf11b5-9a67-4053-87b6-5cdb33d6f1e5",
          "status": "Created",
          "code": 201,
          "responseTime": 1523,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94cb2dd-1ad2-4a58-97c3-483117175962",
        "cursor": {
          "ref": "9db28114-30b8-48ba-a9f1-9920caecc528",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4df3cb8b-83d2-459c-a5c1-82b04160b275"
        },
        "item": {
          "id": "b94cb2dd-1ad2-4a58-97c3-483117175962",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a0d74b39-5468-44e7-b1cd-3938123aa1b6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b94cb2dd-1ad2-4a58-97c3-483117175962",
        "cursor": {
          "ref": "9db28114-30b8-48ba-a9f1-9920caecc528",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4df3cb8b-83d2-459c-a5c1-82b04160b275"
        },
        "item": {
          "id": "b94cb2dd-1ad2-4a58-97c3-483117175962",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a0d74b39-5468-44e7-b1cd-3938123aa1b6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "004d1b6c-043d-421f-8969-2a27538117e4",
        "cursor": {
          "ref": "a7d59c59-b2ae-427d-bb71-445f2d447973",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "01c9e055-828f-47eb-b52f-aa2c50ad0121"
        },
        "item": {
          "id": "004d1b6c-043d-421f-8969-2a27538117e4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "45abfa32-f05e-4ac6-92f6-ba7f64416ef1",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "3ca0f91a-4a70-4da2-a611-1830416166b8",
        "cursor": {
          "ref": "5ac0fa80-4e6f-4125-8cc9-f2337202ae3b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b7efb8bc-41b1-4cba-9aaf-678e545109ae"
        },
        "item": {
          "id": "3ca0f91a-4a70-4da2-a611-1830416166b8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "190855be-b175-45e1-8a05-485b4c729441",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c26ac8d1-5f6b-4ab2-b22a-1a0bfc22b8c5",
        "cursor": {
          "ref": "f39285b3-52a8-48d8-ae65-e71ae45b443f",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "768c8d6b-c216-4f9d-a354-1af7327f1ee2"
        },
        "item": {
          "id": "c26ac8d1-5f6b-4ab2-b22a-1a0bfc22b8c5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "28d7d8bd-0bb2-4fb7-96a0-1c6ddb4a057c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1ac27af6-b95a-44f5-be18-fbca368af932",
        "cursor": {
          "ref": "61460107-89eb-4b31-949a-b16e68ce5746",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3760e5c1-7679-4864-89d9-c66cb8726e29"
        },
        "item": {
          "id": "1ac27af6-b95a-44f5-be18-fbca368af932",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "063f2251-c364-43a3-ba25-1f746cedc837",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "dfce0497-4d06-4548-9c38-9137c8e5da40",
        "cursor": {
          "ref": "3116c67e-dfe4-4fd7-8036-935e5a2ebfce",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "97e6b915-c9eb-4c27-a7a5-6ab6f0d40e97"
        },
        "item": {
          "id": "dfce0497-4d06-4548-9c38-9137c8e5da40",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0b0bb8ec-0875-48e4-b24e-872bdff62c77",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "09791e9e-cbd1-4455-8b9f-d969794663c7",
        "cursor": {
          "ref": "46d35861-a769-4f80-97f2-0845f9f9ca98",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5a0fc81c-cc98-4527-bd83-5b94a9e1ed49"
        },
        "item": {
          "id": "09791e9e-cbd1-4455-8b9f-d969794663c7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a3124ac7-456a-4670-9f4b-e38ae391ef04",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cfa5fa5e-f124-4ee1-b78b-4cfea44536d9",
        "cursor": {
          "ref": "878ea4f3-7189-417f-ab56-d575d362dc37",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2d26e20b-1128-45aa-8067-68033c4fe393"
        },
        "item": {
          "id": "cfa5fa5e-f124-4ee1-b78b-4cfea44536d9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "81ba1a94-c1df-4f91-849c-f5660180b78d",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "078624c4-3cd3-4380-a283-0634847a340b",
        "cursor": {
          "ref": "2b5b235e-2e9c-4a11-b727-67692cafa41a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "054a145a-0a7d-46c1-8f17-7238462295d1"
        },
        "item": {
          "id": "078624c4-3cd3-4380-a283-0634847a340b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "09df6eef-d507-4d6f-92cf-ee160409af1f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7eed22fa-5ee5-4c7a-9f90-88f5ea1d8a14",
        "cursor": {
          "ref": "2ba5c215-7a10-4567-89d0-a6bd87783ca0",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "db6c0be5-a470-4f7b-ad83-ef671b302235"
        },
        "item": {
          "id": "7eed22fa-5ee5-4c7a-9f90-88f5ea1d8a14",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "043b7e5a-39b4-4fcb-9b29-5be8d87a5bdc",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "dde9456d-42bf-4eac-9f1e-21a8833b5657",
        "cursor": {
          "ref": "99720a95-1757-4155-ad0e-b6905c2a5680",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d204a80d-9984-4100-b38e-95f1b50ce75a"
        },
        "item": {
          "id": "dde9456d-42bf-4eac-9f1e-21a8833b5657",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f39f864f-cc0d-4f7e-8c55-e3e17af8cb2f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "19cda7d0-2db5-45f3-83c7-9ad9a5242446",
        "cursor": {
          "ref": "8b0f86de-fed4-4b04-90f0-a2e6a1085566",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2afc9812-c66f-42be-aab5-8f23a4e21ab2"
        },
        "item": {
          "id": "19cda7d0-2db5-45f3-83c7-9ad9a5242446",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b911edd8-ff25-4bd7-bce9-ec6302438e91",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "17f19167-08a2-4a6e-aa01-3d05bd5757a3",
        "cursor": {
          "ref": "8fe1ba63-da9b-4c41-ae54-7cf7319f9484",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "25d27e70-bdfd-4286-86b1-512713b4f2b6"
        },
        "item": {
          "id": "17f19167-08a2-4a6e-aa01-3d05bd5757a3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1145ef57-9dcc-469e-9348-91b707a91ae7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "94982258-e0bc-4628-bc9c-8580b6b72393",
        "cursor": {
          "ref": "b4a346de-e6bd-4ecb-ac44-463262bd2657",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "029b50a1-edc6-4a53-88c2-a998591f4af0"
        },
        "item": {
          "id": "94982258-e0bc-4628-bc9c-8580b6b72393",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "12d3bc2f-29fd-47e7-ab4e-eca161839fb2",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "bed21302-e544-427a-9910-e4c019990d30",
        "cursor": {
          "ref": "d29aa3f1-c4a4-48ca-84bb-46ba03b0509a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "240ce5da-6c84-485c-b170-f30713f4765e"
        },
        "item": {
          "id": "bed21302-e544-427a-9910-e4c019990d30",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bfe8c6a4-e144-46bc-90b8-30b5e767df06",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "62ed77e6-f673-41e9-8a2a-13bcd38040f9",
        "cursor": {
          "ref": "0dbb7ef7-c461-441b-9994-5f8bad501147",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "caddd8a0-0a0d-4128-88a5-1ea40271fef3"
        },
        "item": {
          "id": "62ed77e6-f673-41e9-8a2a-13bcd38040f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "51f6d612-a795-410f-b38f-5cac58b074da",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5500e085-5cfb-4da1-baed-791fcfa6e905",
        "cursor": {
          "ref": "304a6152-0fe8-4481-bcdf-e5194b723ee3",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b5edaac7-8857-4101-a11a-cfb17178a78d"
        },
        "item": {
          "id": "5500e085-5cfb-4da1-baed-791fcfa6e905",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "58be0ea3-b6b5-42eb-a4d7-f81e7cef7a6c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8963def4-a719-477f-ad46-61ec88cf521d",
        "cursor": {
          "ref": "d91636a8-409b-4cd4-811b-a4ffa41a7f69",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "73b4e1f3-c0df-444c-89a4-3c3614a1fa18"
        },
        "item": {
          "id": "8963def4-a719-477f-ad46-61ec88cf521d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ba489969-24ea-46d7-9268-8cfa93ef6612",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "68934b3c-01a3-4400-b6c4-f3df03aa028e",
        "cursor": {
          "ref": "9793e6de-8d35-4e53-b9c7-1af906f09673",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "882346ba-e3e2-46ff-988b-01362c3a0fe2"
        },
        "item": {
          "id": "68934b3c-01a3-4400-b6c4-f3df03aa028e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ecfb7f9-e9e2-474e-b007-4a74df4ddf1d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e53798f1-8594-4afc-a18c-9f3ba34e565a",
        "cursor": {
          "ref": "819023ca-1ded-4191-a64d-58a272a76c95",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "88d91c2a-115f-4a38-8f23-359618b03378"
        },
        "item": {
          "id": "e53798f1-8594-4afc-a18c-9f3ba34e565a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0d691282-b4d6-4c4b-b079-0dcf792e9dc3",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "aa97d0d0-4988-4519-9179-5af133668ec2",
        "cursor": {
          "ref": "c627dc2f-75af-4e30-bef4-fc2940850068",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b5bc5550-6e6a-4e37-bc68-12e0d8160109"
        },
        "item": {
          "id": "aa97d0d0-4988-4519-9179-5af133668ec2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2d85796d-c00a-4032-bde0-1366bc1613f8",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "65867383-5e92-476e-96e6-77ef6f150f9b",
        "cursor": {
          "ref": "0960dfbf-4fae-4d3a-8c7a-ad7cda561763",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f8097c28-c7c3-44e9-890f-cda6bf8f0ed1"
        },
        "item": {
          "id": "65867383-5e92-476e-96e6-77ef6f150f9b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "63dbb202-ab4a-415b-a6a7-86833000e980",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6a905c91-e70c-42ec-8236-5cc746241f5e",
        "cursor": {
          "ref": "8c737b06-c4a6-4f31-9f04-27f216d0356d",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4fb204df-1c95-432b-bb78-5c2fae965b82"
        },
        "item": {
          "id": "6a905c91-e70c-42ec-8236-5cc746241f5e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d7c79013-889c-4050-8dc5-6a18f2d288ca",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "a14b2e58-16d6-4d99-9fd8-d6393efbf69a",
        "cursor": {
          "ref": "89bc2829-d6c9-4469-86f6-08f9ab0441f3",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "66d54a7d-c5f9-4ec9-9f27-e07d1d06c574"
        },
        "item": {
          "id": "a14b2e58-16d6-4d99-9fd8-d6393efbf69a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "abaa883e-dec4-41b1-a7a6-2ea753c2b691",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4b431aa2-56b2-4f29-b20e-cf11950964d5",
        "cursor": {
          "ref": "be691c83-f1dd-4f57-ac34-2a564b27c1bd",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0bba0a40-bef2-4204-8a12-d86eb6417c93"
        },
        "item": {
          "id": "4b431aa2-56b2-4f29-b20e-cf11950964d5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2da7c713-e1c9-418b-ad80-09c12dec1dc3",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1a479b01-7dc4-4612-9333-8effbb9e39c4",
        "cursor": {
          "ref": "0cbc705e-b919-4d24-8792-333d32bb90c0",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "62b1c387-38af-444b-82c3-9d8eb5a0c5fc"
        },
        "item": {
          "id": "1a479b01-7dc4-4612-9333-8effbb9e39c4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1c7eae65-43e3-44a2-82c5-9ccc39dc1d59",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "018fafea-cb99-4545-951c-bc219ef7feb5",
        "cursor": {
          "ref": "26f70c9a-9d1a-41d7-bee3-cb0ec06ab410",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ad4933d8-f09f-490d-af64-25f8324bbf5e"
        },
        "item": {
          "id": "018fafea-cb99-4545-951c-bc219ef7feb5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dd55d99a-32a7-4000-aa7b-fde40f267085",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c41983b5-f834-461f-8651-c071b1135b49",
        "cursor": {
          "ref": "cddc9d6f-0f51-44aa-96b6-081699ddff28",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8df225fc-3dd9-416c-82cb-4c30a3548691"
        },
        "item": {
          "id": "c41983b5-f834-461f-8651-c071b1135b49",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0054b63e-a305-412a-af93-8637d676d23a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "eb601036-5c34-41ab-8fc9-980ab1cdc030",
        "cursor": {
          "ref": "a8e39169-666d-460b-9962-a36c718fc109",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b22af2e6-8802-4a06-8bf8-8155e59ba320"
        },
        "item": {
          "id": "eb601036-5c34-41ab-8fc9-980ab1cdc030",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cec3955b-975e-4873-89ab-34752063dedc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "31f6d0a8-3c49-47ac-8b7b-56ae8f2aafca",
        "cursor": {
          "ref": "58f2e391-85e1-4f23-9e89-b08cc042a5e1",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "64364160-39fe-4443-a09f-8ecd45d43e82"
        },
        "item": {
          "id": "31f6d0a8-3c49-47ac-8b7b-56ae8f2aafca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5895f293-44f9-43bd-a613-97ec8eb7430b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "edd160f6-3ba6-43e3-bdbc-c275d56a43bc",
        "cursor": {
          "ref": "6b53558e-a6d9-48fe-8c39-4f42929065c8",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "61114ff9-01e4-402d-80fc-d7eea8e9c32f"
        },
        "item": {
          "id": "edd160f6-3ba6-43e3-bdbc-c275d56a43bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1ee506d4-656f-476b-8d00-cee470b21ea3",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c7a88438-3cca-4705-a63f-674cc973a47e",
        "cursor": {
          "ref": "b36f3378-8a66-4924-9871-54b93507ab2e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "787158fa-c856-4897-9fbc-d7784bbc7152"
        },
        "item": {
          "id": "c7a88438-3cca-4705-a63f-674cc973a47e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4f6496c7-61fb-41e5-80f5-771b3af8bd45",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "76a8171b-44fe-42f1-a819-658f814deabf",
        "cursor": {
          "ref": "d10e40b9-c361-4e43-9097-eae5e9dda361",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0c3893ac-692d-4e92-96ae-460964fc8ff9"
        },
        "item": {
          "id": "76a8171b-44fe-42f1-a819-658f814deabf",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "79b7fe97-3c9f-434b-8b31-3a7a65bae59e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fde03e-71e0-4b7a-ac8e-50a811f85ef3",
        "cursor": {
          "ref": "8e72c57e-1f54-4900-82bf-38df11c78809",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bcd92a85-aabe-4023-ac79-a7ef41b14221"
        },
        "item": {
          "id": "38fde03e-71e0-4b7a-ac8e-50a811f85ef3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "317101b1-b50e-4047-94c7-a9cad9950976",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246161d-5ef9-418a-9b41-b93371f2ecb4",
        "cursor": {
          "ref": "fc2a05d1-501c-4fb4-bb40-133aa38279e1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "68063a66-bed3-4e15-86b4-3ef805d76b78"
        },
        "item": {
          "id": "f246161d-5ef9-418a-9b41-b93371f2ecb4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "966e556b-4c1e-480f-a87f-7b16f6a189d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f246161d-5ef9-418a-9b41-b93371f2ecb4",
        "cursor": {
          "ref": "fc2a05d1-501c-4fb4-bb40-133aa38279e1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "68063a66-bed3-4e15-86b4-3ef805d76b78"
        },
        "item": {
          "id": "f246161d-5ef9-418a-9b41-b93371f2ecb4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "966e556b-4c1e-480f-a87f-7b16f6a189d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a332f8a1-78fa-4592-8140-a6bae7e6e451",
        "cursor": {
          "ref": "a9462ea4-ccb8-4b04-9a74-3f14932c8a24",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1ac8b4d1-bd36-4dde-a42f-597eeaeb15f8"
        },
        "item": {
          "id": "a332f8a1-78fa-4592-8140-a6bae7e6e451",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0494b55e-e281-4cc6-9534-3eec88c4ee97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac1b5eb-bff2-4ecf-97cb-8bf2b2bbcf16",
        "cursor": {
          "ref": "5f91e6af-975d-4f5e-849b-452f039ee33f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "423d9c45-287d-4459-be3f-020b123392fc"
        },
        "item": {
          "id": "8ac1b5eb-bff2-4ecf-97cb-8bf2b2bbcf16",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "281849c5-40a5-4aa8-9fd5-25726b1b795d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f550fd1-78de-4881-9f61-ac9098e58726",
        "cursor": {
          "ref": "daa7eea0-2594-4de4-b8e1-f73caf9e9019",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "148ba95d-a148-4ff9-9786-41d6eff23a6e"
        },
        "item": {
          "id": "0f550fd1-78de-4881-9f61-ac9098e58726",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "57bb912f-0ec8-4aea-80f6-f64bb6de019e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6326b43d-5cd0-4d3e-b774-461f6b63ed47",
        "cursor": {
          "ref": "1ce04033-2754-45ad-9788-04319593dae4",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dc8cc061-38e2-4364-ba5d-9da569746ed9"
        },
        "item": {
          "id": "6326b43d-5cd0-4d3e-b774-461f6b63ed47",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7bad7e10-d06f-4d52-af63-5b81417bf7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef2ab92-bf7e-4af4-be73-f9d15cbc35a4",
        "cursor": {
          "ref": "489b1804-5c47-4536-a1a5-1e3efbf6bad7",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "18d575a7-8c91-4859-b481-3025eb15d40f"
        },
        "item": {
          "id": "2ef2ab92-bf7e-4af4-be73-f9d15cbc35a4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "355a707e-960d-470d-8b8c-dc15cd33a36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560784ab-cf8c-42e3-bd52-1c9b039151de",
        "cursor": {
          "ref": "1c09bf27-0485-4d75-9cd6-72b260013b83",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "50a6dc48-c72a-44c0-8810-4f0fe4a8b227"
        },
        "item": {
          "id": "560784ab-cf8c-42e3-bd52-1c9b039151de",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "15133618-955a-4c52-a8dd-b58a9509e07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513ad899-4c2e-427c-83ee-2b4f338bfa36",
        "cursor": {
          "ref": "a7539c18-b297-49c9-8bdc-45e76a1a3e15",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c4db21c9-e1a2-4005-98b8-9c33b760f1b3"
        },
        "item": {
          "id": "513ad899-4c2e-427c-83ee-2b4f338bfa36",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "47bc5ed6-2b1b-4af7-8dc7-aef7510ae367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79317dc7-a471-4bb3-a51c-80af1f0bc896",
        "cursor": {
          "ref": "11c70d1d-e274-4463-9a6b-6938f3d40c93",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "637ed17c-6db2-486b-800c-59ac41e90545"
        },
        "item": {
          "id": "79317dc7-a471-4bb3-a51c-80af1f0bc896",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2272247d-bdac-47e0-9cd9-71e0c5d7b00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddfc10f-16a3-41f1-90a7-079b626286ca",
        "cursor": {
          "ref": "8c902329-129b-4166-9579-fb7ae929aab1",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8751ea92-7162-4622-a25c-c26f0c9959bb"
        },
        "item": {
          "id": "cddfc10f-16a3-41f1-90a7-079b626286ca",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "65cb1cde-978e-46e9-a697-4a38f141c156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9040cdb1-2cf5-420f-93c3-a13569046e6f",
        "cursor": {
          "ref": "8fcc2c09-c0c3-4de7-b0fe-9eeb274d15af",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "80dbcfcb-072c-400c-af21-828129cb8c8e"
        },
        "item": {
          "id": "9040cdb1-2cf5-420f-93c3-a13569046e6f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "795ad625-2f3b-4508-a808-11b0d2d88462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aac953a-8036-44b3-bf20-cd5c161b0a01",
        "cursor": {
          "ref": "825dfde1-4928-4fe3-a99d-08710c0eb374",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "109c9ffe-b8c2-455e-8354-6dbc3cb5037d"
        },
        "item": {
          "id": "6aac953a-8036-44b3-bf20-cd5c161b0a01",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "628be216-94fa-4b99-8a21-3494d6d1ea3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c653c313-cb63-4890-a9f1-eefddafe1f43",
        "cursor": {
          "ref": "06d21fd1-429f-47e0-82cc-321bc774daf4",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "77acbb10-ef66-4df0-897a-050624537dc3"
        },
        "item": {
          "id": "c653c313-cb63-4890-a9f1-eefddafe1f43",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f54fb00d-cdf9-4b66-86f4-0d10d7c4758a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89407ef7-3cd8-40f0-9945-ebcfa53a431a",
        "cursor": {
          "ref": "cf1d15f4-b151-4ac9-ae2d-243430a336cc",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cbf17998-8c7c-4fd1-b38f-82fd2f929d9c"
        },
        "item": {
          "id": "89407ef7-3cd8-40f0-9945-ebcfa53a431a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "40532817-d7ab-4eb1-b894-76b856a925bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afd1e17-f8d3-4680-8458-e679133d98cc",
        "cursor": {
          "ref": "51a47550-4e3b-49a2-b8d6-43254856245f",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "13328929-65a1-4de2-9c62-8548dbf92c2b"
        },
        "item": {
          "id": "6afd1e17-f8d3-4680-8458-e679133d98cc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "392d15ca-3a61-490c-9c48-298842c6ad3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287da9fb-2b51-4eea-9f0b-5c19b622e61e",
        "cursor": {
          "ref": "751e2021-6b1b-4994-a2a4-302fca5a3c96",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cfc47737-89dd-4481-a577-1610c4e09262"
        },
        "item": {
          "id": "287da9fb-2b51-4eea-9f0b-5c19b622e61e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2f47f1cb-1ce5-4cc2-9dab-9e445d29be17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561aaab8-811e-4de7-9ba6-a31d7c02cb48",
        "cursor": {
          "ref": "72ebf132-88cc-437b-8a7a-6a2ade102aa0",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3ee84e7b-e56f-4e98-93d0-71fd4360b119"
        },
        "item": {
          "id": "561aaab8-811e-4de7-9ba6-a31d7c02cb48",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5dc47228-dc59-41b4-bc0e-a28ad1de875b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c27358-0c17-46e7-850e-b0deb7b0c288",
        "cursor": {
          "ref": "3bec49c5-4620-4c23-9638-0f2f66152c27",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "56383a02-311c-455c-a4f6-f4434d6fe62a"
        },
        "item": {
          "id": "82c27358-0c17-46e7-850e-b0deb7b0c288",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "c448b014-78dd-43ba-85e5-f813cca14419",
          "status": "OK",
          "code": 200,
          "responseTime": 1239,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "85bb0ff1-8dc8-4bd4-9bb6-fbf86674018b",
        "cursor": {
          "ref": "95787c7b-dcc5-4449-8a6d-9adf6ae3c873",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ec7ee1c-7352-4753-95c9-e9dfdd884251"
        },
        "item": {
          "id": "85bb0ff1-8dc8-4bd4-9bb6-fbf86674018b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "27bd2960-53e8-4056-bcb0-2da713f1ae4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d58b166-e50a-4558-87b7-c85e9ec69b70",
        "cursor": {
          "ref": "95e3e5cd-9b16-4ebc-86fa-136b4e73ff35",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e9eb231b-2a91-40df-bdf1-0de8044a6a8f"
        },
        "item": {
          "id": "6d58b166-e50a-4558-87b7-c85e9ec69b70",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0a9cf621-45f0-4d69-8dde-0f0d0e70927d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 496,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eea6b22-21bf-42dd-a052-28b7c0e64408",
        "cursor": {
          "ref": "8b008239-8c96-4c72-ae35-4afc2a5574cd",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7584b4f6-b833-4bde-bed3-ac73d011342b"
        },
        "item": {
          "id": "5eea6b22-21bf-42dd-a052-28b7c0e64408",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "70e297b4-9c72-403e-b036-5bba706bb11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc4f3df-2f18-4cdc-b8d8-cc7ad6b7b0d2",
        "cursor": {
          "ref": "8d427aa9-21c5-4f8d-a8a0-27caabda24ec",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "abda26e4-45a1-476a-8eb3-0411f5d50420"
        },
        "item": {
          "id": "9dc4f3df-2f18-4cdc-b8d8-cc7ad6b7b0d2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e9331fa5-4445-4cb7-9f7f-462dc0454160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02e3913-9818-43ca-98c6-205b1f179639",
        "cursor": {
          "ref": "034e879e-c7d5-4f00-85d1-6f7580ae1d71",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "77d59220-1434-48da-b469-07e01ba8a3bf"
        },
        "item": {
          "id": "f02e3913-9818-43ca-98c6-205b1f179639",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f35b7677-a42a-43cd-8e42-9c277e877a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 506,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64665dde-f8e2-45d7-924d-fc8e06a732de",
        "cursor": {
          "ref": "a43f615d-e0c7-4766-9727-b9362e5ea017",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d2f84200-f8c0-4cdd-9f1f-ad7286616f45"
        },
        "item": {
          "id": "64665dde-f8e2-45d7-924d-fc8e06a732de",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3b448b19-88db-41d7-a6d4-09e749b45167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 551,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c8639c-29e3-4365-a6ea-bd64e447d42d",
        "cursor": {
          "ref": "9e22e457-3274-4071-8eb3-7f2f68c2c820",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "34272c00-a474-4b79-8a42-7f25db873b41"
        },
        "item": {
          "id": "31c8639c-29e3-4365-a6ea-bd64e447d42d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "654a0286-099a-467d-814e-e94c0bda6608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a681d5e9-c2a5-44ff-902d-22ba80b11289",
        "cursor": {
          "ref": "611b48c6-aefc-4fcd-8152-35ee45f33307",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "beefc68a-b2c8-44ad-9316-5ff1ba3cb177"
        },
        "item": {
          "id": "a681d5e9-c2a5-44ff-902d-22ba80b11289",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3df55324-6e84-4f2f-9836-f6ddc67e369f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3653da-ad9d-453d-ac5e-adb956a8d754",
        "cursor": {
          "ref": "12f565f3-6450-4f79-b3f4-ed17bc3f3104",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d6984c2a-814b-4e0b-98d8-2f0472a8abbd"
        },
        "item": {
          "id": "4e3653da-ad9d-453d-ac5e-adb956a8d754",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ba88244b-151c-43f9-9354-a5fdb273b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 467,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eabec4a-9e8a-4a4e-8ec3-f07dd9f2dca9",
        "cursor": {
          "ref": "8756ebb9-969c-40db-90fc-4a1d282c5e72",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f7e66e5e-1f96-4139-9d34-63cd04e816ae"
        },
        "item": {
          "id": "5eabec4a-9e8a-4a4e-8ec3-f07dd9f2dca9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "01d20231-12ca-41aa-91a1-3fb1dac95e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7f9af3-240c-44e7-a86e-bbbc4783c267",
        "cursor": {
          "ref": "5b9980b7-5193-4cb5-9106-399959372418",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fc7cbbc0-35b2-4802-a3f6-d62af46ace02"
        },
        "item": {
          "id": "1c7f9af3-240c-44e7-a86e-bbbc4783c267",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "64681f29-da6c-43bc-82a0-a1eb5993014f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80152a66-ba5d-4476-ab45-3d92a0b027b7",
        "cursor": {
          "ref": "cae36577-f84d-4e26-b7ea-dbd22bcf8b4a",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2b1dfc13-4f55-4d58-9db0-85318d44c8a4"
        },
        "item": {
          "id": "80152a66-ba5d-4476-ab45-3d92a0b027b7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5787e158-3397-424a-8c20-4e4795af4556",
          "status": "OK",
          "code": 200,
          "responseTime": 481,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "77c532d3-abe5-4549-af75-95379fa9001b",
        "cursor": {
          "ref": "65f189e0-8672-4dd4-a667-e956add05dd6",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "99a2ba05-00cb-4146-8ce4-f1d75234ba14"
        },
        "item": {
          "id": "77c532d3-abe5-4549-af75-95379fa9001b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a6da9f25-fa7e-4641-a52a-91487da94032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e653273-aee9-4ee7-b386-b3ade12b729d",
        "cursor": {
          "ref": "fb7b85ab-2e2b-418c-8424-a4f420b11fbc",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a909a7b5-8fb5-47e8-ae15-24a2cdcd59ba"
        },
        "item": {
          "id": "8e653273-aee9-4ee7-b386-b3ade12b729d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7954e4bc-264b-4b4e-94ea-ef4ae2a25883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fc3e05-a77b-4e51-bcd0-b95aaa1b62d6",
        "cursor": {
          "ref": "d27e9cf7-b51f-4493-8236-173e0ad8d2d0",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "89d7be5a-50c8-4193-bd93-9da20517d4f2"
        },
        "item": {
          "id": "f3fc3e05-a77b-4e51-bcd0-b95aaa1b62d6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e8b21c43-b884-4b0d-afc7-09b20cb07de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c87909-4224-4e88-ae98-33b89b8fec4b",
        "cursor": {
          "ref": "bc36f12e-822a-4daf-8bc2-203093068452",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "41d2cae0-e325-4888-a173-91a6e368b51c"
        },
        "item": {
          "id": "b6c87909-4224-4e88-ae98-33b89b8fec4b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8128ac0a-27bd-4b33-bb2a-a6600cb97a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 457,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe6661c-1401-4ecc-85be-6e262d62f162",
        "cursor": {
          "ref": "4beadb6f-4e02-4da9-bde8-9aa5bef5fde9",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d4e55ab6-ea59-49fa-bcdf-d08be55c3e87"
        },
        "item": {
          "id": "bfe6661c-1401-4ecc-85be-6e262d62f162",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cd1cc1a3-cadc-421d-8d4b-8a4c11245b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2088747d-2d39-4c33-adcc-37f722ead60c",
        "cursor": {
          "ref": "2a622c4a-454b-4a5b-a541-0ea7ae79e951",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b8f5545a-b981-46e7-9390-ecd5d1b57dc6"
        },
        "item": {
          "id": "2088747d-2d39-4c33-adcc-37f722ead60c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "268be368-51d9-49d2-a204-dcb803b7a127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 511,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a955e18-8224-4c7c-9f21-111cfd532d58",
        "cursor": {
          "ref": "1c308840-7589-4afe-ab43-c58069918cf6",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "46e82c7f-8263-423e-8287-5b2a24fad816"
        },
        "item": {
          "id": "7a955e18-8224-4c7c-9f21-111cfd532d58",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4358c1a3-452f-49a5-ad69-341d67bbed1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 505,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d440cb72-9ab5-4cd5-9997-cce428d966a8",
        "cursor": {
          "ref": "7fca1218-0e7f-4c03-ae34-7b0aeda64c05",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "73b0973b-fee9-4811-b37f-fbd16f829909"
        },
        "item": {
          "id": "d440cb72-9ab5-4cd5-9997-cce428d966a8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "70446d4c-dc44-407c-aa0c-10b952407326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 499,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfe2a81-6a91-488e-b3e6-e4b0257103fe",
        "cursor": {
          "ref": "77ab7193-37a7-4b8c-b518-a61a8bee034f",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8e89263c-1b2d-4865-846b-9e6fe5ea6390"
        },
        "item": {
          "id": "dcfe2a81-6a91-488e-b3e6-e4b0257103fe",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3f36a1cc-fbbf-4333-9a0f-6686ff0f40d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 495,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d71ea0a-838a-4182-8439-79dcbd258a42",
        "cursor": {
          "ref": "11372953-6039-4394-ae71-0761e64976a6",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4a2d819e-278d-4daf-9f45-07c11190e35b"
        },
        "item": {
          "id": "6d71ea0a-838a-4182-8439-79dcbd258a42",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ca282dd9-4132-4486-b28a-c516b134c83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 761,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777fb4f1-a5de-4ee6-bbe7-2ba5920c069b",
        "cursor": {
          "ref": "c5f40ec4-19f6-468c-932e-18cc52884bf5",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0f8a01cc-650e-4bbb-805a-d4f479b485fa"
        },
        "item": {
          "id": "777fb4f1-a5de-4ee6-bbe7-2ba5920c069b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a32aeb6d-eefe-481f-b344-a0491405e108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 513,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6b46a5-5127-47f6-8c7e-ce9b4528d6ff",
        "cursor": {
          "ref": "633de07c-2121-49e1-beea-2539246c3c50",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fe9c7540-9b3d-4a4c-8c9a-f4a21dcff483"
        },
        "item": {
          "id": "1c6b46a5-5127-47f6-8c7e-ce9b4528d6ff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9ee86303-91e7-4700-99de-ece0b506dc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 500,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e907050-fde8-4bb2-9890-7744be8fe049",
        "cursor": {
          "ref": "4c1a86c9-e6fc-41ef-a2c0-f496e6d5efd9",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fc85af84-5d79-4e08-9009-1dcbd7d73199"
        },
        "item": {
          "id": "0e907050-fde8-4bb2-9890-7744be8fe049",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "88995967-2ac5-498a-9e74-c5c34444f3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a63f2e3-1379-4eb5-a32f-3e90271500c5",
        "cursor": {
          "ref": "4d8e64a2-1cbc-4662-a8b8-f5f6b904be5f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4477f88e-627e-45e0-8340-6fb039620cca"
        },
        "item": {
          "id": "6a63f2e3-1379-4eb5-a32f-3e90271500c5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ade37bad-d9e9-4a58-9113-b8cb58eb6cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 551,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c53e65a-4ae5-4a52-8550-61038d00f044",
        "cursor": {
          "ref": "5876d52e-4b90-426d-ac0f-1f21d8e01be2",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3098fe53-7001-4730-9ebe-600182992683"
        },
        "item": {
          "id": "1c53e65a-4ae5-4a52-8550-61038d00f044",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "23034cf5-b789-4fb2-b3e7-64920e9b78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 506,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae24edd2-d5de-45ad-9ea0-7c6657982dee",
        "cursor": {
          "ref": "4a4bb84f-3b91-44e6-84fe-8add82ce66eb",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c1b537fa-2e52-4503-affa-470442c85e83"
        },
        "item": {
          "id": "ae24edd2-d5de-45ad-9ea0-7c6657982dee",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3b47f435-969f-4d5b-a14d-26cbd0a0c703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 507,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d72100-3de3-4ae0-b4db-922fe072e1f5",
        "cursor": {
          "ref": "87d694dc-923b-41fd-bcbf-368ac0b6c818",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8bd5f7b7-8831-44b6-98b8-5d0bca3b9dab"
        },
        "item": {
          "id": "97d72100-3de3-4ae0-b4db-922fe072e1f5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bff02032-0c08-4774-b1a3-8ae8f757d57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 520,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ec5c07-233d-48c6-b00e-cf62f6fdf145",
        "cursor": {
          "ref": "13f61ba4-34c6-4fd7-8453-f9834715a0ea",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "94e7e044-61b2-43ba-8495-7edb3de8511e"
        },
        "item": {
          "id": "05ec5c07-233d-48c6-b00e-cf62f6fdf145",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "83669802-5144-4f9b-9b43-ec6fd8bf1a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 506,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59211ae0-9c61-404e-b0d9-fde81da1faae",
        "cursor": {
          "ref": "e8ae1bf1-2597-4817-be97-3db73567ae5f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cce39689-3abb-4462-acdb-28ccf51ae4e9"
        },
        "item": {
          "id": "59211ae0-9c61-404e-b0d9-fde81da1faae",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "84bd773c-2168-42b4-9de2-91db9fb2fe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 499,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3cc4ab-a3cc-4674-a3d4-0f37fec559fe",
        "cursor": {
          "ref": "a790431c-8c68-4827-90dc-fabc66120cc4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4556a95c-f9a5-4e97-8bb9-79cab5b82b6c"
        },
        "item": {
          "id": "7c3cc4ab-a3cc-4674-a3d4-0f37fec559fe",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a4a61f71-780b-4c90-a66f-b80adc3aaeb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 497,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c520ebfa-3fd1-4b85-86ce-bd20f6cb7d9f",
        "cursor": {
          "ref": "a830f597-b65d-4ea3-acd6-a0b1dcfb4869",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5ab5e459-7ffb-483f-ba47-490fa57ce880"
        },
        "item": {
          "id": "c520ebfa-3fd1-4b85-86ce-bd20f6cb7d9f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2d077e46-c241-4721-b457-5a2a5245614a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 504,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c16234-d5f3-4668-a008-97aadca7f41c",
        "cursor": {
          "ref": "0961900f-9d9f-4b1c-bd26-722b54289519",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c2f4237d-9bb1-459f-9e3b-32c5a0ca831e"
        },
        "item": {
          "id": "76c16234-d5f3-4668-a008-97aadca7f41c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c2f6ec98-bf5c-4a98-9420-8d1519d26c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa753da5-af92-4831-9ba1-6fa229ac1767",
        "cursor": {
          "ref": "4ef800cc-2545-4ca9-80c7-32539de69836",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8d55471b-3ef8-4bb8-833b-97a47d9f4a5a"
        },
        "item": {
          "id": "aa753da5-af92-4831-9ba1-6fa229ac1767",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a1e2b49b-ac9a-4173-9941-55525b5739d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 502,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6206fa5b-0ac5-4360-aa82-ee8c2eeda753",
        "cursor": {
          "ref": "48ed9ab8-73c0-4183-bd7d-26a9f702d257",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7f7b0bbd-a318-44eb-b8a2-e13ff49f063b"
        },
        "item": {
          "id": "6206fa5b-0ac5-4360-aa82-ee8c2eeda753",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "03d866bf-bb13-4be9-9acc-78cc9f609baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 508,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ac1cb0-fe62-43cd-961c-00384f62a12f",
        "cursor": {
          "ref": "c38216dd-49e7-4bd4-a739-e77703872621",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "19056903-7ef1-45b9-bd0f-80494a46d9b9"
        },
        "item": {
          "id": "e7ac1cb0-fe62-43cd-961c-00384f62a12f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3e2c09fd-ab4f-4ca1-b220-fc4af50b1f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60e86f7-25ee-4465-b807-9fd9629c55b7",
        "cursor": {
          "ref": "40344f5b-3e83-4410-af77-2e1340076ffd",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f562c85c-8696-41a3-b81b-d211722866b3"
        },
        "item": {
          "id": "e60e86f7-25ee-4465-b807-9fd9629c55b7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7793e614-c859-4bbb-abc6-e21ae8ad1eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a07d7eb-f250-4dfd-9a51-d1a7497dea85",
        "cursor": {
          "ref": "e76a2e17-d5f6-4a4b-b9ce-c8f6d2e169ab",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9f5dd7b1-9b9c-4ba2-a144-ce2c22060dd9"
        },
        "item": {
          "id": "5a07d7eb-f250-4dfd-9a51-d1a7497dea85",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dada099f-e2ac-4259-bac0-0ead9b27f141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db7907b-55c6-4135-8c93-ed49c5f2f1e1",
        "cursor": {
          "ref": "fc405618-058b-443b-9799-8f1a5945ed40",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "583f432a-e281-4dca-95e6-2051fb167e6c"
        },
        "item": {
          "id": "6db7907b-55c6-4135-8c93-ed49c5f2f1e1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8dfc1435-a9b5-4aa1-81dd-b0edb731b4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 503,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19a70a2-721c-4c7e-88bc-cc6e955a6ab3",
        "cursor": {
          "ref": "708e6e86-6844-4429-b21a-526d06718836",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9b4968ec-0793-4772-a67d-ed5adff00865"
        },
        "item": {
          "id": "e19a70a2-721c-4c7e-88bc-cc6e955a6ab3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b48a77a3-b39c-457d-9af1-71f4cd4c2fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae9ef0c-b392-4054-9708-8798cd581a32",
        "cursor": {
          "ref": "8db562d7-9d67-4b22-b262-e77a70b5f871",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4a8c8b3a-1d5d-4cdd-a60b-ca11267f9473"
        },
        "item": {
          "id": "9ae9ef0c-b392-4054-9708-8798cd581a32",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b5be1e35-bfce-4d5b-a0eb-a02fb6de7612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c83024a-3d1d-4589-a27a-b6d6a3e1922d",
        "cursor": {
          "ref": "627c307d-7c8b-4dbf-b30c-c0a847492e2a",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "95c69ff8-a614-4928-b405-a8c75173d18a"
        },
        "item": {
          "id": "3c83024a-3d1d-4589-a27a-b6d6a3e1922d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f6f7e19b-0855-4096-8d72-ca978ef35f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0281e9a1-5b11-4405-81b2-ea8e8eafee25",
        "cursor": {
          "ref": "fe446f01-9a09-4e74-ab74-81ab82f61b09",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b58019e7-b218-4600-a16b-e739a04b0a67"
        },
        "item": {
          "id": "0281e9a1-5b11-4405-81b2-ea8e8eafee25",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3a60de5a-c633-4291-a649-92e5feac121d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23aac0b7-fed7-4b4f-95bc-6030fbf7f616",
        "cursor": {
          "ref": "ad610486-4711-4f55-8d0e-316d88a47cb8",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2323f11b-c4aa-4737-9344-daf10685a5ce"
        },
        "item": {
          "id": "23aac0b7-fed7-4b4f-95bc-6030fbf7f616",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "aa227588-7819-4b00-b0db-cdabb8c7e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 507,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efa766a-6c3d-435c-b3c5-08337fd8e104",
        "cursor": {
          "ref": "bd0dc496-4ffa-4ef7-b3f5-3effd024ce9e",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "288ce8aa-7d56-456d-b24e-68247ac5d200"
        },
        "item": {
          "id": "4efa766a-6c3d-435c-b3c5-08337fd8e104",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dc8b9239-c974-4ccc-8d07-33b42920f63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba42bb9d-bc93-4467-862c-f529faca1fc3",
        "cursor": {
          "ref": "95fd8751-d94b-42cf-a22a-5093a02f799a",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "842d51fe-fb66-415b-a2af-ebe5dd3c24e3"
        },
        "item": {
          "id": "ba42bb9d-bc93-4467-862c-f529faca1fc3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "85a1f4ac-ed4d-46f1-bf03-25cc0246399c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23863be-e2fe-4d88-99d8-60916a353f7e",
        "cursor": {
          "ref": "dd25ac96-8b5e-4dde-af2e-46c50db67662",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "265d491e-6f8f-4321-be73-e52920bc7405"
        },
        "item": {
          "id": "f23863be-e2fe-4d88-99d8-60916a353f7e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b2c2c576-5e17-498c-b1b4-4959defcad36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878e45ff-ee41-4a6b-829e-827323981e30",
        "cursor": {
          "ref": "cdbdb862-192d-4e27-a3c9-a9b42151f0e1",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6f5960d0-0da2-4e0f-869d-218bad174e33"
        },
        "item": {
          "id": "878e45ff-ee41-4a6b-829e-827323981e30",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fe8f0a15-ccdd-4720-986a-1894a12d497f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63b78f5-856e-434c-8481-fa235ad265fd",
        "cursor": {
          "ref": "23436fa6-dd8b-4fbd-a736-f275afa11a06",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "09f13085-8ba9-4af8-9b86-6f14c57a3a8d"
        },
        "item": {
          "id": "d63b78f5-856e-434c-8481-fa235ad265fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7dba0f94-cb9d-42db-a1cb-6efa7c1cbb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5554442-9dc5-4626-b09a-837a6ee2f779",
        "cursor": {
          "ref": "9254cbcf-cd9c-40f9-b4bb-2062630bded1",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7e03e5f0-c94a-42ae-890a-de359765f254"
        },
        "item": {
          "id": "d5554442-9dc5-4626-b09a-837a6ee2f779",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "58e14153-cb7e-4374-b76e-a6712c123696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efd6922-c5b7-45d1-8bee-dd099808d684",
        "cursor": {
          "ref": "ea861987-a751-4e77-9379-8e7297986ac2",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "493cbddc-393c-46b4-8dd1-be88a854c52f"
        },
        "item": {
          "id": "0efd6922-c5b7-45d1-8bee-dd099808d684",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "43583312-e1a6-43f3-a984-0eb849d7c33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cb3924-3945-4998-b5f6-9d8a37601c98",
        "cursor": {
          "ref": "5ba30990-a308-4f37-bf90-38056f2e2578",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "387e7a0c-73bb-4e87-8666-9077b8a5a242"
        },
        "item": {
          "id": "29cb3924-3945-4998-b5f6-9d8a37601c98",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "93529f60-8582-4991-ab60-2bf635a42521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b857ca38-d3f2-4a13-ba2b-24da7f5336db",
        "cursor": {
          "ref": "0ae8f0ea-0b72-4c4a-9136-fb2cfc08ce70",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f5764b29-5ba8-4f1d-b365-727c66886876"
        },
        "item": {
          "id": "b857ca38-d3f2-4a13-ba2b-24da7f5336db",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5666c809-2173-4700-ad76-73b989184ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2b782e-87bc-46aa-8dda-4873fede1318",
        "cursor": {
          "ref": "7c84e458-4833-4221-a12d-ee455a943684",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "71afc51c-b373-4a38-a76d-3735d0704487"
        },
        "item": {
          "id": "de2b782e-87bc-46aa-8dda-4873fede1318",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "64e7753d-27b5-4757-ba2a-a94263444a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e8d1e7-3277-4c73-b2fd-fe6c10d1c896",
        "cursor": {
          "ref": "c2a77eda-4615-4df1-97f7-e91e993fd435",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bd04fb00-9ea8-433a-9db5-a99650948275"
        },
        "item": {
          "id": "16e8d1e7-3277-4c73-b2fd-fe6c10d1c896",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d7330fbf-fa72-4115-9754-d8ddc6ff7a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "466bea98-74ac-44d8-9a80-04aa8f175c0d",
        "cursor": {
          "ref": "ef8b2687-f48f-445d-a38e-75c8980363c6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6e2cd5b9-7aee-4530-bd56-b0f7bde09cdd"
        },
        "item": {
          "id": "466bea98-74ac-44d8-9a80-04aa8f175c0d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "23c63bb9-cf3f-42ef-bfcc-ebbe758f4623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe02f8b1-58ce-4a29-8bd5-e703a09d64fc",
        "cursor": {
          "ref": "1012ed82-1749-41d8-8d0b-08379fe89869",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8240887a-5525-4bd7-8d74-e48fe87f2629"
        },
        "item": {
          "id": "fe02f8b1-58ce-4a29-8bd5-e703a09d64fc",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "70923c5d-91a2-4247-9ccb-55b1b98bc2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ed4b03-f459-4214-82cd-649967c456f8",
        "cursor": {
          "ref": "ae4fc624-cf7b-4078-9768-220a7b65de90",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c3f1e486-a6c3-4372-9dff-a41238f3c8bc"
        },
        "item": {
          "id": "09ed4b03-f459-4214-82cd-649967c456f8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1c385d6d-2c41-4692-afa9-619ba8698407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83c0f79-1480-444f-afa0-2c4fac671389",
        "cursor": {
          "ref": "062d4bf4-9a67-479d-8df1-fa94b1824b0b",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "aadf3577-5566-4795-aa8e-ebc17bbb1bd4"
        },
        "item": {
          "id": "a83c0f79-1480-444f-afa0-2c4fac671389",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "310f93f9-3fcd-45f0-b7c0-24e9a8a95589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b64b0f-9c42-4bfb-aec0-2fa8f4ae724d",
        "cursor": {
          "ref": "60631d67-744a-466d-a738-9cdb11492b04",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7c86142b-09a8-4f53-95b6-2701464ea7bb"
        },
        "item": {
          "id": "22b64b0f-9c42-4bfb-aec0-2fa8f4ae724d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "720a0913-f4db-45c6-b920-56e23db29e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69c54ccb-b5c4-4ac8-ab11-cc1c374010be",
        "cursor": {
          "ref": "d00501d5-5e3e-4f74-8e6a-4db536ce9568",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2fd805da-ec5f-44cd-89b2-4c6c86e83c59"
        },
        "item": {
          "id": "69c54ccb-b5c4-4ac8-ab11-cc1c374010be",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fd5b0229-6611-4a6f-bad9-8e5304a47d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0d95d2-b5cf-49fd-8fc7-8304a4294da7",
        "cursor": {
          "ref": "3651886c-69a4-4c7b-81f7-608206df202f",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "018bd9c0-658c-4b42-8ab8-347a908763fa"
        },
        "item": {
          "id": "ab0d95d2-b5cf-49fd-8fc7-8304a4294da7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c88323f1-85d4-4f1d-945a-a353d12ed484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0704db0-2b27-4eec-8308-b2eb42476958",
        "cursor": {
          "ref": "e08b65d3-58f8-4a37-acad-b252703c5e5a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1e9777b6-e090-4d97-b50c-230baf02ea65"
        },
        "item": {
          "id": "c0704db0-2b27-4eec-8308-b2eb42476958",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "36a3188e-52aa-4206-981b-f10f142ab676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f3d9f3-0645-4f06-9478-c4d5d93ce7c6",
        "cursor": {
          "ref": "a822bc13-568e-4c7e-b96f-4fefdfffeeab",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8182c9ea-6550-417d-a344-4c40bf352d15"
        },
        "item": {
          "id": "a3f3d9f3-0645-4f06-9478-c4d5d93ce7c6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0fb31d18-788f-4642-abaa-b056abd95681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b11056-e28f-41cc-8cab-8de1ae0e643b",
        "cursor": {
          "ref": "2c8a0792-77b8-42d4-86a3-46bb3f8660f5",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "285536bc-7919-4d89-ba2c-949ec4ecfe90"
        },
        "item": {
          "id": "d2b11056-e28f-41cc-8cab-8de1ae0e643b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "073a48db-ec22-4bb4-8d80-6fab8b4b93fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d7ffc6-fcaa-4f28-ae99-bc45356e49ae",
        "cursor": {
          "ref": "ae55a113-cbee-4300-bf47-a7cd5fffabb9",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7412e5c4-5b49-4b3e-b97d-c6b284deb359"
        },
        "item": {
          "id": "81d7ffc6-fcaa-4f28-ae99-bc45356e49ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "584467b2-6847-46c4-9528-e79b148f453e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd2bce9-e24d-40cb-8bda-32804795646e",
        "cursor": {
          "ref": "cc885bf4-f83d-4852-a2cc-38274982020d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "58636eee-0f9d-477e-badf-66223029bc58"
        },
        "item": {
          "id": "3bd2bce9-e24d-40cb-8bda-32804795646e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "62a95a70-c79d-47d0-9c34-5dd085c9a5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ccefb6-8e86-4758-93ee-8a15a4059c6a",
        "cursor": {
          "ref": "a2fd5163-5efa-4150-a377-286513fe46a0",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d7676f6e-4b19-44f3-979f-28d232be2dd2"
        },
        "item": {
          "id": "28ccefb6-8e86-4758-93ee-8a15a4059c6a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "89cc0e6e-f161-4cc5-8655-e6b239633ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8157cf5a-b62b-482f-8956-c430b6accd54",
        "cursor": {
          "ref": "9bd2436a-8e36-4ce4-95f6-49f525bef274",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "16f53dde-2e2b-46ab-bc35-36ade937ac2b"
        },
        "item": {
          "id": "8157cf5a-b62b-482f-8956-c430b6accd54",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "dd0d3df3-2294-4006-ab7b-040a48e3fff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67db455-b400-4a7b-a894-00b8033ff53c",
        "cursor": {
          "ref": "106dc607-f7ce-48f7-9ff9-783bceb7233c",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7e4e45ca-4b02-41d9-b633-db9bb79b07e6"
        },
        "item": {
          "id": "b67db455-b400-4a7b-a894-00b8033ff53c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0599b0e7-24e8-42dd-b64c-f2d3c13e4f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b778cafa-7100-4960-9efe-2a75b89ceb69",
        "cursor": {
          "ref": "1b7501d9-fc39-4346-9ce5-03fb28dcd392",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f6226bec-c3ff-441d-9c13-268ec7befe04"
        },
        "item": {
          "id": "b778cafa-7100-4960-9efe-2a75b89ceb69",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "81d11bfd-2e12-491a-85e0-d96b859aa8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fdc6d7-9bc1-4bc3-8060-4ad2befeda3f",
        "cursor": {
          "ref": "912e5114-275b-4c95-99c1-5f618c4c6362",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64d1f1ad-905d-4ba7-81c5-2ffa40f5cf2a"
        },
        "item": {
          "id": "65fdc6d7-9bc1-4bc3-8060-4ad2befeda3f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cf114344-c63d-4bc6-94c5-3f880230be81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbc0958-3434-4953-a3f3-ff5be321428c",
        "cursor": {
          "ref": "215a25b3-27b7-438c-ae3e-036f985ffff7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b752e509-dca2-443e-a14b-8b7c6d7af6fd"
        },
        "item": {
          "id": "8cbc0958-3434-4953-a3f3-ff5be321428c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d6a99ad1-ca2d-4502-9af3-c3f543f8e491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7467b8-9b09-4d9e-9c93-2c7d659314e7",
        "cursor": {
          "ref": "4a085e59-d449-4f2d-8ae7-027e20990e75",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "44316e9b-4374-4ec4-9637-0140a55df5e7"
        },
        "item": {
          "id": "6f7467b8-9b09-4d9e-9c93-2c7d659314e7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "38a66a1b-c22b-4acb-8428-1565fbc85343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a34496c-ab27-4e1d-8c39-9e1a2ecc08ff",
        "cursor": {
          "ref": "60c85a68-d0f8-47b4-bb00-92f0d3e86bc4",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dbb117de-cbc9-45e7-80dc-c6f312e36e0b"
        },
        "item": {
          "id": "2a34496c-ab27-4e1d-8c39-9e1a2ecc08ff",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c03e6c6a-4055-47e3-b0c6-50937f3b1cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035b07f7-91dc-42fc-a454-9f09cf5ddc7e",
        "cursor": {
          "ref": "0817291b-4c47-403a-b434-99eb7285cc51",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f66a6ff6-1441-4a88-ae50-1ccce632ddab"
        },
        "item": {
          "id": "035b07f7-91dc-42fc-a454-9f09cf5ddc7e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "539a3e8d-ba86-4717-9da9-76c531cf976d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadf2542-fe86-4945-b016-d159855dbfd7",
        "cursor": {
          "ref": "06021cc2-a91a-4d2e-b2b9-a056c6a28595",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cee87ff1-2eb5-4a69-818d-fa7f4aa62d96"
        },
        "item": {
          "id": "fadf2542-fe86-4945-b016-d159855dbfd7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e576f627-55e6-49b0-8fe7-d5d96e3250e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c71d66-fe3b-46cc-9874-6f003fd33887",
        "cursor": {
          "ref": "9e4ccf32-9baf-443b-9474-bbc7bc271e83",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3bbf3592-176e-45a9-ac51-94b2e246c529"
        },
        "item": {
          "id": "31c71d66-fe3b-46cc-9874-6f003fd33887",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "71d8fec6-0896-4d7b-b17f-f7a745571d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19420994-8192-40f1-86eb-36c998aa53d1",
        "cursor": {
          "ref": "eff59007-fd6e-4b55-8caf-a219e1423982",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2c38a4e2-0cb3-4c78-ac9a-1bbe3d29926b"
        },
        "item": {
          "id": "19420994-8192-40f1-86eb-36c998aa53d1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7ba91895-a5e8-4d83-b277-80320c63f73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320fd8bb-6b76-4786-9ad8-9d339a50ba60",
        "cursor": {
          "ref": "21bcc7d6-ed47-45e8-9391-993dd290a244",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7137754c-e2f7-422b-ac61-4a7aae17f8f8"
        },
        "item": {
          "id": "320fd8bb-6b76-4786-9ad8-9d339a50ba60",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d036bfd1-6bfb-440c-a27b-070e664ead41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3fb1d8-437d-4e9e-9d8c-9bf9df0f829a",
        "cursor": {
          "ref": "953a28cb-74b1-4eba-9bf7-5cbae972e21b",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f8492427-9f8a-43f4-8069-ec83f377c1f4"
        },
        "item": {
          "id": "ff3fb1d8-437d-4e9e-9d8c-9bf9df0f829a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a0a9aa43-7a4b-491d-bfce-d7ee93dd3652",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f67b81-0923-4793-bf80-8708a94e9ef1",
        "cursor": {
          "ref": "b35f779b-d1af-4291-8ebe-ba5995f758e0",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7c333ee4-6a05-4725-9375-432ed2b9ae3d"
        },
        "item": {
          "id": "f2f67b81-0923-4793-bf80-8708a94e9ef1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9b7d6172-2abe-49bd-8768-431e97ae9755",
          "status": "OK",
          "code": 200,
          "responseTime": 454,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8c1330-36df-4606-805c-1e7d6cdca8c6",
        "cursor": {
          "ref": "8be8629d-02b7-483f-a87f-648a941202d7",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "532a0400-4cad-4ee0-b545-2ab16f5f7e12"
        },
        "item": {
          "id": "4b8c1330-36df-4606-805c-1e7d6cdca8c6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9cd13d01-b794-474a-89c6-84e5fff84f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 1460,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc7ba22-3bb5-486d-b0a0-222121c7600c",
        "cursor": {
          "ref": "b02dc8bd-0ed3-433e-92c6-aaa02433cdfe",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "08e5df23-067e-4c1c-821f-e9775ff56f50"
        },
        "item": {
          "id": "7fc7ba22-3bb5-486d-b0a0-222121c7600c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "013f87be-83c4-42ff-bdce-230bf5b144be",
          "status": "OK",
          "code": 200,
          "responseTime": 1217,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
        "cursor": {
          "ref": "708e49e4-3b4e-4c77-8dfc-1e5f2cdfe572",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "408d2db2-ef63-456e-a132-7f24d62ffb4f"
        },
        "item": {
          "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a24c1c02-a7dc-43fa-9008-45cd232e2b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
        "cursor": {
          "ref": "708e49e4-3b4e-4c77-8dfc-1e5f2cdfe572",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "408d2db2-ef63-456e-a132-7f24d62ffb4f"
        },
        "item": {
          "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a24c1c02-a7dc-43fa-9008-45cd232e2b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
        "cursor": {
          "ref": "708e49e4-3b4e-4c77-8dfc-1e5f2cdfe572",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "408d2db2-ef63-456e-a132-7f24d62ffb4f"
        },
        "item": {
          "id": "f1dece35-d405-4353-9ee2-8da96cf131ee",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a24c1c02-a7dc-43fa-9008-45cd232e2b1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfdd0ee-4ac3-4c0f-ba3f-bd31475f1e4f",
        "cursor": {
          "ref": "085aca81-23fb-4912-842f-619d68bdb6de",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "16ecc4a4-9ae3-4e6a-9773-ffe2c09406eb"
        },
        "item": {
          "id": "4bfdd0ee-4ac3-4c0f-ba3f-bd31475f1e4f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c4d45108-6abb-4e90-848f-cea23cc86b46",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc46d56-ab0e-46f0-a7d6-d8b7724dc1d5",
        "cursor": {
          "ref": "9e788f87-6287-446b-8edf-fa219eb82007",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4d688170-a8ab-40bf-863b-7377fffc761a"
        },
        "item": {
          "id": "3bc46d56-ab0e-46f0-a7d6-d8b7724dc1d5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f77ea04d-0248-4512-8904-6f761730a11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "3bc46d56-ab0e-46f0-a7d6-d8b7724dc1d5",
        "cursor": {
          "ref": "9e788f87-6287-446b-8edf-fa219eb82007",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4d688170-a8ab-40bf-863b-7377fffc761a"
        },
        "item": {
          "id": "3bc46d56-ab0e-46f0-a7d6-d8b7724dc1d5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f77ea04d-0248-4512-8904-6f761730a11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c9cb0622-c573-4dac-9b60-6a5e57950ad0",
        "cursor": {
          "ref": "ac31beed-8c97-438f-b810-f66cc3a87ead",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5d341ca1-32b2-4cbe-8a76-1684d9524d00"
        },
        "item": {
          "id": "c9cb0622-c573-4dac-9b60-6a5e57950ad0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "00786c25-23e6-4103-97ff-117f6ed473ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b8641056-e52b-48fd-91f6-7cf27d5df6f8",
        "cursor": {
          "ref": "c9fb4151-108d-410c-9323-ab3c05c3c142",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c7f4b1d3-aa39-4389-960f-b3cf2ca0060e"
        },
        "item": {
          "id": "b8641056-e52b-48fd-91f6-7cf27d5df6f8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "35a80656-43b4-43b1-9310-3e326eb25ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b8641056-e52b-48fd-91f6-7cf27d5df6f8",
        "cursor": {
          "ref": "c9fb4151-108d-410c-9323-ab3c05c3c142",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c7f4b1d3-aa39-4389-960f-b3cf2ca0060e"
        },
        "item": {
          "id": "b8641056-e52b-48fd-91f6-7cf27d5df6f8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "35a80656-43b4-43b1-9310-3e326eb25ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "50c42187-5e2b-4f60-8435-25ec8efd625b",
        "cursor": {
          "ref": "901a285c-86de-476a-9860-98f8f8ac65a2",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6d60b2b6-640a-4322-93a5-2bb9af0b7413"
        },
        "item": {
          "id": "50c42187-5e2b-4f60-8435-25ec8efd625b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7876ec31-698f-4117-863a-97df0d0977b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}